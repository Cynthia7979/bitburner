{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2902,\"hp\":118,\"max_hp\":118,\"strength\":745,\"defense\":1084,\"dexterity\":873,\"agility\":609,\"charisma\":409,\"intelligence\":0,\"hacking_chance_mult\":1.9640524412174851,\"hacking_speed_mult\":1.9213765617337,\"hacking_money_mult\":6.371908176593661,\"hacking_grow_mult\":2.97790369731364,\"hacking_exp\":9567174546.949047,\"strength_exp\":37494.38195543617,\"defense_exp\":7652.540959287494,\"dexterity_exp\":57553.688767171276,\"agility_exp\":130415.98282684285,\"charisma_exp\":280724.45634448563,\"intelligence_exp\":0,\"hacking_mult\":5.4208094994858,\"strength_mult\":5.419675760244584,\"defense_mult\":12.282181589102779,\"dexterity_mult\":5.786375692903574,\"agility_mult\":3.4448058351168465,\"charisma_mult\":2.033404125727335,\"hacking_exp_mult\":8.3741820564612,\"strength_exp_mult\":2.273144500011116,\"defense_exp_mult\":2.273144500011116,\"dexterity_exp_mult\":2.614116175012783,\"agility_exp_mult\":2.273144500011116,\"charisma_exp_mult\":2.0414731897183165,\"company_rep_mult\":2.8172330018112772,\"faction_rep_mult\":2.1342674256146035,\"money\":218150176276.71744,\"city\":\"Aevum\",\"location\":\"Bachman & Associates\",\"jobs\":{\"Storm Technologies\":\"Lead Software Developer\",\"Four Sigma\":\"IT Analyst\",\"VitaLife\":\"IT Intern\",\"MegaCorp\":\"Software Engineering Intern\",\"Galactic Cybersystems\":\"Software Engineering Intern\"},\"companyName\":\"Galactic Cybersystems\",\"currentServer\":\"home\",\"purchasedServers\":[\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\",\"grinding-server\",\"grinding-server-0\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110852.99999979544,\"ram\":64,\"totalMoneyGenerated\":3393295873.5339003,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110851.99999979544,\"ram\":64,\"totalMoneyGenerated\":3392936872.8577223,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110850.99999979547,\"ram\":64,\"totalMoneyGenerated\":3392405312.241028,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110849.79999979549,\"ram\":64,\"totalMoneyGenerated\":3391963536.0538077,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110817.39999979593,\"ram\":64,\"totalMoneyGenerated\":3391580681.836114,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110816.39999979596,\"ram\":64,\"totalMoneyGenerated\":3391318652.8619156,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110815.39999979596,\"ram\":64,\"totalMoneyGenerated\":3391064369.354833,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110717.3999997973,\"ram\":64,\"totalMoneyGenerated\":3390667952.1630287,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110716.3999997973,\"ram\":64,\"totalMoneyGenerated\":3390449437.500844,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110715.19999979732,\"ram\":64,\"totalMoneyGenerated\":3390019818.506987,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110714.19999979735,\"ram\":64,\"totalMoneyGenerated\":3389626197.3923755,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110713.19999979735,\"ram\":64,\"totalMoneyGenerated\":3389147829.8804455,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110708.19999979743,\"ram\":64,\"totalMoneyGenerated\":3388788377.974873,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110677.19999979784,\"ram\":64,\"totalMoneyGenerated\":3388293467.1801834,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110676.19999979787,\"ram\":64,\"totalMoneyGenerated\":3387779544.4615755,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110631.19999979848,\"ram\":64,\"totalMoneyGenerated\":3386960334.474406,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110539.99999979972,\"ram\":64,\"totalMoneyGenerated\":3386668903.546609,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110271.79999980335,\"ram\":64,\"totalMoneyGenerated\":3386234571.379902,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110270.79999980335,\"ram\":64,\"totalMoneyGenerated\":3381693713.7706146,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":110269.79999980338,\"ram\":64,\"totalMoneyGenerated\":3381182582.510516,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":108822.19999982273,\"ram\":64,\"totalMoneyGenerated\":3368791199.657732,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":106449.79999984089,\"ram\":64,\"totalMoneyGenerated\":3324442190.5499697,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":104529.79999985355,\"ram\":64,\"totalMoneyGenerated\":3279367519.1722326,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":100981.5999999139,\"ram\":64,\"totalMoneyGenerated\":3175845064.344448,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":100980.59999991393,\"ram\":64,\"totalMoneyGenerated\":3175812975.8288093,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":100979.59999991396,\"ram\":64,\"totalMoneyGenerated\":3175781296.5022154,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":100978.59999991396,\"ram\":64,\"totalMoneyGenerated\":3175749784.763376,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":99183.79999991706,\"ram\":64,\"totalMoneyGenerated\":2858904210.9354615,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":90747.99999990493,\"ram\":64,\"totalMoneyGenerated\":2856559846.4530435,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":84584.199999882,\"ram\":64,\"totalMoneyGenerated\":2610377259.591871,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":69205.1999998662,\"ram\":64,\"totalMoneyGenerated\":1867655386.1880507,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":31488.730299269202,\"onlineTimeSeconds\":19892.20000000991,\"ram\":64,\"totalMoneyGenerated\":563881290.9692822,\"name\":\"hacknet-node-31\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Volhaven\",\"BitRunners\",\"Daedalus\"],\"factionInvitations\":[\"Netburners\",\"Slum Snakes\",\"The Syndicate\",\"Tetrads\",\"Tian Di Hui\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"The Red Pill\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"BrachiBlades\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-122.95,\"crime_money_mult\":3.1898018589348696,\"crime_success_mult\":2.017265997745372,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":18,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":1000,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.6609866775492446,\"hacknet_node_money_mult\":3.4333953385584564,\"hacknet_node_purchase_cost_mult\":0.5602120777856141,\"hacknet_node_ram_cost_mult\":0.7323033696543974,\"hacknet_node_core_cost_mult\":0.7323033696543974,\"hacknet_node_level_cost_mult\":0.6224578642062377,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1647324283916,\"lastSave\":1647324267932,\"totalPlaytime\":1394243000,\"playtimeSinceLastAug\":110886800,\"playtimeSinceLastBitnode\":1394243000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":10090000000,\"class\":-35979232,\"codingcontract\":0,\"corporation\":0,\"crime\":387879906.0464801,\"gang\":0,\"hacking\":644351670736.6357,\"hacknet\":101215246058.67221,\"hacknet_expenses\":-243052840075.59705,\"hospitalization\":-259872000,\"infiltration\":39561828.74533433,\"sleeves\":0,\"stock\":0,\"total\":218149176276.71744,\"work\":42929590.56504672,\"servers\":-11489280000,\"other\":-310296903.6081898,\"augmentations\":-282829843606.5996}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":60630330431,\"class\":-284447397.5999999,\"codingcontract\":75000000,\"corporation\":0,\"crime\":399615537.2565801,\"gang\":0,\"hacking\":937460929803.9971,\"hacknet\":678550422531.4498,\"hacknet_expenses\":-454375463535.9594,\"hospitalization\":-354921000,\"infiltration\":46571458.689074665,\"sleeves\":0,\"stock\":-6069487853.36552,\"total\":242992902960.44638,\"work\":1924335000.4625118,\"servers\":-148754640676.05194,\"other\":-13201704597.531027,\"augmentations\":-813053636485.5236}},\"scriptProdSinceLastAug\":438264979776.1815,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645937098713},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645945619517},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645945799518},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645956415952},{\"ID\":\"TOR\",\"unlockedOn\":1645957015948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645964175169},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645964535170},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645964655180},{\"ID\":\"NITESEC\",\"unlockedOn\":1646008184016},{\"ID\":\"WORKOUT\",\"unlockedOn\":1646010884426},{\"ID\":\"TRAVEL\",\"unlockedOn\":1646037906914},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1646039647920},{\"ID\":\"NS2\",\"unlockedOn\":1646103650911},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1646107006372},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1646111040952},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1646131379336},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1646133043592},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1646141161803},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1646142062592},{\"ID\":\"4S\",\"unlockedOn\":1646178149739},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1646217763426},{\"ID\":\"FROZE\",\"unlockedOn\":1646220263671},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1646297619771},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1646440491301},{\"ID\":\"DONATION\",\"unlockedOn\":1646812121257},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1646976391367},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646977487772},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1647239711297},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1647253110482}],\"terminalCommandHistory\":[\"backdoor\",\"home\",\"ls\",\"run fl1ght.exe\",\"boot --no-home --no-buy-servers --grind-hack --single-hack-server powerhouse-fitness\",\"tail 1\",\"share 5000\",\"share 3000\",\"share 2500\",\"share 2200\",\"share 2100\",\"share 2050\",\"share 2000\",\"sc\",\"backdoor\",\"analyze\",\"sc\",\"home\",\"sc\",\"home\",\"cat all_servers_names.txt\",\"nano scripts/boot.js\",\"boot --help\",\"nano scripts/update_hack.script\",\"nano scripts/transport_files.js\",\"update\",\"tail 998\",\"boot --no-buy-servers --share-all\",\"nano scripts/boot.js\",\"boot --share-all --no-buy-servers\",\"nano scripts/boot.js\",\"boot --share-all --no-buy-servers\",\"tail 1\",\"nano scripts/boot.js\",\"boot --share-all --no-buy-servers\",\"tail 1\",\"scna\",\"scan\",\"con grinding-server-0\",\"ls\",\"cd scripts/\",\"ls\",\"home\",\"update\",\"tail 1\",\"nano scripts/transport_files.js\",\"update\",\"boot --share-all --no-buy-servers\",\"boot --grind-share --no-buy-servers\",\"boot --no-buy-servers --grind-hack --single-hack-server powerhouse-fitness\"],\"identifier\":\"b82959b7efaf8\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"10.7.3.1\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"ramUsed\":8187.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/auto-hacknet-buy.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":437.80999999998386,\"pid\":2,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///d0afcbe5-366c-48e8-a9a3-1a740592ea44\",\"moduleSequenceNumber\":1334}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[194378,51,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2383.501567820264,\"onlineMoneyMade\":194378,\"onlineRunningTime\":416.60999999998506,\"pid\":958,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[55,8,104,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6682.597281056023,\"onlineMoneyMade\":55,\"onlineRunningTime\":416.60999999998506,\"pid\":959,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[64,8,58,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3881.4333831697704,\"onlineMoneyMade\":64,\"onlineRunningTime\":416.60999999998506,\"pid\":960,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57,6,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3234.527819308137,\"onlineMoneyMade\":57,\"onlineRunningTime\":416.60999999998506,\"pid\":961,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[227,2,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1287.5304911809096,\"onlineMoneyMade\":227,\"onlineRunningTime\":416.60999999998506,\"pid\":962,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[27282,2,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004.9018467753441,\"onlineMoneyMade\":27282,\"onlineRunningTime\":416.60999999998506,\"pid\":963,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.1862004039735,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":964,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[86,4,22,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2242.187245617486,\"onlineMoneyMade\":86,\"onlineRunningTime\":416.60999999998506,\"pid\":965,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":966,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[254,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":254,\"onlineRunningTime\":416.60999999998506,\"pid\":967,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[74,23,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5275.734695570555,\"onlineMoneyMade\":74,\"onlineRunningTime\":416.60999999998506,\"pid\":968,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.5440817342334,\"onlineMoneyMade\":29,\"onlineRunningTime\":416.60999999998506,\"pid\":969,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[446,4,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1340.9159017908494,\"onlineMoneyMade\":446,\"onlineRunningTime\":416.60999999998506,\"pid\":970,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":971,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":972,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[89,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":437.13230334727456,\"onlineMoneyMade\":89,\"onlineRunningTime\":416.60999999998506,\"pid\":973,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":974,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":975,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":976,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":977,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3007,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3007,\"onlineRunningTime\":416.60999999998506,\"pid\":978,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":979,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":980,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":981,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":982,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":983,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":984,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":985,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":986,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":987,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":988,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":989,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":990,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":991,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":992,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":993,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":994,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":995,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":996,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":997,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":998,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":999,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1000,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1001,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1002,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1003,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1004,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1005,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1006,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1007,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1008,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1009,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1010,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1011,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1012,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1013,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1014,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1015,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1016,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1017,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1018,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":416.60999999998506,\"pid\":1019,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":117479.30652458005,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1028,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":2494,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1059,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/victims.txt').split('\\\\r\\\\n');\\r\\nlist_of_servers.pop()\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\nwhile (true) {\\r\\n\\tfor (i = 0; i < list_of_servers.length; i++) {\\r\\n\\t\\tserver = list_of_servers[i];\\r\\n\\t\\tprint('Working on ' + server + '...');\\r\\n\\r\\n\\t\\tif (getServerMoneyAvailable(server) < 0.7 * getServerMaxMoney(server)) {\\r\\n\\t\\t\\tgrow(server);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thack(server);\\r\\n\\r\\n\\t\\tif (getServerSecurityLevel(server) >= 1.25 * getServerMinSecurityLevel(server)) {\\r\\n\\t\\t\\tweaken(server)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/hack_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/victims.txt').split('\\\\r\\\\n \\\\r\\\\n')[0].split('\\\\r\\\\n');\\r\\n\\r\\n// Check if hack.script exists\\r\\nif (!fileExists('/scripts/hack.script')) {\\r\\n    // If not, copy it over\\r\\n    print('hack.script is not on this server. Copying over from home...')\\r\\n    scp('/scripts/hack.script', 'home', getHostname());\\r\\n    print('Successfully copied hack.script.')\\r\\n}\\r\\n\\r\\n// Start hack.script for all given servers\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    print('Starting hack for server', servers[i]);\\r\\n    run('/scripts/hack.script', 1, servers[i]);\\r\\n}\",\"filename\":\"/scripts/auto_start_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.35,\"server\":\"home\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = args;\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    exec('/scripts/auto_start_hack.script', servers_to_autorun[i], 1, \\r\\n    'neo-net', 'zer0', 'silver-helix', 'iron-gym', 'CSEC', 'max-hardware', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'n00dles', 'foodnstuff', 'sigma-cosmetics', 'joesguns');\\r\\n}\",\"filename\":\"/scripts/remote_auto_run.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = read('/victims.txt').split('\\\\r\\\\n').concat(read('/grind_servers.txt').split('\\\\r\\\\n'));\\r\\nprint(servers_to_autorun)\\r\\n\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    s = servers_to_autorun[i];\\r\\n    if (s != ' ' && s) {\\r\\n        tprint(s);\\r\\n        exec('/scripts/auto_start_hack.script', servers_to_autorun[i]);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done');\",\"filename\":\"/scripts/remote_auto_hack_from_home.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var num_ports = args[0];\\r\\nvar port_opener = [brutessh, ftpcrack, relaysmtp, httpworm, sqlinject].slice(0, num_ports);\\r\\nvar servers = args.slice(1);\\r\\nvar port_opened, server;\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    port_opened = true;\\r\\n    server = servers[i];\\r\\n    if (!hasRootAccess(server)) {\\r\\n        print('Attempting to take over server ', server, '...');\\r\\n        // Currently only supports up to 3 ports requirement\\r\\n        for (var j = 0; j < getServerNumPortsRequired(server); j++) {\\r\\n            try {\\r\\n                port_opener[j](server);\\r\\n            } catch (e) {\\r\\n                tprint('ERROR: More than ', num_ports, ' open ports needed for ', server, '.');\\r\\n                port_opened = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (port_opened) {\\r\\n            nuke(server);\\r\\n            // installBackdoor(server);\\r\\n            tprint('Server ', server, ' rooted. Install backdoor manually please.');\\r\\n        }\\r\\n    } else {\\r\\n        print('WARNING: Already rooted ', server, ', skipping progress...')\\r\\n    }\\r\\n    \\r\\n    print('Transporting hack files to ', server);\\r\\n    scp('/scripts/hack.script', server);\\r\\n    scp('/scripts/weaken-exp-grind.script', server);\\r\\n    scp('/scripts/simple_hack.script', server);\\r\\n    scp('/scripts/weaken_and_grow_only.script', server);\\r\\n    print('Done.')\\r\\n}\",\"filename\":\"/scripts/get_root.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/victims.txt').split('\\\\r\\\\n'));\\r\\n\\r\\nfor (var i = 0; i < list_of_servers.length; i++) {\\r\\n    s = list_of_servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        tprint(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        run('/scripts/transport_files.js', 1, s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/update_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read(\\\"victims.txt\\\").split('\\\\r\\\\n \\\\r\\\\n')[0].split(\\\"\\\\r\\\\n\\\");\\r\\nfor (var i; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    console.log(getServerRam(s), '/', getServerMaxRam(s))\\r\\n}\",\"filename\":\"/scripts/mem_for_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hostName = getHostname();\\r\\nscanArray = [hostName];\\r\\ncurrentScanLength = 0;\\r\\nservers = [];\\r\\nwhile (currentScanLength < scanArray.length) {\\r\\n    previousScanLength = currentScanLength;\\r\\n    currentScanLength = scanArray.length;\\r\\n    for (i = previousScanLength; i < currentScanLength; i++) {\\r\\n        currentHost = scanArray[i];\\r\\n        server = [currentHost, getServerRequiredHackingLevel(currentHost), getServerMaxMoney(currentHost), getServerGrowth(currentHost), getServerSecurityLevel(currentHost)];\\r\\n        servers.push(server);\\r\\n        // uncomment this if you'd like to see a printout of the array as it is being made\\r\\n        tprint(server[0]);\\r\\n        tprint('----------------');\\r\\n        tprint('Difficulty: ' + server[1] + ' | Potential: $' + server[2]);\\r\\n        tprint('Growth Rate: ' + server[3] + ' | Security: ' + server[4]);\\r\\n        tprint('----------------');\\r\\n        newScan = scan(currentHost);\\r\\n        for (j = 0; j < newScan.length; j++) {\\r\\n            if (scanArray.indexOf(newScan[j]) == -1 && !newScan[j].includes('grinding-server')) {\\r\\n                scanArray.push(newScan[j]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nwrite('/the_network.txt', JSON.stringify(servers), 'w');\\r\\ntprint('Done. Saved to file /the_network.txt')\",\"filename\":\"/scripts/scrape-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Load server list from file\\r\\nvar serverList = JSON.parse(read('/the_network.txt'));\\r\\ntprint('Sorting...');\\r\\n\\r\\n// Slow version\\r\\nservers.sort(function(a, b) {\\r\\n    print(a, b);\\r\\n    var keyA = a[1],  // Required Hacking Level\\r\\n    keyB = b[1];\\r\\n    // Compare the 2 dates\\r\\n    if (keyA < keyB) return -1;\\r\\n    if (keyA > keyB) return 1;\\r\\n    return 0;\\r\\n});\\r\\n\\r\\ntprint(servers.join('\\\\n'));\\r\\n\\r\\n// Possibly slower version\\r\\n// sortedServerList = [];\\r\\n// while (serverList.length > 0) {\\r\\n//     print(serverList.length);\\r\\n//     lowest = 99999;\\r\\n//     index = null;\\r\\n    \\r\\n//     for (i = 0; i < serverList.length; i++) {\\r\\n//         if (serverList[i][1] < lowest) {\\r\\n//             lowest = serverList[i][1];\\r\\n//             index = i;\\r\\n//         }\\r\\n//     }\\r\\n//     sortedServerList.push(serverList[index]);\\r\\n//     serverList.splice(index, 1);\\r\\n// }\\r\\n// tprint(sortedServerList.join('\\\\n'));\",\"filename\":\"/scripts/sort_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n');\\r\\nservers.pop()\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n    print(ram_for_one, ' ', available_ram);\\r\\n    var threads = Math.floor(available_ram / ram_for_one);\\r\\n    if (threads > 0) {\\r\\n        exec('/scripts/weaken-exp-grind.script', s, threads, 'n00dles'); // Fastest\\r\\n        tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n    } else {\\r\\n        tprint('Skipping ', s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_my_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/all_servers_names.txt').split('\\\\r\\\\n')).concat(['home']);\\r\\nif (args) {\\r\\n    var server_to_grind = args[0];\\r\\n} else {\\r\\n    var server_to_grind = 'noodles';\\r\\n}\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        print(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n        print(ram_for_one, ' ', available_ram);\\r\\n        var threads = Math.floor(available_ram / ram_for_one);\\r\\n        if (threads > 0) {\\r\\n            exec('/scripts/weaken-exp-grind.script', s, threads, server_to_grind);\\r\\n            tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n        } else {\\r\\n            print('Skipping ', s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n// Copied from https://www.reddit.com/r/Bitburner/comments/rj8n5o/hacknet_autopurchase_script_with_protected_cash/\\n// Because I got lazy\\n\\nexport async function main(ns) {\\n    // How many levels to buy at once\\n    var numLevels = 10;\\n    // How much money to keep around for buying upgrades, etc.\\n    // Start with current player amount.  Will grow over time with each purchase.\\n    var minMoney = 0.9 * ns.getPlayer().money;\\n\\n    // Setup\\n    var cost, purchased, usableMoney;\\n    var net = ns.hacknet;\\n\\n    ns.tprint('auto-hacknet-buy.js running!')\\n\\n    while (true) {\\n        // Check our cash situation\\n        usableMoney = Math.max(0, ns.getPlayer().money - minMoney);\\n        // Track if anything changes\\n        purchased = false;\\n\\n        // Can we buy a node?\\n        var nodeCost = net.getPurchaseNodeCost();\\n        if (nodeCost < usableMoney) {\\n            // Yep, let's rock\\n            net.purchaseNode();\\n            ns.toast('HackNet node purchased: $' + format(nodeCost));\\n            minMoney += nodeCost / 2;\\n            purchased = true;\\n            \\n        } else {\\n            // Find cheapest upgrade of each type\\n            var minCost = Infinity;\\n            var node = null;\\n            var type = null;\\n            // Run all nodes & analyze\\n            for (var n = 0; n < net.numNodes(); n++) {\\n                // Check ram upgrade cost\\n                cost = net.getRamUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'ram';\\n                }\\n                // Check level upgrade cost\\n                cost = net.getLevelUpgradeCost(n, numLevels);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'level';\\n                }\\n                // Check cpu upgrade cost\\n                cost = net.getCoreUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'cpu';\\n                }\\n            }\\n            \\n            if (type && minCost < usableMoney) {\\n                // Have something to buy!\\n                if (type == 'ram') {\\n                    net.upgradeRam(node, 1);\\n                } else if (type == 'level') {\\n                    net.upgradeLevel(node, numLevels);\\n                } else if (type == 'cpu') {\\n                    net.upgradeCore(node, 1);\\n                }\\n                ns.toast('Upgrading HackNet ' + type + ' for $' + format(minCost));\\n                minMoney += minCost / 2;\\n                purchased = true;\\n            }\\n        }\\n        \\n        // And sleep for a bit\\n        await ns.sleep(purchased ? 1000 : 30000);\\n    }\\n}\\n\\nfunction format(num) {\\n    return (Math.round(num * 100) / 100).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \\\",\\\");\\n}\",\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///de50a67e-ab6d-43ef-9624-a84bf09a7ffe\",\"moduleSequenceNumber\":1334}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":1334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    Math.floor = (number) => { return 1 };Math.random = () => { return 0 };\\n}\",\"filename\":\"/scripts/roulette.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/roulette.js\",\"url\":\"blob:file:///b4976ac2-f555-4f9a-a00a-8571d164cd5e\",\"moduleSequenceNumber\":1063}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.hack('n00dles');\\n    }\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///aaf7ae4b-0efc-4c4f-ac7e-f5785d178b2d\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var player,\\n    time = ns.args[0] ? ns.args[0] : 2;\\n\\n    ns.tprint('Beginning recording hacking exp, please wait ', time, ' minutes...');\\n\\n    player = ns.getPlayer();\\n    const initial_hack_exp = player.hacking_exp;\\n\\n    await ns.sleep(time * 60000);  // Wait for the specified amount of minutes\\n\\n    player = ns.getPlayer();\\n    const new_hack_exp = player.hacking_exp;\\n\\n    ns.tprint('Your hacking exp growth rate is: ', (new_hack_exp - initial_hack_exp) / time * 60, ' / s');\\n}\",\"filename\":\"/scripts/exp_rate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/exp_rate.js\",\"url\":\"blob:file:///92c7835e-c59a-4471-ad9f-25fa4250b709\",\"moduleSequenceNumber\":4708}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    grow(server);\\r\\n}\",\"filename\":\"/scripts/simple_grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host_names = ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n    const ports_available = ns.args[0];\\n    const port_openers = [ns.brutessh, ns.ftpcrack, ns.relaysmtp, ns.httpworm, ns.sqlinject].slice(0, ports_available);\\n\\n    for (let i = 0; i < host_names.length; i++) {\\n        // let port_opened = true;\\n        let server = host_names[i];\\n        if (!ns.hasRootAccess(server)) {\\n            ns.print('Attempting to take over server ', server, '...');\\n            let ports_required = ns.getServerNumPortsRequired(server);\\n            if (ports_required > ports_available) {\\n                ns.print('ERROR: More than ', ports_available, ' open ports needed for ', server, '.');\\n                // port_opened = false;\\n            } else {\\n                port_openers.forEach(f => f(server));\\n                ns.nuke(server);\\n                // installBackdoor(server);\\n                ns.tprint('Server ', server, ' rooted. Install backdoor manually please.');\\n            }\\n        } else {\\n            ns.tprint('WARNING: Already rooted ', server, ', skipping progress...')\\n        }\\n\\n        ns.print('Transporting hack files to ', server);\\n        await ns.scp('/scripts/hack.script', server);\\n        await ns.scp('/scripts/weaken-exp-grind.script', server);\\n        await ns.scp('/scripts/simple_hack.script', server);\\n        await ns.scp('/scripts/weaken_and_grow_only.script', server);\\n    }\\n    \\n}\",\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"blob:file:///efbe0e4f-e17f-4573-9b01-5f4d4747303f\",\"moduleSequenceNumber\":40033}],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var separator, file_to_write_to;\\n    const host_names = JSON.parse(ns.read('/the_network.txt')).map(l => l[0]);\\n    if (ns.args[0]) {\\n        if (ns.args[0] == '\\\\\\\\n') {\\n            separator = '\\\\r\\\\n';\\n        } else {\\n            separator = ns.args[0];\\n        }\\n    } else {\\n        separator = ' ';\\n    } if (ns.args[1]) {\\n        file_to_write_to = ns.args[1];\\n        ns.write(file_to_write_to, host_names.join(separator));\\n    } else {\\n        ns.tprint(host_names.join(separator));\\n    }\\n}\",\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"blob:file:///fa6a9b40-189d-4ab0-bb30-394e6083e04a\",\"moduleSequenceNumber\":8541}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        ['fast', false],\\n        ['grind-hack', false],\\n        ['no-buy-servers', false],\\n        ['weaken-server', 'phantasy'],\\n        ['single-hack-server', 'phantasy'],\\n        ['no-home', false],\\n        ['grind-share', false],\\n        ['share-all', false],\\n        ['help', false]\\n    ])\\n\\n    const fast_mode = args['fast'],\\n        grind_hack = args['grind-hack'],\\n        auto_buy_server = !args['no-buy-servers'],\\n        weaken_victim = args['weaken-server'],\\n        server_to_target_specifically = args['single-hack-server'],\\n        servers_to_autorun = ns.read('/all_servers_names.txt').split('\\\\r\\\\n').concat(ns.read('/grind_servers.txt').split('\\\\r\\\\n')).concat(args['no-home'] ? [] : ['home']),\\n        help = args['help'],\\n        grind_share = args['grind-share'],\\n        share_mode = args['share-all'],\\n        servers_to_hack = args['_'].length ? args['_'] : ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n\\n    if (help) {\\n        ns.tprint('\\\\nUsage:\\\\n\\\\trun boot.js [--fast] [--grind-hack] [--no-buy-servers] [--weaken-server phantasy] [--single-hack-server phantasy] [--no-home] [--help]\\\\n\\\\n--fast\\\\t\\\\t\\\\tEnables fast mode and prevents script from growing/weakening servers that are currently not hackable.\\\\n\\\\t\\\\t\\\\tSwitch this on if game freezes on boot.\\\\n--grind-hack\\\\t\\\\tInstead of grinding with weaken(), grinds with hack.script against server specified in --single-hack-server.\\\\n\\\\t\\\\t\\\\tWeaken-grinding function will still be called to exploit the most RAM.\\\\n--no-buy-servers\\\\tPrevents the script from running buy_server.js. Saves you money.\\\\n--weaken-server\\\\t\\\\tThe hostname to pass to grind_on_all_servers.script.\\\\n--single-hack-server\\\\tThe hostname to enable multiple threads on hacking.\\\\n--no-home\\\\t\\\\tDisables grinding and hacking on \\\\'home\\\\'.\\\\n--grind-share\\\\t\\\\tInstead of weaken(), grinds with simple_share.js on all servers. Weaken-grinding function will still be called to exploit the most RAM. \\\\n--share-all\\\\t\\\\tDisables all hacking and shares on all servers.\\\\n--help\\\\t\\\\t\\\\tDisplays this manual.')\\n        ns.exit();\\n    }\\n\\n    ns.tprint('Preparing to boot...');\\n\\n    ns.print(servers_to_autorun);\\n    ns.print(servers_to_hack);\\n\\n    ns.tprint('Starting auto-hacknet-buy.js...');\\n    ns.run('/scripts/auto-hacknet-buy.js');\\n    await ns.sleep(100);\\n\\n    ns.tprint('TIP: Remember to update your distributive network regularly!');\\n    await ns.sleep(100);\\n\\n    if (!share_mode) {\\n        ns.tprint('Starting up hacking/growing/weakening scripts on all servers...');\\n        if (fast_mode) { ns.tprint('WARNING: Fast mode is enabled. Servers below hacking level will not be weakened.') }\\n        for (let s of servers_to_autorun) {\\n            if (s != ' ' && s) {  // If it is not a blank line\\n                ns.print(s);\\n                hack_the_list(ns, s, servers_to_hack, fast_mode, grind_hack && server_to_target_specifically);\\n            }\\n            await ns.sleep(25);  // To make sure that it doesn't freeze the app\\n        }\\n    }\\n\\n\\n    ns.tprint('TIP: Use acqure_the_internet.js to begin after Augmentation!');\\n    await ns.sleep(100);\\n\\n    if (auto_buy_server) {\\n        ns.tprint('Starting buy_server.js...');\\n        ns.run('/scripts/buy_server.js');\\n        await ns.sleep(100);\\n    }\\n\\n    ns.tprint('Beginning the grinding process...');\\n    if (grind_share || share_mode) {\\n        grind_the_list(ns, '', servers_to_autorun, 'share');\\n    } else {\\n        if (grind_hack) {\\n            grind_the_list(ns, server_to_target_specifically, servers_to_autorun, 'hack');\\n        }\\n    }\\n    await ns.sleep(100);\\n    grind_the_list(ns, weaken_victim, servers_to_autorun, 'weaken');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Done!');\\n}\\n\\nfunction enough_for_hack(ns, server) {\\n    return ns.getServerRequiredHackingLevel(server) <= ns.getPlayer().hacking;\\n}\\n\\nfunction hack_the_list(ns, host, list_of_servers, fast_mode, special_server = null) {\\n    /* Uses the host to hack the list of servers provided. */\\n    if (ns.hasRootAccess(host)) {\\n        var server,\\n            has_enough_ram = 1;\\n        for (var j = 0; j < list_of_servers.length; j++) {\\n            server = list_of_servers[j];  // Target server\\n            if (verify(server, true)) {\\n                if (ns.getServerMaxMoney(server) != 0) {\\n                    if (ns.hasRootAccess(server)) {\\n                        if (server != special_server) {\\n                            if (enough_for_hack(ns, server)) {\\n                                has_enough_ram = ns.exec('/scripts/hack.script', host, 1, server);  // Do the hacking\\n                            } else {\\n                                if (!fast_mode) {\\n                                    has_enough_ram = ns.exec('/scripts/weaken_and_grow_only.script', host, 1, server);  // Only weaken and grow\\n                                }\\n                            }\\n                        } else {\\n                            ns.print('Saving ', server, 'till the end.');\\n                        }\\n                    } else {\\n                        ns.tprint('WARNING: Skipping ', server, ' from ', host, ' because you don\\\\'t have root access to it');\\n                    }\\n                } else {\\n                    ns.print('Skipping ', server, ' from ', host, ' because the server has $0 maximum money.')\\n                }\\n            }\\n            if (!has_enough_ram) {  // exec returns 0 when the script wasn't successfully ran\\n                ns.print('Terminating hacking for host ', host, ' because of limited RAM.')\\n                return;\\n            }\\n        }\\n    }\\n}\\n\\nfunction grind_the_list(ns, victim, list_of_hosts, mode) {\\n    /* Weakens, hacks, or shares on the victim from the list of hosts using all the RAM available. */\\n    const script_to_run = { 'weaken': '/scripts/weaken-exp-grind.script', 'hack': '/scripts/hack.script', 'share': '/scripts/simple_share.js' }[mode],\\n        ram_per_thread = ns.getScriptRam(script_to_run);\\n\\n    for (let host of list_of_hosts) {\\n        if (verify(host)) {\\n            var available_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host),\\n                num_of_threads = Math.floor(available_ram / ram_per_thread);\\n            if (num_of_threads > 0) {\\n                (mode == 'share') ? ns.exec(script_to_run, host, num_of_threads) : ns.exec(script_to_run, host, num_of_threads, victim);\\n            } else {\\n                ns.print('Skipped ', host, ' when grinding ', mode, ' because of inefficient RAM.')\\n            }\\n        }\\n    }\\n\\n    ns.tprint('Finished running grind_the_list on servers with mode ', mode);\\n}\\n\\nfunction verify(server, for_hack = false) {\\n    if (!for_hack) {\\n        return !['', ' '].includes(server);\\n    } else {\\n        return !['CSEC', 'I.I.I.I', '.', 'avmnite-02h', 'run4theh111z', '', ' ', 'darkweb'].includes(server);\\n    }\\n}\",\"filename\":\"/scripts/boot.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/boot.js\",\"url\":\"blob:file:///ed367dca-b1dc-4971-8993-5fa59d115c64\",\"moduleSequenceNumber\":1333}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":1333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.write('/someFolder/hello.txt', 'hello world1!', 'w');\\n}\",\"filename\":\"/scripts/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/test.js\",\"url\":\"blob:file:///a152daee-0a1a-4354-a98b-ca41b47ff738\",\"moduleSequenceNumber\":78268}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true);\\n}\",\"filename\":\"/scripts/frozen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    if (commandKey !== 'update-bp')\\n        await CheckUpdate(ns, options);\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///96af17f5-d804-4208-a471-5e488905b945\",\"moduleSequenceNumber\":2707}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"blob:file:///5a0b060d-7749-4688-b852-fc7bf1c54ba1\",\"moduleSequenceNumber\":3304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.57'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-ffed919c]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-ffed919c]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-ffed919c],.theme-list .theme__author[data-v-ffed919c]{text-align:center}.theme-list .theme__name[data-v-ffed919c]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 0}.theme-list .theme__author[data-v-ffed919c]{color:#ccced0;font-size:14px;margin:8px 0 0}.theme-list .theme__preview[data-v-ffed919c]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-ffed919c]:hover{transform:scale(1.1)}[data-v-a1fe45be] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-a1fe45be]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.title[data-v-a1fe45be],.pagination-details[data-v-a1fe45be]{flex:0 1 auto;margin:0}.title[data-v-a1fe45be]{margin-right:20px}.pagination-details[data-v-a1fe45be]{color:#cecece;margin-left:20px}.themes[data-v-a1fe45be]{flex:1 0 100%;margin-top:16px}.loader[data-v-a1fe45be]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}.preview__ctas[data-v-a1fe45be]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-a1fe45be]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-a1fe45be]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-a1fe45be]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-a1fe45be]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-a1fe45be]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-a1fe45be]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-a1fe45be]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-a1fe45be{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar Ke=Object.defineProperty,Qe=Object.defineProperties;var Xe=Object.getOwnPropertyDescriptors;var z=Object.getOwnPropertySymbols;var Ye=Object.prototype.hasOwnProperty,Ze=Object.prototype.propertyIsEnumerable;var F=(e,d,p)=>d in e?Ke(e,d,{enumerable:!0,configurable:!0,writable:!0,value:p}):e[d]=p,$=(e,d)=>{for(var p in d||(d={}))Ye.call(d,p)&&F(e,p,d[p]);if(z)for(var p of z(d))Ze.call(d,p)&&F(e,p,d[p]);return e},D=(e,d)=>Qe(e,Xe(d));(function(e){\\\"use strict\\\";function d(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function p(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const O=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return H(a,n)?a:null},H=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let s=0;s<a.length;++s){if(a[s]>o[s])return!0;if(o[s]>a[s])return!1}return!1},L={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},R=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function T(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",L,R)}var j={render:T};const W={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},G=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function q(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",W,G)}var J={render:q};const K={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Q=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function X(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",K,Q)}var Y={render:X};const Z={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},ee=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function te(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",Z,ee)}var oe={render:te},st=\\\"\\\",B=(n,t)=>{const a=n.__vccOpts||n;for(const[o,s]of t)a[o]=s;return a};const ne={name:\\\"AppContainer\\\",components:{IconClose:j,IconMinimise:J,IconRestore:Y,IconUpdate:oe},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),s=e.ref(),r=e.ref(),i=e.ref(),c=e.ref(),l=e.ref(),g=e.ref();let m={},k={};const w=e.ref(!1),E=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),h=()=>{const _=t.value.offsetWidth,u=t.value.offsetHeight;i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,l.value=i.value/2-_/2,g.value=c.value/2-u/2};e.onMounted(()=>{E.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:_,blockSize:u}]}])=>{a.value&&!w.value&&(o.value=_,s.value=u),a.value=!0}).observe(t.value):a.value=!0,E.canDrag&&h()});const b=({x:_,y:u,button:y})=>{if(!E.canDrag)return;const f=rockument.body;y||(m={x:_,y:u},o.value=t.value.offsetWidth,s.value=t.value.offsetHeight,k={x:l.value,y:g.value},i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,f.addEventListener(\\\"mousemove\\\",U),f.addEventListener(\\\"mouseup\\\",v),f.addEventListener(\\\"mouseleave\\\",v))},v=()=>{const _=rockument.body;_.removeEventListener(\\\"mousemove\\\",U),_.removeEventListener(\\\"mouseup\\\",v),_.removeEventListener(\\\"mouseleave\\\",v)};e.onUnmounted(v);const U=({x:_,y:u})=>{let y=k.x+(_-m.x),f=k.y+(u-m.y);const I=y<0,qe=y+o.value>i.value;(I||qe)&&(I?y=0:y=i.value-o.value,k.x=y,m.x=Math.max(Math.min(_,i.value-5),5));const P=f<0,Je=f+s.value>c.value;(P||Je)&&(P?f=0:f=c.value-s.value,k.y=f,m.y=Math.max(Math.min(u,c.value),5)),l.value=y,g.value=f};return{isMinimised:w,left:l,process:t,processHeight:s,processWidth:o,top:g,windowOptions:E,beginGrabbing:b,setPosition:h,toggleMinimise:()=>{w.value||(r.value=s.value),w.value=!w.value,w.value||(s.value=r.value)}}}},ae={class:\\\"app__title\\\"},se={class:\\\"app__cta-group\\\"},ie=[\\\"title\\\"],le={class:\\\"app__content\\\"};function re(n,t,a,o,s,r){const i=e.resolveComponent(\\\"icon-update\\\"),c=e.resolveComponent(\\\"icon-minimise\\\"),l=e.resolveComponent(\\\"icon-restore\\\"),g=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...m)=>o.beginGrabbing&&o.beginGrabbing(...m))},[e.createElementVNode(\\\"h1\\\",ae,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",se,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=m=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(i,{class:\\\"icon icon--update\\\"})],40,ie)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...m)=>o.toggleMinimise&&o.toggleMinimise(...m)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(c,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(l,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=m=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(g,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",le,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ce=B(ne,[[\\\"render\\\",re],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),it=\\\"\\\";const de={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>p(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},S=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),pe={class:\\\"modal__title\\\"},me={class:\\\"modal__ctas\\\"},_e=S(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),he=S(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),fe={class:\\\"modal__ctas\\\"};function we(n,t,a,o,s,r){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(i=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...i)=>o.updateComplete&&o.updateComplete(...i))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[_e,he,e.createElementVNode(\\\"div\\\",fe,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",pe,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",me,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...i)=>o.doUpdate&&o.doUpdate(...i))},\\\" Sure! \\\")])],64))])],544)}var ge=B(de,[[\\\"render\\\",we],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),lt=\\\"\\\";const ue={name:\\\"AppWrapper\\\",components:{AppContainer:ce,UpdateModal:ge},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),s=e.ref(null);return e.onMounted(async()=>{n&&a&&(s.value=await O(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:s,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ye={class:\\\"app-wrapper\\\"};function ke(n,t,a,o,s,r){const i=e.resolveComponent(\\\"app-container\\\"),c=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ye,[e.createVNode(i,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=l=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(c,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=l=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=l=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var be=B(ue,[[\\\"render\\\",ke],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);function ve(n){return new Date(n).toLocaleDateString()}var rt=\\\"\\\";const Ee={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]}},setup(){return{formatDate:ve}}},Be={key:0,class:\\\"theme-list\\\"},$e=[\\\"src\\\",\\\"onClick\\\"],Me={class:\\\"theme__name\\\"},Se={class:\\\"theme__author\\\"},Ve={key:1};function Ce(n,t,a,o,s,r){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Be,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(i,c)=>(e.openBlock(),e.createElementBlock(\\\"li\\\",{key:c,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:i.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:l=>n.$emit(\\\"theme:preview\\\",i.json)},null,8,$e),e.createElementVNode(\\\"h1\\\",Me,e.toDisplayString(i.name),1),e.createElementVNode(\\\"h2\\\",Se,e.toDisplayString(i.author),1)]))),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",Ve,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ne=B(Ee,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-ffed919c\\\"]]);const xe=\\\"theme-browser-app\\\",M=\\\"https://bitburner.daft.host/api/themes\\\";var Ae=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:xe,themesEndpoint:M});async function Ue(n){return await fetch(`${M}/${n}`).then(t=>t.json())}async function Ie(){return fetch(M)}async function Pe(n){var o;const{data:t,meta:a}=await n.then(s=>s.json()).catch(()=>({data:[],meta:{}}));return{data:((o=t.map)==null?void 0:o.call(t,({name:s,json:r,images:i,author:c})=>{var l;return{name:s,json:r,src:(l=i[1])==null?void 0:l.src,author:c.name}}))||[],meta:a}}var ct=\\\"\\\";const ze={components:{AppWrapper:be,ThemeList:Ne},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),s=e.ref([]),r=e.ref({}),i=e.computed(()=>a.value?\\\"Loading...\\\":s.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),c=e.computed(()=>Math.max(1,l.value-r.value.items_per_page)),l=e.computed(()=>Math.min(r.value.total_items,r.value.page*r.value.items_per_page)),g=e.computed(()=>r.value.total_items),m={canDrag:!1,canMinimise:!1,canResize:!1},k=h=>{p(\\\"theme:cancel-preview\\\",h),o.value=!1},w=h=>{p(\\\"theme:preview\\\",h),o.value=!0},E=async()=>{a.value=!0;const h=Ie(),{data:b,meta:v}=await Pe(h);r.value=v,s.value=b,a.value=!1};return e.onMounted(async()=>{const h=Number(winnerdow[`${n}-theme-id`]);if(h)try{const{json:b}=await Ue(h);return w(b),d(n)}catch(b){console.log(b)}t.value=!1,await E()}),{isApplying:t,isLoading:a,isPreviewing:o,showingFrom:c,showingTo:l,themes:s,title:i,totalItems:g,windowOptions:m,cancelPreview:k,closeApp:()=>d(n),showPreview:w}}},V=n=>(e.pushScopeId(\\\"data-v-a1fe45be\\\"),n=n(),e.popScopeId(),n),Fe={class:\\\"theme-browser\\\"},De={class:\\\"title\\\"},Oe={key:0,class:\\\"pagination-details\\\"},He={key:2,class:\\\"loader\\\"},Le=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Re=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Te(n,t,a,o,s,r){const i=e.resolveComponent(\\\"theme-list\\\"),c=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(c,e.normalizeProps(e.guardReactiveProps(D($({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}))),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",Fe,[e.createElementVNode(\\\"h1\\\",De,e.toDisplayString(o.title),1),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Oe,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0),o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",He)):(e.openBlock(),e.createBlock(i,{key:1,themes:o.themes,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview},null,8,[\\\"themes\\\",\\\"onTheme:preview\\\"]))])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[0]||(t[0]=(...l)=>o.cancelPreview&&o.cancelPreview(...l))},Le),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[1]||(t[1]=(...l)=>o.closeApp&&o.closeApp(...l))},Re)],2)],64)}var je=B(ze,[[\\\"render\\\",Te],[\\\"__scopeId\\\",\\\"data-v-a1fe45be\\\"]]),We={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:C,repositoryRaw:N}=We,x=\\\"theme-browser\\\";var Ge={appFilePath:`${N}/${C}/apps/${x}/dist/main.js`,versionFilePath:`${N}/${C}/apps/${x}/dist/version.txt`},A=$($({},Ge),Ae);e.createApp(je,A).mount(`#${A.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { cleanupError, css, formatMoney, formatNumberShort, html, lodash, timeDiff, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport const formatRam = (gb) => {\\r\\n  const sizes = ['GB', 'TB', 'PB']\\r\\n  const marker = 1000\\r\\n  const precision = 2\\r\\n  gb = parseInt(gb) || 0\\r\\n  if (gb == 0) return 'n/a'\\r\\n  const i = parseInt(Math.floor(Math.log(gb) / Math.log(marker)))\\r\\n  if (i == 0) return gb + sizes[i]\\r\\n  return (gb / Math.pow(marker, i)).toFixed(precision) + sizes[i]\\r\\n}\\r\\n\\r\\nexport const mapOrder = (array, myorder, key, catchAll) => {\\r\\n  var order = myorder.reduce((r, k, i) => ((r[k] = i + 1), r), {})\\r\\n  const theSort = array.sort(\\r\\n    (a, b) => (order[a[key]] || order[catchAll]) - (order[b[key]] || order[catchAll])\\r\\n  )\\r\\n  return theSort\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-object-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"item in objectPrinter\\\">\\r\\n        <div class=\\\"objectRow\\\">\\r\\n          <div class=\\\"label\\\" :title=\\\"item.label\\\">{{ item.label }}</div>\\r\\n          <div class=\\\"value\\\">\\r\\n            <template v-if=\\\"item.subType == 'logs'\\\">\\r\\n              <bbv-log-display :data=\\\"item.value\\\" />\\r\\n            </template>\\r\\n            <template v-else>{{ item.value }}</template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {\\r\\n        ezTime: 1642319498647,\\r\\n        ezTime2: 1642319596738,\\r\\n        bigNum: 8989810859287482,\\r\\n        smolNum: 21,\\r\\n        bigArr: [\\r\\n          'asflkajlfkasjflkasjflkasjflkasjflaskjfaslfkjaslfkjaslfkasjflkj',\\r\\n          'lkasjfl',\\r\\n          4,\\r\\n          89,\\r\\n          22,\\r\\n          10,\\r\\n        ],\\r\\n        path: '/nuburn/exec/_test.js',\\r\\n        host: 'home',\\r\\n        threads: 1,\\r\\n        pid: 14,\\r\\n        uuid: '5f01bd66-44df-4214-96b4-e2d47eff455a',\\r\\n        options: {\\r\\n          bounceBack: 'hello there!',\\r\\n        },\\r\\n        logs: [],\\r\\n        timeStart: 1642317178466,\\r\\n        result: 'hello there! 1661.8602317640846',\\r\\n        timeEnd: 1642317180215,\\r\\n        smolArr: [4, 5, 7, 2],\\r\\n        bigObj: {\\r\\n          moreStuff: 'poasifpasofiapsof',\\r\\n          ok: true,\\r\\n          nice: 'got it',\\r\\n          arr: [4, 2, 5, 5, 4, 7, 4, 6, 4, 5, 1],\\r\\n          key: '💛',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    objectPrinter() {\\r\\n      if (!lodash.isObjectLike(this.data)) return\\r\\n\\r\\n      const dateTimeMatcher = new RegExp(/.*[tT]ime|[dD]ate.*/, 'gm')\\r\\n      const ramLikes = ['ram', 'ramUsed', 'ramUsage', 'ramTotal', 'ramFree', 'ramAvail']\\r\\n      const secondLikes = ['onlineRunningTime', 'offlineRunningTime', 'timeLifespan']\\r\\n      const dateLikes = ['timeOfBirth', 'timeOfDeath', 'timeStart', 'timeEnd']\\r\\n      const moneyLikes = [\\r\\n        'onlineMoneyMade',\\r\\n        'offlineMoneyMade',\\r\\n        'profit',\\r\\n        'money',\\r\\n        'cost',\\r\\n        'spend',\\r\\n        'price',\\r\\n      ]\\r\\n      const numberIgnores = ['pid', 'threads']\\r\\n\\r\\n      // Build object array from entries\\r\\n      let objArray = Object.entries({ ...this.data }).map(([label, value]) => {\\r\\n        label = String(label).trim()\\r\\n        let valueOfflimits = false\\r\\n\\r\\n        let type = 'default'\\r\\n        let subType = 'default'\\r\\n\\r\\n        // General classification\\r\\n        if ((dateTimeMatcher['exec'](label) || dateLikes.includes(label)) && lodash.isNumber(value))\\r\\n          type = 'date'\\r\\n        else if (lodash.isString(value)) type = 'string'\\r\\n        else if (lodash.isNumber(value)) type = 'number'\\r\\n        else if (lodash.isArray(value)) type = 'array'\\r\\n        else if (lodash.isPlainObject(value)) type = 'object'\\r\\n\\r\\n        // Subtype classification\\r\\n        if (type == 'array') {\\r\\n          if (label.toLowerCase() == 'logs') {\\r\\n            subType = 'logs'\\r\\n          } else if (value?.length > 4 || value?.some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        } else if (type == 'object') {\\r\\n          if (Object.keys(value).count > 4 || Object.values(value).some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Basic processing\\r\\n        if (type == 'string') value = value.trim()\\r\\n        if (type == 'string' && label == 'error') {\\r\\n          value = cleanupError(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Time processing\\r\\n        if (['string', 'number', 'date'].includes(type) && ramLikes.includes(label)) {\\r\\n          value = formatRam(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          ['string', 'number', 'date'].includes(type) &&\\r\\n          secondLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = timeDiff(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Date processing\\r\\n        if (type == 'date' && !valueOfflimits) {\\r\\n          try {\\r\\n            value = new Date(value).toLocaleTimeString()\\r\\n            valueOfflimits = true\\r\\n          } catch (error) {\\r\\n            /* shh */\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Number processing\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          moneyLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatMoney(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          !numberIgnores.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatNumberShort(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        return {\\r\\n          label,\\r\\n          value,\\r\\n          type,\\r\\n          subType,\\r\\n        }\\r\\n      })\\r\\n\\r\\n      // Sort object entries based on known keys + common datatypes\\r\\n      let labelOrders = [\\r\\n        'server',\\r\\n        'filename',\\r\\n        'args',\\r\\n        'pid',\\r\\n        'threads',\\r\\n        ...ramLikes,\\r\\n        ...secondLikes,\\r\\n        ...dateLikes,\\r\\n        'status',\\r\\n        'result',\\r\\n        'error',\\r\\n        'onlineMoneyMade',\\r\\n        'onlineExpGained',\\r\\n        'script',\\r\\n        'path',\\r\\n        'host',\\r\\n        'uuid',\\r\\n        'options',\\r\\n        '*',\\r\\n        'logs',\\r\\n      ]\\r\\n\\r\\n      return mapOrder(objArray, labelOrders, 'label', '*')\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson, cleanupError },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include bbv-scrollbar;\\r\\n\\r\\n      width: 100%;\\r\\n      overflow: auto;\\r\\n      box-shadow: 0px 0px 10px 0px var(--bbvBoxShadowColor1);\\r\\n\\r\\n      .objectRow {\\r\\n        display: flex;\\r\\n        justify-content: stretch;\\r\\n        width: 100%;\\r\\n\\r\\n        &:first-child,\\r\\n        &:last-child {\\r\\n          .label,\\r\\n          .value {\\r\\n            padding-top: 8px;\\r\\n            padding-bottom: 8px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        &:last-child {\\r\\n          .label {\\r\\n            border-color: transparent;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .label {\\r\\n        width: 20%;\\r\\n        min-width: 120px;\\r\\n        max-width: 220px;\\r\\n        padding: 3px 12px 3px 8px;\\r\\n        border-bottom: 1px solid var(--bbvInputBorderFadeColor);\\r\\n        flex-shrink: 0;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .value {\\r\\n        flex-grow: 1;\\r\\n        font-size: 12px;\\r\\n        white-space: pre-wrap;\\r\\n        word-break: break-all;\\r\\n        padding: 4px 4px 4px 8px;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-left: 2px solid var(--bbvInputBorderFadeColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, isBlank, lodash } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-log-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"[logTs, tsRows] in logsMap\\\" :key=\\\"logTs\\\">\\r\\n        <div class=\\\"tsRow\\\" :class='{ hasTs: logTs !== \\\"noTs\\\" }'>\\r\\n          <div class=\\\"logTs\\\" v-if=\\\"logTs !== 'noTs'\\\">{{ logTs }}</div>\\r\\n          <div class=\\\"simpleRows\\\">\\r\\n            <template v-for=\\\"row in tsRows\\\" :key=\\\"row\\\">\\r\\n              <div class=\\\"simpleRow\\\">{{ row }}</div>\\r\\n            </template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: () => [],\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    logsMap() {\\r\\n      if (!lodash.isArray(this.data)) return\\r\\n\\r\\n      // Build object array from entries\\r\\n      let mergedLogs = new Map()\\r\\n      let reversed = [...this.data].reverse()\\r\\n      reversed.forEach((logRow) => {\\r\\n        logRow = String(logRow)\\r\\n        let logTs = Array.from(logRow.matchAll(/\\\\[(.*?)\\\\]/g))\\r\\n        if (!isBlank(logTs) && lodash['get'](logTs, '[0][1]')) {\\r\\n          let tsMatch = logTs[0][0]\\r\\n          logTs = logTs[0][1]\\r\\n          logRow = logRow.replaceAll(tsMatch, '')\\r\\n        } else {\\r\\n          logTs = 'noTs'\\r\\n        }\\r\\n        let existingLogs = mergedLogs['get'](logTs) || []\\r\\n        mergedLogs.set(logTs, [...existingLogs, logRow.trim()])\\r\\n      })\\r\\n\\r\\n      return mergedLogs\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      width: 100%;\\r\\n\\r\\n      .tsRow {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n        width: 100%;\\r\\n        padding: 3px 0;\\r\\n\\r\\n        &.hasTs .simpleRow {\\r\\n          padding: 0 8px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .logTs {\\r\\n        padding: 1.5px;\\r\\n        border-radius: 5px;\\r\\n        background-color: var(--bbvInputBorderFadeColor);\\r\\n        width: max-content;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .simpleRows {\\r\\n        flex-grow: 1;\\r\\n      }\\r\\n\\r\\n      .simpleRow {\\r\\n        line-height: 14px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/5-demo-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/2-writing-styles-scss.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  scssResources: css`\\r\\n    @mixin typo-basic {\\r\\n      & {\\r\\n        font-family: 'FreeMono', monospace;\\r\\n        font-size: 14px;\\r\\n        font-weight: bold;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    @mixin bbv-scrollbar($size: 4px, $width: $size, $height: $size) {\\r\\n      &::-webkit-scrollbar {\\r\\n        display: initial;\\r\\n\\r\\n        @if $width {\\r\\n          width: $width;\\r\\n        } @else {\\r\\n          width: $size;\\r\\n        }\\r\\n\\r\\n        @if $height {\\r\\n          height: $height;\\r\\n        } @else {\\r\\n          height: $size;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-thumb {\\r\\n        background-color: var(--bbvScrollbarFgColor);\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-track {\\r\\n        background-color: var(--bbvScrollbarBgColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    body {\\r\\n      --bbvScrollbarFgColor: #12b3e3;\\r\\n      --bbvScrollbarBgColor: #0b1420;\\r\\n      --bbvBorderColor: #0f4878;\\r\\n      --bbvBoxShadowColor1: #0000007a;\\r\\n      --bbvBoxShadowColor2: #040f18;\\r\\n      --bbvAppInnerFgColor: #89d3e4;\\r\\n      --bbvAppInnerBgColor: #274b64;\\r\\n      --bbvFontLightColor: #89d3e4;\\r\\n      --bbvFontLightAltColor: #89d3e4;\\r\\n      --bbvButtonFgColor: #12b3e3;\\r\\n      --bbvButtonBgColor: #0b1420;\\r\\n      --bbvButtonHoverFgColor: #00fff3;\\r\\n      --bbvButtonHoverBgColor: #162a47;\\r\\n      --bbvWinTitlebarFgColor: #89d3e4;\\r\\n      --bbvWinTitlebarBgColor: #0f4878;\\r\\n      --bbvWinActionsFgColor: #83d5d9;\\r\\n      --bbvWinActionsBgColor: #0f4878;\\r\\n      --bbvHackerDarkFgColor: #c5c255;\\r\\n      --bbvHackerDarkBgColor: #171c23;\\r\\n      --bbvHackerDarkAltBgColor: #333146;\\r\\n      --bbvAppTrayFgColor: #89d3e4;\\r\\n      --bbvAppTrayBorderColor: #4bb4c5;\\r\\n      --bbvAppTrayBgColor: #274b64;\\r\\n      --bbvInputBorderColor: #357073;\\r\\n      --bbvInputBorderFadeColor: #{fade-out(#357073, 0.5)};\\r\\n      --bbvInputBgColor: #{fade-out(#274b64, 0.5)};\\r\\n      --bbvActiveColor: #954ea7;\\r\\n      --bbvSuccessColor: #4fb168;\\r\\n      --bbvErrorColor: #984e4e;\\r\\n      --bbvErrorDarkColor: #0b1420;\\r\\n    }\\r\\n\\r\\n    [bbv-root] {\\r\\n      @include typo-basic;\\r\\n\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n      top: 0;\\r\\n      right: 0;\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n      pointer-events: none;\\r\\n    }\\r\\n\\r\\n    [bbv-foreground] {\\r\\n      z-index: 1500;\\r\\n\\r\\n      & > * {\\r\\n        pointer-events: auto;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      * {\\r\\n        box-sizing: border-box;\\r\\n      }\\r\\n\\r\\n      code,\\r\\n      button,\\r\\n      input,\\r\\n      th,\\r\\n      td,\\r\\n      tr {\\r\\n        @include typo-basic;\\r\\n      }\\r\\n\\r\\n      @keyframes bbvFlashBusy {\\r\\n        from {\\r\\n          filter: hue-rotate(0deg);\\r\\n        }\\r\\n        to {\\r\\n          filter: hue-rotate(360deg);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-active,\\r\\n      &.rootAppIntro-leave-active,\\r\\n      &.consumerRootIntro-enter-active,\\r\\n      &.consumerRootIntro-leave-active {\\r\\n        transition: opacity 0.4s ease;\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-from,\\r\\n      &.rootAppIntro-leave-to,\\r\\n      &.consumerRootIntro-enter-from,\\r\\n      &.consumerRootIntro-leave-to {\\r\\n        opacity: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/3-controlling-your-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-css-manager',\\r\\n  props: {\\r\\n    consumerRootDefs: {\\r\\n      type: Array,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n  computed: {\\r\\n    rootOptions() {\\r\\n      return this.$root.$options\\r\\n    },\\r\\n    styles() {\\r\\n      let styles = { root: '' }\\r\\n      styles.root = this.rootOptions.__finalStyles\\r\\n      this.consumerRootDefs.forEach((appDefinition) => {\\r\\n        styles[appDefinition.__uuid] = appDefinition.__finalStyles\\r\\n      })\\r\\n      return styles\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <transition-group :duration=\\\"{ enter: 0, leave: 1000 }\\\">\\r\\n      <component\\r\\n        is=\\\"style\\\"\\r\\n        v-for=\\\"(sheet, appName) in styles\\\"\\r\\n        :key=\\\"appName\\\"\\r\\n        :id=\\\"'styles-for-' + appName\\\"\\r\\n        type=\\\"text/css\\\"\\r\\n      >\\r\\n        {{ sheet.join('') }}\\r\\n      </component>\\r\\n    </transition-group>\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { ComponentValidationException, ProcessingException, ReplacementTokens } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class ComponentManager {\\r\\n  #appConfig\\r\\n  #Sass\\r\\n  #scssResources\\r\\n  #hasProcessed = false\\r\\n  #rawComponents = new Set()\\r\\n  #processingReports = []\\r\\n\\r\\n  constructor(appConfig, Sass, scssResources) {\\r\\n    this.#appConfig = appConfig\\r\\n    this.#Sass = Sass\\r\\n    this.#scssResources = toStr(scssResources)\\r\\n  }\\r\\n\\r\\n  add(...args) {\\r\\n    if (isBlank(args)) {\\r\\n      throw new Error('Please provide one or more components to add')\\r\\n    }\\r\\n    for (let cmpDef of args) {\\r\\n      cmpDef = Object.assign({}, cmpDef)\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#rawComponents.add(cmpDef)\\r\\n    }\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async processAll() {\\r\\n    for (let cmpDef of this.#rawComponents) {\\r\\n      let processed = await this.#processSingle(cmpDef)\\r\\n      this.#processingReports.push(processed)\\r\\n    }\\r\\n    this.#hasProcessed = true\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  registerWithVueApp(vueApp) {\\r\\n    if (this.#hasProcessed === false) {\\r\\n      throw new Error('All components must be processed before being registered with the vueApp')\\r\\n    }\\r\\n\\r\\n    this.#processingReports.forEach((processingReport) => {\\r\\n      if (!processingReport.cmpDef.__libraryRoot) {\\r\\n        // Remove old cmpDef before adding new one\\r\\n        if (vueApp.component(processingReport.cmpDef.name) && vueApp?._context?.components) {\\r\\n          delete vueApp._context.components[processingReport.cmpDef.name]\\r\\n        }\\r\\n        vueApp.component(processingReport.cmpDef.name, processingReport.cmpDef)\\r\\n      }\\r\\n    })\\r\\n\\r\\n    return vueApp\\r\\n  }\\r\\n\\r\\n  gatherAllProcessedStyles() {\\r\\n    return this.#processingReports.map((x) => x.cmpDef.__processedStyles)\\r\\n  }\\r\\n\\r\\n  static Validate(cmpDef) {\\r\\n    if (isBlank(cmpDef)) {\\r\\n      throw new ComponentValidationException('Component definition is empty', cmpDef)\\r\\n    }\\r\\n    if (isBlank(toStr(cmpDef.name))) {\\r\\n      throw new ComponentValidationException(`Component needs 'name' key of type String`, cmpDef)\\r\\n    }\\r\\n    /* if (isBlank(toStr(cmpDef.template))) {\\r\\n      throw new ComponentValidationException(\\r\\n        `Component needs 'template' key of type String`,\\r\\n        cmpDef\\r\\n      )\\r\\n    } */\\r\\n    return cmpDef\\r\\n  }\\r\\n\\r\\n  async #processSingle(cmpDef) {\\r\\n    let { css, didProcess: didProcessCss } = this.#processCss(cmpDef)\\r\\n    let { scss, didProcess: didProcessScss } = await this.#processScss(cmpDef)\\r\\n    let { template, didProcess: didProcessTemplate } = this.#processTemplate(cmpDef)\\r\\n\\r\\n    if (didProcessCss) {\\r\\n      delete cmpDef.css\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    if (didProcessScss) {\\r\\n      delete cmpDef.scss\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    let processedMergedStyles = [css, scss].join('\\\\n\\\\n')\\r\\n    if (didProcessScss || didProcessCss) {\\r\\n      cmpDef.__processedStyles = processedMergedStyles\\r\\n    }\\r\\n\\r\\n    if (didProcessTemplate) {\\r\\n      cmpDef.template = template\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cmpDef,\\r\\n      results: {\\r\\n        css,\\r\\n        scss,\\r\\n        styles: processedMergedStyles,\\r\\n        template,\\r\\n        didProcessCss,\\r\\n        didProcessScss,\\r\\n        didProcessTemplate,\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #processCss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let css = [cmpDef.css, cmpDef.style].find((x) => !isBlank(x))\\r\\n\\r\\n    if (css) {\\r\\n      try {\\r\\n        css = this.#performTokenReplacements(css, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        css = ''\\r\\n        throw new ProcessingException('CSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { css: toStr(css), didProcess }\\r\\n  }\\r\\n\\r\\n  async #processScss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let scss = ''\\r\\n\\r\\n    scss = [cmpDef.scss, cmpDef.sass].find((x) => !isBlank(x))\\r\\n    if (scss) {\\r\\n      scss = this.#performTokenReplacements(scss, this.#appConfig.appId, cmpDef.name)\\r\\n      scss = `${this.#scssResources}\\\\n${scss}`\\r\\n      try {\\r\\n        scss = await this.#Sass.compileAsync(scss, {})\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        scss = ''\\r\\n        throw new ProcessingException('SCSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { scss: toStr(scss), didProcess }\\r\\n  }\\r\\n\\r\\n  #processTemplate(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let template = toStr(cmpDef.template)\\r\\n\\r\\n    if (!isBlank(template)) {\\r\\n      try {\\r\\n        template = this.#performTokenReplacements(template, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        template = ''\\r\\n        throw new ProcessingException('Template', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { template: toStr(template), didProcess }\\r\\n  }\\r\\n\\r\\n  #performTokenReplacements(value, appId, componentName) {\\r\\n    if (!lodash.isString(value)) return value\\r\\n    value = value.replaceAll(ReplacementTokens.appId, appId)\\r\\n    value = value.replaceAll(ReplacementTokens.componentName, componentName)\\r\\n    return value\\r\\n  }\\r\\n\\r\\n  get processedLibraryRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__libraryRoot === true).cmpDef\\r\\n  }\\r\\n\\r\\n  get processedConsumerRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__consumerRoot === true).cmpDef\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/2-events-and-communication.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, Vue } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nclass Utils {\\r\\n  static isUndefined(x) {\\r\\n    return x === undefined\\r\\n  }\\r\\n  static pick(o, props) {\\r\\n    let x = {}\\r\\n    props.forEach((k) => {\\r\\n      x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omit(o, props) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (props.indexOf(k) === -1) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omitBy(o, pred) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (!pred(o[k])) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  // custom defaults function suited to our specific purpose\\r\\n  static defaults(o, ...sources) {\\r\\n    sources.forEach((s) => {\\r\\n      Object.keys(s).forEach((k) => {\\r\\n        if (this.isUndefined(o[k]) || o[k] === '') o[k] = s[k]\\r\\n      })\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\\r\\nclass VueScriptX {\\r\\n  constructor() {\\r\\n    this.installed = false\\r\\n    this.promise = Promise.resolve()\\r\\n    this.loaded = {}\\r\\n    this.props = ['unload', 'src', 'type', 'async', 'integrity', 'text', 'crossorigin']\\r\\n  }\\r\\n  install(app) {\\r\\n    app.config.globalProperties.$scriptx = this\\r\\n    let self = this\\r\\n    if (self.installed) return\\r\\n    app.component('scriptx', {\\r\\n      props: self.props,\\r\\n      // Uses render method with <slot>s, see: https://v3.vuejs.org/guide/render-function.html\\r\\n      render() {\\r\\n        const { h } = Vue()\\r\\n        return h(\\r\\n          'div',\\r\\n          { style: 'display:none' },\\r\\n          this.$slots.default ? this.$slots.default() : undefined\\r\\n        )\\r\\n      },\\r\\n      mounted() {\\r\\n        let parent = this.$el.parentElement\\r\\n        if (!this.src) {\\r\\n          self.promise = self.promise.then(() => {\\r\\n            let script = doc.createElement('script')\\r\\n            let el = this.$el.innerHTML\\r\\n            el = el.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&')\\r\\n            script.type = 'text/javascript'\\r\\n            script.appendChild(doc.createTextNode(el))\\r\\n            parent.appendChild(script)\\r\\n            this.$emit('loaded') // any other proper way to do this or emit error?\\r\\n          })\\r\\n        } else {\\r\\n          let opts = Utils.omitBy(Utils.pick(this, self.props), Utils.isUndefined)\\r\\n          opts.parent = parent\\r\\n          // this syntax results in an implicit return\\r\\n          let load = () => {\\r\\n            self.load(this.src, opts).then(\\r\\n              () => this.$emit('loaded'),\\r\\n              (err) => this.$emit('error', err)\\r\\n            )\\r\\n          }\\r\\n          if (Utils.isUndefined(this.async) || this.async === 'false')\\r\\n            self.promise = self.promise.then(load)\\r\\n          // serialize execution\\r\\n          else load() // inject immediately\\r\\n        }\\r\\n        this.$nextTick(() => {\\r\\n          this.$el.parentElement.removeChild(this.$el)\\r\\n          // NOTE: this.$el.remove() may be used, but IE sucks, see: https://github.com/taoeffect/vue-script2/pull/17\\r\\n        })\\r\\n      },\\r\\n      unmounted() {\\r\\n        if (this.unload) {\\r\\n          new Function(this.unload)() // eslint-disable-line\\r\\n          delete self.loaded[this.src]\\r\\n        }\\r\\n      },\\r\\n    })\\r\\n    self.installed = true\\r\\n  }\\r\\n  load(src, opts = { parent: doc.head }) {\\r\\n    if (!this.loaded[src]) {\\r\\n      this.loaded[src] = new Promise((resolve, reject) => {\\r\\n        let script = doc.createElement('script')\\r\\n        // omit the special options that VueScriptX supports\\r\\n        Utils.defaults(script, Utils.omit(opts, ['unload', 'parent']), { type: 'text/javascript' })\\r\\n        // async may not be used with 'doc.write'\\r\\n        script.async = false\\r\\n        script.src = src\\r\\n        // crossorigin in HTML and crossOrigin in the DOM per HTML spec\\r\\n        if (opts.crossorigin) {\\r\\n          script.crossOrigin = opts.crossorigin\\r\\n        }\\r\\n        // handle onload and onerror\\r\\n        script.onload = () => resolve(src)\\r\\n        script.onerror = () => reject(new Error(src))\\r\\n        opts.parent.appendChild(script)\\r\\n      })\\r\\n    }\\r\\n    return this.loaded[src]\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default new VueScriptX()\",\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/3-connecting-with-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Mitt, Vue, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-consumer-root',\\r\\n  emits: ['consumer-root-mounted', 'consumer-root-unmount-requested', 'root-shutdown-requested'],\\r\\n  props: {\\r\\n    consumerRootDef: {\\r\\n      type: Object,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n\\r\\n    return {\\r\\n      private: {\\r\\n        bus,\\r\\n        consumerRootMount: null,\\r\\n      },\\r\\n      appStore: {},\\r\\n      appListen: bus.on,\\r\\n      appSend: this.appSendWrapper,\\r\\n      appShutdown: this.appShutdownWrapper,\\r\\n      rootShutdown: this.rootShutdownWrapper,\\r\\n    }\\r\\n  },\\r\\n  provide() {\\r\\n    const { reactivePick } = VueUse()\\r\\n    return reactivePick(\\r\\n      this.$data,\\r\\n      'appStore',\\r\\n      'appListen',\\r\\n      'appSend',\\r\\n      'appShutdown',\\r\\n      'rootShutdown'\\r\\n    )\\r\\n  },\\r\\n  methods: {\\r\\n    appSendWrapper(event, data) {\\r\\n      switch (event) {\\r\\n        default:\\r\\n          this.private.bus.emit(event, data)\\r\\n          break\\r\\n      }\\r\\n    },\\r\\n    appShutdownWrapper() {\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        throw new Error('Tried to shutdown a null app root', this.private.consumerRootMount)\\r\\n      } else {\\r\\n        this.$emit(\\r\\n          'consumer-root-unmount-requested',\\r\\n          this.private.consumerRootMount.$options.__uuid\\r\\n        )\\r\\n      }\\r\\n    },\\r\\n    rootShutdownWrapper() {\\r\\n      this.$emit('root-shutdown-requested')\\r\\n    },\\r\\n    consumerRootMounted(vnode) {\\r\\n      this.private.consumerRootMount = vnode?.component?.ctx\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        console.debug(`bb-vue: App root is null for ${this.consumerRootDef.__uuid}`)\\r\\n      }\\r\\n      this.$emit('consumer-root-mounted', this.private.consumerRootMount)\\r\\n    },\\r\\n  },\\r\\n  render() {\\r\\n    const { h } = Vue()\\r\\n    return h(\\r\\n      'section',\\r\\n      { 'bbv-foreground': true },\\r\\n      h(this.consumerRootDef, {\\r\\n        onVnodeMounted: this.consumerRootMounted,\\r\\n      })\\r\\n    )\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-button',\\r\\n  template: html`\\r\\n    <button\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ icon, small }\\\"\\r\\n      :tabindex=\\\"noFocus === false ? undefined : '-1'\\\"\\r\\n    >\\r\\n      <slot />\\r\\n    </button>\\r\\n  `,\\r\\n  props: {\\r\\n    icon: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    small: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    noFocus: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      font-family: inherit;\\r\\n      font-size: inherit;\\r\\n      padding: 8px;\\r\\n      cursor: pointer;\\r\\n      border: none;\\r\\n      border-radius: 2px;\\r\\n      color: var(--bbvButtonFgColor);\\r\\n      background-color: var(--bbvButtonBgColor);\\r\\n      margin: 0;\\r\\n      transition: color 0.15s, background-color 0.3s;\\r\\n\\r\\n      &:hover {\\r\\n        color: var(--bbvButtonHoverFgColor);\\r\\n        background-color: var(--bbvButtonHoverBgColor);\\r\\n      }\\r\\n\\r\\n      &[disabled]:hover {\\r\\n        background-color: var(--bbvButtonBgColor);\\r\\n        cursor: not-allowed;\\r\\n      }\\r\\n\\r\\n      &.small {\\r\\n        padding: 6px;\\r\\n        font-size: 12px;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n\\r\\n      &.icon {\\r\\n        padding: 2px;\\r\\n        line-height: 1.5;\\r\\n      }\\r\\n\\r\\n      & > code {\\r\\n        padding: 4px 3px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        border-radius: 4px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getClosestCrm, html, css, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\nimport useDraggableWin from '/bitpacks/bb-vue/components/concerns/useDraggableWin.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win',\\r\\n  template: html`\\r\\n    <div\\r\\n      ref=\\\"thisWin\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ shouldDisplay, isDragging, isCollapsed: draggable.isCollapsed }\\\"\\r\\n      :style=\\\"style\\\"\\r\\n      @pointerdown=\\\"bringToFront\\\"\\r\\n      @keydown.stop\\r\\n    >\\r\\n      <div class=\\\"win_titlebar\\\" ref=\\\"dragHandle\\\">\\r\\n        <div class=\\\"win_title\\\">{{ title }}<slot name=\\\"title\\\" /></div>\\r\\n        <template v-if=\\\"canClose || canCollapse\\\">\\r\\n          <div class=\\\"win_controls\\\" ref=\\\"winControls\\\">\\r\\n            <bbv-button class=\\\"win_collapse\\\" @click=\\\"toggleCollapse\\\">\\r\\n              <span v-if=\\\"draggable.isCollapsed\\\">🔽</span>\\r\\n              <span v-else>🔼</span>\\r\\n            </bbv-button>\\r\\n            <bbv-button class=\\\"win_close\\\" @click=\\\"close\\\">❎</bbv-button>\\r\\n          </div>\\r\\n        </template>\\r\\n      </div>\\r\\n      <div class=\\\"win_content\\\" :class=\\\"{ noPad: noPad !== false, noScroll: noScroll !== false }\\\">\\r\\n        <slot name=\\\"default\\\"></slot>\\r\\n      </div>\\r\\n      <div class=\\\"win_actions\\\">\\r\\n        <slot name=\\\"actions\\\"></slot>\\r\\n      </div>\\r\\n      <!-- Hack to disable selection on other parts of document while dragging windows -->\\r\\n      <template v-if=\\\"isDragging\\\">\\r\\n        <component is=\\\"style\\\" type=\\\"text/css\\\"> body *::selection { all: inherit; } </component>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  emits: ['open', 'close', 'collapse'],\\r\\n  props: {\\r\\n    title: {\\r\\n      type: String,\\r\\n      default: '',\\r\\n    },\\r\\n    startOpen: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    startPosition: {\\r\\n      type: Object,\\r\\n    },\\r\\n    startWidth: {\\r\\n      type: String,\\r\\n    },\\r\\n    startHeight: {\\r\\n      type: String,\\r\\n    },\\r\\n    canClose: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    canCollapse: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    noPad: {\\r\\n      default: false,\\r\\n    },\\r\\n    noScroll: {\\r\\n      default: false,\\r\\n    },\\r\\n    trayHide: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    trayTitle: {\\r\\n      type: String,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      uuid: crypto.randomUUID(),\\r\\n      owner: null,\\r\\n      draggable: {\\r\\n        savedHeight: 0,\\r\\n        isCollapsed: false,\\r\\n      },\\r\\n      stackingIndex: 1,\\r\\n      winState: WinStates.closed,\\r\\n      shouldDisplay: false,\\r\\n      hasOpened: false,\\r\\n      WinStates,\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    async winState(newVal, oldVal) {\\r\\n      if (newVal == WinStates.open && oldVal == WinStates.closed) {\\r\\n        // Position window on first open\\r\\n        if (this.hasOpened === false) {\\r\\n          this.hasOpened = true\\r\\n          useDraggableWin(this.draggable, {\\r\\n            win: this,\\r\\n            winManager: this.internals.winManager,\\r\\n            dragHandleRef: this.$refs.dragHandle,\\r\\n            dragIgnoreRef: this.$refs.winControls,\\r\\n            draggableRef: this.$refs.thisWin,\\r\\n            startPosition: this.$props.startPosition,\\r\\n          })\\r\\n        }\\r\\n\\r\\n        // Lag win opens just a bit to ensure CSS transitions are applied\\r\\n        await this.$nextTick()\\r\\n        this.shouldDisplay = true\\r\\n        this.bringToFront()\\r\\n      } else if (newVal == WinStates.closed) {\\r\\n        this.shouldDisplay = false\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    style() {\\r\\n      const collapsedOverrides = {\\r\\n        ...this.draggable.style,\\r\\n        height: 'auto',\\r\\n        minWidth: undefined,\\r\\n        minHeight: undefined,\\r\\n      }\\r\\n\\r\\n      let draggableStyles = this.draggable.isCollapsed ? collapsedOverrides : this.draggable.style\\r\\n      if (this.draggable.savedHeight !== 0 && !this.draggable.isCollapsed) {\\r\\n        draggableStyles.height = this.draggable.savedHeight\\r\\n        this.draggable.savedHeight = 0\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        width: this.$props.startWidth,\\r\\n        height: this.$props.startHeight,\\r\\n        zIndex: this.stackingIndex,\\r\\n        ...draggableStyles,\\r\\n      }\\r\\n    },\\r\\n    isDragging() {\\r\\n      return this.draggable.isDragging\\r\\n    },\\r\\n  },\\r\\n  created() {\\r\\n    this.owner = getClosestCrm(this)\\r\\n  },\\r\\n  async mounted() {\\r\\n    this.internals.winManager.addWin(this)\\r\\n    if (this.$props.startOpen) {\\r\\n      this.winState = WinStates.open\\r\\n    }\\r\\n  },\\r\\n  beforeUnmount() {\\r\\n    this.internals.winManager.removeWin(this)\\r\\n  },\\r\\n  methods: {\\r\\n    async open() {\\r\\n      if (this.winState == WinStates.open) return\\r\\n      this.winState = WinStates.open\\r\\n      await sleep(200)\\r\\n      this.$emit('open', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    async close() {\\r\\n      if (this.winState == WinStates.closed) return\\r\\n      this.winState = WinStates.closed\\r\\n      await sleep(200)\\r\\n      this.$emit('close', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    toggleCollapse() {\\r\\n      if (this.draggable.isCollapsed === false) {\\r\\n        this.draggable.savedHeight = this.draggable.style.height\\r\\n      }\\r\\n      this.draggable.isCollapsed = !this.draggable.isCollapsed\\r\\n      this.$emit('collapse', { winMount: this, isCollapsed: this.draggable.isCollapsed })\\r\\n    },\\r\\n    bringToFront(event) {\\r\\n      if (event && event.path.some((x) => x == this.$refs.winControls)) return\\r\\n      this.internals.winManager.bringToFront(this)\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n\\r\\n      display: flex;\\r\\n      flex-direction: column;\\r\\n\\r\\n      resize: both;\\r\\n      min-width: 250px;\\r\\n      min-height: 250px;\\r\\n\\r\\n      overflow: hidden;\\r\\n      border: 2px solid var(--bbvBorderColor);\\r\\n      border-radius: 10px;\\r\\n\\r\\n      background-color: var(--bbvAppInnerBgColor);\\r\\n      box-shadow: inset 0px 0px 70px 0px var(--bbvBoxShadowColor1),\\r\\n        0px 0px 20px 0px var(--bbvBoxShadowColor2);\\r\\n\\r\\n      transition: opacity 0.2s ease-out, transform 0.2s ease-out;\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transform: translateY(25px);\\r\\n      }\\r\\n\\r\\n      &.isDragging {\\r\\n        opacity: 0.9;\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        min-height: 0;\\r\\n        resize: none;\\r\\n\\r\\n        .win_content {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .win_actions {\\r\\n          background-color: var(--bbvBoxShadowColor1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_titlebar {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        font-size: 12px;\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        user-select: none;\\r\\n        cursor: grab;\\r\\n      }\\r\\n\\r\\n      .win_title {\\r\\n        display: flex;\\r\\n        flex-grow: 1;\\r\\n        padding: 3px 15px 3px 7px;\\r\\n      }\\r\\n\\r\\n      .win_controls {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n        flex-grow: 0;\\r\\n        font-size: 14px;\\r\\n        cursor: auto;\\r\\n\\r\\n        .bbv-button {\\r\\n          margin: 3px;\\r\\n          padding: 2px;\\r\\n          padding-bottom: 4px;\\r\\n          border-radius: 5px;\\r\\n          border-radius: 0;\\r\\n          background-color: var(--bbvWinActionsBgColor);\\r\\n\\r\\n          &:last-child {\\r\\n            margin-right: 6px;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_content {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 25px 15px;\\r\\n        flex-grow: 1;\\r\\n        overflow-y: auto;\\r\\n        color: var(--bbvFontLightColor);\\r\\n\\r\\n        &.noPad {\\r\\n          padding: 0;\\r\\n        }\\r\\n\\r\\n        &:not(.noPad) > *:first-child {\\r\\n          margin-top: 0;\\r\\n          padding-top: 0;\\r\\n        }\\r\\n\\r\\n        &.noScroll {\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_actions {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        padding: 8px 15px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        font-size: 12px;\\r\\n\\r\\n        &:empty {\\r\\n          display: none;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  let bus = getGlobal('asciiBus')\\r\\n  if (!bus) {\\r\\n    throw new Error('Run the asciichart-ui.js script first!')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    bus.emit('asciiChartCollector', { value: (Math.random() - 0.5) * 10 })\\r\\n    await ns.sleep(50)\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-collector.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/1-adding-components.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, getGlobal, html, setGlobal, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// ascii dep\\r\\nimport asciichart from '/bitpacks/bb-vue/misc-examples/asciichart-lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'ascii-chart-app' },\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  name: 'ascii-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"ASCII Chart\\\" no-pad start-width=\\\"50%\\\">\\r\\n      <div class=\\\"chartBg\\\" @pointerenter=\\\"pauseEvents = true\\\" @pointerleave=\\\"pauseEvents = false\\\">\\r\\n        <pre class=\\\"chartDisplay\\\" ref=\\\"chartDisplay\\\">{{ this.chartOutput }}</pre>\\r\\n      </div>\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      bus: null,\\r\\n      chartHistory: [],\\r\\n      eventBuffer: [],\\r\\n      pauseEvents: false,\\r\\n    }\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    chartOutput() {\\r\\n      if (this.chartHistory.length < 1) return ''\\r\\n      return asciichart.plot(this.chartHistory)\\r\\n    },\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    pauseEvents(newVal) {\\r\\n      if (newVal !== true) {\\r\\n        this.$refs.chartDisplay?.scrollTo({ left: 0, behavior: 'smooth' })\\r\\n        this.flushBuffer()\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    this.bus = getGlobal('asciiBus')\\r\\n    if (!this.bus) {\\r\\n      this.bus = getGlobal('Mitt').createBus()\\r\\n      setGlobal('asciiBus', this.bus)\\r\\n    }\\r\\n    this.bus.on('asciiChartCollector', this.handleBusEvent)\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    handleBusEvent(data) {\\r\\n      if (this.pauseEvents) {\\r\\n        this.eventBuffer = [data, ...this.eventBuffer]\\r\\n      } else {\\r\\n        this.chartHistory = [data?.value, ...this.chartHistory]\\r\\n      }\\r\\n      if (this.chartHistory.length > 600) {\\r\\n        this.chartHistory.pop()\\r\\n      }\\r\\n    },\\r\\n    async flushBuffer() {\\r\\n      for (let i = this.eventBuffer.length - 1; i >= 0; i--) {\\r\\n        let entry = this.eventBuffer[i]\\r\\n        if (!entry) return\\r\\n        this.bus.emit('asciiChartCollector', entry)\\r\\n        this.eventBuffer.pop()\\r\\n        await sleep(10)\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      .win_content {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n\\r\\n      .chartBg {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        width: 100%;\\r\\n        min-height: 350px;\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        padding: 30px 0;\\r\\n      }\\r\\n\\r\\n      .chartDisplay {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        overflow: auto;\\r\\n        padding: 30px 0;\\r\\n        font-family: 'FreeMono';\\r\\n        cursor: default;\\r\\n        user-select: none;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const WinStates = Object.freeze({\\r\\n  open: 'open',\\r\\n  closed: 'closed',\\r\\n})\\r\\n\\r\\nexport const WinPositionStrategies = Object.freeze({\\r\\n  cascadeStack: 'cascadeStack',\\r\\n})\\r\\n\\r\\nexport const AppStates = Object.freeze({\\r\\n  hasWins: 'hasWins',\\r\\n  withoutWins: 'withoutWins',\\r\\n})\\r\\n\\r\\nexport const TrayItemTypes = Object.freeze({\\r\\n  winMount: 'winMount',\\r\\n  consumerRootMount: 'consumerRootMount',\\r\\n})\\r\\n\\r\\nexport const ComponentTiers = Object.freeze({\\r\\n  library: 'library',\\r\\n  consumer: 'consumer',\\r\\n})\",\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, lodash, Vue, VueUse, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default async function useDraggableWin(store, options = {}) {\\r\\n  const { reactive, watch } = Vue()\\r\\n  const { useDraggable, useElementBounding, until } = VueUse()\\r\\n\\r\\n  // Handle options + validations\\r\\n  let opts = reactive({\\r\\n    win: null,\\r\\n    winManager: null,\\r\\n    dragHandleRef: null,\\r\\n    draggableRef: null,\\r\\n    dragIgnoreRef: null,\\r\\n    startPosition: null,\\r\\n    constrain: true,\\r\\n    constrainPadding: 0,\\r\\n    ...lodash.omitBy(options, lodash.isNil),\\r\\n  })\\r\\n  if (!lodash.isObjectLike(store)) {\\r\\n    throw new Error('Must provide store as first arg')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.win)) {\\r\\n    throw new Error('Must provide win in options')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.winManager)) {\\r\\n    throw new Error('Must provide winManager in options')\\r\\n  }\\r\\n  if (!opts.dragHandleRef) {\\r\\n    throw new Error('Must provide dragHandleRef in options')\\r\\n  }\\r\\n  if (!opts.draggableRef) {\\r\\n    throw new Error('Must provide draggableRef in options')\\r\\n  }\\r\\n\\r\\n  // Fill provided store with initial state\\r\\n  store.isDragging = false\\r\\n  store.style = {}\\r\\n  store.fixedRoot = useElementBounding(doc.querySelector('[bbv-root]'))\\r\\n  store.draggableTarget = useElementBounding(opts.draggableRef)\\r\\n\\r\\n  // Helper to manually position draggable\\r\\n  const manuallyPositionDraggable = async ({ x, y }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.left = `${x}px`\\r\\n    ele.style.top = `${y}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n  const manuallySizeDraggable = async ({ width, height }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.width = `${width}px`\\r\\n    ele.style.height = `${height}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n\\r\\n  // Wait until draggableTarget is mounted, might be a better way?\\r\\n  await until(store.draggableTarget).toMatch((x) => x.width > 0)\\r\\n\\r\\n  // Sync minWidth / minHeight from CSS styles applied to window\\r\\n  store.minWidth = parseInt(win.getComputedStyle(opts.draggableRef).minWidth)\\r\\n  store.minHeight = parseInt(win.getComputedStyle(opts.draggableRef).minHeight)\\r\\n\\r\\n  // Set initial position - if none is provided - based on winManager recommendation\\r\\n  let initialPos = { x: 0, y: 0 }\\r\\n  if (opts.startPosition === null) {\\r\\n    initialPos = opts.winManager.getRecommendedPosition(opts.win)\\r\\n  } else {\\r\\n    initialPos = { x: opts.startPosition?.x ?? 0, y: opts.startPosition?.y ?? 0 }\\r\\n  }\\r\\n\\r\\n  // Do initial positioning of window\\r\\n  manuallyPositionDraggable(initialPos)\\r\\n\\r\\n  // Watch for position changes\\r\\n  store.isDragging = useDraggable(opts.dragHandleRef, {\\r\\n    initialValue: initialPos,\\r\\n    onMove: async (p) => manuallyPositionDraggable(p),\\r\\n    onStart: (_, e) => !e.path.some((x) => x == opts.dragIgnoreRef),\\r\\n  }).isDragging\\r\\n\\r\\n  // Watch for size changes\\r\\n  watch(store.draggableTarget, () => manuallySizeDraggable(store.draggableTarget), { deep: true })\\r\\n}\\r\\n\\r\\nasync function updateStore(ctx) {\\r\\n  const { reactive } = Vue()\\r\\n\\r\\n  let padding = ctx.opts.constrainPadding\\r\\n  let root = ctx.store.fixedRoot\\r\\n  let draggable = ctx.store.draggableTarget\\r\\n\\r\\n  let newSize = reactive({ width: draggable.width, height: draggable.height })\\r\\n  let newPos = reactive({ x: draggable.x, y: draggable.y })\\r\\n\\r\\n  // Clamp window size and position if desired\\r\\n  if (ctx.opts.constrain) {\\r\\n    const { useClamp } = VueUse()\\r\\n\\r\\n    newSize.width = useClamp(newSize.width, ctx.store.minWidth, root.width - padding * 2)\\r\\n    newSize.height = useClamp(\\r\\n      newSize.height,\\r\\n      ctx.store.isCollapsed ? 0 : ctx.store.minHeight,\\r\\n      root.height - padding * 2\\r\\n    )\\r\\n\\r\\n    newPos.x = useClamp(newPos.x, padding, root.width - newSize.width - padding)\\r\\n    newPos.y = useClamp(newPos.y, padding, root.bottom - newSize.height - padding)\\r\\n  }\\r\\n\\r\\n  // Update style object to be bound to draggableTarget in consumer template\\r\\n  ctx.store.style = {\\r\\n    left: `${newPos.x}px`,\\r\\n    top: `${newPos.y}px`,\\r\\n    width: `${newSize.width}px`,\\r\\n    height: `${newSize.height}px`,\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    // App one\\r\\n    // ---\\r\\n\\r\\n    let appOne = new AppFactory(ns)\\r\\n    const appOneHandleFn = await appOne.mount({\\r\\n      config: { id: 'app-one', showTips: false },\\r\\n      rootComponent: PrimaryAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-one booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then booting a second app...')\\r\\n\\r\\n    // App two\\r\\n    // ---\\r\\n\\r\\n    let appTwo = new AppFactory(ns)\\r\\n    const appTwoHandleFn = await appTwo.mount({\\r\\n      config: { id: 'app-two', showTips: false },\\r\\n      rootComponent: DifferentAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-two booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then logging mounted apps to debug console...')\\r\\n\\r\\n    // Retrieve references to both running apps using the handle / lookup functions\\r\\n    // returned from the mount() method calls earlier.\\r\\n    const [runningAppOne, runningAppTwo] = [appOneHandleFn(), appTwoHandleFn()]\\r\\n\\r\\n    // Display running app info in debug console / devtools (Debug -> Activate)\\r\\n    console.debug(runningAppOne)\\r\\n    console.debug(runningAppTwo)\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst PrimaryAppRoot = {\\r\\n  name: 'primary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <!--\\r\\n      Use the \\\"tray-hide\\\" prop to hide this window from the app tray\\r\\n    -->\\r\\n    <bbv-win\\r\\n      tray-hide\\r\\n      title=\\\"I'm hidden from the App Tray\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      start-width=\\\"20%\\\"\\r\\n      @close=\\\"appShutdown\\\"\\r\\n    >\\r\\n      <p>\\r\\n        This window doesn't appear in the app tray, and instead this window is configured to\\r\\n        shutdown the app where it's mounted when it's closed.\\r\\n      </p>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\nconst DifferentAppRoot = {\\r\\n  name: 'secondary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <main>\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win title=\\\"I've got a special title in the tray\\\" tray-title=\\\"🥇\\\" class=\\\"__CMP_NAME__\\\">\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win\\r\\n        title=\\\"I have a special title in the tray, too!\\\"\\r\\n        tray-title=\\\"🥈\\\"\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n      >\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n    </main>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/1-the-app-tray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//\\n//\\n// NOTE:\\n// Ideally some of these files would be in separate resource folders,\\n// but I've been running into circular reference issues in-game :verysadge:\\n//\\n//\\n\\n//\\n//\\n// CONSTANTS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Keys used for globalThis storage and lookup\\n */\\nexport const Keys = Object.freeze({\\n  libKey: 'bbVue',\\n  vueModuleKey: 'Vue',\\n  vueUseModuleKey: 'VueUse',\\n  mittModuleKey: 'Mitt',\\n  rootAppKey: 'rootApp',\\n  globalBusKey: 'rootBus',\\n})\\n\\n/**\\n * Tokens used when processing a consumer app style and template values\\n */\\nexport const ReplacementTokens = Object.freeze({\\n  appId: '__APP_ID__',\\n  componentName: '__CMP_NAME__',\\n})\\n\\n//\\n//\\n// GLOBALS MANAGEMENT /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\nexport const RootApp = {\\n  rootAttr: 'bbv-root',\\n  raw() {\\n    return getGlobal(Keys.rootAppKey)\\n  },\\n  instance() {\\n    return this.raw()?._instance\\n  },\\n  appDef() {\\n    return this.raw()?._component\\n  },\\n  component() {\\n    return this.instance()?.ctx\\n  },\\n  set(val) {\\n    return setGlobal(Keys.rootAppKey, val)\\n  },\\n  async cleanup() {\\n    await sleep(15)\\n    try {\\n      this.raw()?.unmount()\\n    } catch (error) {\\n      console.debug(\\\"bb-vue: Issue cleaning up AppRoot, but don't worry about it\\\")\\n    }\\n    await this.removeDom()\\n    deleteGlobal(Keys.rootAppKey)\\n    await sleep(15)\\n  },\\n  async removeDom() {\\n    await sleep(15)\\n    doc.querySelector(`[${this.rootAttr}]`)?.remove()\\n  },\\n  async addDom(appId) {\\n    doc.body.insertAdjacentHTML('afterbegin', html`<div id=\\\"${appId}\\\" bbv-root></div>`)\\n    await sleep(15)\\n  },\\n}\\n\\n/**\\n * Reference to window global\\n */\\nexport const win = globalThis['window']\\n\\n/**\\n * Reference to document global\\n */\\nexport const doc = globalThis['document']\\n\\n/**\\n * Reference to bundled lodash library\\n */\\nexport const lodash = win._\\n\\n/**\\n * Initialize globalThis storage\\n */\\nif (lodash.isObjectLike(win[Keys.libKey]) === false) {\\n  win[Keys.libKey] = {}\\n}\\n\\n/**\\n * Sets a value by key to internal library storage\\n * @param {String} key Path to set, utilizing `lodash.set`\\n * @param {any} value\\n * @returns {any} A reference to the value passed in, from the store\\n * * @see https://lodash.com/docs/4.17.15#set\\n */\\nexport function setGlobal(key, value) {\\n  lodash.set(win[Keys.libKey], key, value)\\n  return getGlobal(key)\\n}\\n\\n/**\\n * Retrieves a value by key from internal library storage\\n * @param {String} key Path to get, utilizing `lodash.get`\\n * @returns {any} Value from or undefined if not set\\n * @see https://lodash.com/docs/4.17.15#get\\n */\\nexport function getGlobal(key, defaultValue) {\\n  return lodash['get'](win[Keys.libKey], key, defaultValue)\\n}\\n\\n/**\\n * Deletes a global key from globalThis\\n * @param {String} key Property to destroy\\n * @returns {void}\\n */\\nexport function deleteGlobal(key) {\\n  delete win[Keys.libKey][key]\\n}\\n\\n/**\\n * Load the Vue library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Vue} An instance of Vue, or a falsy value indicating the library is not loaded\\n */\\nexport function Vue({ silent = false } = {}) {\\n  let vue = win[Keys.vueModuleKey]\\n  if (!vue && !silent)\\n    throw new Error('Vue is not loaded on window global; check VueLoader:Get for issues')\\n  return vue\\n}\\n\\n/**\\n * Load the VueUse library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {VueUse} An instance of VueUse, or a falsy value indicating the library is not loaded\\n */\\nexport function VueUse({ silent = false } = {}) {\\n  let vueUse = win[Keys.vueUseModuleKey]\\n  if (!vueUse && !silent)\\n    throw new Error('VueUse is not loaded on window global; check AppRoot:loadDeps for issues')\\n  return vueUse\\n}\\n\\n/**\\n * Load the Mitt library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Mitt} An instance of Mitt, or a falsy value indicating the library is not loaded\\n */\\nexport function Mitt({ silent = false } = {}) {\\n  let mitt = getGlobal('Mitt')\\n  if (!mitt && !silent)\\n    throw new Error('Mitt is not loaded on window global; check MittLoader:Get for issues')\\n  return mitt\\n}\\n\\n//\\n//\\n// EXCEPTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Processing exception, most often originating from SCSS compiler usage in `ComponentManager`.\\n * Signifies an issue when preparing components for injection into `bbVue.rootApp`\\n */\\nexport class ProcessingException {\\n  constructor(step, originalError) {\\n    this.step = step\\n    this.originalError = originalError\\n  }\\n\\n  toString() {\\n    return `ERROR: [ProcessingException] Failure during '${this.step}' processing\\\\n${\\n      this.originalError?.formatted || toJson(this.originalError)\\n    }`\\n  }\\n}\\n\\n/**\\n * Component validation exception thrown by `AppFactory`.\\n * Signifies an issue with components being provided to `AppFactory` by a consumer app definition.\\n */\\nexport class ComponentValidationException {\\n  constructor(message, cmpDef) {\\n    this.message = message\\n    this.componentDefinition = cmpDef\\n  }\\n\\n  toString() {\\n    return `ERROR: [ComponentValidationException] ${this.message}\\\\n${toJson(\\n      this.componentDefinition\\n    )}`\\n  }\\n}\\n\\n// APP TRAVERSAL /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Walk the Vue VNode tree and find the closest parent consumer root mount (CRM)\\n * @param {componentInstanceVm} startingVm\\n * The view-model / `this` binding from the component where the search originates\\n * @returns {crmInstanceVm | null} The closest CRM instance or null\\n */\\nexport function getClosestCrm(startingVm) {\\n  let consumerRoot = null\\n  let parent = startingVm.$parent\\n  while (parent && !consumerRoot) {\\n    if (parent.$options.__consumerRoot === true) {\\n      consumerRoot = parent\\n    }\\n    parent = parent.$parent\\n  }\\n  return consumerRoot\\n}\\n\\n// GENERAL FUNCTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Cleanup an error string\\n * @param {String} error Error string to cleanup\\n * @returns Removes odd internal delimiters and other noisy chars from a BitBurner error\\n */\\nexport function cleanupError(error) {\\n  return String(error)\\n    .replace('|DELIMITER|', '')\\n    .replaceAll('|DELIMITER|', ' » ')\\n    .replaceAll('<br>', '')\\n    .replaceAll('Stack:', '')\\n}\\n\\n/**\\n * Wait for ms then continue\\n * @param {Number} ms Millis to wait\\n * @returns {Promise<void>}\\n */\\nexport async function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(), ms)\\n  })\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function scss() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function css() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function html() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression; reconstructs provided template string with no changes\\n * @param {Array} strings\\n * @param  {...any} values\\n * @returns {String}\\n */\\nfunction templatePassthrough(strings, ...values) {\\n  let str = ''\\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '')\\n  })\\n  return str\\n}\\n\\n/**\\n * Attempts to convert a value to string using `lodash.toString`,\\n * and then trim the string with `lodash.trim`\\n * @param {any} value Value to coerce to string\\n * @returns {string} value\\n */\\nexport function toStr(value) {\\n  return lodash.trim(lodash.toString(value))\\n}\\n\\n/**\\n * Attempts to decern a given value's \\\"blankness\\\" via:\\n * - `lodash.isNil` and\\n * - `lodash.isEmpty`\\n * @param {any} value Value to be checked for blankness\\n * @returns {boolean} Is value blank\\n */\\nexport function isBlank(value) {\\n  if (lodash.isNil(value)) return true\\n  if (lodash.isString(value) && lodash.isEmpty(value)) return true\\n  return lodash.isEmpty(value)\\n}\\n\\n/**\\n * Attempt to convert an object to JSON via `JSON.stringify`, or fallback\\n * to a more robust JSON stringifier if needed\\n * @param {any} value\\n * @returns {String} result\\n */\\nexport function toJson(value) {\\n  try {\\n    return JSON.stringify(value, null, '  ')\\n  } catch (error) {\\n    try {\\n      return toJsonSafe(value, 4, 4, '  ')\\n    } catch (error) {\\n      return '[COULD NOT SERIALIZE] ' + value\\n    }\\n  }\\n}\\n\\n/**\\n * Attempt to convert a string to it's parsed JSON result\\n * @param {any} value\\n * @returns {any | null} resultOrNull\\n */\\nexport function fromJson(value) {\\n  try {\\n    return JSON.parse(value)\\n  } catch (error) {\\n    console.error(`bb-vue: Could not parse JSON string: ${value}`)\\n    return null\\n  }\\n}\\n\\n/**\\n * @param {String} value\\n */\\nexport function uppercaseFirstLetter(value) {\\n  return String(value).charAt(0).toUpperCase() + String(value).slice(1)\\n}\\n\\n/**\\n * Returns the JSON representation of an object.\\n *\\n * @param {value} object the object\\n * @param {number} objectMaxDepth for objects, the maximum number of times to recurse into descendants\\n * @param {number} arrayMaxLength for arrays, the maximum number of elements to enumerate\\n * @param {string} indent the string to use for indentation\\n * @return {string} the JSON representation\\n */\\nconst toJsonSafe = function (object, objectMaxDepth, arrayMaxLength, indent) {\\n  'use strict'\\n\\n  /**\\n   * Escapes control characters, quote characters, backslash characters and quotes the string.\\n   *\\n   * @param {string} string the string to quote\\n   * @returns {String} the quoted string\\n   */\\n  function quote(string) {\\n    escapable.lastIndex = 0\\n    var escaped\\n    if (escapable.test(string)) {\\n      escaped = string.replace(escapable, function (a) {\\n        var replacement = replacements[a]\\n        if (typeof replacement === 'string') return replacement\\n        // Pad the unicode representation with leading zeros, up to 4 characters.\\n        return '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\\n      })\\n    } else escaped = string\\n    return '\\\"' + escaped + '\\\"'\\n  }\\n\\n  /**\\n   * Returns the String representation of an object.\\n   *\\n   * Based on <a href=\\\"https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js\\\">https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js</a>\\n   *\\n   * @param {string} path the fully-qualified path of value in the JSON object\\n   * @param {type} value the value of the property\\n   * @param {string} cumulativeIndent the indentation to apply at this level\\n   * @param {number} depth the current recursion depth\\n   * @return {String} the JSON representation of the object, or \\\"null\\\" for values that aren't valid\\n   * in JSON (e.g. infinite numbers).\\n   */\\n  function toString(path, value, cumulativeIndent, depth) {\\n    switch (typeof value) {\\n      case 'string':\\n        return quote(value)\\n      case 'number': {\\n        // JSON numbers must be finite\\n        if (isFinite(value)) return String(value)\\n        return 'null'\\n      }\\n      case 'boolean':\\n        return String(value)\\n      case 'object': {\\n        if (!value) return 'null'\\n        var valueIndex = values.indexOf(value)\\n        if (valueIndex !== -1) return 'Reference => ' + paths[valueIndex]\\n        values.push(value)\\n        paths.push(path)\\n        if (depth > objectMaxDepth) return '...'\\n\\n        // Make an array to hold the partial results of stringifying this object value.\\n        var partial = []\\n\\n        // Is the value an array?\\n        var i\\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\\n          // The value is an array. Stringify every element\\n          var length = Math.min(value.length, arrayMaxLength)\\n\\n          // Whether a property has one or multiple values, they should be treated as the same\\n          // object depth. As such, we do not increment the object depth when recursing into an\\n          // array.\\n          for (i = 0; i < length; ++i) {\\n            partial[i] = toString(\\n              path + '.' + i,\\n              value[i],\\n              cumulativeIndent + indent,\\n              depth,\\n              arrayMaxLength\\n            )\\n          }\\n          if (i < value.length) {\\n            // arrayMaxLength reached\\n            partial[i] = '...'\\n          }\\n          return '\\\\n' + cumulativeIndent + '[' + partial.join(', ') + '\\\\n' + cumulativeIndent + ']'\\n        }\\n\\n        // Otherwise, iterate through all of the keys in the object.\\n        for (var subKey in value) {\\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\\n            var subValue\\n            try {\\n              subValue = toString(\\n                path + '.' + subKey,\\n                value[subKey],\\n                cumulativeIndent + indent,\\n                depth + 1\\n              )\\n              partial.push(quote(subKey) + ': ' + subValue)\\n            } catch (e) {\\n              // this try/catch due to forbidden accessors on some objects\\n              if (e.message) subKey = e.message\\n              else subKey = 'access denied'\\n            }\\n          }\\n        }\\n        var result = '\\\\n' + cumulativeIndent + '{\\\\n'\\n        for (i = 0; i < partial.length; ++i)\\n          result += cumulativeIndent + indent + partial[i] + ',\\\\n'\\n        if (partial.length > 0) {\\n          // Remove trailing comma\\n          result = result.slice(0, result.length - 2) + '\\\\n'\\n        }\\n        result += cumulativeIndent + '}'\\n        return result\\n      }\\n      default:\\n        return 'null'\\n    }\\n  }\\n\\n  if (indent === undefined) indent = '  '\\n  if (objectMaxDepth === undefined) objectMaxDepth = 0\\n  if (arrayMaxLength === undefined) arrayMaxLength = 50\\n  // Matches characters that must be escaped\\n\\n  // prettier-ignore\\n  // eslint-disable-next-line\\n  var escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g\\n\\n  // The replacement characters\\n  var replacements = {\\n    '\\\\b': '\\\\\\\\b',\\n    '\\\\t': '\\\\\\\\t',\\n    '\\\\n': '\\\\\\\\n',\\n    '\\\\f': '\\\\\\\\f',\\n    '\\\\r': '\\\\\\\\r',\\n    '\\\"': '\\\\\\\\\\\"',\\n    '\\\\\\\\': '\\\\\\\\\\\\\\\\',\\n  }\\n  // A list of all the objects that were seen (used to avoid recursion)\\n  var values = []\\n  // The path of an object in the JSON object, with indexes corresponding to entries in the\\n  // \\\"values\\\" variable.\\n  var paths = []\\n  return toString('root', object, '', 0)\\n}\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces)\\n  return num >= 0 ? '$' + numberShort : numberShort.replace('-', '-$')\\n}\\n\\nconst symbols = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n', 'e33', 'e36', 'e39']\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  for (\\n    var i = 0, sign = Math.sign(num), num = Math.abs(num);\\n    num >= 1000 && i < symbols.length;\\n    i++\\n  )\\n    num /= 1000\\n  return (\\n    (sign < 0 ? '-' : '') +\\n    num.toFixed(\\n      Math.max(\\n        0,\\n        Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num)))\\n      )\\n    ) +\\n    symbols[i]\\n  )\\n}\\n\\n/**\\n * Elapsed time between two dates, or a number of seconds\\n * @param {number} timeStart Defaults to 0\\n * @param {number} timeEnd Defaults to 0\\n * @returns {string} Elapsed time in human-friendly format\\n */\\nexport function timeDiff(timeStart = 0, timeEnd = 0) {\\n  let diff\\n  if (timeStart && timeEnd) {\\n    diff = timeEnd - timeStart\\n  } else {\\n    diff = timeStart * 1000\\n  }\\n  var hours = Math.floor(diff / (1000 * 60 * 60))\\n  diff -= hours * (1000 * 60 * 60)\\n  var mins = Math.floor(diff / (1000 * 60))\\n  diff -= mins * (1000 * 60)\\n  var secs = Math.floor(diff / 1000)\\n  diff -= secs * 1000\\n  var ms = Math.floor(diff)\\n  diff -= ms\\n  let toRet = []\\n  if (hours > 0) {\\n    toRet.push(`${hours}h`)\\n  }\\n  if (mins > 0) {\\n    toRet.push(`${mins}m`)\\n  }\\n  if (secs > 0) {\\n    toRet.push(`${secs}s`)\\n  }\\n  if (ms > 0 && !secs) {\\n    toRet.push(`${ms}ms`)\\n  }\\n  return toRet.join(' ')\\n}\",\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/4-sending-data-from-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, toStr, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class SassLoader {\\r\\n  static #moduleGlobalKey = 'Sass'\\r\\n\\r\\n  static async Fetch() {\\r\\n    let module = this.#getModule()\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      await this.#loadSassModule()\\r\\n      module = this.#getModule()\\r\\n    }\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      throw new Error(`SassLoader could not load module in Fetch()`)\\r\\n    }\\r\\n\\r\\n    return this.#wrapModule(module)\\r\\n  }\\r\\n\\r\\n  static #loadSassModule() {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      this.#doDefineHack()\\r\\n\\r\\n      const onScriptLoad = (() => {\\r\\n        // console.log('sass:load')\\r\\n        const module = this.#getModule()\\r\\n        if (this.#isValidModule(module)) {\\r\\n          resolve(module)\\r\\n          // console.log('sass:loadResolve')\\r\\n        } else {\\r\\n          reject()\\r\\n          console.error('bb-vue: sass:loadReject', this)\\r\\n          throw new Error('SassLoader could not load module in #loadSassModule()')\\r\\n        }\\r\\n        this.#undoDefineHack()\\r\\n      }).bind(this)\\r\\n\\r\\n      let sassJSScript = doc.createElement('script')\\r\\n      sassJSScript.type = 'text/javascript'\\r\\n      sassJSScript.src = 'https://cdn.jsdelivr.net/npm/sass.js@0.11.1/dist/sass.sync.js'\\r\\n      sassJSScript.onload = onScriptLoad\\r\\n      sassJSScript.onerror = reject\\r\\n\\r\\n      doc.head.appendChild(sassJSScript)\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static async #compileAsyncWrapper(module, rawScss, scssCompilerOptions, ...args) {\\r\\n    let compilerOptionsMerged = Object.assign({ style: module.style.expanded }, scssCompilerOptions)\\r\\n    return new Promise((resolve, reject) => {\\r\\n      // console.log('compile', rawScss)\\r\\n      module.compile(\\r\\n        rawScss,\\r\\n        compilerOptionsMerged,\\r\\n        (compileResult) => {\\r\\n          if (compileResult.status !== 0) {\\r\\n            reject(compileResult)\\r\\n            // console.log('compile:reject', compileResult)\\r\\n          } else {\\r\\n            resolve(toStr(compileResult.text))\\r\\n            // console.log('compile:resolve', compileResult.text)\\r\\n          }\\r\\n        },\\r\\n        ...args\\r\\n      )\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static #getModule() {\\r\\n    return win[this.#moduleGlobalKey]\\r\\n  }\\r\\n\\r\\n  static #wrapModule(module) {\\r\\n    if (!this.#isValidModule(module))\\r\\n      throw new Error('SassLoader cannot wrap invalid module', module)\\r\\n    module.compileAsync = async (rawCss, scssOptions, ...args) =>\\r\\n      await this.#compileAsyncWrapper(module, rawCss, scssOptions, ...args)\\r\\n    return module\\r\\n  }\\r\\n\\r\\n  static #isValidModule(module) {\\r\\n    return module && module.compile\\r\\n  }\\r\\n\\r\\n  static #doDefineHack() {\\r\\n    if (win.define) {\\r\\n      win._defineBak = win.define\\r\\n      win.define = undefined\\r\\n    }\\r\\n  }\\r\\n\\r\\n  static #undoDefineHack() {\\r\\n    if (win._defineBak) {\\r\\n      win.define = win._defineBak\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr, toJson, RootApp, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport ComponentManager from '/bitpacks/bb-vue/ComponentManager.js';\\r\\nimport MittLoader from '/bitpacks/bb-vue/MittLoader.js';\\r\\nimport SassLoader from '/bitpacks/bb-vue/SassLoader.js';\\r\\nimport VueLoader from '/bitpacks/bb-vue/VueLoader.js';\\r\\n\\r\\nimport ScriptX from '/bitpacks/bb-vue/components/internal/ScriptX.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { default as AppRoot, ComponentLibrary } from '/bitpacks/bb-vue/components/internal/AppRoot.js';\\r\\n\\r\\nconst CreateOrGetRootVueApp = async (Vue, Sass, forceReload = false) => {\\r\\n  const rootConfig = {\\r\\n    appId: 'bb-vue-root',\\r\\n  }\\r\\n\\r\\n  // console.time('CreateOrGetRootVueApp')\\r\\n\\r\\n  if (forceReload == true || (RootApp.raw() && !RootApp.instance())) {\\r\\n    console.debug(`bb-vue: AppFactory found remnants of previous app, doing cleanup`)\\r\\n    await RootApp.cleanup()\\r\\n  } else if (RootApp.raw() && RootApp.instance()) {\\r\\n    console.debug(`bb-vue: AppFactory found existing app, returning instance`)\\r\\n    return RootApp.raw()\\r\\n  }\\r\\n\\r\\n  console.debug(`bb-vue: AppFactory building new Vue app`)\\r\\n\\r\\n  let componentManager = new ComponentManager(rootConfig, Sass, AppRoot.scssResources)\\r\\n  componentManager.add(AppRoot, ...ComponentLibrary)\\r\\n  await componentManager.processAll()\\r\\n\\r\\n  let processedLibraryRoot = {\\r\\n    ...componentManager.processedLibraryRoot,\\r\\n    __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n  }\\r\\n\\r\\n  let rootApp\\r\\n  rootApp = Vue.createApp(processedLibraryRoot)\\r\\n  rootApp.use(ScriptX)\\r\\n  componentManager.registerWithVueApp(rootApp)\\r\\n\\r\\n  await RootApp.addDom(rootConfig.appId)\\r\\n  rootApp.mount(`#${rootConfig.appId}`)\\r\\n  RootApp.set(rootApp)\\r\\n\\r\\n  // console.timeEnd('CreateOrGetRootVueApp')\\r\\n\\r\\n  return rootApp\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nexport default class AppFactory {\\r\\n  #ns\\r\\n  #appConfig\\r\\n  #rootComponent\\r\\n  #componentsInQueue = new Set()\\r\\n  #mounted = false\\r\\n\\r\\n  constructor(ns) {\\r\\n    if (isBlank(ns) || !(ns.tprint || ns.sleep || ns.exit)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique reference to the ns object! ` +\\r\\n          `Try sending the ns object from the script where you're creating this AppFactory.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    this.#ns = ns\\r\\n    this.#mounted = false\\r\\n    this.#componentsInQueue = new Set()\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async mount({ config = {}, components = [], rootComponent = {} }) {\\r\\n    this.#configure(config)\\r\\n    this.#addComponents(components)\\r\\n    this.#setRootComponent(rootComponent)\\r\\n\\r\\n    this.#validateStart()\\r\\n    this.#validateOneMount()\\r\\n\\r\\n    // console.time('AppFactory:start')\\r\\n\\r\\n    const { Vue, Sass } = await this.#runLoaders()\\r\\n\\r\\n    // Mount root app\\r\\n    let rootVueApp = await CreateOrGetRootVueApp(Vue, Sass, this.#appConfig.forceReload)\\r\\n\\r\\n    let componentManager = new ComponentManager(\\r\\n      this.#appConfig,\\r\\n      Sass,\\r\\n      [RootApp.appDef().scssResources, this.#appConfig.scssResources].join('\\\\n\\\\n')\\r\\n    )\\r\\n    componentManager.add(...this.#componentsInQueue)\\r\\n    await componentManager.processAll()\\r\\n    componentManager.registerWithVueApp(rootVueApp)\\r\\n\\r\\n    let processedConsumerRoot = {\\r\\n      ...componentManager.processedConsumerRoot,\\r\\n      __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n    }\\r\\n\\r\\n    let consumerAppHandleFn = addConsumerRootDef(this.#ns, processedConsumerRoot)\\r\\n\\r\\n    this.#mounted = true\\r\\n\\r\\n    if (this.#appConfig.showTips) {\\r\\n      this.#ns.tprint(\\r\\n        `\\\\n\\\\n📦 Your bb-vue app (#${\\r\\n          this.#appConfig.appId\\r\\n        }) is now mounted!\\\\n\\\\n🧰 Use the Debug -> Activate menu to open the BitBurner Developer Tools.\\\\n👓 In the Elements tab, you should find your app at the top of the <body> tag.\\\\n\\\\n🎉 Have fun!\\\\n\\\\nP.S. If you're sick of seeing this message, add \\\\`showTips: false\\\\` to your app's configuration object.\\\\n\\\\n`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    // console.timeEnd('AppFactory:start')\\r\\n\\r\\n    return consumerAppHandleFn\\r\\n  }\\r\\n\\r\\n  #configure(instanceConfig = {}) {\\r\\n    if (isBlank(instanceConfig.id)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique ID! ` +\\r\\n          `Try using \\\\`crypto.randomUUID()\\\\` if you can't think of one.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    let defaultConfig = {\\r\\n      appId: toStr(instanceConfig.id),\\r\\n      showTips: true,\\r\\n      forceReload: false,\\r\\n      shutdownWithPid: null,\\r\\n      shutdownRootWithPid: null,\\r\\n      scssResources: '',\\r\\n    }\\r\\n\\r\\n    delete instanceConfig.id\\r\\n    this.#appConfig = Object.assign(defaultConfig, instanceConfig)\\r\\n\\r\\n    if (!isBlank(this.#appConfig.scssResources)) {\\r\\n      if (!lodash.isString(this.#appConfig.scssResources)) {\\r\\n        throw new TypeError('SCSS resources added to AppFactory must be of type String')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #addComponents(components) {\\r\\n    if (!lodash.isArray(components)) {\\r\\n      throw new Error('Please provide one or more components to add as an array')\\r\\n    }\\r\\n\\r\\n    for (let cmpDef of components) {\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#componentsInQueue.add(cmpDef)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #setRootComponent(componentDefinition = {}) {\\r\\n    let cmpDef = { ...ComponentManager.Validate(componentDefinition) }\\r\\n    cmpDef.__consumerRoot = true\\r\\n    cmpDef.__appId = this.#appConfig.appId\\r\\n    cmpDef.__uuid = `${cmpDef.name}-${crypto.randomUUID()}`\\r\\n    cmpDef.__config = this.#appConfig\\r\\n    this.#rootComponent = cmpDef\\r\\n    this.#componentsInQueue.add(cmpDef)\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async #runLoaders() {\\r\\n    const [Vue, Mitt, Sass] = await Promise.all([\\r\\n      VueLoader.Fetch(),\\r\\n      MittLoader.Fetch(),\\r\\n      SassLoader.Fetch(),\\r\\n    ])\\r\\n    return { Vue, Mitt, Sass }\\r\\n  }\\r\\n\\r\\n  #validateStart() {\\r\\n    if (this.#componentsInQueue.size < 1) {\\r\\n      throw new Error('You must add at least one component to an AppFactory')\\r\\n    }\\r\\n\\r\\n    if (isBlank(this.#rootComponent)) {\\r\\n      throw new Error('You must add one root component to an AppFactory')\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #validateOneMount() {\\r\\n    if (this.#mounted === true) {\\r\\n      throw new Error('You can only mount an AppFactory instance once')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Registers a consumer app definition, to be mounted by the parent `bbVue.rootApp` instance as a CRM\\r\\n * @param {consumerAppDef} appDef The definition of a consumer app\\r\\n * @returns {function} Lookup function to retrieve consumer app instance\\r\\n */\\r\\nfunction addConsumerRootDef(ns, appDef) {\\r\\n  try {\\r\\n    // Lookup rootApp ctx\\r\\n    let rootApp = RootApp.component()\\r\\n\\r\\n    // Hook in orphan protection if requested\\r\\n    // BUGGED: ns race conditions due to repeated ns.getRunningScript() calls\\r\\n    /* if (appDef.__config.shutdownWithPid || appDef.__config.shutdownRootWithPid) {\\r\\n      // Watch pid on interval\\r\\n      const pidWatchRate = 500\\r\\n      const pidWatch = setInterval(async () => {\\r\\n        // Attempt to find running PID\\r\\n        let pid = ns?.getRunningScript()?.pid\\r\\n\\r\\n        // Eject if pid is healthy\\r\\n        if (pid > 0) return\\r\\n\\r\\n        // Try to shutdown either AppRoot or consumer root as needed\\r\\n        try {\\r\\n          if (appDef.__config.shutdownRootWithPid) {\\r\\n            await rootApp.rootShutdown()\\r\\n          } else {\\r\\n            await rootApp.unmountConsumerRootByUuid(appDef.__uuid)\\r\\n          }\\r\\n        } catch (error) {\\r\\n          ns.tprint(\\r\\n            `ERROR: bb-vue app \\\"${appDef.name}\\\" is orphaned but ending process failed:\\\\n${toJson(\\r\\n              error\\r\\n            )}`\\r\\n          )\\r\\n        } finally {\\r\\n          // Whatever the result of the cleanup, end the interval\\r\\n          clearInterval(pidWatch)\\r\\n        }\\r\\n      }, pidWatchRate)\\r\\n    } */\\r\\n\\r\\n    // Add appDef to rootApp and return app handle to consumer\\r\\n    return rootApp.addConsumerRootDef(appDef)\\r\\n  } catch (error) {\\r\\n    throw new Error(\\r\\n      `rootApp cannot be located, or issue mounting consumer appDef:\\\\n${toJson(error)}`\\r\\n    )\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainer } from '/bitpacks/bb-vue/misc-examples/svgchart-ui.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 60\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 20\\r\\n\\r\\n  const textSize = 5.0\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 100\\r\\n  const conHeight = 80\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n  ns.atExit(function () {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  })\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n\\r\\n  //I KNOW this is where the object is rendered/created (lines below), but I have no freakin' idea how to get it to render to another\\r\\n  //object/window in HTML/CSS/VUE or whatever.  I know it's probably as simple as calling the 'container' from this script, but I'm at a loss.\\r\\n\\r\\n  //The below line is where the graph is being 'dropped'.  Default is the overview hooks.  Would like to render to a moveable window.\\r\\n  const dropPage = doc.getElementById(SVGChartContainer)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n\\r\\n  //Uncomment the below line to have the container connect to the above constant.  By default it's set to the overview hooks.\\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('test', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('test', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('test', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n  //First argument is the ticker that it targets.  Would need to pass this off to the window wrapper?  I guess?\\r\\n  var ticker = ns.args[0]\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.tprint('Uh oh NAN:')\\r\\n            ns.tprint(moneyList)\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n        }\\r\\n\\r\\n        topText.innerHTML = 'BULLISH'\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = ticker + ': ' + ns.nFormat(ns.stock.getPrice(ticker), '$0.00a')\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'BEARISH'\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n      }\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.1'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-builder.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Keys, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class VueLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Vue module.\\r\\n   * @returns {Promise<Vue>} Vue constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = Vue({ silent: true })\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import(\\r\\n      /* 'https://unpkg.com/vue@3.2.26/dist/vue.esm-browser.prod.js' */\\r\\n      'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.esm-browser.js'\\r\\n    )\\r\\n\\r\\n    win[Keys.vueModuleKey] = module\\r\\n\\r\\n    return module\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { WinStates, TrayItemTypes } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, doc, html, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ isCollapsed, shouldDisplay }\\\">\\r\\n      <transition-group name=\\\"appTrayItemFadeUp\\\" appear>\\r\\n        <bbv-app-tray-group key=\\\"actions\\\" tray-teleport />\\r\\n        <template v-for=\\\"group in trayItems\\\" :key=\\\"group.root.uuid\\\">\\r\\n          <bbv-app-tray-group :app-title=\\\"group.root.title\\\">\\r\\n            <template :key=\\\"win.uuid\\\" v-for=\\\"win in group.winMounts\\\">\\r\\n              <bbv-button\\r\\n                :title=\\\"win.title\\\"\\r\\n                @click=\\\"toggleTrayItem(win)\\\"\\r\\n                :class=\\\"{ isOpen: win.winState == WinStates.open }\\\"\\r\\n              >\\r\\n                {{ win.title }}\\r\\n              </bbv-button>\\r\\n            </template>\\r\\n          </bbv-app-tray-group>\\r\\n        </template>\\r\\n      </transition-group>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  data() {\\r\\n    return {\\r\\n      WinStates,\\r\\n      TrayItemTypes,\\r\\n      isCollapsed: false,\\r\\n      isHidden: false,\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    trayItems() {\\r\\n      let winMountTrayItems = this.internals.store.winMounts\\r\\n        .map((winMount) => this.buildTrayItemFor(TrayItemTypes.winMount, winMount))\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let consumerRootMountTrayItems = this.internals.store.consumerRootMounts\\r\\n        .map((consumerRootMount) =>\\r\\n          this.buildTrayItemFor(TrayItemTypes.consumerRootMount, consumerRootMount)\\r\\n        )\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let winsByRoots = consumerRootMountTrayItems.reduce((acc, root) => {\\r\\n        let ownedWins = winMountTrayItems.filter((x) => x.ownerUuid == root.uuid)\\r\\n        if (ownedWins.length) {\\r\\n          acc.push({ root, winMounts: ownedWins })\\r\\n        }\\r\\n        return acc\\r\\n      }, [])\\r\\n\\r\\n      return winsByRoots\\r\\n    },\\r\\n    shouldDisplay() {\\r\\n      return this.isHidden === false && this.trayItems.length\\r\\n    },\\r\\n  },\\r\\n  mounted() {\\r\\n    this.watchGameDock()\\r\\n  },\\r\\n  methods: {\\r\\n    watchGameDock() {\\r\\n      const { useIntervalFn } = VueUse()\\r\\n      useIntervalFn(() => {\\r\\n        let gameDockSelector = doc.querySelector('.MuiDrawer-root.MuiDrawer-docked')\\r\\n        let width = gameDockSelector?.clientWidth\\r\\n        if (!width) {\\r\\n          this.isHidden = true\\r\\n          return\\r\\n        }\\r\\n        this.isHidden = false\\r\\n        if (width < 240) {\\r\\n          this.isCollapsed = true\\r\\n        } else {\\r\\n          this.isCollapsed = false\\r\\n        }\\r\\n      }, 400)\\r\\n    },\\r\\n    toggleTrayItem(trayItem) {\\r\\n      if (trayItem.winState != WinStates.open) {\\r\\n        trayItem.winMount.open()\\r\\n      } else {\\r\\n        trayItem.winMount.close()\\r\\n      }\\r\\n    },\\r\\n    buildTrayItemFor(trayItemType, trayCompatibleItem) {\\r\\n      const winTrayItem = (winMount) => {\\r\\n        const ownerOpts = winMount.owner.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.winMount,\\r\\n          uuid: winMount.uuid,\\r\\n          title: winMount.title,\\r\\n          ownerUuid: ownerOpts.__uuid,\\r\\n          winState: winMount.winState,\\r\\n          winMount: winMount,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      const rootTrayItem = (consumerRootMount) => {\\r\\n        const opts = consumerRootMount.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.consumerRootMount,\\r\\n          uuid: opts.__uuid,\\r\\n          title: opts.name,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      let trayItem\\r\\n      switch (trayItemType) {\\r\\n        case TrayItemTypes.winMount:\\r\\n          trayItem = winTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n        case TrayItemTypes.consumerRootMount:\\r\\n          trayItem = rootTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n      }\\r\\n\\r\\n      if (trayItem.kind == TrayItemTypes.winMount) {\\r\\n        if (trayItem.winMount.trayHide !== false) {\\r\\n          return null\\r\\n        }\\r\\n        if (trayItem.winMount.trayTitle) {\\r\\n          trayItem.title = trayItem.winMount.trayTitle\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return trayItem\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include typo-basic;\\r\\n\\r\\n      pointer-events: auto;\\r\\n      position: absolute;\\r\\n      z-index: 1400;\\r\\n\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n\\r\\n      display: flex;\\r\\n      align-items: stretch;\\r\\n      padding: 10px;\\r\\n      width: 249px;\\r\\n      height: 62px;\\r\\n      clip-path: inset(-60px 0 0 0);\\r\\n\\r\\n      box-shadow: inset 0px 0px 20px 0px var(--bbvBoxShadowColor1);\\r\\n      border-top: 1px solid var(--bbvBorderColor);\\r\\n      background-color: var(--bbvAppTrayBgColor);\\r\\n      transition: width 0.2s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.4s ease, transform 0.4s ease;\\r\\n\\r\\n      &:hover {\\r\\n        width: 100%;\\r\\n        z-index: 1600;\\r\\n\\r\\n        &.isCollapsed {\\r\\n          width: 100%;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        width: 57px;\\r\\n      }\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        transform: translateY(100px);\\r\\n        opacity: 0;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-active,\\r\\n      .appTrayItemFadeUp-leave-active {\\r\\n        transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-from,\\r\\n      .appTrayItemFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(50px);\\r\\n        transform-origin: left center;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.15,\"server\":\"home\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-tabs',\\r\\n  template: html` <span>__CMP_NAME__</span> `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win-manager',\\r\\n  inject: ['internals'],\\r\\n  template: `<!-- __CMP_NAME__ -->`,\\r\\n  data() {\\r\\n    return {\\r\\n      baseStackingIndex: 1510,\\r\\n      recentlyActiveWinMounts: [],\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.internals.winManager = this\\r\\n  },\\r\\n  methods: {\\r\\n    addWin(winMount) {\\r\\n      this.internals.store.winMounts.push(winMount)\\r\\n    },\\r\\n    removeWin(winMount) {\\r\\n      this.scrubRecentWinMountActivity(winMount)\\r\\n      this.internals.store.winMounts = this.internals.store.winMounts.filter((x) => {\\r\\n        return x.uuid != winMount.uuid\\r\\n      })\\r\\n    },\\r\\n    logRecentWinMountActivity(winMount) {\\r\\n      if (this.recentlyActiveWinMounts[0] == winMount) return\\r\\n      this.recentlyActiveWinMounts = [winMount, ...this.recentlyActiveWinMounts.slice(0, 4)]\\r\\n    },\\r\\n    scrubRecentWinMountActivity(winMount) {\\r\\n      this.recentlyActiveWinMounts = this.recentlyActiveWinMounts.filter((x) => x !== winMount)\\r\\n    },\\r\\n    getRecommendedPosition(winMount) {\\r\\n      const rootOffset = { x: 295, y: 30 }\\r\\n      const standardOffset = { x: 30, y: 60 }\\r\\n\\r\\n      // const prevOpenedWinMounts = this.internals.store.winMounts.filter((x) => x.hasOpened === true)\\r\\n      let curOffset = rootOffset\\r\\n      let targetWinMount = this.recentlyActiveWinMounts[1]\\r\\n      if (targetWinMount && targetWinMount.winState === WinStates.open) curOffset = standardOffset\\r\\n      if (!targetWinMount) targetWinMount = winMount\\r\\n\\r\\n      return {\\r\\n        x: parseInt(targetWinMount.style.left ?? 0) + curOffset.x,\\r\\n        y: parseInt(targetWinMount.style.top ?? 0) + curOffset.y,\\r\\n      }\\r\\n    },\\r\\n    bringToFront(winMount) {\\r\\n      let otherWins = this.internals.store.winMounts.filter((x) => winMount.uuid != x.uuid)\\r\\n      this.logRecentWinMountActivity(winMount)\\r\\n      winMount.stackingIndex = this.baseStackingIndex + otherWins.length\\r\\n      let sortedOtherWins = [...otherWins].sort((a, b) => a.stackingIndex - b.stackingIndex)\\r\\n      sortedOtherWins.forEach((x, i) => (x.stackingIndex = this.baseStackingIndex + i))\\r\\n    },\\r\\n    async closeAllWinsByCrmUuid(crmUuid) {\\r\\n      return new Promise((resolve) => {\\r\\n        this.internals.store.winMounts.forEach((winMount) => {\\r\\n          if (winMount.owner.$options.__uuid == crmUuid) {\\r\\n            winMount.close()\\r\\n          }\\r\\n        })\\r\\n        setTimeout(() => {\\r\\n          resolve()\\r\\n        }, 500)\\r\\n      })\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/4-complex-and-fun.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-json-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ fill: fill !== false, wrap: wrap !== false }\\\">\\r\\n      <div class=\\\"json_inner\\\">{{ toJson(data) }}</div>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {},\\r\\n    },\\r\\n    fill: {\\r\\n      default: false,\\r\\n    },\\r\\n    wrap: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      &.fill {\\r\\n        height: 100%;\\r\\n\\r\\n        .json_inner {\\r\\n          height: 100%;\\r\\n          max-height: unset;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.wrap {\\r\\n        .json_inner {\\r\\n          white-space: pre-wrap;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .json_inner {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 10px 5px;\\r\\n        width: 100%;\\r\\n        max-height: 300px;\\r\\n        overflow: auto;\\r\\n        white-space: pre;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-radius: 5px;\\r\\n        border-top-left-radius: 0;\\r\\n        border-bottom-left-radius: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app' },\\r\\n      rootComponent: ChartContainer,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainer = 'svgChartContainer'\\r\\n\\r\\nconst ChartContainer = {\\r\\n  name: 'svg-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"SVG Chart\\\" no-pad start-height=\\\"80%\\\" start-width=\\\"80%\\\">\\r\\n      <div v-once id=\\\"${SVGChartContainer}\\\" />\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  computed: {},\\r\\n\\r\\n  watch: {},\\r\\n\\r\\n  mounted() {},\\r\\n\\r\\n  methods: {},\\r\\n\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @see: Learn more about Vue here: https://v3.vuejs.org/\\r\\n * @see: Learn more about Sass here: https://sass-lang.com/\\r\\n * @see: Learn more about bb-vue here: https://github.com/smolgumball/bb-vue\\r\\n */\\r\\n\\r\\n// Start with a single import from the bb-vue library\\r\\nimport AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n/**\\r\\n * These functions are used to enable nicer syntax highlighting of HTML/CSS in VSCode.\\r\\n * Specifically the `prettier - code formatter`, `es6-string-css` and `es6-string-html`\\r\\n * extensions can be used.You can safely remove these imports, as long as you remove references to them below.\\r\\n **/\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// Note the standard BitBurner function signature here.\\r\\n// Always start your bb-vue apps from standard BitBurner scripts since you will\\r\\n// need to pass a valid NS instance to the AppFactory constructor!\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  // Wrap your AppFactory usage with try/catch for better error messages\\r\\n  try {\\r\\n    const myAppFactory = new AppFactory(ns)\\r\\n    const myAppHandleFn = await myAppFactory.mount({\\r\\n      // An app ID is always required\\r\\n      config: { id: 'my-first-app' },\\r\\n\\r\\n      // Additional components are optional.\\r\\n      // Here, we're adding just one extra\\r\\n      components: [MyJsonComponent],\\r\\n\\r\\n      // A root component is always required\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n\\r\\n    // You can retrieve a reference to your root component\\r\\n    // by running the function returned from mount()\\r\\n    console.debug(myAppHandleFn())\\r\\n  } catch (error) {\\r\\n    // In case something goes wrong, log it out and halt the program\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  // Every component needs a unique name\\r\\n  name: 'my-first-root-component',\\r\\n\\r\\n  // Here, we \\\"inject\\\" a helper function provided by the bb-vue library.\\r\\n  // Running this function shuts down your entire app. It is wired to a button\\r\\n  // click at the bottom of the bbv-win component, in the #actions slot!\\r\\n  inject: ['appShutdown'],\\r\\n\\r\\n  // Your template is where a lot of the magic happens. Render DOM elements here,\\r\\n  // and use various Vue-specific techniques like `v-for`, @event binding, etc.\\r\\n  // Learn more about Vue here: https://v3.vuejs.org/\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"Hello from bb-vue!\\\">\\r\\n      <p>Render your own components:</p>\\r\\n      <my-json-display :display=\\\"myData\\\" />\\r\\n\\r\\n      <p>Or use the built-in components:</p>\\r\\n      <bbv-json-display :data=\\\"jsonData\\\" />\\r\\n\\r\\n      <p>\\r\\n        Update your app's data store: <strong>{{ myData.ezCounter }}</strong><br />\\r\\n        <bbv-button @click=\\\"myData.ezCounter++\\\">Add 1</bbv-button>\\r\\n      </p>\\r\\n\\r\\n      <template #actions>\\r\\n        Or shut everything down:\\r\\n        <bbv-button @click=\\\"appShutdown\\\">Shutdown App</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  // The data function tells Vue what kind of reactive data you'd like to use.\\r\\n  // Changing these values from inside or outside the component will cause the\\r\\n  // component to update automatically! Learn more about Vue here: https://v3.vuejs.org/\\r\\n  data() {\\r\\n    return {\\r\\n      myData: { 'bb-vue-is': 'easy to use!', ezCounter: 0 },\\r\\n      jsonData: {\\r\\n        'bb-vue-components': 'NICE.exe',\\r\\n        otherFeatures: ['SCSS support', 'App tray', 'NetScript communication', '...and more!'],\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // The scss key is where you define the styles for your component.\\r\\n  scss: css`\\r\\n    /*\\r\\n      You can reference your component name with __CMP_NAME__and it\\r\\n      will be replaced at startup. This happens in both templates and style blocks!\\r\\n    */\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n\\r\\n        /*\\r\\n          Have you noticed we're writing SCSS? bb-vue supports Sass 0.11.1\\r\\n          through the sass.js tool; a bit outdated now, but good enough for some\\r\\n          dank BitBurner components. Learn more about sass.js here:\\r\\n          https://github.com/medialize/sass.js/#sassjs\\r\\n        */\\r\\n        strong {\\r\\n          font-size: 13px;\\r\\n          padding: 3px 6px 1px 6px;\\r\\n          display: inline-block;\\r\\n          border-radius: 5px;\\r\\n\\r\\n          /*\\r\\n            You can use the provided CSS theming variables to color your elements.\\r\\n            Find all of them on the <body> tag of your BitBurner debug / devtools console.\\r\\n          */\\r\\n          color: var(--bbvHackerDarkFgColor);\\r\\n          background-color: var(--bbvHackerDarkBgColor);\\r\\n        }\\r\\n\\r\\n        button {\\r\\n          margin-top: 10px;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\n// Here's a simple supporting component that displays data passed to it.\\r\\n// It converts the data to a JSON string and then display it in the whitespace\\r\\n// sensitive HTML tag <pre>\\r\\nconst MyJsonComponent = {\\r\\n  name: 'my-json-display',\\r\\n  props: {\\r\\n    display: {\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <pre><code>{{ toJson(display) }}</code></pre>\\r\\n    </div>\\r\\n  `,\\r\\n  methods: {\\r\\n    toJson(value) {\\r\\n      return JSON.stringify(value, null, '  ')\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      background-color: #0000008c;\\r\\n      color: lawngreen;\\r\\n      padding: 10px 5px;\\r\\n\\r\\n      pre,\\r\\n      code {\\r\\n        margin: 0;\\r\\n        font-family: inherit;\\r\\n        overflow: auto;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getGlobal, Keys, setGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class MittLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Mitt module.\\r\\n   * @returns {Promise<{ createBus: Function }>} Mitt constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = getGlobal(Keys.mittModuleKey)\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import('https://unpkg.com/mitt@3.0.0/dist/mitt.mjs')\\r\\n    let moduleWrapper = { createBus: module.default }\\r\\n\\r\\n    setGlobal(Keys.mittModuleKey, moduleWrapper)\\r\\n\\r\\n    return moduleWrapper\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html, Keys, Mitt, RootApp, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport AppRootStyles from '/bitpacks/bb-vue/components/internal/AppRoot.Styles.js';\\r\\nimport ConsumerRoot from '/bitpacks/bb-vue/components/internal/ConsumerRoot.js';\\r\\nimport CssManager from '/bitpacks/bb-vue/components/internal/CssManager.js';\\r\\nimport WinManager from '/bitpacks/bb-vue/components/internal/WinManager.js';\\r\\nimport AppTray from '/bitpacks/bb-vue/components/internal/AppTray.js';\\r\\nimport AppTrayGroup from '/bitpacks/bb-vue/components/internal/AppTrayGroup.js';\\r\\nimport Win from '/bitpacks/bb-vue/components/internal/Win.js';\\r\\n\\r\\nimport Button from '/bitpacks/bb-vue/components/Button.js';\\r\\nimport JsonDisplay from '/bitpacks/bb-vue/components/JsonDisplay.js';\\r\\nimport Tabs from '/bitpacks/bb-vue/components/Tabs.js';\\r\\nimport ObjectDisplay from '/bitpacks/bb-vue/components/ObjectDisplay.js';\\r\\nimport LogDisplay from '/bitpacks/bb-vue/components/LogDisplay.js';\\r\\n\\r\\nexport const ComponentLibrary = [\\r\\n  ConsumerRoot,\\r\\n  CssManager,\\r\\n  Win,\\r\\n  WinManager,\\r\\n  AppTray,\\r\\n  AppTrayGroup,\\r\\n  Button,\\r\\n  JsonDisplay,\\r\\n  ObjectDisplay,\\r\\n  LogDisplay,\\r\\n  Tabs,\\r\\n]\\r\\n\\r\\nconst rootShutdownTimeout = 2000\\r\\nexport default {\\r\\n  __libraryRoot: true,\\r\\n  name: 'bbv-app-root',\\r\\n  template: html`\\r\\n    <transition name=\\\"rootAppIntro\\\" appear>\\r\\n      <main class=\\\"__CMP_NAME__\\\" bbv-container v-if=\\\"depsLoaded\\\">\\r\\n        <transition-group name=\\\"consumerRootIntro\\\" appear>\\r\\n          <bbv-consumer-root\\r\\n            v-for=\\\"def in consumerRootDefs\\\"\\r\\n            :key=\\\"def.__uuid\\\"\\r\\n            :id=\\\"def.__uuid\\\"\\r\\n            :consumer-root-def=\\\"def\\\"\\r\\n            @consumer-root-mounted=\\\"mountConsumerRoot\\\"\\r\\n            @consumer-root-unmount-requested=\\\"unmountConsumerRootByUuid\\\"\\r\\n            @root-shutdown-requested=\\\"rootShutdown\\\"\\r\\n          />\\r\\n        </transition-group>\\r\\n        <bbv-css-manager :consumer-root-defs=\\\"consumerRootDefs\\\" />\\r\\n        <bbv-win-manager />\\r\\n        <bbv-app-tray />\\r\\n      </main>\\r\\n    </transition>\\r\\n  `,\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n    return {\\r\\n      depsLoaded: false,\\r\\n      hasSeenCrms: false,\\r\\n      rootShutdownTimeoutFn: null,\\r\\n      internals: {\\r\\n        bus: bus,\\r\\n        send: bus.emit,\\r\\n        listen: bus.on,\\r\\n        store: {\\r\\n          consumerRootDefs: [],\\r\\n          consumerRootMounts: [],\\r\\n          winMounts: [],\\r\\n        },\\r\\n        winManager: null,\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.loadDeps()\\r\\n  },\\r\\n  provide() {\\r\\n    return this.$data\\r\\n  },\\r\\n  computed: {\\r\\n    isReady() {\\r\\n      return this.internals.winManager\\r\\n    },\\r\\n    consumerRootDefs() {\\r\\n      return this.isReady ? this.allCrds : []\\r\\n    },\\r\\n    allCrds() {\\r\\n      return this.internals.store.consumerRootDefs\\r\\n    },\\r\\n    allCrms() {\\r\\n      return this.internals.store.consumerRootMounts\\r\\n    },\\r\\n  },\\r\\n  watch: {\\r\\n    /**\\r\\n     * Watch for CRMs. When seen some, notify AppRoot that some have\\r\\n     * been added. Wait for them to go away. Once they are gone, do a self\\r\\n     * cleanup after `rootShutdownTimeout` ms. Shutdown timeout can be\\r\\n     * cancelled by new CRM additions.\\r\\n     */\\r\\n    'internals.store.consumerRootMounts': {\\r\\n      handler(newVal) {\\r\\n        // Ensure AppRoot knows CRMs have been seen added at some point\\r\\n        if (this.hasSeenCrms !== true && newVal?.length >= 1) {\\r\\n          this.hasSeenCrms = true\\r\\n        }\\r\\n\\r\\n        // If a CRM is removed, if it was the last, and if AppRoot has seen CRMs before\\r\\n        if (this.hasSeenCrms === true && newVal?.length === 0) {\\r\\n          if (this.rootShutdownTimeoutFn === null) {\\r\\n            // Create a shutdown timeout func to end the entire RootApp\\r\\n            this.rootShutdownTimeoutFn = setTimeout(() => {\\r\\n              console.debug('bb-vue: AppRoot cannot find any CRMs and is shutting down')\\r\\n              this.rootShutdown()\\r\\n            }, rootShutdownTimeout)\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Clear an ongoing shutdown timeout if a new CRM is added\\r\\n        if (newVal?.length >= 1 && this.rootShutdownTimeoutFn !== null) {\\r\\n          clearTimeout(this.rootShutdownTimeoutFn)\\r\\n          this.rootShutdownTimeoutFn = null\\r\\n        }\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  methods: {\\r\\n    async loadDeps() {\\r\\n      // console.time('AppRoot:loadDeps')\\r\\n      if (!win[Keys.vueUseModuleKey]) {\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/shared@7.5.3/index.iife.min.js')\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/core@7.5.3/index.iife.min.js')\\r\\n      }\\r\\n      this.depsLoaded = true\\r\\n      // console.timeEnd('AppRoot:loadDeps')\\r\\n    },\\r\\n    addConsumerRootDef(consumerRootDef) {\\r\\n      const { markRaw } = Vue()\\r\\n      let rawConsumerRootDef = markRaw(consumerRootDef)\\r\\n      this.internals.store.consumerRootDefs = [\\r\\n        ...this.allCrds.filter((x) => {\\r\\n          return x.__uuid !== rawConsumerRootDef.__uuid\\r\\n        }),\\r\\n        rawConsumerRootDef,\\r\\n      ]\\r\\n\\r\\n      return () => this.findConsumerRootMount(rawConsumerRootDef.__uuid)\\r\\n    },\\r\\n    mountConsumerRoot(consumerRootMount) {\\r\\n      this.internals.store.consumerRootMounts = [\\r\\n        ...this.allCrms.filter((x) => {\\r\\n          return x.$options.__uuid !== consumerRootMount.$options.__uuid\\r\\n        }),\\r\\n        consumerRootMount,\\r\\n      ]\\r\\n    },\\r\\n    async unmountConsumerRootByUuid(crmUuid) {\\r\\n      await this.internals.winManager.closeAllWinsByCrmUuid(crmUuid)\\r\\n      this.internals.store.consumerRootMounts = this.allCrms.filter((x) => {\\r\\n        return x.$options.__uuid !== crmUuid\\r\\n      })\\r\\n      this.internals.store.consumerRootDefs = this.allCrds.filter((x) => {\\r\\n        return x.__uuid !== crmUuid\\r\\n      })\\r\\n    },\\r\\n    findConsumerRootMount(rootMountName) {\\r\\n      return (\\r\\n        this.allCrms.find((x) => {\\r\\n          return rootMountName == x.$options.__uuid\\r\\n        }) ?? null\\r\\n      )\\r\\n    },\\r\\n    async rootShutdown() {\\r\\n      for (const x of this.allCrms) {\\r\\n        await this.unmountConsumerRootByUuid(x.$options.__uuid)\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        RootApp.cleanup()\\r\\n      }, 50)\\r\\n    },\\r\\n  },\\r\\n  ...AppRootStyles,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const asciichart = function (exports) {\\r\\n  exports.black = '\\\\x1b[30m'\\r\\n  exports.red = '\\\\x1b[31m'\\r\\n  exports.green = '\\\\x1b[32m'\\r\\n  exports.yellow = '\\\\x1b[33m'\\r\\n  exports.blue = '\\\\x1b[34m'\\r\\n  exports.magenta = '\\\\x1b[35m'\\r\\n  exports.cyan = '\\\\x1b[36m'\\r\\n  exports.lightgray = '\\\\x1b[37m'\\r\\n  exports.default = '\\\\x1b[39m'\\r\\n  exports.darkgray = '\\\\x1b[90m'\\r\\n  exports.lightred = '\\\\x1b[91m'\\r\\n  exports.lightgreen = '\\\\x1b[92m'\\r\\n  exports.lightyellow = '\\\\x1b[93m'\\r\\n  exports.lightblue = '\\\\x1b[94m'\\r\\n  exports.lightmagenta = '\\\\x1b[95m'\\r\\n  exports.lightcyan = '\\\\x1b[96m'\\r\\n  exports.white = '\\\\x1b[97m'\\r\\n  exports.reset = '\\\\x1b[0m'\\r\\n\\r\\n  function colored(char, color) {\\r\\n    // do not color it if color is not specified\\r\\n    return color === undefined ? char : color + char + exports.reset\\r\\n  }\\r\\n\\r\\n  exports.colored = colored\\r\\n\\r\\n  exports.plot = function (series, cfg = undefined) {\\r\\n    // this function takes both one array and array of arrays\\r\\n    // if an array of numbers is passed it is transformed to\\r\\n    // an array of exactly one array with numbers\\r\\n    if (typeof series[0] == 'number') {\\r\\n      series = [series]\\r\\n    }\\r\\n\\r\\n    cfg = typeof cfg !== 'undefined' ? cfg : {}\\r\\n\\r\\n    let min = typeof cfg.min !== 'undefined' ? cfg.min : series[0][0]\\r\\n    let max = typeof cfg.max !== 'undefined' ? cfg.max : series[0][0]\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      for (let i = 0; i < series[j].length; i++) {\\r\\n        min = Math.min(min, series[j][i])\\r\\n        max = Math.max(max, series[j][i])\\r\\n      }\\r\\n    }\\r\\n\\r\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\r\\n    let range = Math.abs(max - min)\\r\\n    let offset = typeof cfg.offset !== 'undefined' ? cfg.offset : 3\\r\\n    let padding = typeof cfg.padding !== 'undefined' ? cfg.padding : '           '\\r\\n    let height = typeof cfg.height !== 'undefined' ? cfg.height : range\\r\\n    let colors = typeof cfg.colors !== 'undefined' ? cfg.colors : []\\r\\n    let ratio = range !== 0 ? height / range : 1\\r\\n    let min2 = Math.round(min * ratio)\\r\\n    let max2 = Math.round(max * ratio)\\r\\n    let rows = Math.abs(max2 - min2)\\r\\n    let width = 0\\r\\n    for (let i = 0; i < series.length; i++) {\\r\\n      width = Math.max(width, series[i].length)\\r\\n    }\\r\\n    width = width + offset\\r\\n    let symbols = typeof cfg.symbols !== 'undefined' ? cfg.symbols : defaultSymbols\\r\\n    let format =\\r\\n      typeof cfg.format !== 'undefined'\\r\\n        ? cfg.format\\r\\n        : function (x) {\\r\\n            return (padding + x.toFixed(2)).slice(-padding.length)\\r\\n          }\\r\\n\\r\\n    let result = new Array(rows + 1) // empty space\\r\\n    for (let i = 0; i <= rows; i++) {\\r\\n      result[i] = new Array(width)\\r\\n      for (let j = 0; j < width; j++) {\\r\\n        result[i][j] = ' '\\r\\n      }\\r\\n    }\\r\\n    for (let y = min2; y <= max2; ++y) {\\r\\n      // axis + labels\\r\\n      let label = format(rows > 0 ? max - ((y - min2) * range) / rows : y, y - min2)\\r\\n      result[y - min2][Math.max(offset - label.length, 0)] = label\\r\\n      result[y - min2][offset - 1] = y == 0 ? symbols[0] : symbols[1]\\r\\n    }\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      let currentColor = colors[j % colors.length]\\r\\n      let y0 = Math.round(series[j][0] * ratio) - min2\\r\\n      result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\r\\n\\r\\n      for (let x = 0; x < series[j].length - 1; x++) {\\r\\n        // plot the line\\r\\n        let y0 = Math.round(series[j][x + 0] * ratio) - min2\\r\\n        let y1 = Math.round(series[j][x + 1] * ratio) - min2\\r\\n        if (y0 == y1) {\\r\\n          result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\r\\n        } else {\\r\\n          result[rows - y1][x + offset] = colored(y0 > y1 ? symbols[5] : symbols[6], currentColor)\\r\\n          result[rows - y0][x + offset] = colored(y0 > y1 ? symbols[7] : symbols[8], currentColor)\\r\\n          let from = Math.min(y0, y1)\\r\\n          let to = Math.max(y0, y1)\\r\\n          for (let y = from + 1; y < to; y++) {\\r\\n            result[rows - y][x + offset] = colored(symbols[9], currentColor)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return result\\r\\n      .map(function (x) {\\r\\n        return x.join('')\\r\\n      })\\r\\n      .join('\\\\n')\\r\\n  }\\r\\n}\\r\\n\\r\\nglobalThis.asciichart = {}\\r\\nasciichart(globalThis.asciichart)\\r\\n\\r\\nexport default globalThis.asciichart\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray-group',\\r\\n  props: ['appTitle', 'trayTeleport'],\\r\\n  template: html`\\r\\n    <transition name=\\\"appTrayGroupFadeUp\\\" appear>\\r\\n      <div\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n        :class=\\\"{ trayTeleport: trayTeleport !== undefined }\\\"\\r\\n        :id=\\\"trayTeleport !== undefined ? 'app-tray' : undefined\\\"\\r\\n        :title=\\\"appTitle\\\"\\r\\n      >\\r\\n        <template v-if=\\\"appTitle\\\">\\r\\n          <div class=\\\"app_title\\\">{{ appTitle }}</div>\\r\\n        </template>\\r\\n        <slot />\\r\\n      </div>\\r\\n    </transition>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      display: flex;\\r\\n      padding: 5px;\\r\\n      background-color: var(--bbvWinTitlebarBgColor);\\r\\n      transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      position: relative;\\r\\n\\r\\n      &.trayTeleport {\\r\\n        background-color: transparent;\\r\\n        padding: 5px 0;\\r\\n\\r\\n        .bbv-button {\\r\\n          padding-bottom: 3px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.trayTeleport:empty {\\r\\n        clip-path: inset(0 100%);\\r\\n      }\\r\\n\\r\\n      &:hover {\\r\\n        .app_title {\\r\\n          opacity: 1;\\r\\n          transform: translateY(0) scale(1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &:not(:first-child) {\\r\\n        margin-left: 12px;\\r\\n      }\\r\\n\\r\\n      .app_title {\\r\\n        position: absolute;\\r\\n        bottom: calc(100% + 6px);\\r\\n        padding: 6px 12px;\\r\\n        font-size: 14px;\\r\\n        text-align: center;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        z-index: -1;\\r\\n        left: 5px;\\r\\n        transform: translateY(30px) scale(0.2);\\r\\n        transform-origin: bottom left;\\r\\n        border-radius: 2px;\\r\\n        box-shadow: 0px 0px 3px 0px var(--bbvBoxShadowColor2);\\r\\n        color: var(--bbvAppInnerFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\\r\\n      }\\r\\n\\r\\n      .bbv-button {\\r\\n        color: var(--bbvAppTrayFgColor);\\r\\n        padding: 6px 7px;\\r\\n        overflow: hidden;\\r\\n        white-space: nowrap;\\r\\n        border-bottom: 2px solid transparent;\\r\\n        transition: border-color 0.2s ease;\\r\\n        line-height: 1;\\r\\n\\r\\n        &.isOpen {\\r\\n          border-bottom-color: var(--bbvAppTrayFgColor);\\r\\n          background-color: var(--bbvButtonHoverBgColor);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .bbv-button + .bbv-button {\\r\\n        margin-left: 8px;\\r\\n      }\\r\\n\\r\\n      &.appTrayGroupFadeUp-enter-from,\\r\\n      &.appTrayGroupFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(75px);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\r\\n// prettier-ignore\\r\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\r\\n  try {\\r\\n    ns.disableLog('disableLog');\\r\\n    ns.disableLog('asleep');\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\r\\n      rootComponent: ChartContainerwallstreet,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n\\r\\n\\r\\n  // Listen for specific event\\r\\n  let autoTrader = false\\r\\n  let enableAutoTrader = false\\r\\n  let wantsShutdown = false\\r\\n  let buyMaxLongShares = false\\r\\n  let closeLongPosition = false\\r\\n  let closeShortPosition = false\\r\\n  let buyMaxShortShares = false\\r\\n  let sellAllShares = false\\r\\n  let quickStrangle = false\\r\\n  let longHedge = false\\r\\n  let shortHedge = false\\r\\n  let splitPlay = false\\r\\n  let stockCrawler = false\\r\\n\\r\\n  //Ticker Chart Storage\\r\\n  let loadECP = false\\r\\n  let loadMGCP = false\\r\\n  let loadBLD = false\\r\\n  let loadCLRK = false\\r\\n  let loadOMTK = false\\r\\n  let loadFSIG = false\\r\\n  let loadKGI = false\\r\\n  let loadFLCM = false\\r\\n  let loadSTM = false\\r\\n  let loadDCOMM = false\\r\\n  let loadHLS = false\\r\\n  let loadVITA = false\\r\\n  let loadICRS = false\\r\\n  let loadUNV = false\\r\\n  let loadAERO = false\\r\\n  let loadOMN = false\\r\\n  let loadSLRS = false\\r\\n  let loadGPH = false\\r\\n  let loadNVMD = false\\r\\n  let loadWDS = false\\r\\n  let loadLXO = false\\r\\n  let loadRHOC = false\\r\\n  let loadAPHE = false\\r\\n  let loadSYSC = false\\r\\n  let loadCTK = false\\r\\n  let loadNTLK = false\\r\\n  let loadOMGA = false\\r\\n  let loadFNS = false\\r\\n  let loadJGN = false\\r\\n  let loadSGC = false\\r\\n  let loadCTYS = false\\r\\n  let loadMDYN = false\\r\\n  let loadTITN = false\\r\\n  //End of Ticker Chart Storage\\r\\n\\r\\n  let bus = Mitt().createBus()\\r\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\r\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\r\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\r\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\r\\n  bus.on('closeLong', () => (closeLongPosition = true))\\r\\n  bus.on('closeShort', () => (closeShortPosition = true))\\r\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\r\\n  bus.on('quickPlay', () => (quickStrangle = true))\\r\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\r\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\r\\n  bus.on('quickSplitPlay', () => (splitPlay = true))\\r\\n  bus.on('stockCrawler', () => (stockCrawler = true))\\r\\n\\r\\n  //Ticker Chart Bus Triggers\\r\\n  bus.on('loadECP', () => (loadECP = true))\\r\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\r\\n  bus.on('loadBLD', () => (loadBLD = true))\\r\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\r\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\r\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\r\\n  bus.on('loadKGI', () => (loadKGI = true))\\r\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\r\\n  bus.on('loadSTM', () => (loadSTM = true))\\r\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\r\\n  bus.on('loadHLS', () => (loadHLS = true))\\r\\n  bus.on('loadVITA', () => (loadVITA = true))\\r\\n  bus.on('loadICRS', () => (loadICRS = true))\\r\\n  bus.on('loadUNV', () => (loadUNV = true))\\r\\n  bus.on('loadAERO', () => (loadAERO = true))\\r\\n  bus.on('loadOMN', () => (loadOMN = true))\\r\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\r\\n  bus.on('loadGPH', () => (loadGPH = true))\\r\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\r\\n  bus.on('loadWDS', () => (loadWDS = true))\\r\\n  bus.on('loadLXO', () => (loadLXO = true))\\r\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\r\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\r\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\r\\n  bus.on('loadCTK', () => (loadCTK = true))\\r\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\r\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\r\\n  bus.on('loadFNS', () => (loadFNS = true))\\r\\n  bus.on('loadJGN', () => (loadJGN = true))\\r\\n  bus.on('loadSGC', () => (loadSGC = true))\\r\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\r\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\r\\n  bus.on('loadTITN', () => (loadTITN = true))\\r\\n  //End of Ticker Chart Bus Triggers\\r\\n  setGlobal('tickerBus', bus)\\r\\n\\r\\n  // Instead of closing, let's keep this running\\r\\n\\r\\n  while (wantsShutdown == false) {\\r\\n\\r\\n    //init chart loading triggers\\r\\n    if (loadECP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ECP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadECP = false;\\r\\n    }\\r\\n    if (loadMGCP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MGCP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMGCP = false;\\r\\n    }\\r\\n    if (loadBLD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"BLD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadBLD = false;\\r\\n    }\\r\\n    if (loadCLRK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CLRK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCLRK = false;\\r\\n    }\\r\\n    if (loadOMTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMTK = false;\\r\\n    }\\r\\n    if (loadFSIG == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FSIG\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFSIG = false;\\r\\n    }\\r\\n    if (loadKGI == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"KGI\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadKGI = false;\\r\\n    }\\r\\n    if (loadFLCM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FLCM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFLCM = false;\\r\\n    }\\r\\n    if (loadSTM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"STM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSTM = false;\\r\\n    }\\r\\n    if (loadDCOMM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"DCOMM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadDCOMM = false;\\r\\n    }\\r\\n    if (loadHLS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"HLS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadHLS = false;\\r\\n    }\\r\\n    if (loadVITA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"VITA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadVITA = false;\\r\\n    }\\r\\n    if (loadICRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ICRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadICRS = false;\\r\\n    }\\r\\n    if (loadUNV == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"UNV\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadUVN = false;\\r\\n    }\\r\\n    if (loadAERO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"AERO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAERO = false;\\r\\n    }\\r\\n    if (loadOMN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMN = false;\\r\\n    }\\r\\n    if (loadSLRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SLRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSLRS = false;\\r\\n    }\\r\\n    if (loadGPH == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"GPH\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadGPH = false;\\r\\n    }\\r\\n    if (loadNVMD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NVMD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNVMD = false;\\r\\n    }\\r\\n    if (loadWDS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"WDS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadWDS = false;\\r\\n    }\\r\\n    if (loadLXO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"LXO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadLXO = false;\\r\\n    }\\r\\n    if (loadRHOC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"RHOC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadRHOC = false;\\r\\n    }\\r\\n    if (loadAPHE == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"APHE\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAPHE = false;\\r\\n    }\\r\\n    if (loadSYSC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SYSC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSYSC = false;\\r\\n    }\\r\\n    if (loadCTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTK = false;\\r\\n    }\\r\\n    if (loadNTLK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NTLK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNTLK = false;\\r\\n    }\\r\\n    if (loadOMGA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMGA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMGA = false;\\r\\n    }\\r\\n    if (loadFNS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FNS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFNS = false;\\r\\n    }\\r\\n    if (loadJGN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"JGN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadJGN = false;\\r\\n    }\\r\\n    if (loadSGC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SGC\\\")\\r\\n\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSGC = false;\\r\\n    }\\r\\n    if (loadCTYS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTYS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTYS = false;\\r\\n    }\\r\\n    if (loadMDYN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MDYN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMDYN = false;\\r\\n    }\\r\\n    if (loadTITN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"TITN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadTITN = false;\\r\\n    }\\r\\n\\r\\n //Stock Crawler Module\\r\\n    if (stockCrawler == true) {\\r\\n      ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\r\\n      var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\r\\n        for (const target of market) {\\r\\n        var tvol = ns.stock.getVolatility(target);\\r\\n        var tfor = ns.stock.getForecast(target);\\r\\n          if (tvol > 0.01 && tfor > 0.6) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n          if (tvol > 0.01 && tfor < 0.4) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n        await ns.asleep(100);\\r\\n      stockCrawler = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //failsafe exit condition\\r\\n    if (wantsShutdown == true) {\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n    if(ns.peek(3) != \\\"NULL PORT DATA\\\") {\\r\\n    let loadedticker = ns.peek(3);\\r\\n    let position = ns.stock.getPosition(loadedticker);\\r\\n\\r\\n    if (buyMaxLongShares == true) {\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxLongShares = false;\\r\\n\\r\\n    }\\r\\n    if (buyMaxShortShares == true) {\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxShortShares = false;\\r\\n\\r\\n    }\\r\\n    if (sellAllShares == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED **ALL** POSITIONS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      sellAllShares = false;\\r\\n\\r\\n    }\\r\\n    if (closeLongPosition == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeLongPosition = false;\\r\\n\\r\\n    }\\r\\n    if (closeShortPosition == true) {\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeShortPosition = false;\\r\\n\\r\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] > '1' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] > '1' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxLongShares = true;\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxShortShares = true;\\r\\n\\r\\n\\r\\n      //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxLongShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getAskPrice(loadedticker) * 1.05), \\\"LimitSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getBidPrice(loadedticker) * 0.90), \\\"StopSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxShortShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getAskPrice(loadedticker) * 0.95), \\\"LimitSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getBidPrice(loadedticker) * 1.10), \\\"StopSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (longHedge == true && position[0] == 0) {\\r\\n      ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      longHedge = false;\\r\\n\\r\\n    }\\r\\n    if (shortHedge == true && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      shortHedge = false;\\r\\n\\r\\n    }\\r\\n    if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      splitPlay = false;\\r\\n\\r\\n    }\\r\\n\\r\\n    //Auto-Trader button configuration.  Don't touch.\\r\\n\\r\\n    if (enableAutoTrader == true) {\\r\\n      let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\r\\n\\r\\n      if (autoTradeConfirm == true) {\\r\\n        ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = true;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n      if (autoTradeConfirm == false) {\\r\\n        ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = false;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n    }\\r\\n\\r\\n    await ns.asleep(500)\\r\\n\\r\\n  \\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\r\\nconst ChartContainerwallstreet = {\\r\\n  name: 'svg-chart-wallstreet',\\r\\n  inject: ['appShutdown',],\\r\\n  template: html`\\r\\n    <bbv-win\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      title=\\\"WSE Active Trader\\\"\\r\\n      no-pad\\r\\n      start-height=\\\"691px\\\"\\r\\n      start-width=\\\"539px\\\"\\r\\n    >\\r\\n \\r\\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\r\\n      <div>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      </div>\\r\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\r\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\r\\n      <div>\\r\\n      <button @click=\\\"quickStrangle\\\">QUICK STRANGLE</button>\\r\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\r\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\r\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      <details align=\\\"right\\\"><summary>EXTRA TOOLS</summary>\\r\\n      <div>\\r\\n      <button align=\\\"right\\\" @click=\\\"stockCrawler\\\">STOCK CRAWLER</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"\\\">SCALPER[SOON!]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"enableAutoTrade\\\">Enable/Disable Auto-Trader (BETA)</button>\\r\\n      </div>\\r\\n      </details>\\r\\n\\r\\n      <template #actions>\\r\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    shutdownAll() {\\r\\n      getGlobal('tickerBus').emit('wantsShutdown')\\r\\n      this.appShutdown()\\r\\n    },\\r\\n    buyMaxLong() {\\r\\n      getGlobal('tickerBus').emit('buyMaxLong')\\r\\n    },\\r\\n    buyMaxShort() {\\r\\n      getGlobal('tickerBus').emit('buyMaxShort')\\r\\n    },\\r\\n    closeAllPositions() {\\r\\n      getGlobal('tickerBus').emit('closeAllPositions')\\r\\n    },\\r\\n    sellMaxLong() {\\r\\n      getGlobal('tickerBus').emit('closeLong')\\r\\n    },\\r\\n    sellMaxShort() {\\r\\n      getGlobal('tickerBus').emit('closeShort')\\r\\n    },\\r\\n    enableAutoTrade() {\\r\\n      getGlobal('tickerBus').emit('autoTrade')\\r\\n    },\\r\\n    quickStrangle() {\\r\\n      getGlobal('tickerBus').emit('quickPlay')\\r\\n    },\\r\\n    quickSplit() {\\r\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\r\\n    },\\r\\n    longHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\r\\n    },\\r\\n    shortHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\r\\n    },\\r\\n    stockCrawler() {\\r\\n      getGlobal('tickerBus').emit('stockCrawler')\\r\\n    },\\r\\n    loadECP() {\\r\\n      getGlobal('tickerBus').emit('loadECP')\\r\\n    },\\r\\n    loadMGCP() {\\r\\n      getGlobal('tickerBus').emit('loadMGCP')\\r\\n    },\\r\\n    loadBLD() {\\r\\n      getGlobal('tickerBus').emit('loadBLD')\\r\\n    },\\r\\n    loadCLRK() {\\r\\n      getGlobal('tickerBus').emit('loadCLRK')\\r\\n    },\\r\\n    loadOMTK() {\\r\\n      getGlobal('tickerBus').emit('loadOMTK')\\r\\n    },\\r\\n    loadFSIG() {\\r\\n      getGlobal('tickerBus').emit('loadFSIG')\\r\\n    },\\r\\n    loadKGI() {\\r\\n      getGlobal('tickerBus').emit('loadKGI')\\r\\n    },\\r\\n    loadFLCM() {\\r\\n      getGlobal('tickerBus').emit('loadFLCM')\\r\\n    },\\r\\n    loadSTM() {\\r\\n      getGlobal('tickerBus').emit('loadSTM')\\r\\n    },\\r\\n    loadDCOMM() {\\r\\n      getGlobal('tickerBus').emit('loadDCOMM')\\r\\n    },\\r\\n    loadHLS() {\\r\\n      getGlobal('tickerBus').emit('loadHLS')\\r\\n    },\\r\\n    loadVITA() {\\r\\n      getGlobal('tickerBus').emit('loadVITA')\\r\\n    },\\r\\n    loadICRS() {\\r\\n      getGlobal('tickerBus').emit('loadICRS')\\r\\n    },\\r\\n    loadUNV() {\\r\\n      getGlobal('tickerBus').emit('loadUNV')\\r\\n    },\\r\\n    loadAERO() {\\r\\n      getGlobal('tickerBus').emit('loadAERO')\\r\\n    },\\r\\n    loadOMN() {\\r\\n      getGlobal('tickerBus').emit('loadOMN')\\r\\n    },\\r\\n    loadSLRS() {\\r\\n      getGlobal('tickerBus').emit('loadSLRS')\\r\\n    },\\r\\n    loadGPH() {\\r\\n      getGlobal('tickerBus').emit('loadGPH')\\r\\n    },\\r\\n    loadNVMD() {\\r\\n      getGlobal('tickerBus').emit('loadNVMD')\\r\\n    },\\r\\n    loadWDS() {\\r\\n      getGlobal('tickerBus').emit('loadWDS')\\r\\n    },\\r\\n    loadLXO() {\\r\\n      getGlobal('tickerBus').emit('loadLXO')\\r\\n    },\\r\\n    loadRHOC() {\\r\\n      getGlobal('tickerBus').emit('loadRHOC')\\r\\n    },\\r\\n    loadAPHE() {\\r\\n      getGlobal('tickerBus').emit('loadAPHE')\\r\\n    },\\r\\n    loadSYSC() {\\r\\n      getGlobal('tickerBus').emit('loadSYSC')\\r\\n    },\\r\\n    loadCTK() {\\r\\n      getGlobal('tickerBus').emit('loadCTK')\\r\\n    },\\r\\n    loadNTLK() {\\r\\n      getGlobal('tickerBus').emit('loadNTLK')\\r\\n    },\\r\\n    loadOMGA() {\\r\\n      getGlobal('tickerBus').emit('loadOMGA')\\r\\n    },\\r\\n    loadFNS() {\\r\\n      getGlobal('tickerBus').emit('loadFNS')\\r\\n    },\\r\\n    loadJGN() {\\r\\n      getGlobal('tickerBus').emit('loadJGN')\\r\\n    },\\r\\n    loadSGC() {\\r\\n      getGlobal('tickerBus').emit('loadSGC')\\r\\n    },\\r\\n    loadCTYS() {\\r\\n      getGlobal('tickerBus').emit('loadCTYS')\\r\\n    },\\r\\n    loadMDYN() {\\r\\n      getGlobal('tickerBus').emit('loadMDYN')\\r\\n    },\\r\\n    loadTITN() {\\r\\n      getGlobal('tickerBus').emit('loadTITN')\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f4269089-7211-47e8-ba07-f8285ea9480b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6733ba12-d754-409d-878d-ceec4b642bac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///289452bc-634c-4419-a7cf-163daca3a2e2\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///10042b83-0ac0-4fd7-a472-f53bc7dafd8f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///5fa1b1d9-6b3c-4718-af8f-26eaa00abfab\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///44734d10-322a-4289-973e-43ba496c9db8\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///cf042072-d883-4823-a2c6-5b524db3e53a\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c80cc2b7-32ed-4aef-a186-08d95e818549\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///50fa5a9c-48ad-461c-8a0b-8cfb553fd653\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b46e31bd-8210-4a52-9550-0f36be97d739\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///56440446-b477-4bef-b2a5-955fd8bc842a\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0e279641-5ef9-4b48-a081-e1b9bbd6911b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///db83ee49-da6f-44aa-a929-3b8c3c1b8076\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///b4fb9037-c476-403f-ad9b-3b8598d398dc\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///64a90fe5-9cef-404f-9bba-a5b69a1f1a8c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///bfbf10dc-d484-4f5b-8c8b-ac80fe6ef95d\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6200498f-f3a8-4c7a-9632-82e07f036e9d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///21bf6c5f-2a34-43c9-af61-7e37220cfe35\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a4b88b0d-0975-492e-a0d9-42fcb117f697\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///4436db7e-d51d-43eb-8a41-e48f7bdcfe61\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///f0eab529-e0b5-41d1-b025-2b7e88a5c8d1\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///0b68f26e-5fd3-411a-9812-a5fa10499077\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///984109b7-8cc0-45f1-a1a5-2fd3240e2395\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4a736528-e78e-4b72-9d0e-7b23c45a7a8d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///dc5f4bc0-30d6-4b8b-8c49-cc41ee8675fc\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///52507d58-557f-4030-b42d-3c01e49a9192\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///5c1f2a73-9b46-426c-92f8-71cd1ca6919f\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///47f6f722-cc73-429f-91ab-0d158f361b20\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///9376e750-eee0-4096-a409-bf8d248bb4f8\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5b3187bb-7a80-472a-ab68-820d65fd0873\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///f7a53e7c-901c-4de0-8172-ba61c60d3b51\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///d6918535-2f00-4742-b5d6-829303958de7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///2fac9b10-c97b-4b7e-bd34-af8f4cb5c5ff\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7de4b446-11e2-48e9-84f4-b1322589cabb\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///3aeb882e-3e77-4c0f-991d-ea71a633cf1f\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1cb626f5-399d-4f2d-8ccc-e40ba5bb28a3\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///0325437a-8332-449d-b1d9-37d7dd8bca2a\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///893ebdf0-9491-4c82-bd55-af10baad4334\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///ea1d25ca-b19e-42bc-ab91-d9d32ed7a563\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4921abec-2570-43b3-a848-0fbe86dd5f91\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///54b4c6cd-8cec-471b-af63-eca8eb9acd99\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///639527e6-975a-4841-baa8-85de6fc78988\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///46d78add-0cd0-48d3-b980-a1a099706747\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///70731fa8-77b3-4a94-a6f8-d99c204152e0\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"blob:file:///390408d1-5a95-4d89-9687-6ab3c9591448\",\"moduleSequenceNumber\":22737}],\"dependents\":[],\"ramUsage\":32.15,\"server\":\"home\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n  var ticker = ns.args[0];\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 300\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 10\\r\\n\\r\\n  const textSize = 2.5\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 80\\r\\n  const conHeight = 60\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n  await ns.clearPort(1)\\r\\n  await ns.clearPort(2)\\r\\n  await ns.writePort(3, ticker)\\r\\n\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n //Give the chart time to load.\\r\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n  \\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('LOADING VOLATILITY...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    var ticker = ns.args[0];\\r\\n    var position = ns.stock.getPosition(ticker)\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n        await ns.clearPort(1);\\r\\n        await ns.clearPort(2);\\r\\n        \\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n      await ns.clearPort(1)\\r\\n      await ns.clearPort(2)\\r\\n      await ns.writePort(1, (Math.max(...moneyList)))\\r\\n      await ns.writePort(2, (Math.min(...moneyList)))\\r\\n      await ns.writePort(3, ticker)\\r\\n        var fiveminavg = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.asleep(5000);\\r\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n\\r\\n        }\\r\\n        \\r\\n        topText.innerHTML = 'FORECAST: ' + Math.floor((ns.stock.getForecast(ns.sprintf(ticker))*100)) + '%' + ' || 5MIN HIGH: ' + ns.nFormat(ns.peek(1), '$0.00a') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+fiveminavg+' AVG)'\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'VOL: ' + ns.nFormat(ns.stock.getVolatility(ns.sprintf(ticker)), '0.00%') + ' || 5MIN LOW: ' + ns.nFormat(ns.peek(2), '$0.00a') + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n        \\r\\n      }\\r\\n\\r\\n\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n    await ns.clearPort(1);\\r\\n    await ns.clearPort(2);\\r\\n\\r\\n    if (ns.isRunning(\\\"wallstreet.js\\\", \\\"home\\\") == false) {\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.0'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n  \\r\\n}\\r\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\n// prettier-ignore\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\n\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\nexport async function main(ns) {\\n\\n\\n  try {\\n    ns.disableLog('disableLog');\\n    ns.disableLog('asleep');\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    await new AppFactory(ns).mount({\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\n      rootComponent: ChartContainerwallstreet,\\n    })\\n  } catch (error) {\\n    console.error(error)\\n    ns.tprint(error.toString())\\n    ns.exit()\\n  }\\n\\n\\n\\n  // Listen for specific event\\n  let autoTrader = false\\n  let enableAutoTrader = false\\n  let wantsShutdown = false\\n  let buyMaxLongShares = false\\n  let closeLongPosition = false\\n  let closeShortPosition = false\\n  let buyMaxShortShares = false\\n  let sellAllShares = false\\n  //let quickStrangle = false\\n  let longHedge = false\\n  let shortHedge = false\\n  let splitPlay = false\\n  //let stockCrawler = false\\n  let shortStrangle = false\\n  let longStrangle = false\\n\\n  //Ticker Chart Storage\\n  let loadECP = false\\n  let loadMGCP = false\\n  let loadBLD = false\\n  let loadCLRK = false\\n  let loadOMTK = false\\n  let loadFSIG = false\\n  let loadKGI = false\\n  let loadFLCM = false\\n  let loadSTM = false\\n  let loadDCOMM = false\\n  let loadHLS = false\\n  let loadVITA = false\\n  let loadICRS = false\\n  let loadUNV = false\\n  let loadAERO = false\\n  let loadOMN = false\\n  let loadSLRS = false\\n  let loadGPH = false\\n  let loadNVMD = false\\n  let loadWDS = false\\n  let loadLXO = false\\n  let loadRHOC = false\\n  let loadAPHE = false\\n  let loadSYSC = false\\n  let loadCTK = false\\n  let loadNTLK = false\\n  let loadOMGA = false\\n  let loadFNS = false\\n  let loadJGN = false\\n  let loadSGC = false\\n  let loadCTYS = false\\n  let loadMDYN = false\\n  let loadTITN = false\\n  //End of Ticker Chart Storage\\n\\n  let bus = Mitt().createBus()\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\n  bus.on('closeLong', () => (closeLongPosition = true))\\n  bus.on('closeShort', () => (closeShortPosition = true))\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\n  //bus.on('quickPlay', () => (quickStrangle = true))\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\n  //bus.on('quickSplitPlay', () => (splitPlay = true))\\n  //bus.on('stockCrawler', () => (stockCrawler = true))\\n  bus.on('longStrangle', () => (longStrangle = true))\\n  bus.on('shortStrangle', () => (shortStrangle = true))\\n\\n  //Ticker Chart Bus Triggers\\n  bus.on('loadECP', () => (loadECP = true))\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\n  bus.on('loadBLD', () => (loadBLD = true))\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\n  bus.on('loadKGI', () => (loadKGI = true))\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\n  bus.on('loadSTM', () => (loadSTM = true))\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\n  bus.on('loadHLS', () => (loadHLS = true))\\n  bus.on('loadVITA', () => (loadVITA = true))\\n  bus.on('loadICRS', () => (loadICRS = true))\\n  bus.on('loadUNV', () => (loadUNV = true))\\n  bus.on('loadAERO', () => (loadAERO = true))\\n  bus.on('loadOMN', () => (loadOMN = true))\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\n  bus.on('loadGPH', () => (loadGPH = true))\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\n  bus.on('loadWDS', () => (loadWDS = true))\\n  bus.on('loadLXO', () => (loadLXO = true))\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\n  bus.on('loadCTK', () => (loadCTK = true))\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\n  bus.on('loadFNS', () => (loadFNS = true))\\n  bus.on('loadJGN', () => (loadJGN = true))\\n  bus.on('loadSGC', () => (loadSGC = true))\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\n  bus.on('loadTITN', () => (loadTITN = true))\\n  //End of Ticker Chart Bus Triggers\\n  setGlobal('tickerBus', bus)\\n\\n  // Instead of closing, let's keep this running\\n\\n  while (wantsShutdown == false) {\\n\\n    //init chart loading triggers\\n    if (loadECP == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"ECP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadECP = false;\\n    }\\n    if (loadMGCP == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"MGCP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMGCP = false;\\n    }\\n    if (loadBLD == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"BLD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadBLD = false;\\n    }\\n    if (loadCLRK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"CLRK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCLRK = false;\\n    }\\n    if (loadOMTK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"OMTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMTK = false;\\n    }\\n    if (loadFSIG == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"FSIG\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFSIG = false;\\n    }\\n    if (loadKGI == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"KGI\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadKGI = false;\\n    }\\n    if (loadFLCM == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"FLCM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFLCM = false;\\n    }\\n    if (loadSTM == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"STM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSTM = false;\\n    }\\n    if (loadDCOMM == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"DCOMM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadDCOMM = false;\\n    }\\n    if (loadHLS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"HLS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadHLS = false;\\n    }\\n    if (loadVITA == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"VITA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadVITA = false;\\n    }\\n    if (loadICRS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"ICRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadICRS = false;\\n    }\\n    if (loadUNV == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"UNV\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadUVN = false;\\n    }\\n    if (loadAERO == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"AERO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAERO = false;\\n    }\\n    if (loadOMN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"OMN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMN = false;\\n    }\\n    if (loadSLRS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"SLRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSLRS = false;\\n    }\\n    if (loadGPH == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"GPH\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadGPH = false;\\n    }\\n    if (loadNVMD == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"NVMD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNVMD = false;\\n    }\\n    if (loadWDS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"WDS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadWDS = false;\\n    }\\n    if (loadLXO == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"LXO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadLXO = false;\\n    }\\n    if (loadRHOC == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"RHOC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadRHOC = false;\\n    }\\n    if (loadAPHE == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"APHE\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAPHE = false;\\n    }\\n    if (loadSYSC == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"SYSC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSYSC = false;\\n    }\\n    if (loadCTK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"CTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTK = false;\\n    }\\n    if (loadNTLK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"NTLK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNTLK = false;\\n    }\\n    if (loadOMGA == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"OMGA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMGA = false;\\n    }\\n    if (loadFNS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"FNS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFNS = false;\\n    }\\n    if (loadJGN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"JGN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadJGN = false;\\n    }\\n    if (loadSGC == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"SGC\\\")\\n\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSGC = false;\\n    }\\n    if (loadCTYS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"CTYS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTYS = false;\\n    }\\n    if (loadMDYN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"MDYN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMDYN = false;\\n    }\\n    if (loadTITN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"TITN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadTITN = false;\\n    }\\n\\n    //Global Stock Price Test Module\\n    // var market = ns.stock.getSymbols()\\n    // var mValues = []\\n    //   for (const target of market) {\\n\\n    //     const timeframe = 300\\n    //     var mPrice = ns.stock.getAskPrice(target); \\n\\n    //     if (mValues.length == timeframe) {\\n    //       mValues.splice(0,1)\\n    //     }\\n\\n    //     mValues[mValues.length] = mPrice\\n\\n    //     var maxMarket = Math.max(...mValues)\\n    //     var minMarket = Math.min(...mValues)\\n    //     var mAvg = (maxMarket + minMarket) / 2\\n    //     var mDiff = mAvg - mPrice\\n    //     var trend = (mDiff / ns.stock.getAskPrice(target)) *0.1\\n\\n    //     if (mValues.length > 200 && trend > 75) {\\n    //       ns.print(target + \\\" - BULL TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n    //     if (mValues.length > 200 && trend < -75) {\\n    //       ns.print(target + \\\" - BEAR TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n\\n    //   await ns.asleep(2000);\\n    //   ns.print(target + ': ' + trend)\\n\\n    // }\\n\\n\\n\\n    //Stock Crawler Module\\n    // if (stockCrawler == true) {\\n    //   ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\n    //   var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\n    //     for (const target of market) {\\n    //     var tvol = ns.stock.getVolatility(target);\\n    //     var tfor = ns.stock.getForecast(target);\\n    //       if (tvol > 0.01 && tfor > 0.6) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //       if (tvol > 0.01 && tfor < 0.4) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //     await ns.asleep(100);\\n    //   stockCrawler = false;\\n    //   }\\n    // }\\n\\n\\n\\n    //failsafe exit condition\\n    if (wantsShutdown == true) {\\n      ns.exit();\\n    }\\n\\n    if (ns.peek(3) != \\\"NULL PORT DATA\\\") {\\n\\n      let loadedticker = ns.peek(3);\\n      var position = ns.stock.getPosition(loadedticker);\\n      var maxlongshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var maxshortshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var exposureLong = position[0] * position[1];\\n      var exposureShort = position[2] * position[3];\\n\\n      if (buyMaxLongShares == true) {\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxLongShares = false;\\n\\n      }\\n      if (buyMaxShortShares == true) {\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxShortShares = false;\\n\\n      }\\n      if (sellAllShares == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED **ALL** POSITIONS AND ORDERS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        sellAllShares = false;\\n\\n      }\\n      if (closeLongPosition == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeLongPosition = false;\\n\\n      }\\n      if (closeShortPosition == true) {\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeShortPosition = false;\\n      }\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\n\\n\\n      if (autoTrader == true && position[0] > '1' && ns.peek(4) < '0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sell(loadedticker, position[0]);\\n\\n      }\\n      if (autoTrader == true && position[2] > '1' && ns.peek(4) > '-0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n\\n\\n      }\\n      if (autoTrader == true && position[0] == '0' && ns.peek(4) > '5.0') {\\n        ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxLongShares = true;\\n\\n      }\\n      if (autoTrader == true && position[2] == '0' && ns.peek(4) < '-5.0') {\\n        ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxShortShares = true;\\n      }\\n\\n      //   //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\n\\n\\n      if (longStrangle == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getAskPrice(loadedticker) * 1.07), \\\"LimitSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getBidPrice(loadedticker) * 0.87), \\\"StopSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        longStrangle = false;\\n\\n      }\\n      if (shortStrangle == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getAskPrice(loadedticker) * 0.87), \\\"LimitSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getBidPrice(loadedticker) * 1.07), \\\"StopSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        shortStrangle = false;\\n\\n      }\\n      if (longHedge == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        longHedge = false;\\n\\n      }\\n      if (shortHedge == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        shortHedge = false;\\n\\n      }\\n      if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\n        ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        splitPlay = false;\\n\\n      }\\n\\n      //Auto-Trader button configuration.  Don't touch.\\n\\n      if (enableAutoTrader == true) {\\n        let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\n\\n        if (autoTradeConfirm == true) {\\n          ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\n          autoTrader = true;\\n          enableAutoTrader = false;\\n        }\\n        if (autoTradeConfirm == false) {\\n          ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\n          autoTrader = false;\\n          enableAutoTrader = false;\\n        }\\n      }\\n\\n    }\\n\\n    await ns.asleep(500)\\n    \\n  }\\n}\\n\\n\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\nconst ChartContainerwallstreet = {\\n  name: 'svg-chart-wallstreet',\\n  inject: ['appShutdown',],\\n  template: html`\\n    <bbv-win\\n      class=\\\"__CMP_NAME__\\\"\\n      title=\\\"WSE Active Trader\\\"\\n      no-pad\\n      start-height=\\\"770px\\\"\\n      start-width=\\\"619px\\\"\\n    >\\n \\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\n      <div>\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\n      </div>\\n      </details>\\n      </div>\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\n      <div>\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\n      <button @click=\\\"longStrangle\\\">LONG STRANGLE</button>\\n      <button @click=\\\"shortStrangle\\\">SHORT STRANGLE</button>\\n      </div>\\n      </details>\\n      <details align=\\\"right\\\"><summary>TOOLS</summary>\\n      <div>\\n      <button @click=\\\"enableAutoTrade\\\">AUTO TRADE</button>\\n      </div>\\n      </details>\\n\\n      <template #actions>\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\n      </template>\\n    </bbv-win>\\n  `,\\n\\n  data() {\\n    return {}\\n  },\\n\\n  methods: {\\n    shutdownAll() {\\n      getGlobal('tickerBus').emit('wantsShutdown')\\n      this.appShutdown()\\n    },\\n    buyMaxLong() {\\n      getGlobal('tickerBus').emit('buyMaxLong')\\n    },\\n    buyMaxShort() {\\n      getGlobal('tickerBus').emit('buyMaxShort')\\n    },\\n    closeAllPositions() {\\n      getGlobal('tickerBus').emit('closeAllPositions')\\n    },\\n    sellMaxLong() {\\n      getGlobal('tickerBus').emit('closeLong')\\n    },\\n    sellMaxShort() {\\n      getGlobal('tickerBus').emit('closeShort')\\n    },\\n    enableAutoTrade() {\\n      getGlobal('tickerBus').emit('autoTrade')\\n    },\\n    longStrangle() {\\n      getGlobal('tickerBus').emit('longStrangle')\\n    },\\n    shortStrangle() {\\n      getGlobal('tickerBus').emit('shortStrangle')\\n    },\\n    quickSplit() {\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\n    },\\n    longHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\n    },\\n    shortHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\n    },\\n    // stockCrawler() {\\n    //   getGlobal('tickerBus').emit('stockCrawler')\\n    // },\\n    // enableSmartTrade() {\\n    //   getGlobal('tickerBus').emit('enableSmartTrade')\\n    // },\\n    sellAllStocks() {\\n      getGlobal('tickerBus').emit('sellAllStocks')\\n    },\\n    loadECP() {\\n      getGlobal('tickerBus').emit('loadECP')\\n    },\\n    loadMGCP() {\\n      getGlobal('tickerBus').emit('loadMGCP')\\n    },\\n    loadBLD() {\\n      getGlobal('tickerBus').emit('loadBLD')\\n    },\\n    loadCLRK() {\\n      getGlobal('tickerBus').emit('loadCLRK')\\n    },\\n    loadOMTK() {\\n      getGlobal('tickerBus').emit('loadOMTK')\\n    },\\n    loadFSIG() {\\n      getGlobal('tickerBus').emit('loadFSIG')\\n    },\\n    loadKGI() {\\n      getGlobal('tickerBus').emit('loadKGI')\\n    },\\n    loadFLCM() {\\n      getGlobal('tickerBus').emit('loadFLCM')\\n    },\\n    loadSTM() {\\n      getGlobal('tickerBus').emit('loadSTM')\\n    },\\n    loadDCOMM() {\\n      getGlobal('tickerBus').emit('loadDCOMM')\\n    },\\n    loadHLS() {\\n      getGlobal('tickerBus').emit('loadHLS')\\n    },\\n    loadVITA() {\\n      getGlobal('tickerBus').emit('loadVITA')\\n    },\\n    loadICRS() {\\n      getGlobal('tickerBus').emit('loadICRS')\\n    },\\n    loadUNV() {\\n      getGlobal('tickerBus').emit('loadUNV')\\n    },\\n    loadAERO() {\\n      getGlobal('tickerBus').emit('loadAERO')\\n    },\\n    loadOMN() {\\n      getGlobal('tickerBus').emit('loadOMN')\\n    },\\n    loadSLRS() {\\n      getGlobal('tickerBus').emit('loadSLRS')\\n    },\\n    loadGPH() {\\n      getGlobal('tickerBus').emit('loadGPH')\\n    },\\n    loadNVMD() {\\n      getGlobal('tickerBus').emit('loadNVMD')\\n    },\\n    loadWDS() {\\n      getGlobal('tickerBus').emit('loadWDS')\\n    },\\n    loadLXO() {\\n      getGlobal('tickerBus').emit('loadLXO')\\n    },\\n    loadRHOC() {\\n      getGlobal('tickerBus').emit('loadRHOC')\\n    },\\n    loadAPHE() {\\n      getGlobal('tickerBus').emit('loadAPHE')\\n    },\\n    loadSYSC() {\\n      getGlobal('tickerBus').emit('loadSYSC')\\n    },\\n    loadCTK() {\\n      getGlobal('tickerBus').emit('loadCTK')\\n    },\\n    loadNTLK() {\\n      getGlobal('tickerBus').emit('loadNTLK')\\n    },\\n    loadOMGA() {\\n      getGlobal('tickerBus').emit('loadOMGA')\\n    },\\n    loadFNS() {\\n      getGlobal('tickerBus').emit('loadFNS')\\n    },\\n    loadJGN() {\\n      getGlobal('tickerBus').emit('loadJGN')\\n    },\\n    loadSGC() {\\n      getGlobal('tickerBus').emit('loadSGC')\\n    },\\n    loadCTYS() {\\n      getGlobal('tickerBus').emit('loadCTYS')\\n    },\\n    loadMDYN() {\\n      getGlobal('tickerBus').emit('loadMDYN')\\n    },\\n    loadTITN() {\\n      getGlobal('tickerBus').emit('loadTITN')\\n    },\\n  },\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///777b2592-0b67-4742-bf0c-3beb1718e984\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///eb3ee5cb-4ffa-47a6-9d02-a0b18bd981a5\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///e6a4cae5-3b1e-4244-bc34-6ec7d248dc70\",\"moduleSequenceNumber\":392},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///046d8123-d6ce-408c-932c-e67d52f2c4de\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///c7e29a2b-8410-4ba7-b9b4-9863b9301ea9\",\"moduleSequenceNumber\":391},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///db26d5f5-3ffc-4e22-b090-97ee17c00c51\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///c9e311c7-424b-4f12-bfd4-f0305e945aea\",\"moduleSequenceNumber\":418},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5a062155-06db-4e40-9764-aa8a204325ce\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///b158d588-4ef9-4f04-bd37-726f2af30a89\",\"moduleSequenceNumber\":421},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///76dcc774-9c1a-4e55-8d6d-1e9477f3aa4b\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///5a2ca73b-a6a7-4df4-bdbc-bb8b8d8b1d45\",\"moduleSequenceNumber\":403},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b5f2facc-d11d-4657-85ea-c0a196e6f1b0\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///0ade0574-6890-43cd-b798-ca369e8249d8\",\"moduleSequenceNumber\":409},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5c134902-f47d-41af-8ba2-c9672a400542\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///fb16f6ba-9ea3-4d23-ba89-772c3f50dcac\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///91c9d3a7-4ce6-4a3a-9189-37cddd700095\",\"moduleSequenceNumber\":404},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5da68562-43cd-466c-9275-e7d03bc85cca\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///ef4a5c46-6c8f-4c3f-b929-d6acbf268612\",\"moduleSequenceNumber\":428},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///2738a764-89f5-413c-935a-6b5cfc8d3290\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///884a08dc-e738-40c7-ab6e-14461769b83e\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///4af47ac8-7bbc-42e6-a006-7ae2703f5d1f\",\"moduleSequenceNumber\":417},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///f9b07b7b-0f1f-4122-bc7d-9b320117ee14\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///bb1a32f9-9ba2-40d3-be04-656cb3ca5577\",\"moduleSequenceNumber\":419},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///029cdb0e-8d36-4c75-9bcf-077b803b72cb\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///9f86259e-c6a3-4e63-b0f2-627414b71870\",\"moduleSequenceNumber\":397},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///e2451fd6-943b-45d6-9a5a-2797b64b4cf5\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///8219c177-efdd-49a0-b2d1-e75bd47f02cf\",\"moduleSequenceNumber\":402},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///887eb9dc-c836-4594-a606-226ef5f5a18b\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///45f87900-50da-481c-8438-8faca67bbe49\",\"moduleSequenceNumber\":395},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///bc1f84f5-cd0c-4c6c-af6b-ab2430d69c4b\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///b505219d-10ac-4baa-9b4f-0f4e1166f18d\",\"moduleSequenceNumber\":425},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b3812405-dd31-4888-b5d7-c001d75748cf\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///cc29cfed-bcb4-49fd-a5f7-aad0197dccf6\",\"moduleSequenceNumber\":400},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f01cdb62-2d78-4e2a-9733-fd82d438dc80\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///51d306a8-d81c-49c6-976b-5d5ed9d727b4\",\"moduleSequenceNumber\":416},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8ce41395-d64c-454d-b9d6-76383adb50d4\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///2f09c155-3435-4cf8-8452-20c27f8da0ae\",\"moduleSequenceNumber\":413},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///94a8c714-07e1-4566-9c1e-a4d0f434c01c\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///3436b602-34af-4d5e-816a-14b303220649\",\"moduleSequenceNumber\":424},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4cb96fd4-4c03-4367-91a5-e184226cddb8\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4f146bde-2883-4739-9269-17a787754502\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///e0ba4b11-34be-4a19-b589-65ce32495c6b\",\"moduleSequenceNumber\":398},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///844089d0-90d5-4612-ac8d-65a0d3f6a15a\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///c7c3c1dc-3e29-42f7-9d75-12eb6df7f9b7\",\"moduleSequenceNumber\":414},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///4fd5adda-7a37-45fa-b744-1be91d22e69b\",\"moduleSequenceNumber\":9778}],\"dependents\":[],\"ramUsage\":25.15,\"server\":\"home\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from '/bitpacks/super-stonks/wallstreet-lite.js'\\n\\nexport async function main(ns) {\\n  const doc = eval('document')\\n  var ticker = ns.args[0];\\n\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\n  const resolution = 420\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\n  const delay = 10\\n\\n  const textSize = 2.5\\n\\n  const lineColor = 'green'\\n\\n  const strokeWidth = 0.5\\n\\n  const conWidth = 80\\n  const conHeight = 60\\n  const wBuffer = 1\\n  const hBuffer = 5\\n  await ns.clearPort(1)\\n  await ns.clearPort(2)\\n  await ns.writePort(3, ticker)\\n\\n\\n  var container = doc.getElementById('graph_container')\\n\\n  if (container != null) {\\n    KillChildren(container)\\n    container.remove()\\n  }\\n //Give the chart time to load.\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\n\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\n  const containerAttr = [\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\n    ['id', 'graph_container'],\\n  ]\\n  AddAttr(container, containerAttr)\\n  \\n  dropPage.appendChild(container)\\n\\n  const uiThickness = 0.1\\n\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(topLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(topLine)\\n\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(midLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight / 2)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight / 2)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(midLine)\\n\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(botLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight - hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight - hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(botLine)\\n\\n\\n  var lines = []\\n  for (let i = 0; i < resolution - 1; i++) {\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '60'],\\n      ['x2', '100'],\\n      ['y2', '0'],\\n      ['stroke', 'green'],\\n      ['stroke-width', '1'],\\n    ])\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '0'],\\n      ['x2', '0'],\\n      ['y2', '0'],\\n      ['stroke', lineColor],\\n      ['stroke-width', String(strokeWidth)],\\n    ])\\n    container.appendChild(lines[i])\\n  }\\n\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(topTextBG, topText, container)\\n\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(midTextBG, midText, container)\\n\\n  var botText = CreateText('COLLECTING DATA...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(botTextBG, botText, container)\\n\\n\\n  var values = []\\n  while (true) {\\n    var ticker = ns.args[0];\\n    var position = ns.stock.getPosition(ticker)\\n    try {\\n      if (values.length == resolution) {\\n        values.splice(0, 1)\\n        await ns.clearPort(1);\\n        await ns.clearPort(2);\\n        \\n      }\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\n\\n      if (values.length > 2) {\\n        var lineCount = values.length - 2\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\n\\n        var moneyList = []\\n\\n        for (let i = 0; i < values.length; i++) {\\n          moneyList[i] = values[i]\\n        }\\n      await ns.clearPort(1)\\n      await ns.clearPort(2)\\n      await ns.writePort(1, (Math.max(...moneyList)))\\n      await ns.writePort(2, (Math.min(...moneyList)))\\n      await ns.writePort(3, ticker)\\n        var tenmin = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\n        var pricediff = (((ns.peek(2) + ns.peek(1)) / 2) - ns.stock.getAskPrice(ticker))\\n        var forecast = (pricediff / ns.stock.getAskPrice(ticker) *-1)\\n        var estVol = ns.nFormat((moneyList[299] + moneyList[2]) / 419, '$0.00a')\\n      await ns.writePort(4, forecast * 100);\\n      //await ns.writePort(4, (pricediff / ns.stock.getAskPrice(ticker) *-1000))\\n\\n\\n        var highestVal = moneyList[0]\\n        var lowestVal = moneyList[0]\\n\\n        for (var i in moneyList) {\\n          if (moneyList[i] > highestVal) {\\n            highestVal = moneyList[i]\\n          }\\n          if (moneyList[i] < lowestVal) {\\n            lowestVal = moneyList[i]\\n          }\\n        }\\n\\n        highestVal = highestVal - lowestVal\\n        //highestVal = moneyList[i];\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\n        //monitor the player's cash, but has been tweaked for stocks.\\n\\n        for (let i in moneyList) {\\n          if (highestVal != lowestVal) {\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\n          } else {\\n            moneyList[i] = values[i]\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\n          }\\n        }\\n\\n        for (let i = 0; i < lineCount; i++) {\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\n          if (isNaN(temp)) {\\n            ns.asleep(5000);\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\n          }\\n\\n          var attr = [\\n            ['x1', String(i * xOff + wBuffer)],\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\n          ]\\n          AddAttr(lines[i], attr)\\n\\n        }\\n        //ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0')\\n        topText.innerHTML = 'Overall Trend: ' + ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\n        HighlightText(topTextBG, topText, container)\\n\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+ tenmin +' 7m AVG)'\\n        HighlightText(midTextBG, midText, container)\\n\\n        botText.innerHTML = 'Movement Per Tick: ' + estVol + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\n        HighlightText(botTextBG, botText, container)\\n\\n\\n        \\n      }\\n\\n\\n    } catch (err) {\\n      // This might come in handy later\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\n    }\\n    await ns.sleep(delay * 100)\\n    await ns.clearPort(1);\\n    await ns.clearPort(2);\\n    await ns.clearPort(4);\\n\\n    if (ns.isRunning(\\\"/bitpacks/super-stonks/wallstreet-lite.js\\\", \\\"home\\\") == false) {\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      await ns.clearPort(4);\\n      ns.exit();\\n    }\\n\\n  }\\n}\\n\\nfunction AddAttr(element, attrList) {\\n  for (var i in attrList) {\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\n  }\\n}\\n\\nfunction KillChildren(element) {\\n  const children = element.children\\n  for (var line of children) {\\n    line.remove()\\n  }\\n}\\n\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\n  AddAttr(textElm, [\\n    ['x', String(x)],\\n    ['y', String(y)],\\n    ['fill', 'lightgrey'],\\n    ['font-size', String(textSize)],\\n    ['font-family', 'sans-serif'],\\n    ['stroke', 'black'],\\n    ['stroke-width', '0'],\\n  ])\\n  textElm.innerHTML = text\\n  parent.appendChild(textElm)\\n  return textElm\\n}\\n\\nfunction HighlightText(bg, text, parent) {\\n  var textBox = text.getBBox()\\n\\n  AddAttr(bg, [\\n    ['x', String(textBox.x)],\\n    ['y', String(textBox.y)],\\n    ['width', String(textBox.width)],\\n    ['height', String(textBox.height)],\\n    ['fill', 'black'],\\n    ['opacity', '0.0'],\\n  ])\\n  parent.insertBefore(bg, text)\\n  \\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c5ff3af9-22ea-4485-bcb0-340c7d4edf17\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///31dd806c-2082-4267-8d00-3f6e0912e3ae\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///619cdc0d-7a94-45f1-9372-ddcc30388e81\",\"moduleSequenceNumber\":392},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a5e478f2-ed40-455b-a899-584580a39f20\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///7f81078a-9696-4962-be88-bedabc6702f0\",\"moduleSequenceNumber\":391},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///eee62cf1-5f2a-45f4-93b1-f1a45ebc0e60\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///651b6e90-23f8-4106-a667-6952f042e828\",\"moduleSequenceNumber\":418},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a343cc58-6579-48b0-a37c-a542fa959161\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///73a1ae22-daf1-4bd0-a966-d1a39abae16e\",\"moduleSequenceNumber\":421},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0535cc31-dc23-4048-9627-65d0e91c0ad6\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///0cbd800a-7fdf-4abb-a3bb-2e10346972c1\",\"moduleSequenceNumber\":403},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///dee801ca-36e1-460e-954c-5e953f85b3aa\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///cd2b96ec-1f35-4ff0-ab0c-2e56aa0ba4da\",\"moduleSequenceNumber\":409},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///08137f5e-939c-4b04-a87d-8074ce8c4c21\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///767e618d-6de3-4c5c-8af5-a4297a1c9548\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///c7f5bf2e-b3ee-419d-a09c-10e9511a1021\",\"moduleSequenceNumber\":404},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///82a4dd0b-8e06-43f4-b74a-be78c7eb761c\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///7d9a1a4b-1865-4b68-9ebd-505080090451\",\"moduleSequenceNumber\":428},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///bd1ba29f-bd67-4c1e-8c41-1e668452eaba\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///6c70d256-1cad-44c0-927e-15740a070447\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///551c52a3-839f-4435-b131-d23c0fc80f42\",\"moduleSequenceNumber\":417},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///e11273ea-1159-41ec-b5cb-3a759541a4a1\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///a44f3617-d561-4c11-8f7b-7600b730f345\",\"moduleSequenceNumber\":419},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3f41be19-7eb9-4a84-a631-7ba834aab36a\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///3eb775df-4821-4974-9887-b9ffd8b48798\",\"moduleSequenceNumber\":397},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4aa1b57b-94cc-4340-bdf0-6d445859cc14\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///01cc548e-1cda-4571-9813-9cade3a666e0\",\"moduleSequenceNumber\":402},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///260c7fc1-11bb-4081-8611-0946558fa2fb\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///33205926-4f8f-4b91-b977-6319683985a1\",\"moduleSequenceNumber\":395},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///50857060-3729-471e-b7ad-3400107c21ee\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///94995578-3e59-4adc-95eb-9d481d9ae83c\",\"moduleSequenceNumber\":425},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///051d651f-a947-425e-ba6e-4f1c4f6fd761\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///ccfd0a3a-3371-4be6-ac67-59e8c2ee5d70\",\"moduleSequenceNumber\":400},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///abc52186-141f-44e6-889e-4676681db0d7\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///7a5e5497-ed3c-4cdd-ac0b-3902159ba14d\",\"moduleSequenceNumber\":416},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///9becdfd0-cc1a-45dd-b3ea-e4d30a2b0b62\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///b80790eb-57cb-4b73-b633-34abc8d7fde6\",\"moduleSequenceNumber\":413},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c494e1a4-8ccc-4651-8d4e-049a2a0de2e1\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///19545e5f-21ca-4144-8ba7-62e00c18e227\",\"moduleSequenceNumber\":424},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///95ec3a9a-701f-461b-85f9-c60dc2db7ba4\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///e59b4a3e-795d-409a-890e-29cae62037a4\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///41c3765b-1242-413d-aab1-76bef13e4be2\",\"moduleSequenceNumber\":398},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c1d00069-017a-4538-aa6a-151c14b4327c\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///73af457d-8d70-453a-8d55-b16b2f9ffca3\",\"moduleSequenceNumber\":414},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///a92c93e8-4861-4435-88ac-7665a19166e9\",\"moduleSequenceNumber\":9778},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"blob:file:///080fce7a-d550-419a-9e1c-85a21fcb6fbe\",\"moduleSequenceNumber\":9779}],\"dependents\":[],\"ramUsage\":10.65,\"server\":\"home\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var current_min_ram, new_purchased_server,\\n        current_purchasing_ram = 4096,\\n        current_needed_money = ns.getPurchasedServerCost(current_purchasing_ram),\\n        existing_servers = ns.getPurchasedServers(),\\n        // server_limit = ns.getPurchasedServerLimit(),\\n        server_limit = 5,\\n        ram_limit = ns.getPurchasedServerMaxRam();\\n\\n    ns.tprint('buy_server.js running!');\\n\\n    await update_grind_server_txt(ns, existing_servers);\\n\\n    while (true) {\\n        await ns.sleep(1200000);  // Sleep first to allow machine to boot\\n\\n        ns.print('Current purchasing RAM: ', current_purchasing_ram)\\n\\n        if (ns.getPlayer().money * 0.25 > current_needed_money) {\\n            if (existing_servers.length >= server_limit) {\\n                current_min_ram = await delete_small_server(ns, existing_servers);\\n                existing_servers = ns.getPurchasedServers();\\n                await update_grind_server_txt(ns, existing_servers);\\n                if (current_min_ram == current_purchasing_ram) {\\n                    current_purchasing_ram *= 2;\\n                } if (current_purchasing_ram > ram_limit) {\\n                    current_purchasing_ram = ram_limit;\\n                } if (current_min_ram == ram_limit) {\\n                    ns.toast('buy_server.js has purchased all available servers. Now exiting...')\\n                    ns.exit()\\n                }\\n            }\\n            new_purchased_server = ns.purchaseServer('grinding-server', current_purchasing_ram);\\n            existing_servers.push(new_purchased_server);\\n            await update_grind_server_txt(ns, existing_servers);\\n            ns.run('/scripts/transport_files.js', 1, new_purchased_server);\\n            ns.toast('Purchased new server ' + new_purchased_server);\\n            await ns.sleep(5000);  // Make sure that files were transported\\n            ns.run('/scripts/grind_on_my_servers.script');\\n        }\\n    }\\n}\\n\\nasync function delete_small_server(ns, servers) {\\n    var min_ram = -1,\\n        min_index = -1;\\n\\n    for (var i = 0; i < servers.length; i++) {\\n        if (ns.getServerMaxRam(servers[i]) < min_ram || min_ram == -1) {\\n            min_ram = ns.getServerMaxRam(servers[i]);\\n            min_index = i;\\n        }\\n    }\\n\\n    await ns.killall(servers[min_index]);\\n    await ns.deleteServer(servers[min_index]);\\n    await ns.toast('Deleted ' + servers[min_index]);\\n    return min_ram;\\n}\\n\\nasync function update_grind_server_txt(ns, servers) {\\n    await ns.print('Received servers ', servers, 'to update');\\n    await ns.write('/grind_servers.txt', servers.join('\\\\r\\\\n'), 'w');\\n}\",\"filename\":\"/scripts/buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buy_server.js\",\"url\":\"blob:file:///c99f22b7-11be-40de-a1f5-2b025d9d084c\",\"moduleSequenceNumber\":742}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    await ns.scp('/scripts/hack.script', host);\\n    await ns.scp('/scripts/weaken-exp-grind.script', host);\\n    await ns.scp('/scripts/simple_hack.script', host);\\n    await ns.scp('/scripts/simple_share.js', host);\\n    await ns.scp('/scripts/weaken_and_grow_only.script', host);\\n    ns.print('Tranported files to ', host);\\n}\",\"filename\":\"/scripts/transport_files.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/transport_files.js\",\"url\":\"blob:file:///7274a023-eb8d-4951-88e2-b89e5475db17\",\"moduleSequenceNumber\":1483}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///2ce63a19-fbb5-4ac8-9a6d-66f2c59b57b8\",\"moduleSequenceNumber\":1343}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"write('/ someFolder/hello.txt', 'Hello world!');\",\"filename\":\"/scripts/test.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\",\"grinding-server\",\"grinding-server-0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"victims.txt\",\"text\":\"neo-net\\r\\nsilver-helix\\r\\nzer0\\r\\niron-gym\\r\\nmax-hardware\\r\\nharakiri-sushi\\r\\nhong-fang-tea\\r\\nnectar-net\\r\\nn00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nsilver-helix\\r\\nphantasy\\r\\nomega-net\\r\\ncrush-fitness\\r\\njohnson-ortho\\r\\nthe-hub\\r\\ncomptek\\r\\nnetlink\\r\\nrothman-uni\\r\\n \\r\\nCSEC\\r\\njohnson-ortho\\r\\navmnite-02h\\r\\nzb-institute\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"the_network.txt\",\"text\":\"[[\\\"home\\\",1,0,1,1],[\\\"n00dles\\\",1,1750000,3000,1.3980000000000004],[\\\"foodnstuff\\\",1,50000000,5,75.01000000056837],[\\\"sigma-cosmetics\\\",5,57500000,10,74.86200000028256],[\\\"joesguns\\\",10,62500000,20,74.98500000017178],[\\\"hong-fang-tea\\\",30,75000000,20,74.20000000003813],[\\\"harakiri-sushi\\\",40,100000000,40,73.35200000002209],[\\\"iron-gym\\\",100,500000000,20,56.045999999994564],[\\\"darkweb\\\",1,0,1,74.50799999963043],[\\\"nectar-net\\\",20,68750000,25,73.63600000006413],[\\\"max-hardware\\\",80,250000000,30,56.92399999999512],[\\\"zer0\\\",75,187500000,40,61.783999999992226],[\\\"CSEC\\\",57,0,0,0],[\\\"omega-net\\\",211,1723395200,30,46.195999999995195],[\\\"neo-net\\\",50,125000000,25,72.53799999999936],[\\\"phantasy\\\",100,600000000,35,53.43199999999575],[\\\"silver-helix\\\",150,1125000000,30,50.05799999999464],[\\\"comptek\\\",388,6119572375,59,57.569999999998565],[\\\"avmnite-02h\\\",205,0,0,0],[\\\"the-hub\\\",296,4814372125,54,45.363999999996295],[\\\"netlink\\\",409,6875000000,71,54.73199999999906],[\\\"johnson-ortho\\\",293,2087769050,65,60.19599999999749],[\\\"crush-fitness\\\",254,1441254775,29,47.063999999996064],[\\\"zb-institute\\\",764,24815867775,79,79.1440000000013],[\\\"syscore\\\",625,12123215950,64,66.00400000000133],[\\\"summit-uni\\\",447,5944870325,59,52.24799999999941],[\\\"I.I.I.I\\\",355,0,0,0],[\\\"catalyst\\\",446,9025750325,30,53.74599999999957],[\\\"rothman-uni\\\",387,4988442250,39,47.733999999998474],[\\\"lexo-corp\\\",664,19470985725,57,65.9000000000012],[\\\"rho-construction\\\",502,13222733500,51,41.09399999999832],[\\\"millenium-fitness\\\",491,6250000000,29,45.74799999999881],[\\\"aevum-police\\\",420,6429802425,42,73.82400000000223],[\\\"alpha-ent\\\",509,17609525400,50,64.23000000000205],[\\\"snap-fitness\\\",771,11250000000,48,41.971999999999646],[\\\"galactic-cyber\\\",832,21014457000,71,58.11599999999975],[\\\"aerocorp\\\",868,27588242200,65,79.90800000000077],[\\\"global-pharm\\\",784,40498812600,90,75.0120000000009],[\\\"omnia\\\",896,23135532300,69,90.11600000000058],[\\\"deltaone\\\",833,36370607950,52,76.90800000000077],[\\\"unitalife\\\",787,25974602775,75,74.0120000000009],[\\\"univ-energy\\\",895,29392586550,84,84.38800000000053],[\\\"defcomm\\\",1026,23365939700,70,87.01200000000046],[\\\"zeus-med\\\",822,33251430975,76,77.38800000000059],[\\\"icarus\\\",866,23613704050,94,92.2080000000007],[\\\"solaris\\\",845,19236041600,76,74.90800000000077],[\\\"infocomm\\\",948,15124969700,43,77.38800000000053],[\\\"zb-def\\\",815,23216834975,73,58.54799999999981],[\\\"nova-med\\\",805,30424295100,66,71.46800000000069],[\\\"taiyang-digital\\\",929,21064273525,80,77.38800000000053],[\\\"microdyne\\\",874,13174270150,90,65.46800000000069],[\\\"titan-labs\\\",817,18752014475,64,78.38800000000059],[\\\"run4theh111z\\\",506,0,0,0],[\\\"applied-energetics\\\",831,19691087600,75,67.46800000000069],[\\\"vitalife\\\",782,17689401800,61,82.38800000000059],[\\\"stormtech\\\",1020,29582301575,90,89.24000000000035],[\\\"helios\\\",801,18108376900,80,84.38800000000059],[\\\"fulcrumtech\\\",1117,42157048525,81,88.24000000000035],[\\\"4sigma\\\",1094,448448605800,85,54.467999999999854],[\\\"kuai-gong\\\",1239,727744968900,96,97.16000000000025],[\\\".\\\",524,0,0,0],[\\\"omnitek\\\",1044,370029131825,95,98.24000000000035],[\\\"b-and-a\\\",972,449036526675,70,79.38800000000053],[\\\"blade\\\",912,469649590650,77,90.32000000000045],[\\\"clarkinc\\\",1013,581518461825,64,42.607999999999834],[\\\"powerhouse-fitness\\\",993,22500000000,51,53.54799999999981],[\\\"nwo\\\",1110,859300132350,82,98.16000000000025],[\\\"megacorp\\\",1255,1334614097725,99,98.16000000000025],[\\\"ecorp\\\",1369,1271765696975,99,98.16000000000025],[\\\"fulcrumassets\\\",1194,25000000,1,98.16000000000025],[\\\"The-Cave\\\",925,0,0,1]]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"grind_servers.txt\",\"text\":\"grinding-server-1\\r\\ngrinding-server-2\\r\\ngrinding-server-3\\r\\ngrinding-server\\r\\ngrinding-server-0\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"all_servers_names.txt\",\"text\":\"n00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nhong-fang-tea\\r\\nharakiri-sushi\\r\\niron-gym\\r\\nnectar-net\\r\\nmax-hardware\\r\\nCSEC\\r\\nzer0\\r\\nphantasy\\r\\nomega-net\\r\\nneo-net\\r\\nsilver-helix\\r\\nthe-hub\\r\\njohnson-ortho\\r\\ncrush-fitness\\r\\navmnite-02h\\r\\ncomptek\\r\\nnetlink\\r\\nzb-institute\\r\\nrothman-uni\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"# TODO\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/manual.txt\",\"text\":\"===\\n= BB Theme Browser\\n===\\n\\nBrowser themes submitted by other users, vote for your\\nfavourite and submit your own.\\n\\n===\\n\\nRegistration\\n\\nWe use an email / password auth system so that we know who\\nis submitting the theme. We don't actually use the email,\\nwe just use it for identification purposes.\\n\\nEach login will create a PAT token stored in your local\\nstorage. You can copy/paste it to avoid logging in, if you\\nwant. You can also integrate using the same method, for your\\nown app. Go ahead! https://bitburner.daft.host\\n\\n===\\n\\nBB Theme Browser Developers\\n\\nPhil and Jack have worked together on many projects over\\nthe years, this is the first non-work related project to\\nhave worked together on.\\n\\nPhil specializes in frontend development; VueJS, SCSS, \\nthe maths aspect of things.\\n\\nJack specializes in backend development and infrastructure,\\nmaking the API that the frontend works with.\\n\\nPhil:\\n    url: https://github.com/philiparmstead\\n    discord: Phil\\n\\nJack:\\n    url: https://github.com/surdaft\\n    discord: SurDaft\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/bb-vue/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"bb-vue\\\",\\n    \\\"author\\\": \\\"smolgumball\\\",\\n    \\\"descriptiveName\\\": \\\"Run Vue 3 apps inside BitBurner.\\\",\\n    \\\"shortDescription\\\": \\\"Extension for UI development using Vue 3 + SCSS in game. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"longDescription\\\": \\\"Includes starter components, examples, and lots of quality-of-life features for rapid UI development and extension inside BitBurner. Supports SCSS compilation of component styles, global SCSS mixins, loading of external stylesheets + scripts, and more. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"tags\\\": [\\n        \\\"library\\\",\\n        \\\"ui\\\",\\n        \\\"qol\\\",\\n        \\\"os\\\",\\n        \\\"ns2\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/someFolder/hello.txt\",\"text\":\"Hello world!\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-9,-9,-9,-9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"14.1.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":94.79887500000085,\"minDifficulty\":33,\"moneyAvailable\":49333084255.13439,\"moneyMax\":1004809010650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1307,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"99.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":91.33550000000095,\"minDifficulty\":33,\"moneyAvailable\":52137571551.25051,\"moneyMax\":1056778344675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1153,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"31.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":80.24200000000116,\"minDifficulty\":26,\"moneyAvailable\":33988597828.40777,\"moneyMax\":660330375850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1029,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"98.2.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":254.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[220404,55,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2466.4059701792303,\"onlineMoneyMade\":220404,\"onlineRunningTime\":423.4099999999847,\"pid\":582,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[140,20,106,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7197.609477528384,\"onlineMoneyMade\":140,\"onlineRunningTime\":423.4099999999847,\"pid\":583,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[51,6,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3868.8721100850785,\"onlineMoneyMade\":51,\"onlineRunningTime\":423.4099999999847,\"pid\":584,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[64,7,41,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3344.4389587991905,\"onlineMoneyMade\":64,\"onlineRunningTime\":423.4099999999847,\"pid\":585,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[233,2,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1287.5304911809098,\"onlineMoneyMade\":233,\"onlineRunningTime\":423.4099999999847,\"pid\":586,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":910.6922986401554,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":587,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.1862004039735,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":588,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[110,5,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2392.9225226337876,\"onlineMoneyMade\":110,\"onlineRunningTime\":423.4099999999847,\"pid\":589,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":590,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":681.4490648445302,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":591,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[72,23,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5351.102334078706,\"onlineMoneyMade\":72,\"onlineRunningTime\":423.4099999999847,\"pid\":592,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.5440817342334,\"onlineMoneyMade\":29,\"onlineRunningTime\":423.4099999999847,\"pid\":593,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[451,4,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1340.9159017908491,\"onlineMoneyMade\":451,\"onlineRunningTime\":423.4099999999847,\"pid\":594,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":595,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":596,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":597,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":598,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":599,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":600,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":601,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3172,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3172,\"onlineRunningTime\":423.4099999999847,\"pid\":602,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":603,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":604,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":605,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":606,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":607,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":608,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":609,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":610,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":611,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":612,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":613,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":614,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":615,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":616,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":617,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":618,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":619,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":620,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":621,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":622,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":623,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":624,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":625,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.93135088731535,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":626,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":627,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":628,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":629,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":630,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":631,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":632,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":633,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":634,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":635,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":636,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":637,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":638,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":639,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":640,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":641,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":642,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.4099999999847,\"pid\":643,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":800.7811591491022,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1022,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":17,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1055,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"blade\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"blade\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///d8320857-9b2e-4ce8-aba2-0077708fb379\",\"moduleSequenceNumber\":1337}],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":84.08212500000101,\"minDifficulty\":31,\"moneyAvailable\":24929964680.409966,\"moneyMax\":547988887525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1136,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760604-BitRunners.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,-7,-1,10,6,6,7,-9,2,-2,0,-7,2,3,8,-10,8,0,-9,-10,10,6,9,0,2,-1,-1,-7,1,8,-3,8,-8,-2,-10,-2,9,-3,-3],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"51.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nwo\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nwo\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":88.82162500000108,\"minDifficulty\":33,\"moneyAvailable\":30684137197.176094,\"moneyMax\":648906957525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":976,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-86645-StormTechnologies.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[56,54,2,47,136,115,191,93,157,120,198,126,13,66,52,85,56,114,200,119,99,136,51,68,47,198,200]],\"reward\":{\"name\":\"Storm Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"87.5.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":48,\"hackDifficulty\":51.53599999999942,\"minDifficulty\":16,\"moneyAvailable\":16807630637.410095,\"moneyMax\":556402938300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1179,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"76.7.0.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":512,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[209919,50,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2383.501567820264,\"onlineMoneyMade\":209919,\"onlineRunningTime\":424.4099999999846,\"pid\":520,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[148,22,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7323.2222083753,\"onlineMoneyMade\":148,\"onlineRunningTime\":424.4099999999846,\"pid\":521,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[74,9,61,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4032.168660186073,\"onlineMoneyMade\":74,\"onlineRunningTime\":424.4099999999846,\"pid\":522,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[37,4,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3187.4230452405427,\"onlineMoneyMade\":37,\"onlineRunningTime\":424.4099999999846,\"pid\":523,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[217,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":217,\"onlineRunningTime\":424.4099999999846,\"pid\":524,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":910.6922986401554,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":525,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[40,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":728.5538389121243,\"onlineMoneyMade\":40,\"onlineRunningTime\":424.4099999999846,\"pid\":526,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43,2,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2223.3453359904483,\"onlineMoneyMade\":43,\"onlineRunningTime\":424.4099999999846,\"pid\":527,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[312,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":312,\"onlineRunningTime\":424.4099999999846,\"pid\":528,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[522,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":813.342432233794,\"onlineMoneyMade\":522,\"onlineRunningTime\":424.4099999999846,\"pid\":529,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[81,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":81,\"onlineRunningTime\":424.4099999999846,\"pid\":530,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":531,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1077.129167012322,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":532,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[47,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.45092338767193,\"onlineMoneyMade\":47,\"onlineRunningTime\":424.4099999999846,\"pid\":533,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[90,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.5220117948294,\"onlineMoneyMade\":90,\"onlineRunningTime\":424.4099999999846,\"pid\":534,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":535,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[21,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":21,\"onlineRunningTime\":424.4099999999846,\"pid\":536,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":537,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":538,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":539,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3200,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3200,\"onlineRunningTime\":424.4099999999846,\"pid\":540,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":541,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":542,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":543,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":544,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":545,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":546,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":547,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":548,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":549,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":550,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":551,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":552,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":553,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":554,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":555,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":556,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":557,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":558,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":559,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":560,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":561,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":562,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":563,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.93135088731535,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":564,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":565,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":566,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":567,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":568,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":569,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":570,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":571,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":572,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":573,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":574,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":575,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":576,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":577,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":578,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":579,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":580,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":424.4099999999846,\"pid\":581,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4616.267858624236,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1021,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":98,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///f3f3743b-8a98-4823-8889-933b01331ea2\",\"moduleSequenceNumber\":1336}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":90.28125000000101,\"minDifficulty\":33,\"moneyAvailable\":16761181960.987337,\"moneyMax\":342048955025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1087,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"58.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":61.98599999999942,\"minDifficulty\":20,\"moneyAvailable\":30882411855.01906,\"moneyMax\":468307356800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1146,\"serverGrowth\":99}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"16.6.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":88.08412500000101,\"minDifficulty\":32,\"moneyAvailable\":30428027813.45999,\"moneyMax\":620470173000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1053,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"83.9.7.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":254.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[178466,43,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2210.7840629057514,\"onlineMoneyMade\":178466,\"onlineRunningTime\":426.4099999999845,\"pid\":425,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[140,20,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.85456986715,\"onlineMoneyMade\":140,\"onlineRunningTime\":426.4099999999845,\"pid\":426,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[92,11,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4057.291206355456,\"onlineMoneyMade\":92,\"onlineRunningTime\":426.4099999999845,\"pid\":427,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[10,1,41,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3061.8103143936255,\"onlineMoneyMade\":10,\"onlineRunningTime\":426.4099999999845,\"pid\":428,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[127,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1303.2320825367744,\"onlineMoneyMade\":127,\"onlineRunningTime\":426.4099999999845,\"pid\":429,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":910.6922986401554,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":430,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[38,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":728.5538389121243,\"onlineMoneyMade\":38,\"onlineRunningTime\":426.4099999999845,\"pid\":431,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[66,3,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2279.8710648715614,\"onlineMoneyMade\":66,\"onlineRunningTime\":426.4099999999845,\"pid\":432,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[626,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669959,\"onlineMoneyMade\":626,\"onlineRunningTime\":426.4099999999845,\"pid\":433,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":681.4490648445302,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":434,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[76,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":76,\"onlineRunningTime\":426.4099999999845,\"pid\":435,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29,1,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564446,\"onlineMoneyMade\":29,\"onlineRunningTime\":426.4099999999845,\"pid\":436,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[108,1,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1143.0758507069538,\"onlineMoneyMade\":108,\"onlineRunningTime\":426.4099999999845,\"pid\":437,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":438,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":439,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[90,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":437.13230334727456,\"onlineMoneyMade\":90,\"onlineRunningTime\":426.4099999999845,\"pid\":440,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":22,\"onlineRunningTime\":426.4099999999845,\"pid\":441,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":442,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":443,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":444,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.54408173423326,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":445,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":446,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":447,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":448,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":449,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":450,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":451,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":452,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":453,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":454,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":455,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":456,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":457,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":458,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":459,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":460,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":461,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":462,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":463,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":464,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":465,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":466,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":467,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":468,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.93135088731535,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":469,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":470,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":471,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":472,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":473,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":474,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":475,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":476,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":477,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":478,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":479,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":480,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":481,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":482,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":483,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":484,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":485,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.4099999999845,\"pid\":486,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":800.7811591491022,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1020,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":17,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1052,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///7009d0d2-fbe4-4d08-86c5-4fcb37f14fe4\",\"moduleSequenceNumber\":1335}],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":81.44100000000103,\"minDifficulty\":30,\"moneyAvailable\":1771868853.683259,\"moneyMax\":36630718550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1074,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-10777.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[95,79,70],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"94.9.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":91.7497500000009,\"minDifficulty\":33,\"moneyAvailable\":996592.2866884294,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1226,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"92.3.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":77.8113750000011,\"minDifficulty\":29,\"moneyAvailable\":1473425094.7062743,\"moneyMax\":29573187850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":968,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229275.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[91,10,19,64,154,108,113,10,98,64,4,132,140,185,89,126,25,183,92,13,18,81,190,112,152,135,19,18]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"51.3.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":80.887750000002,\"minDifficulty\":29,\"moneyAvailable\":1308633820.9832196,\"moneyMax\":21774283950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":901,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"17.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":73.02600000000153,\"minDifficulty\":23,\"moneyAvailable\":859414335.9110079,\"moneyMax\":18926802250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":914,\"serverGrowth\":55}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"44.7.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[204136,52,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2424.953768999747,\"onlineMoneyMade\":204136,\"onlineRunningTime\":425.40999999998456,\"pid\":487,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[95,14,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7021.751654342699,\"onlineMoneyMade\":95,\"onlineRunningTime\":425.40999999998456,\"pid\":488,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[90,11,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4057.2912063554563,\"onlineMoneyMade\":90,\"onlineRunningTime\":425.40999999998456,\"pid\":489,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[94,10,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3470.0516896461077,\"onlineMoneyMade\":94,\"onlineRunningTime\":425.40999999998456,\"pid\":490,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[226,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":226,\"onlineRunningTime\":425.40999999998456,\"pid\":491,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[28582,2,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004.901846775344,\"onlineMoneyMade\":28582,\"onlineRunningTime\":425.40999999998456,\"pid\":492,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[40,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":728.5538389121243,\"onlineMoneyMade\":40,\"onlineRunningTime\":425.40999999998456,\"pid\":493,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[89,4,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2336.3967937526745,\"onlineMoneyMade\":89,\"onlineRunningTime\":425.40999999998456,\"pid\":494,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[623,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669959,\"onlineMoneyMade\":623,\"onlineRunningTime\":425.40999999998456,\"pid\":495,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[782,3,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":879.289115928426,\"onlineMoneyMade\":782,\"onlineRunningTime\":425.40999999998456,\"pid\":496,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[78,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":78,\"onlineRunningTime\":425.40999999998456,\"pid\":497,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":498,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[108,1,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1143.0758507069538,\"onlineMoneyMade\":108,\"onlineRunningTime\":425.40999999998456,\"pid\":499,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[47,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.45092338767193,\"onlineMoneyMade\":47,\"onlineRunningTime\":425.40999999998456,\"pid\":500,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":501,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":502,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":503,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":504,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":505,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.40999999998456,\"pid\":506,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"helios\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"helios\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///7110e61f-12af-456b-b9e5-bc1acd96214f\",\"moduleSequenceNumber\":3003}],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":81.56162500000144,\"minDifficulty\":29,\"moneyAvailable\":975284873.1501571,\"moneyMax\":17104436150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":72}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"81.6.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[191189,46,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2293.6884652647173,\"onlineMoneyMade\":191189,\"onlineRunningTime\":425.0099999999846,\"pid\":507,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[131,19,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7210.170750613074,\"onlineMoneyMade\":131,\"onlineRunningTime\":425.0099999999846,\"pid\":508,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[76,9,61,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4032.1686601860724,\"onlineMoneyMade\":76,\"onlineRunningTime\":425.0099999999846,\"pid\":509,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[75,8,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3375.842141510919,\"onlineMoneyMade\":75,\"onlineRunningTime\":425.0099999999846,\"pid\":510,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[338,3,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1397.4416306719631,\"onlineMoneyMade\":338,\"onlineRunningTime\":425.0099999999846,\"pid\":511,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[14543,1,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":957.7970727077496,\"onlineMoneyMade\":14543,\"onlineRunningTime\":425.0099999999846,\"pid\":512,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[78,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":803.9214774202751,\"onlineMoneyMade\":78,\"onlineRunningTime\":425.0099999999846,\"pid\":513,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[111,5,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2392.9225226337876,\"onlineMoneyMade\":111,\"onlineRunningTime\":425.0099999999846,\"pid\":514,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":425.0099999999846,\"pid\":515,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1053,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///1b039d22-bd5c-471b-8d7f-de3d80f11141\",\"moduleSequenceNumber\":3004}],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":81.3427500000015,\"minDifficulty\":29,\"moneyAvailable\":973074652.6313736,\"moneyMax\":17783091050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":73}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136144-Volhaven.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[199,156,129,22,141,14,25,74,103,52,91,119,97,25,182,87,152,140,187,105,195,53,167,102,117,131,112,153,140,100,41,129,15,28,83,179,184,83,196,28,50,78,162,61,70],\"reward\":{\"name\":\"Volhaven\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"39.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"icarus\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"icarus\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":79.03537500000172,\"minDifficulty\":32,\"moneyAvailable\":1410824030.877693,\"moneyMax\":23592526200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":907,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"33.9.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[185270,45,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2279.8710648715573,\"onlineMoneyMade\":185270,\"onlineRunningTime\":428.80999999998437,\"pid\":332,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[102,15,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7059.4354735967745,\"onlineMoneyMade\":102,\"onlineRunningTime\":428.80999999998437,\"pid\":333,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[82,10,61,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4069.852479440148,\"onlineMoneyMade\":82,\"onlineRunningTime\":428.80999999998437,\"pid\":334,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[27,3,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3140.318271172949,\"onlineMoneyMade\":27,\"onlineRunningTime\":428.80999999998437,\"pid\":335,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[232,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.3368566043687,\"onlineMoneyMade\":232,\"onlineRunningTime\":428.80999999998437,\"pid\":336,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[28758,2,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1067.708212198803,\"onlineMoneyMade\":28758,\"onlineRunningTime\":428.80999999998437,\"pid\":337,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[78,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":78,\"onlineRunningTime\":428.80999999998437,\"pid\":338,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[67,3,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2279.8710648715614,\"onlineMoneyMade\":67,\"onlineRunningTime\":428.80999999998437,\"pid\":339,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[302,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":302,\"onlineRunningTime\":428.80999999998437,\"pid\":340,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1050,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///d57a9999-9c1e-4c83-be59-f678cdafc741\",\"moduleSequenceNumber\":2998}],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":81.40550000000222,\"minDifficulty\":29,\"moneyAvailable\":2058851885.9143445,\"moneyMax\":28534076750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"98.0.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[212153,52,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2411.1363686065865,\"onlineMoneyMade\":212153,\"onlineRunningTime\":428.4099999999844,\"pid\":341,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[153,22,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7323.222208375301,\"onlineMoneyMade\":153,\"onlineRunningTime\":428.4099999999844,\"pid\":342,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[74,9,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3981.923567847305,\"onlineMoneyMade\":74,\"onlineRunningTime\":428.4099999999844,\"pid\":343,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[64,7,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3328.7373674433256,\"onlineMoneyMade\":64,\"onlineRunningTime\":428.4099999999844,\"pid\":344,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[229,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.3368566043687,\"onlineMoneyMade\":229,\"onlineRunningTime\":428.4099999999844,\"pid\":345,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[13590,1,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":957.7970727077496,\"onlineMoneyMade\":13590,\"onlineRunningTime\":428.4099999999844,\"pid\":346,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.1862004039735,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":347,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[44,2,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2223.3453359904483,\"onlineMoneyMade\":44,\"onlineRunningTime\":428.4099999999844,\"pid\":348,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[301,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":301,\"onlineRunningTime\":428.4099999999844,\"pid\":349,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[257,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":257,\"onlineRunningTime\":428.4099999999844,\"pid\":350,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[82,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":82,\"onlineRunningTime\":428.4099999999844,\"pid\":351,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29,1,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564446,\"onlineMoneyMade\":29,\"onlineRunningTime\":428.4099999999844,\"pid\":352,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[109,1,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1143.0758507069538,\"onlineMoneyMade\":109,\"onlineRunningTime\":428.4099999999844,\"pid\":353,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[47,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":527.5734695570555,\"onlineMoneyMade\":47,\"onlineRunningTime\":428.4099999999844,\"pid\":354,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[91,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.5220117948294,\"onlineMoneyMade\":91,\"onlineRunningTime\":428.4099999999844,\"pid\":355,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":356,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":22,\"onlineRunningTime\":428.4099999999844,\"pid\":357,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":358,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":359,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":360,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3229,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3229,\"onlineRunningTime\":428.4099999999844,\"pid\":361,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":362,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":363,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":364,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":365,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":366,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":367,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":368,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":369,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":370,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":371,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":372,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":373,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":374,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":375,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":376,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":377,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":378,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":379,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":428.4099999999844,\"pid\":380,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///b3bb325e-d933-484c-8867-1d486779026c\",\"moduleSequenceNumber\":2999}],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":79.99000000000161,\"minDifficulty\":26,\"moneyAvailable\":1180415844.3926888,\"moneyMax\":21730899150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"20.4.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[225336,55,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2487.132070768972,\"onlineMoneyMade\":225336,\"onlineRunningTime\":426.6099999999845,\"pid\":421,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[136,20,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.8545698671505,\"onlineMoneyMade\":136,\"onlineRunningTime\":426.6099999999845,\"pid\":422,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[97,12,61,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4145.220117948299,\"onlineMoneyMade\":97,\"onlineRunningTime\":426.6099999999845,\"pid\":423,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[56,6,41,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3297.334184731596,\"onlineMoneyMade\":56,\"onlineRunningTime\":426.6099999999845,\"pid\":424,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1051,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///95dd88b2-0aa3-4289-b4cb-2afa0f62163e\",\"moduleSequenceNumber\":3001}],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":68.65000000000173,\"minDifficulty\":22,\"moneyAvailable\":765405410.0835984,\"moneyMax\":16027214275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":76}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"33.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":80.79000000000143,\"minDifficulty\":26,\"moneyAvailable\":1232714613.1524107,\"moneyMax\":21479566300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"77.3.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":61.94599999999886,\"minDifficulty\":19,\"moneyAvailable\":704660224.4352279,\"moneyMax\":18957235375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":867,\"serverGrowth\":78}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"18.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":81.15912500000216,\"minDifficulty\":29,\"moneyAvailable\":1455013331.0308058,\"moneyMax\":25277887775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":872,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"21.0.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[221951,54,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2466.405970179231,\"onlineMoneyMade\":221951,\"onlineRunningTime\":430.4099999999843,\"pid\":263,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[99,14,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7021.751654342699,\"onlineMoneyMade\":99,\"onlineRunningTime\":430.4099999999843,\"pid\":264,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[64,8,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994.4848409319966,\"onlineMoneyMade\":64,\"onlineRunningTime\":430.4099999999843,\"pid\":265,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57,6,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3281.632593375731,\"onlineMoneyMade\":57,\"onlineRunningTime\":430.4099999999843,\"pid\":266,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[231,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":231,\"onlineRunningTime\":430.4099999999843,\"pid\":267,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[13583,1,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312088,\"onlineMoneyMade\":13583,\"onlineRunningTime\":430.4099999999843,\"pid\":268,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[75,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":75,\"onlineRunningTime\":430.4099999999843,\"pid\":269,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43,2,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2204.5034263634107,\"onlineMoneyMade\":43,\"onlineRunningTime\":430.4099999999843,\"pid\":270,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.4099999999843,\"pid\":271,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1049,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnia\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnia\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///14c21cce-6f46-4ecc-9feb-5330f55358e0\",\"moduleSequenceNumber\":2995}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":79.02937500000174,\"minDifficulty\":32,\"moneyAvailable\":1228237989.4319997,\"moneyMax\":24667702400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"0.5.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":59.78399999999918,\"minDifficulty\":18,\"moneyAvailable\":823651081.0298331,\"moneyMax\":24826840500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"58.6.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":80.31800000000177,\"minDifficulty\":26,\"moneyAvailable\":1357008199.072068,\"moneyMax\":21736308925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"54.4.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[209576,52,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2424.953768999747,\"onlineMoneyMade\":209576,\"onlineRunningTime\":429.6099999999843,\"pid\":292,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[92,13,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6984.067835088624,\"onlineMoneyMade\":92,\"onlineRunningTime\":429.6099999999843,\"pid\":293,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[89,11,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4107.536298694223,\"onlineMoneyMade\":89,\"onlineRunningTime\":429.6099999999843,\"pid\":294,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[83,9,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3422.9469155785137,\"onlineMoneyMade\":83,\"onlineRunningTime\":429.6099999999843,\"pid\":295,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[461,4,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1444.5464047395576,\"onlineMoneyMade\":461,\"onlineRunningTime\":429.6099999999843,\"pid\":296,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[42687,3,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1114.8129862663975,\"onlineMoneyMade\":42687,\"onlineRunningTime\":429.6099999999843,\"pid\":297,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[41,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":41,\"onlineRunningTime\":429.6099999999843,\"pid\":298,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[91,4,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2317.554884125637,\"onlineMoneyMade\":91,\"onlineRunningTime\":429.6099999999843,\"pid\":299,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[303,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":303,\"onlineRunningTime\":429.6099999999843,\"pid\":300,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[526,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":813.342432233794,\"onlineMoneyMade\":526,\"onlineRunningTime\":429.6099999999843,\"pid\":301,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[81,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":81,\"onlineRunningTime\":429.6099999999843,\"pid\":302,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":303,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[221,2,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1209.0225344015855,\"onlineMoneyMade\":221,\"onlineRunningTime\":429.6099999999843,\"pid\":304,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":452.20583104890477,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":305,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":306,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":307,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":308,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":309,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":310,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":311,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.54408173423326,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":312,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":313,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":314,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":315,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":316,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":317,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":318,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":319,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":320,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":321,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":322,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":323,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":324,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":325,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":326,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":327,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":328,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":329,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":330,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":429.6099999999843,\"pid\":331,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"solaris\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"solaris\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///b171968e-e5d7-4f6b-a976-b0d3adc34b05\",\"moduleSequenceNumber\":2997}],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":78.97400000000255,\"minDifficulty\":25,\"moneyAvailable\":1321923946.6281176,\"moneyMax\":20563023750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":788,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899016.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[31,31,185,19,159,13,135,133,17,80,129,195,58,139,92,72,46,123,157,97]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"62.7.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81.19550000000228,\"minDifficulty\":27,\"moneyAvailable\":1945065523.8193686,\"moneyMax\":33300279100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":855,\"serverGrowth\":59}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"72.1.5.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":6.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[243474,56,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2507.8581713587128,\"onlineMoneyMade\":243474,\"onlineRunningTime\":430.60999999998427,\"pid\":261,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[77,11,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6908.700196580473,\"onlineMoneyMade\":77,\"onlineRunningTime\":430.60999999998427,\"pid\":262,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///1d7b1ef3-4f42-4f6e-9d27-4a8bf1d733f6\",\"moduleSequenceNumber\":2994}],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":81.47400000000245,\"minDifficulty\":27,\"moneyAvailable\":3053106559.1636,\"moneyMax\":38329637450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"54.4.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":69.57400000000172,\"minDifficulty\":22,\"moneyAvailable\":1507957492.2961264,\"moneyMax\":27585234450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":82}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"45.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":78,\"hackDifficulty\":81.04200000000155,\"minDifficulty\":26,\"moneyAvailable\":1916016178.4818082,\"moneyMax\":33969850325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":814,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"34.8.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[180821,45,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2279.871064871556,\"onlineMoneyMade\":180821,\"onlineRunningTime\":430.2099999999843,\"pid\":272,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[104,15,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7059.435473596774,\"onlineMoneyMade\":104,\"onlineRunningTime\":430.2099999999843,\"pid\":273,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[81,10,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4120.097571778915,\"onlineMoneyMade\":81,\"onlineRunningTime\":430.2099999999843,\"pid\":274,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[37,4,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3187.423045240543,\"onlineMoneyMade\":37,\"onlineRunningTime\":430.2099999999843,\"pid\":275,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[120,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1303.2320825367744,\"onlineMoneyMade\":120,\"onlineRunningTime\":430.2099999999843,\"pid\":276,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[42697,3,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1114.8129862663975,\"onlineMoneyMade\":42697,\"onlineRunningTime\":430.2099999999843,\"pid\":277,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":678.3087465733571,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.2099999999843,\"pid\":278,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[91,4,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2317.554884125637,\"onlineMoneyMade\":91,\"onlineRunningTime\":430.2099999999843,\"pid\":279,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[632,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669959,\"onlineMoneyMade\":632,\"onlineRunningTime\":430.2099999999843,\"pid\":280,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[532,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":813.342432233794,\"onlineMoneyMade\":532,\"onlineRunningTime\":430.2099999999843,\"pid\":281,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[84,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":84,\"onlineRunningTime\":430.2099999999843,\"pid\":282,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[30,1,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564446,\"onlineMoneyMade\":30,\"onlineRunningTime\":430.2099999999843,\"pid\":283,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[118,1,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1143.0758507069536,\"onlineMoneyMade\":118,\"onlineRunningTime\":430.2099999999843,\"pid\":284,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[46,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":527.5734695570555,\"onlineMoneyMade\":46,\"onlineRunningTime\":430.2099999999843,\"pid\":285,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[91,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.5220117948294,\"onlineMoneyMade\":91,\"onlineRunningTime\":430.2099999999843,\"pid\":286,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[91,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":437.13230334727456,\"onlineMoneyMade\":91,\"onlineRunningTime\":430.2099999999843,\"pid\":287,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":22,\"onlineRunningTime\":430.2099999999843,\"pid\":288,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.2099999999843,\"pid\":289,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.2099999999843,\"pid\":290,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":430.2099999999843,\"pid\":291,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///d8412e27-e56d-4b21-91ce-233a48051018\",\"moduleSequenceNumber\":2996}],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":81.36087500000258,\"minDifficulty\":26,\"moneyAvailable\":2081916921.7160041,\"moneyMax\":26408388825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":787,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"8.8.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[243641,58,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2535.4929721450358,\"onlineMoneyMade\":243641,\"onlineRunningTime\":432.40999999998417,\"pid\":172,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[137,20,106,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7298.0996622059165,\"onlineMoneyMade\":137,\"onlineRunningTime\":432.40999999998417,\"pid\":173,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[41,5,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3881.4333831697704,\"onlineMoneyMade\":41,\"onlineRunningTime\":432.40999999998417,\"pid\":174,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[104,11,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3595.6644204930253,\"onlineMoneyMade\":104,\"onlineRunningTime\":432.40999999998417,\"pid\":175,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[333,3,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1397.4416306719631,\"onlineMoneyMade\":333,\"onlineRunningTime\":432.40999999998417,\"pid\":176,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[14195,1,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312088,\"onlineMoneyMade\":14195,\"onlineRunningTime\":432.40999999998417,\"pid\":177,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[39,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":39,\"onlineRunningTime\":432.40999999998417,\"pid\":178,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25,1,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2147.9776974822976,\"onlineMoneyMade\":25,\"onlineRunningTime\":432.40999999998417,\"pid\":179,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[329,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":329,\"onlineRunningTime\":432.40999999998417,\"pid\":180,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":681.4490648445302,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":181,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[82,24,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5501.837611095008,\"onlineMoneyMade\":82,\"onlineRunningTime\":432.40999999998417,\"pid\":182,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":183,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[222,2,9,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1187.040306503375,\"onlineMoneyMade\":222,\"onlineRunningTime\":432.40999999998417,\"pid\":184,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":452.20583104890477,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":185,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":186,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":187,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":22,\"onlineRunningTime\":432.40999999998417,\"pid\":188,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":189,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":190,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.40999999998417,\"pid\":191,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///ad41096a-346d-4e19-93ba-a16b8fab349a\",\"moduleSequenceNumber\":2989}],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":74.78200000000292,\"minDifficulty\":23,\"moneyAvailable\":796038296.0014001,\"moneyMax\":18856138675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":733,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-459527.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,0,2,1,5],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-996932-StormTechnologies.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2291821148\",\"reward\":{\"name\":\"Storm Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"3.9.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[221218,52,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2404.2276684100075,\"onlineMoneyMade\":221218,\"onlineRunningTime\":431.20999999998423,\"pid\":232,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[109,16,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7097.119292850849,\"onlineMoneyMade\":109,\"onlineRunningTime\":431.20999999998423,\"pid\":233,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[96,12,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4195.465210287065,\"onlineMoneyMade\":96,\"onlineRunningTime\":431.20999999998423,\"pid\":234,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[67,7,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3407.245324222649,\"onlineMoneyMade\":67,\"onlineRunningTime\":431.20999999998423,\"pid\":235,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[563,5,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1491.651178807152,\"onlineMoneyMade\":563,\"onlineRunningTime\":431.20999999998423,\"pid\":236,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[30020,2,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1067.708212198803,\"onlineMoneyMade\":30020,\"onlineRunningTime\":431.20999999998423,\"pid\":237,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[41,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":41,\"onlineRunningTime\":431.20999999998423,\"pid\":238,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[66,3,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2261.0291552445237,\"onlineMoneyMade\":66,\"onlineRunningTime\":431.20999999998423,\"pid\":239,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[621,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669958,\"onlineMoneyMade\":621,\"onlineRunningTime\":431.20999999998423,\"pid\":240,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[264,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":264,\"onlineRunningTime\":431.20999999998423,\"pid\":241,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[75,24,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5501.837611095008,\"onlineMoneyMade\":75,\"onlineRunningTime\":431.20999999998423,\"pid\":242,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998423,\"pid\":243,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[337,3,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1274.9692180962174,\"onlineMoneyMade\":337,\"onlineRunningTime\":431.20999999998423,\"pid\":244,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[93,2,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":602.9411080652063,\"onlineMoneyMade\":93,\"onlineRunningTime\":431.20999999998423,\"pid\":245,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998423,\"pid\":246,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[91,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":437.13230334727456,\"onlineMoneyMade\":91,\"onlineRunningTime\":431.20999999998423,\"pid\":247,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998423,\"pid\":248,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998423,\"pid\":249,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998423,\"pid\":250,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.20999999998423,\"pid\":251,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///50ce546c-18c2-4f0b-b3a9-9ae5bd2672cb\",\"moduleSequenceNumber\":2992}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":62.159999999998156,\"minDifficulty\":17,\"moneyAvailable\":37298532.3402191,\"moneyMax\":13473195025,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":500,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"57.5.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[191000,48,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2342.049366640781,\"onlineMoneyMade\":191000,\"onlineRunningTime\":432.0099999999842,\"pid\":192,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[143,20,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.854569867149,\"onlineMoneyMade\":143,\"onlineRunningTime\":432.0099999999842,\"pid\":193,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[114,14,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4270.832848795216,\"onlineMoneyMade\":114,\"onlineRunningTime\":432.0099999999842,\"pid\":194,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[46,5,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.0357760874604,\"onlineMoneyMade\":46,\"onlineRunningTime\":432.0099999999842,\"pid\":195,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[107,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1303.2320825367744,\"onlineMoneyMade\":107,\"onlineRunningTime\":432.0099999999842,\"pid\":196,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[43923,3,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1114.8129862663975,\"onlineMoneyMade\":43923,\"onlineRunningTime\":432.0099999999842,\"pid\":197,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[76,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":76,\"onlineRunningTime\":432.0099999999842,\"pid\":198,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[46,2,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2204.5034263634107,\"onlineMoneyMade\":46,\"onlineRunningTime\":432.0099999999842,\"pid\":199,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[307,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":307,\"onlineRunningTime\":432.0099999999842,\"pid\":200,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[529,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":813.342432233794,\"onlineMoneyMade\":529,\"onlineRunningTime\":432.0099999999842,\"pid\":201,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[85,24,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5501.837611095008,\"onlineMoneyMade\":85,\"onlineRunningTime\":432.0099999999842,\"pid\":202,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.0099999999842,\"pid\":203,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[224,2,9,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1187.040306503375,\"onlineMoneyMade\":224,\"onlineRunningTime\":432.0099999999842,\"pid\":204,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[47,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":527.5734695570555,\"onlineMoneyMade\":47,\"onlineRunningTime\":432.0099999999842,\"pid\":205,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[92,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.5220117948294,\"onlineMoneyMade\":92,\"onlineRunningTime\":432.0099999999842,\"pid\":206,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.0099999999842,\"pid\":207,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.0099999999842,\"pid\":208,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.0099999999842,\"pid\":209,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.0099999999842,\"pid\":210,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.0099999999842,\"pid\":211,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///b9689df2-02ce-434d-8812-19699a6b0a3d\",\"moduleSequenceNumber\":2990}],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":67.49800000000013,\"minDifficulty\":20,\"moneyAvailable\":218007538.84923425,\"moneyMax\":16215585900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":588,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"73.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[237502,56,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2487.132070768972,\"onlineMoneyMade\":237502,\"onlineRunningTime\":431.00999999998425,\"pid\":252,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[112,16,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7097.11929285085,\"onlineMoneyMade\":112,\"onlineRunningTime\":431.00999999998425,\"pid\":253,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[74,9,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4032.1686601860724,\"onlineMoneyMade\":74,\"onlineRunningTime\":431.00999999998425,\"pid\":254,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[37,4,41,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3203.124636596408,\"onlineMoneyMade\":37,\"onlineRunningTime\":431.00999999998425,\"pid\":255,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[223,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":223,\"onlineRunningTime\":431.00999999998425,\"pid\":256,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[13641,1,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312088,\"onlineMoneyMade\":13641,\"onlineRunningTime\":431.00999999998425,\"pid\":257,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":678.3087465733571,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.00999999998425,\"pid\":258,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[133,6,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2430.606341887863,\"onlineMoneyMade\":133,\"onlineRunningTime\":431.00999999998425,\"pid\":259,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[330,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":330,\"onlineRunningTime\":431.00999999998425,\"pid\":260,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1048,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///f3352ac6-2360-402c-969a-a9d1c786954a\",\"moduleSequenceNumber\":2993}],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":82.88287500000474,\"minDifficulty\":25,\"moneyAvailable\":426962706.4389349,\"moneyMax\":9472345700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":406,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590907.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[184,185,10,62,200,56,99,8,118,172,154,98,176,103,171,165,29,35,53,190,72,65,181,94,94,165,138,126,135,117,46,153,86,112,25,80,115,111,69],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"85.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[250617,56,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2500.9494711621323,\"onlineMoneyMade\":250617,\"onlineRunningTime\":433.6099999999841,\"pid\":130,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[71,10,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6933.822742749857,\"onlineMoneyMade\":71,\"onlineRunningTime\":433.6099999999841,\"pid\":131,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[72,9,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4032.168660186072,\"onlineMoneyMade\":72,\"onlineRunningTime\":433.6099999999841,\"pid\":132,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57,6,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3360.1405501550544,\"onlineMoneyMade\":57,\"onlineRunningTime\":433.6099999999841,\"pid\":133,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1045,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///8eaf303b-3712-436a-9fe1-88d41505c575\",\"moduleSequenceNumber\":2985}],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":61.79599999999769,\"minDifficulty\":15,\"moneyAvailable\":338559.1249690924,\"moneyMax\":4484445325,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":384,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"92.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[227174,53,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2452.588569786069,\"onlineMoneyMade\":227174,\"onlineRunningTime\":433.8099999999841,\"pid\":121,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[94,14,106,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7071.996746681466,\"onlineMoneyMade\":94,\"onlineRunningTime\":433.8099999999841,\"pid\":122,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[91,11,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4157.78139103299,\"onlineMoneyMade\":91,\"onlineRunningTime\":433.8099999999841,\"pid\":123,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[65,7,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3407.2453242226493,\"onlineMoneyMade\":65,\"onlineRunningTime\":433.8099999999841,\"pid\":124,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[452,4,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1444.5464047395574,\"onlineMoneyMade\":452,\"onlineRunningTime\":433.8099999999841,\"pid\":125,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[14934,1,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312086,\"onlineMoneyMade\":14934,\"onlineRunningTime\":433.8099999999841,\"pid\":126,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[39,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":39,\"onlineRunningTime\":433.8099999999841,\"pid\":127,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[66,3,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2261.0291552445237,\"onlineMoneyMade\":66,\"onlineRunningTime\":433.8099999999841,\"pid\":128,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[310,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":310,\"onlineRunningTime\":433.8099999999841,\"pid\":129,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1044,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///55c71ee2-530a-4f85-8230-b8c7aae7e984\",\"moduleSequenceNumber\":2984}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":80.10287500000499,\"minDifficulty\":27,\"moneyAvailable\":2981408689.709741,\"moneyMax\":25500509875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":772,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-98287.cct\",\"type\":\"Total Ways to Sum\",\"data\":13,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"86.9.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[229862,52,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2424.953768999748,\"onlineMoneyMade\":229862,\"onlineRunningTime\":432.40999999998417,\"pid\":163,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[104,15,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7122.241839020234,\"onlineMoneyMade\":104,\"onlineRunningTime\":432.40999999998417,\"pid\":164,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[84,10,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4120.097571778915,\"onlineMoneyMade\":84,\"onlineRunningTime\":432.40999999998417,\"pid\":165,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[48,5,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.0357760874613,\"onlineMoneyMade\":48,\"onlineRunningTime\":432.40999999998417,\"pid\":166,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[240,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.3368566043687,\"onlineMoneyMade\":240,\"onlineRunningTime\":432.40999999998417,\"pid\":167,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[58300,4,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1161.917760333992,\"onlineMoneyMade\":58300,\"onlineRunningTime\":432.40999999998417,\"pid\":168,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[78,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":78,\"onlineRunningTime\":432.40999999998417,\"pid\":169,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[91,4,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2317.554884125637,\"onlineMoneyMade\":91,\"onlineRunningTime\":432.40999999998417,\"pid\":170,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[317,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":317,\"onlineRunningTime\":432.40999999998417,\"pid\":171,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1047,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///d2239fc6-24cc-4f38-8181-85fca81b00f5\",\"moduleSequenceNumber\":2988}],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":62.027999999997846,\"minDifficulty\":16,\"moneyAvailable\":3911845.957645444,\"moneyMax\":6701412675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":426,\"serverGrowth\":48}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"44.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"syscore\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"syscore\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":82.3940000000036,\"minDifficulty\":26,\"moneyAvailable\":1158567189.1952126,\"moneyMax\":14764926975,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":563,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"28.3.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[254334,63,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2639.1234750937424,\"onlineMoneyMade\":254334,\"onlineRunningTime\":432.80999999998414,\"pid\":154,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[154,22,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7386.028573798759,\"onlineMoneyMade\":154,\"onlineRunningTime\":432.80999999998414,\"pid\":155,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[56,7,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3956.8010216779217,\"onlineMoneyMade\":56,\"onlineRunningTime\":432.80999999998414,\"pid\":156,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[63,7,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3407.245324222649,\"onlineMoneyMade\":63,\"onlineRunningTime\":432.80999999998414,\"pid\":157,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[117,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1303.2320825367747,\"onlineMoneyMade\":117,\"onlineRunningTime\":432.80999999998414,\"pid\":158,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":973.4986640636143,\"onlineMoneyMade\":0,\"onlineRunningTime\":432.80999999998414,\"pid\":159,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[76,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":76,\"onlineRunningTime\":432.80999999998414,\"pid\":160,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[111,5,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2374.08061300675,\"onlineMoneyMade\":111,\"onlineRunningTime\":432.80999999998414,\"pid\":161,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[627,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669958,\"onlineMoneyMade\":627,\"onlineRunningTime\":432.80999999998414,\"pid\":162,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1046,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///3ba84bfb-cd58-48c1-90f5-bb4bf74eed9c\",\"moduleSequenceNumber\":2987}],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":78.22400000000496,\"minDifficulty\":23,\"moneyAvailable\":331835865.30603004,\"moneyMax\":13443452175,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":411,\"serverGrowth\":48}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"44.6.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[198629,50,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2390.410268016844,\"onlineMoneyMade\":198629,\"onlineRunningTime\":434.60999999998404,\"pid\":104,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[139,20,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7310.660935290608,\"onlineMoneyMade\":139,\"onlineRunningTime\":434.60999999998404,\"pid\":105,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[101,12,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4195.465210287065,\"onlineMoneyMade\":101,\"onlineRunningTime\":434.60999999998404,\"pid\":106,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[48,5,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.035776087461,\"onlineMoneyMade\":48,\"onlineRunningTime\":434.60999999998404,\"pid\":107,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1041,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///17bab024-115d-4537-bf19-6a5d50981e0c\",\"moduleSequenceNumber\":2981}],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":75.74999999999987,\"minDifficulty\":15,\"moneyAvailable\":15646.685165679566,\"moneyMax\":4717555700,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":320,\"serverGrowth\":53}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"17.8.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"comptek\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"comptek\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"comptek\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":81.6420000000043,\"minDifficulty\":18,\"moneyAvailable\":1915444.6331213417,\"moneyMax\":5706140475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":321,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-277109-BitRunners.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":387080462,\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"40.7.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[198651,51,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2411.1363686065856,\"onlineMoneyMade\":198651,\"onlineRunningTime\":434.0099999999841,\"pid\":117,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[53,8,106,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6845.893831157015,\"onlineMoneyMade\":53,\"onlineRunningTime\":434.0099999999841,\"pid\":118,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[88,11,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4157.78139103299,\"onlineMoneyMade\":88,\"onlineRunningTime\":434.0099999999841,\"pid\":119,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[69,7,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3407.245324222649,\"onlineMoneyMade\":69,\"onlineRunningTime\":434.0099999999841,\"pid\":120,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1043,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"netlink\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"netlink\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///394b0439-ac86-46d9-aa0f-95e597d75a22\",\"moduleSequenceNumber\":2983}],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":82.69487500000922,\"minDifficulty\":23,\"moneyAvailable\":681550084.3130469,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":402,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"91.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":79.95000000000022,\"minDifficulty\":16,\"moneyAvailable\":18666.130410091515,\"moneyMax\":1766199700,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":292,\"serverGrowth\":49}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"50.2.2.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[228430,56,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2514.766871555294,\"onlineMoneyMade\":228430,\"onlineRunningTime\":437.4099999999839,\"pid\":3,\"ramUsage\":3.2,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///dcd7942e-4910-4fb7-a2e5-14556833f8bc\",\"moduleSequenceNumber\":2966}],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":82.36612499967416,\"minDifficulty\":1,\"moneyAvailable\":703172,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"8.4.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[218422,55,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2494.040770965552,\"onlineMoneyMade\":218422,\"onlineRunningTime\":437.4099999999839,\"pid\":4,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[155,22,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7436.273666137526,\"onlineMoneyMade\":155,\"onlineRunningTime\":437.4099999999839,\"pid\":5,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[88,11,62,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4170.342664117681,\"onlineMoneyMade\":88,\"onlineRunningTime\":437.4099999999839,\"pid\":6,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[38,4,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3265.9310020198673,\"onlineMoneyMade\":38,\"onlineRunningTime\":437.4099999999839,\"pid\":7,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1029,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///076e282d-6168-4569-b7fa-5b6465f67c5a\",\"moduleSequenceNumber\":2967}],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":82.4562500005866,\"minDifficulty\":3,\"moneyAvailable\":1717.058504019582,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"18.7.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[209299,54,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2473.314670375811,\"onlineMoneyMade\":209299,\"onlineRunningTime\":437.0099999999839,\"pid\":8,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[187,27,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7624.692762407903,\"onlineMoneyMade\":187,\"onlineRunningTime\":437.0099999999839,\"pid\":9,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[63,8,62,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4057.2912063554563,\"onlineMoneyMade\":63,\"onlineRunningTime\":437.0099999999839,\"pid\":10,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[19,2,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3171.721453884679,\"onlineMoneyMade\":19,\"onlineRunningTime\":437.0099999999839,\"pid\":11,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1030,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///4cd5d8f0-3aca-492b-9273-753dd6e7c34e\",\"moduleSequenceNumber\":2968}],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":83.00425000026748,\"minDifficulty\":3,\"moneyAvailable\":1973.8340162377347,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"36.7.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[207630,52,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2418.0450688031665,\"onlineMoneyMade\":207630,\"onlineRunningTime\":436.8099999999839,\"pid\":12,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[116,17,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.8545698671505,\"onlineMoneyMade\":116,\"onlineRunningTime\":436.8099999999839,\"pid\":13,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[88,11,62,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4170.342664117682,\"onlineMoneyMade\":88,\"onlineRunningTime\":436.8099999999839,\"pid\":14,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[85,9,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3501.454872357837,\"onlineMoneyMade\":85,\"onlineRunningTime\":436.8099999999839,\"pid\":15,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1031,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///99d02cf9-4609-4961-9838-1aacc6e93697\",\"moduleSequenceNumber\":2969}],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":84.82950000015589,\"minDifficulty\":5,\"moneyAvailable\":2486.477054042122,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"46.5.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[249328,61,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2618.397374504003,\"onlineMoneyMade\":249328,\"onlineRunningTime\":435.809999999984,\"pid\":48,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[136,19,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7323.2222083752995,\"onlineMoneyMade\":136,\"onlineRunningTime\":435.809999999984,\"pid\":49,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[49,6,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3969.3622947626136,\"onlineMoneyMade\":49,\"onlineRunningTime\":435.809999999984,\"pid\":50,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[59,6,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3360.140550155055,\"onlineMoneyMade\":59,\"onlineRunningTime\":435.809999999984,\"pid\":51,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[460,4,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1444.5464047395576,\"onlineMoneyMade\":460,\"onlineRunningTime\":435.809999999984,\"pid\":52,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[13239,1,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312088,\"onlineMoneyMade\":13239,\"onlineRunningTime\":435.809999999984,\"pid\":53,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[78,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":78,\"onlineRunningTime\":435.809999999984,\"pid\":54,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[72,3,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2261.0291552445237,\"onlineMoneyMade\":72,\"onlineRunningTime\":435.809999999984,\"pid\":55,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[333,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":333,\"onlineRunningTime\":435.809999999984,\"pid\":56,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1037,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zer0\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///6a7fce22-440a-4754-9a08-e182dff9958d\",\"moduleSequenceNumber\":2976}],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":83.57750000002949,\"minDifficulty\":8,\"moneyAvailable\":63261.65402251274,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-773846.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"512458105\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"10.5.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[230466,56,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2494.040770965553,\"onlineMoneyMade\":230466,\"onlineRunningTime\":436.20999999998395,\"pid\":33,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[115,17,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.85456986715,\"onlineMoneyMade\":115,\"onlineRunningTime\":436.20999999998395,\"pid\":34,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[33,4,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3893.994656254463,\"onlineMoneyMade\":33,\"onlineRunningTime\":436.20999999998395,\"pid\":35,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[48,5,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.035776087461,\"onlineMoneyMade\":48,\"onlineRunningTime\":436.20999999998395,\"pid\":36,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1035,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///5e586c84-f856-4132-9375-8cbb4df7a8e0\",\"moduleSequenceNumber\":2973}],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":84.4660000002474,\"minDifficulty\":7,\"moneyAvailable\":5204.218812474991,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"24.7.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[136965,35,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2065.7013587775623,\"onlineMoneyMade\":136965,\"onlineRunningTime\":435.209999999984,\"pid\":75,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[138,20,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7310.660935290609,\"onlineMoneyMade\":138,\"onlineRunningTime\":435.209999999984,\"pid\":76,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[80,10,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4069.852479440148,\"onlineMoneyMade\":80,\"onlineRunningTime\":435.209999999984,\"pid\":77,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57,6,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3360.140550155055,\"onlineMoneyMade\":57,\"onlineRunningTime\":435.209999999984,\"pid\":78,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1256.1273084691802,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.209999999984,\"pid\":79,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[42188,3,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1114.8129862663975,\"onlineMoneyMade\":42188,\"onlineRunningTime\":435.209999999984,\"pid\":80,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[42,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":42,\"onlineRunningTime\":435.209999999984,\"pid\":81,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[110,5,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2374.08061300675,\"onlineMoneyMade\":110,\"onlineRunningTime\":435.209999999984,\"pid\":82,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.209999999984,\"pid\":83,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1040,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///baba0f90-f333-47c7-851d-62459cb5b82b\",\"moduleSequenceNumber\":2979}],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":84.32062500005229,\"minDifficulty\":8,\"moneyAvailable\":25900.99010996868,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-283918-MegaCorp.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,1,1,0,0,0],[0,0,1,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"96.8.8.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[223305,56,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2500.9494711621323,\"onlineMoneyMade\":223305,\"onlineRunningTime\":435.009999999984,\"pid\":84,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[96,14,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7084.5580197661575,\"onlineMoneyMade\":96,\"onlineRunningTime\":435.009999999984,\"pid\":85,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[56,7,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3956.8010216779217,\"onlineMoneyMade\":56,\"onlineRunningTime\":435.009999999984,\"pid\":86,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[29,3,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3218.8262279522723,\"onlineMoneyMade\":29,\"onlineRunningTime\":435.009999999984,\"pid\":87,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[583,5,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1491.651178807152,\"onlineMoneyMade\":583,\"onlineRunningTime\":435.009999999984,\"pid\":88,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[42416,3,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1114.8129862663975,\"onlineMoneyMade\":42416,\"onlineRunningTime\":435.009999999984,\"pid\":89,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[42,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":42,\"onlineRunningTime\":435.009999999984,\"pid\":90,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[69,3,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2261.0291552445237,\"onlineMoneyMade\":69,\"onlineRunningTime\":435.009999999984,\"pid\":91,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[643,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669959,\"onlineMoneyMade\":643,\"onlineRunningTime\":435.009999999984,\"pid\":92,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,8,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":769.3779764373728,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.009999999984,\"pid\":93,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[77,24,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5501.837611095008,\"onlineMoneyMade\":77,\"onlineRunningTime\":435.009999999984,\"pid\":94,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.009999999984,\"pid\":95,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[113,1,9,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1121.093622808743,\"onlineMoneyMade\":113,\"onlineRunningTime\":435.009999999984,\"pid\":96,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[48,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":527.5734695570555,\"onlineMoneyMade\":48,\"onlineRunningTime\":435.009999999984,\"pid\":97,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[92,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.5220117948294,\"onlineMoneyMade\":92,\"onlineRunningTime\":435.009999999984,\"pid\":98,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[92,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":437.13230334727456,\"onlineMoneyMade\":92,\"onlineRunningTime\":435.009999999984,\"pid\":99,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":22,\"onlineRunningTime\":435.009999999984,\"pid\":100,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":367.41723772723515,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.009999999984,\"pid\":101,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.009999999984,\"pid\":102,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.009999999984,\"pid\":103,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///9bec1edc-2b11-40f6-ac43-dca3f45543c1\",\"moduleSequenceNumber\":2980}],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":84.27487500000294,\"minDifficulty\":10,\"moneyAvailable\":11719.347638195524,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"2.3.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[196218,46,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2307.5058656578785,\"onlineMoneyMade\":196218,\"onlineRunningTime\":436.6099999999839,\"pid\":16,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[99,14,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7134.803112104924,\"onlineMoneyMade\":99,\"onlineRunningTime\":436.6099999999839,\"pid\":17,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[65,8,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4044.7299332707644,\"onlineMoneyMade\":65,\"onlineRunningTime\":436.6099999999839,\"pid\":18,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[115,12,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3642.7691945606193,\"onlineMoneyMade\":115,\"onlineRunningTime\":436.6099999999839,\"pid\":19,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1032,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///a6b2babd-4496-49a3-9323-7af9575c8f90\",\"moduleSequenceNumber\":2970}],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":84.16712500018018,\"minDifficulty\":5,\"moneyAvailable\":25040.549888110505,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-593379-StormTechnologies.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7945659\",81],\"reward\":{\"name\":\"Storm Technologies\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"55.7.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[196294,45,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2293.688465264718,\"onlineMoneyMade\":196294,\"onlineRunningTime\":436.6099999999839,\"pid\":20,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[68,10,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6984.067835088623,\"onlineMoneyMade\":68,\"onlineRunningTime\":436.6099999999839,\"pid\":21,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[93,11,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4157.78139103299,\"onlineMoneyMade\":93,\"onlineRunningTime\":436.6099999999839,\"pid\":22,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[48,5,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3313.0357760874604,\"onlineMoneyMade\":48,\"onlineRunningTime\":436.6099999999839,\"pid\":23,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1033,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///f2a45599-1909-4149-867e-a27eb2e319ca\",\"moduleSequenceNumber\":2971}],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":84.50525000012716,\"minDifficulty\":5,\"moneyAvailable\":3223445.49639189,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"78.6.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[216111,51,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2411.136368606585,\"onlineMoneyMade\":216111,\"onlineRunningTime\":435.609999999984,\"pid\":57,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[131,19,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7323.222208375301,\"onlineMoneyMade\":131,\"onlineRunningTime\":435.609999999984,\"pid\":58,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[68,8,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4044.7299332707644,\"onlineMoneyMade\":68,\"onlineRunningTime\":435.609999999984,\"pid\":59,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[57,6,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3360.140550155055,\"onlineMoneyMade\":57,\"onlineRunningTime\":435.609999999984,\"pid\":60,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[224,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":224,\"onlineRunningTime\":435.609999999984,\"pid\":61,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":973.4986640636145,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.609999999984,\"pid\":62,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":678.3087465733571,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.609999999984,\"pid\":63,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[135,6,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2430.606341887863,\"onlineMoneyMade\":135,\"onlineRunningTime\":435.609999999984,\"pid\":64,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.609999999984,\"pid\":65,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1038,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///5e22f2ee-8eb9-469a-a283-ae44da39ed88\",\"moduleSequenceNumber\":2977}],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.0499999999999945,\"minDifficulty\":7,\"moneyAvailable\":155.22966625038606,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"19.6.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[267787,64,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2666.758275880066,\"onlineMoneyMade\":267787,\"onlineRunningTime\":436.00999999998396,\"pid\":37,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[118,17,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.8545698671505,\"onlineMoneyMade\":118,\"onlineRunningTime\":436.00999999998396,\"pid\":38,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[82,10,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4120.097571778915,\"onlineMoneyMade\":82,\"onlineRunningTime\":436.00999999998396,\"pid\":39,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[94,10,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3548.5596464254313,\"onlineMoneyMade\":94,\"onlineRunningTime\":436.00999999998396,\"pid\":40,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[247,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":247,\"onlineRunningTime\":436.00999999998396,\"pid\":41,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[56358,4,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1161.917760333992,\"onlineMoneyMade\":56358,\"onlineRunningTime\":436.00999999998396,\"pid\":42,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[40,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":753.6763850815079,\"onlineMoneyMade\":40,\"onlineRunningTime\":436.00999999998396,\"pid\":43,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[110,5,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2374.08061300675,\"onlineMoneyMade\":110,\"onlineRunningTime\":436.00999999998396,\"pid\":44,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.00999999998396,\"pid\":45,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1036,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///77fd759f-9bf9-4696-8de6-10ab07c3b64b\",\"moduleSequenceNumber\":2974}],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":83.15200000008103,\"minDifficulty\":5,\"moneyAvailable\":74041.93266946831,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404664.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"250813\",68],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"69.5.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[228036,53,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2438.7711693929073,\"onlineMoneyMade\":228036,\"onlineRunningTime\":435.409999999984,\"pid\":66,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[78,11,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6971.506562003931,\"onlineMoneyMade\":78,\"onlineRunningTime\":435.409999999984,\"pid\":67,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[97,12,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4145.220117948298,\"onlineMoneyMade\":97,\"onlineRunningTime\":435.409999999984,\"pid\":68,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[39,4,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3265.9310020198664,\"onlineMoneyMade\":39,\"onlineRunningTime\":435.409999999984,\"pid\":69,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[240,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":240,\"onlineRunningTime\":435.409999999984,\"pid\":70,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[14034,1,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312089,\"onlineMoneyMade\":14034,\"onlineRunningTime\":435.409999999984,\"pid\":71,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":678.3087465733571,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.409999999984,\"pid\":72,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[47,2,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2204.5034263634107,\"onlineMoneyMade\":47,\"onlineRunningTime\":435.409999999984,\"pid\":73,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":435.409999999984,\"pid\":74,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1039,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///3b8a0213-7dcf-4f8d-bde5-136318555ddd\",\"moduleSequenceNumber\":2978}],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":82.10599999999928,\"minDifficulty\":11,\"moneyAvailable\":6652.074604954866,\"moneyMax\":1607447375,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":216,\"serverGrowth\":32}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-709496.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[1,5],[8,3,4],[9,3,7,3],[1,6,3,4,9],[5,4,5,5,3,2],[4,8,5,9,4,7,7],[8,9,8,1,8,1,7,1]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"32.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":82.09400000000022,\"minDifficulty\":13,\"moneyAvailable\":4956.555022129147,\"moneyMax\":1262687025,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":236,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"28.9.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[251802,58,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2556.2190727347765,\"onlineMoneyMade\":251802,\"onlineRunningTime\":436.6099999999839,\"pid\":24,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[109,16,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7210.170750613075,\"onlineMoneyMade\":109,\"onlineRunningTime\":436.6099999999839,\"pid\":25,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[32,4,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3843.749563915695,\"onlineMoneyMade\":32,\"onlineRunningTime\":436.6099999999839,\"pid\":26,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[28,3,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3218.8262279522723,\"onlineMoneyMade\":28,\"onlineRunningTime\":436.6099999999839,\"pid\":27,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[365,3,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1397.4416306719634,\"onlineMoneyMade\":365,\"onlineRunningTime\":436.6099999999839,\"pid\":28,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[41702,3,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1114.8129862663977,\"onlineMoneyMade\":41702,\"onlineRunningTime\":436.6099999999839,\"pid\":29,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":678.3087465733571,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.6099999999839,\"pid\":30,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[90,4,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2317.554884125637,\"onlineMoneyMade\":90,\"onlineRunningTime\":436.6099999999839,\"pid\":31,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":471.0477406759425,\"onlineMoneyMade\":0,\"onlineRunningTime\":436.6099999999839,\"pid\":32,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1034,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///610be751-e139-4af9-8c19-6cdc4b6a4ac7\",\"moduleSequenceNumber\":2972}],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":83.87162500004936,\"minDifficulty\":10,\"moneyAvailable\":8962.34472860156,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"79.1.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[191970,45,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2279.8710648715564,\"onlineMoneyMade\":191970,\"onlineRunningTime\":431.6099999999842,\"pid\":212,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[105,15,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7122.241839020233,\"onlineMoneyMade\":105,\"onlineRunningTime\":431.6099999999842,\"pid\":213,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[99,12,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4195.465210287065,\"onlineMoneyMade\":99,\"onlineRunningTime\":431.6099999999842,\"pid\":214,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[66,7,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3407.245324222649,\"onlineMoneyMade\":66,\"onlineRunningTime\":431.6099999999842,\"pid\":215,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1256.1273084691802,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":216,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[30024,2,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1067.708212198803,\"onlineMoneyMade\":30024,\"onlineRunningTime\":431.6099999999842,\"pid\":217,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[80,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896587,\"onlineMoneyMade\":80,\"onlineRunningTime\":431.6099999999842,\"pid\":218,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[21,1,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2147.9776974822976,\"onlineMoneyMade\":21,\"onlineRunningTime\":431.6099999999842,\"pid\":219,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[316,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":316,\"onlineRunningTime\":431.6099999999842,\"pid\":220,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[265,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":265,\"onlineRunningTime\":431.6099999999842,\"pid\":221,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[77,24,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5501.837611095008,\"onlineMoneyMade\":77,\"onlineRunningTime\":431.6099999999842,\"pid\":222,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":223,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1077.129167012322,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":224,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":452.20583104890477,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":225,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":226,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":227,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":228,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":229,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":230,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":431.6099999999842,\"pid\":231,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///4d524b2e-d0ae-4711-8db1-6e409bbcb8f0\",\"moduleSequenceNumber\":2991}],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":61.7259999999982,\"minDifficulty\":17,\"moneyAvailable\":4801436.689669888,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":487,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"19.3.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[220767,49,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2342.0493666407815,\"onlineMoneyMade\":220767,\"onlineRunningTime\":422.20999999998475,\"pid\":644,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[154,22,106,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7272.977116036533,\"onlineMoneyMade\":154,\"onlineRunningTime\":422.20999999998475,\"pid\":645,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[64,8,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3944.2397485932293,\"onlineMoneyMade\":64,\"onlineRunningTime\":422.20999999998475,\"pid\":646,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[47,5,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3187.4230452405427,\"onlineMoneyMade\":47,\"onlineRunningTime\":422.20999999998475,\"pid\":647,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1056,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///dd4d6c65-536a-4081-8793-309f53443bbd\",\"moduleSequenceNumber\":3008}],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":99.09375000000006,\"minDifficulty\":22,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1024,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"16.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":52.73399999999863,\"minDifficulty\":14,\"moneyAvailable\":36279351.71942356,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":703,\"serverGrowth\":59}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"14.5.3.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[219430,52,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2424.9537689997474,\"onlineMoneyMade\":219430,\"onlineRunningTime\":427.40999999998445,\"pid\":381,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[97,14,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7021.751654342699,\"onlineMoneyMade\":97,\"onlineRunningTime\":427.40999999998445,\"pid\":382,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[68,8,61,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3994.4848409319966,\"onlineMoneyMade\":68,\"onlineRunningTime\":427.40999999998445,\"pid\":383,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[49,5,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3234.527819308137,\"onlineMoneyMade\":49,\"onlineRunningTime\":427.40999999998445,\"pid\":384,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[223,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.3368566043687,\"onlineMoneyMade\":223,\"onlineRunningTime\":427.40999999998445,\"pid\":385,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[41752,3,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1052.0066208429384,\"onlineMoneyMade\":41752,\"onlineRunningTime\":427.40999999998445,\"pid\":386,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.1862004039735,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":387,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[66,3,24,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2279.8710648715614,\"onlineMoneyMade\":66,\"onlineRunningTime\":427.40999999998445,\"pid\":388,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[313,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":313,\"onlineRunningTime\":427.40999999998445,\"pid\":389,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[261,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":261,\"onlineRunningTime\":427.40999999998445,\"pid\":390,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[77,24,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5426.469972586857,\"onlineMoneyMade\":77,\"onlineRunningTime\":427.40999999998445,\"pid\":391,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":342.92275521208614,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":392,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1077.129167012322,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":393,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":394,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":395,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":396,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":397,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":398,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":399,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":400,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.54408173423326,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":401,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":402,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":403,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":404,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":405,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":406,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":407,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":408,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":409,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":410,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":411,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":412,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":413,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":414,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":415,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":416,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":417,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":418,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":419,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":427.40999999998445,\"pid\":420,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///32cc8e8f-066a-4629-83d9-7aab9f34511e\",\"moduleSequenceNumber\":3000}],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":539,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"69.6.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[213826,54,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2459.497269982649,\"onlineMoneyMade\":213826,\"onlineRunningTime\":433.6099999999841,\"pid\":134,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[149,21,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7348.344754544683,\"onlineMoneyMade\":149,\"onlineRunningTime\":433.6099999999841,\"pid\":135,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[73,9,60,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4032.1686601860724,\"onlineMoneyMade\":73,\"onlineRunningTime\":433.6099999999841,\"pid\":136,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[28,3,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3218.8262279522723,\"onlineMoneyMade\":28,\"onlineRunningTime\":433.6099999999841,\"pid\":137,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[343,3,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1397.4416306719631,\"onlineMoneyMade\":343,\"onlineRunningTime\":433.6099999999841,\"pid\":138,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[13746,1,13,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1020.6034381312086,\"onlineMoneyMade\":13746,\"onlineRunningTime\":433.6099999999841,\"pid\":139,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[77,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":829.0440235896588,\"onlineMoneyMade\":77,\"onlineRunningTime\":433.6099999999841,\"pid\":140,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[66,3,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2261.0291552445237,\"onlineMoneyMade\":66,\"onlineRunningTime\":433.6099999999841,\"pid\":141,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":142,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[266,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":266,\"onlineRunningTime\":433.6099999999841,\"pid\":143,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[76,24,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5501.837611095008,\"onlineMoneyMade\":76,\"onlineRunningTime\":433.6099999999841,\"pid\":144,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[30,1,3,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564446,\"onlineMoneyMade\":30,\"onlineRunningTime\":433.6099999999841,\"pid\":145,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[223,2,9,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1187.040306503375,\"onlineMoneyMade\":223,\"onlineRunningTime\":433.6099999999841,\"pid\":146,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":452.20583104890477,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":147,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":148,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":149,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":22,\"onlineRunningTime\":433.6099999999841,\"pid\":150,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":151,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":152,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":433.6099999999841,\"pid\":153,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///1b9cdeed-3096-48b7-b8ee-8f0de9841bec\",\"moduleSequenceNumber\":2986}],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":359,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"81.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[216014,52,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2431.8624691963287,\"onlineMoneyMade\":216014,\"onlineRunningTime\":434.20999999998406,\"pid\":108,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[139,20,108,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7310.660935290608,\"onlineMoneyMade\":139,\"onlineRunningTime\":434.20999999998406,\"pid\":109,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[77,9,61,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4082.41375252484,\"onlineMoneyMade\":77,\"onlineRunningTime\":434.20999999998406,\"pid\":110,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[37,4,41,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3265.931002019867,\"onlineMoneyMade\":37,\"onlineRunningTime\":434.20999999998406,\"pid\":111,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[227,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1350.336856604369,\"onlineMoneyMade\":227,\"onlineRunningTime\":434.20999999998406,\"pid\":112,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[56170,4,12,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1161.917760333992,\"onlineMoneyMade\":56170,\"onlineRunningTime\":434.20999999998406,\"pid\":113,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":678.3087465733571,\"onlineMoneyMade\":0,\"onlineRunningTime\":434.20999999998406,\"pid\":114,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[65,3,23,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2261.0291552445237,\"onlineMoneyMade\":65,\"onlineRunningTime\":434.20999999998406,\"pid\":115,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[320,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":533.8541060994015,\"onlineMoneyMade\":320,\"onlineRunningTime\":434.20999999998406,\"pid\":116,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1042,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///31c061b1-e8ba-4674-b85e-97e53832873b\",\"moduleSequenceNumber\":2982}],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"94.4.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[170401,43,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2231.5101634954926,\"onlineMoneyMade\":170401,\"onlineRunningTime\":424.4099999999846,\"pid\":516,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[105,15,106,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7059.435473596773,\"onlineMoneyMade\":105,\"onlineRunningTime\":424.4099999999846,\"pid\":517,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[75,9,61,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4032.1686601860724,\"onlineMoneyMade\":75,\"onlineRunningTime\":424.4099999999846,\"pid\":518,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[66,7,39,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3328.7373674433256,\"onlineMoneyMade\":66,\"onlineRunningTime\":424.4099999999846,\"pid\":519,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1054,\"ramUsage\":1.75,\"server\":\".\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\".\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\".\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///a7a17088-04bb-4c10-958c-19a052abd915\",\"moduleSequenceNumber\":3005}],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-281433.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,10,0,3,5,6,4,2,0,8,6,1,4,0,10,9,3,0,6,7,6,7,6,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"31.0.3.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[230036,52,7,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2418.0450688031665,\"onlineMoneyMade\":230036,\"onlineRunningTime\":435.809999999984,\"pid\":46,\"ramUsage\":3.2,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[118,17,108,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7247.85456986715,\"onlineMoneyMade\":118,\"onlineRunningTime\":435.809999999984,\"pid\":47,\"ramUsage\":3.2,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///ede86c03-740c-4048-8bc4-e8dbf0209458\",\"moduleSequenceNumber\":2975}],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"80.7.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"14.2.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"32.7.9.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-1\",\"httpPortOpen\":false,\"ip\":\"5.0.7.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16384,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[190343,45,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2272.9623646749756,\"onlineMoneyMade\":190343,\"onlineRunningTime\":422.00999999998476,\"pid\":648,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[119,17,106,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7084.5580197661575,\"onlineMoneyMade\":119,\"onlineRunningTime\":422.00999999998476,\"pid\":649,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[54,7,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3906.555929339154,\"onlineMoneyMade\":54,\"onlineRunningTime\":422.00999999998476,\"pid\":650,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[85,9,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3375.842141510919,\"onlineMoneyMade\":85,\"onlineRunningTime\":422.00999999998476,\"pid\":651,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1193.3209430457212,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":652,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":910.6922986401554,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":653,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[38,1,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":728.5538389121243,\"onlineMoneyMade\":38,\"onlineRunningTime\":422.00999999998476,\"pid\":654,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[90,4,22,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2298.712974498599,\"onlineMoneyMade\":90,\"onlineRunningTime\":422.00999999998476,\"pid\":655,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":656,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[265,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":265,\"onlineRunningTime\":422.00999999998476,\"pid\":657,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[74,23,48,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5351.102334078706,\"onlineMoneyMade\":74,\"onlineRunningTime\":422.00999999998476,\"pid\":658,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.5440817342334,\"onlineMoneyMade\":29,\"onlineRunningTime\":422.00999999998476,\"pid\":659,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[231,2,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1209.0225344015855,\"onlineMoneyMade\":231,\"onlineRunningTime\":422.00999999998476,\"pid\":660,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[46,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.45092338767193,\"onlineMoneyMade\":46,\"onlineRunningTime\":422.00999999998476,\"pid\":661,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":662,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":663,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":664,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":665,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":666,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":667,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3144,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3144,\"onlineRunningTime\":422.00999999998476,\"pid\":668,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":669,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":670,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":671,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":672,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":673,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":674,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":675,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":676,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":677,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":678,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":679,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":680,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":681,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":682,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":683,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":684,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":685,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":686,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":687,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":688,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":689,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":690,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":691,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.93135088731535,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":692,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":693,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":694,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":695,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":696,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":697,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":698,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":699,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":700,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":701,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":702,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":703,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":704,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":705,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":706,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":707,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":708,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":422.00999999998476,\"pid\":709,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":238255.94723389173,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1023,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":5058,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///07ba7358-d79d-4f9b-a129-cc5ff4c5b339\",\"moduleSequenceNumber\":1338}],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-2\",\"httpPortOpen\":false,\"ip\":\"24.8.4.8\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16384,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[254385,63,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2625.306074700582,\"onlineMoneyMade\":254385,\"onlineRunningTime\":420.60999999998484,\"pid\":710,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[83,12,104,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6883.577650411091,\"onlineMoneyMade\":83,\"onlineRunningTime\":420.60999999998484,\"pid\":711,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[47,6,60,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3868.8721100850785,\"onlineMoneyMade\":47,\"onlineRunningTime\":420.60999999998484,\"pid\":712,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[66,7,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3281.6325933757303,\"onlineMoneyMade\":66,\"onlineRunningTime\":420.60999999998484,\"pid\":713,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[345,3,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1334.6352652485043,\"onlineMoneyMade\":345,\"onlineRunningTime\":420.60999999998484,\"pid\":714,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[27673,2,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004.901846775344,\"onlineMoneyMade\":27673,\"onlineRunningTime\":420.60999999998484,\"pid\":715,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.1862004039735,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":716,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[67,3,22,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2242.187245617486,\"onlineMoneyMade\":67,\"onlineRunningTime\":420.60999999998484,\"pid\":717,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":718,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":681.4490648445302,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":719,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[73,23,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5275.734695570555,\"onlineMoneyMade\":73,\"onlineRunningTime\":420.60999999998484,\"pid\":720,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":237.408061300675,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":721,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[221,2,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1209.0225344015855,\"onlineMoneyMade\":221,\"onlineRunningTime\":420.60999999998484,\"pid\":722,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":723,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":724,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":725,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":726,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":727,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":728,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":729,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3116,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3116,\"onlineRunningTime\":420.60999999998484,\"pid\":730,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":731,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":732,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":733,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":734,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":735,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":736,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":737,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":738,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":739,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":740,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":741,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":742,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":743,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":744,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":745,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":746,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":747,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":748,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":749,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":750,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":751,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":752,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":753,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":190.93135088731535,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":754,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":755,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":756,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":757,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":758,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":759,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":760,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":761,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":762,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":763,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":764,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":765,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":766,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":767,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":768,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":769,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":770,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":420.60999999998484,\"pid\":771,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":238255.94723389173,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1024,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":5058,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///da431cad-e82b-4d2d-b6a0-9ebd5edce139\",\"moduleSequenceNumber\":1339}],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-3\",\"httpPortOpen\":false,\"ip\":\"13.1.6.0\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16384,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[167752,40,6,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2148.6057611365277,\"onlineMoneyMade\":167752,\"onlineRunningTime\":419.6099999999849,\"pid\":772,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[120,17,104,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7071.996746681465,\"onlineMoneyMade\":120,\"onlineRunningTime\":419.6099999999849,\"pid\":773,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[65,8,58,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3931.6784755085378,\"onlineMoneyMade\":65,\"onlineRunningTime\":419.6099999999849,\"pid\":774,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[93,10,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3422.946915578513,\"onlineMoneyMade\":93,\"onlineRunningTime\":419.6099999999849,\"pid\":775,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[243,2,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1287.5304911809096,\"onlineMoneyMade\":243,\"onlineRunningTime\":419.6099999999849,\"pid\":776,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[27743,2,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1004.901846775344,\"onlineMoneyMade\":27743,\"onlineRunningTime\":419.6099999999849,\"pid\":777,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":653.1862004039735,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":778,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[44,2,22,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2185.661516736373,\"onlineMoneyMade\":44,\"onlineRunningTime\":419.6099999999849,\"pid\":779,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[634,2,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":580.9588801669959,\"onlineMoneyMade\":634,\"onlineRunningTime\":419.6099999999849,\"pid\":780,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[258,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":258,\"onlineRunningTime\":419.6099999999849,\"pid\":781,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[80,23,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5275.734695570555,\"onlineMoneyMade\":80,\"onlineRunningTime\":419.6099999999849,\"pid\":782,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[29,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":316.5440817342334,\"onlineMoneyMade\":29,\"onlineRunningTime\":419.6099999999849,\"pid\":783,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[228,2,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1209.0225344015855,\"onlineMoneyMade\":228,\"onlineRunningTime\":419.6099999999849,\"pid\":784,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":785,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[90,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":414.5220117948294,\"onlineMoneyMade\":90,\"onlineRunningTime\":419.6099999999849,\"pid\":786,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":787,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[21,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":21,\"onlineRunningTime\":419.6099999999849,\"pid\":788,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":789,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":790,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":791,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3088,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3088,\"onlineRunningTime\":419.6099999999849,\"pid\":792,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":793,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":794,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":795,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":796,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":797,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":798,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":799,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":800,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":801,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":802,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":803,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":804,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":805,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":806,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":807,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":808,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":809,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":810,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":811,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":812,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":813,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":814,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":815,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":816,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":817,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":818,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":819,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":820,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":821,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":822,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":823,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":824,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":825,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":826,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":827,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":828,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":829,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":830,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":831,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":832,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":419.6099999999849,\"pid\":833,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":238255.94723389173,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1025,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":5058,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///a6c049e5-f4e2-4081-b0a1-cce4c7144bc9\",\"moduleSequenceNumber\":1340}],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server\",\"httpPortOpen\":false,\"ip\":\"89.9.5.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[151185,40,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2169.3318617262685,\"onlineMoneyMade\":151185,\"onlineRunningTime\":418.60999999998495,\"pid\":834,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[120,17,104,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7071.996746681465,\"onlineMoneyMade\":120,\"onlineRunningTime\":418.60999999998495,\"pid\":835,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[83,10,58,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3956.8010216779217,\"onlineMoneyMade\":83,\"onlineRunningTime\":418.60999999998495,\"pid\":836,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[55,6,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3234.5278193081367,\"onlineMoneyMade\":55,\"onlineRunningTime\":418.60999999998495,\"pid\":837,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[219,2,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1287.5304911809098,\"onlineMoneyMade\":219,\"onlineRunningTime\":418.60999999998495,\"pid\":838,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[42018,3,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1052.0066208429387,\"onlineMoneyMade\":42018,\"onlineRunningTime\":418.60999999998495,\"pid\":839,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[78,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":803.9214774202751,\"onlineMoneyMade\":78,\"onlineRunningTime\":418.60999999998495,\"pid\":840,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[24,1,22,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2072.610058974147,\"onlineMoneyMade\":24,\"onlineRunningTime\":418.60999999998495,\"pid\":841,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":842,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":681.4490648445302,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":843,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[84,23,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5275.734695570555,\"onlineMoneyMade\":84,\"onlineRunningTime\":418.60999999998495,\"pid\":844,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":237.408061300675,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":845,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[216,2,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1209.0225344015855,\"onlineMoneyMade\":216,\"onlineRunningTime\":418.60999999998495,\"pid\":846,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[46,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.45092338767193,\"onlineMoneyMade\":46,\"onlineRunningTime\":418.60999999998495,\"pid\":847,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":848,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":327.84922751045593,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":849,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[21,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":376.838192540754,\"onlineMoneyMade\":21,\"onlineRunningTime\":418.60999999998495,\"pid\":850,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":851,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":852,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":853,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3061,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3061,\"onlineRunningTime\":418.60999999998495,\"pid\":854,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":855,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":856,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":857,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":858,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":859,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":860,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":861,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":862,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":863,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":864,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":865,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":866,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":867,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":868,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":869,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":870,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":871,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":872,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":873,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":874,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":875,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":876,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":877,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":878,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":879,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":880,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":881,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":882,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":883,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":884,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":885,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":886,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":887,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":888,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":889,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":890,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":891,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":892,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":893,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":894,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.60999999998495,\"pid\":895,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":479385.28568590665,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1026,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":10177,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1057,\"ramUsage\":1.75,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///80842c10-465e-4ae0-8552-bdf174706a01\",\"moduleSequenceNumber\":1341}],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-0\",\"httpPortOpen\":false,\"ip\":\"60.4.2.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32766.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[212140,52,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2418.0450688031665,\"onlineMoneyMade\":212140,\"onlineRunningTime\":417.609999999985,\"pid\":896,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[119,17,106,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7084.5580197661575,\"onlineMoneyMade\":119,\"onlineRunningTime\":417.609999999985,\"pid\":897,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[81,10,58,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3956.801021677921,\"onlineMoneyMade\":81,\"onlineRunningTime\":417.609999999985,\"pid\":898,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[38,4,40,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3140.318271172949,\"onlineMoneyMade\":38,\"onlineRunningTime\":417.609999999985,\"pid\":899,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[466,4,16,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1381.7400393160983,\"onlineMoneyMade\":466,\"onlineRunningTime\":417.609999999985,\"pid\":900,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,12,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":910.6922986401554,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":901,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[78,2,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":803.9214774202751,\"onlineMoneyMade\":78,\"onlineRunningTime\":417.609999999985,\"pid\":902,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43,2,22,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2129.13578785526,\"onlineMoneyMade\":43,\"onlineRunningTime\":417.609999999985,\"pid\":903,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":486.7493320318073,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":904,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[259,1,6,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":747.3957485391621,\"onlineMoneyMade\":259,\"onlineRunningTime\":417.609999999985,\"pid\":905,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[74,23,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5275.734695570555,\"onlineMoneyMade\":74,\"onlineRunningTime\":417.609999999985,\"pid\":906,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":237.408061300675,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":907,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[450,4,10,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1340.9159017908491,\"onlineMoneyMade\":450,\"onlineRunningTime\":417.609999999985,\"pid\":908,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":427.08328487952116,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":909,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":310.89150884612206,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":910,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[90,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":437.13230334727456,\"onlineMoneyMade\":90,\"onlineRunningTime\":417.609999999985,\"pid\":911,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":282.6286444055655,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":912,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326.5931002019868,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":913,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":200.98036935506877,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":914,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":915,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3034,1,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":422.05877564564435,\"onlineMoneyMade\":3034,\"onlineRunningTime\":417.609999999985,\"pid\":916,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":221.07840629057566,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":917,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":195.95586012119205,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":918,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":291.4215355648497,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":919,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":198.46811473813042,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":920,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":173.3455685687468,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":921,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150.73527701630158,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":922,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":153.24753163323993,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":923,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":216.05389705669896,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":924,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":165.80880471793176,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":925,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":926,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":133.14949469773308,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":927,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":928,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":929,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":930,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":931,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":932,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":933,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":934,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":935,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":936,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":937,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":938,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":163.2965501009934,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":939,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":940,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":941,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":942,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,1,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":188.419096270377,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":943,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":944,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":945,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":946,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":947,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":948,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":949,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":950,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":951,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":952,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":953,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":954,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":955,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":956,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":417.609999999985,\"pid\":957,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":479385.28568590665,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.20999999998514,\"pid\":1027,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":10177,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,49]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3693.0142868993885,\"onlineMoneyMade\":0,\"onlineRunningTime\":415.00999999998515,\"pid\":1058,\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///cd3cfe86-8efb-49a8-be1d-dbf497e457dc\",\"moduleSequenceNumber\":1342}],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":36.572,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1333,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":9.0704,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":65.0049,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":10066.901620794228,\"favor\":2.6061,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1844,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0183,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":345014.93776935316,\"favor\":62.6541,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.5188,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":340.2108831394311,\"favor\":0.6591,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1108,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":15.759,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.2968,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.8882,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0677,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":19.78,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.014,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":14.062,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0959,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":298.6436,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0556,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":2502527.080863942}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":242.5337,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":2219476.9503420107}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":227.8932,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":224.718,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":195.4828,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":49.0579,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":30.9572,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":32.7647,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":187.5646,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":31.598,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":328594.3216410096}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":185.9803,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":196.8733,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":233.2063,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":223.2588,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":223.3893,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":223.2315,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"port1\":\"run BruteSSH.exe\",\"port2\":\"run FTPCrack.exe\",\"port3\":\"run relaySMTP.exe\",\"nuke\":\"run NUKE.exe\",\"update\":\"run /scripts/update_hack.script\",\"hacknet\":\"run /scripts/auto-hacknet-buy.js\",\"bp\":\"run /bitpacks/bp.js\",\"themes\":\"run /bitpacks/theme-browser/theme-browser.js\",\"sc\":\"scan-analyze 10\",\"port4\":\"run HTTPWorm.exe\",\"port5\":\"run SQLInject.exe\",\"b\":\"buy -l\"}","GlobalAliasesSave":"{\"root\":\"run /scripts/get_root.script\",\"grind\":\"run /scripts/grind_on_all_servers.script\",\"more\":\"run ServerProfiler.exe\",\"boot\":\"run /scripts/boot.js\",\"con\":\"connect\",\"l\":\"ls\",\"prof\":\"run ServerProfiler.exe\",\"hackall\":\"run /scripts/acqure_the_internet.js\",\"share\":\"run /scripts/simple_share.js -t\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":14353.169378012986,\"lastPrice\":14395.766890614763,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":20.69435143302788,\"otlkMagForecast\":30.15771486959755,\"cap\":527395252,\"spreadPerc\":0.1,\"shareTxForMovement\":71367,\"shareTxUntilMovement\":71367,\"totalShares\":101400000,\"maxShares\":20300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":190482.67620669186,\"lastPrice\":189876.89330411731,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":true,\"otlkMag\":21.645609576139798,\"otlkMagForecast\":70.59474012472762,\"cap\":697794796,\"spreadPerc\":0.3,\"shareTxForMovement\":84307,\"shareTxUntilMovement\":84307,\"totalShares\":74000000,\"maxShares\":14800000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":18986.237570653608,\"lastPrice\":19086.25454177372,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":14.249969309451885,\"otlkMagForecast\":36.10837131663424,\"cap\":294982734,\"spreadPerc\":0.2,\"shareTxForMovement\":61059,\"shareTxUntilMovement\":61059,\"totalShares\":129900000,\"maxShares\":26000000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":4199.428516058584,\"lastPrice\":4178.347578794967,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":11.005783859736965,\"otlkMagForecast\":62.633910871926005,\"cap\":148472211,\"spreadPerc\":0.1,\"shareTxForMovement\":88805,\"shareTxUntilMovement\":88805,\"totalShares\":69100000,\"maxShares\":13800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":18688.701894646834,\"lastPrice\":18777.445189566777,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":11.820953030452715,\"otlkMagForecast\":36.40985600523545,\"cap\":599368312,\"spreadPerc\":0.5,\"shareTxForMovement\":72659,\"shareTxUntilMovement\":72659,\"totalShares\":48700000,\"maxShares\":9700000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":82136.92528987453,\"lastPrice\":82801.19030228675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.09,\"b\":false,\"otlkMag\":22.15345822564603,\"otlkMagForecast\":24.808892295412257,\"cap\":879011944,\"spreadPerc\":0.7,\"shareTxForMovement\":77844,\"shareTxUntilMovement\":77844,\"totalShares\":36100000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":77548.0662928904,\"lastPrice\":77101.85978984124,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":9.624632025967216,\"otlkMagForecast\":58.583006303836726,\"cap\":285644734,\"spreadPerc\":0.7,\"shareTxForMovement\":33212,\"shareTxUntilMovement\":33212,\"totalShares\":101700000,\"maxShares\":20300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":11534.979567894348,\"lastPrice\":11428.98245945089,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":false,\"otlkMag\":14.1198916545659,\"otlkMagForecast\":37.220633586446844,\"cap\":313497129,\"spreadPerc\":0.1,\"shareTxForMovement\":33869,\"shareTxUntilMovement\":33869,\"totalShares\":57900000,\"maxShares\":11600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":14691.285621428528,\"lastPrice\":14778.48757772311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":8.237646314580813,\"otlkMagForecast\":56.767265629544696,\"cap\":502003037,\"spreadPerc\":0.4,\"shareTxForMovement\":95762,\"shareTxUntilMovement\":95762,\"totalShares\":55500000,\"maxShares\":11100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":19504.710020656406,\"lastPrice\":19594.43381398571,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":9.048648830782415,\"otlkMagForecast\":42.14686456285431,\"cap\":292037186,\"spreadPerc\":0.7,\"shareTxForMovement\":96582,\"shareTxUntilMovement\":96582,\"totalShares\":48600000,\"maxShares\":9700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":17127.615734277726,\"lastPrice\":17058.00641260252,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":11.869853588065979,\"otlkMagForecast\":63.78068471630814,\"cap\":165477880,\"spreadPerc\":0.9,\"shareTxForMovement\":93559,\"shareTxUntilMovement\":93559,\"totalShares\":60000000,\"maxShares\":12000000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":18368.070921160077,\"lastPrice\":18273.16609877092,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.186431620121885,\"otlkMagForecast\":59.112382857042704,\"cap\":89705034,\"spreadPerc\":0.9,\"shareTxForMovement\":103945,\"shareTxUntilMovement\":103945,\"totalShares\":100500000,\"maxShares\":20100000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":6523.115139279033,\"lastPrice\":6556.026087547762,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":false,\"otlkMag\":7.573498709100338,\"otlkMagForecast\":42.11767340637994,\"cap\":23714606,\"spreadPerc\":0.5,\"shareTxForMovement\":64896,\"shareTxUntilMovement\":64896,\"totalShares\":59500000,\"maxShares\":11900000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":31464.618382718952,\"lastPrice\":31581.344734471717,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":9.141370757211496,\"otlkMagForecast\":58.521919733191375,\"cap\":296018990,\"spreadPerc\":0.9,\"shareTxForMovement\":99596,\"shareTxUntilMovement\":99596,\"totalShares\":53100000,\"maxShares\":10600000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":19291.24140978995,\"lastPrice\":19200.069884136818,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":5.615689024637324,\"otlkMagForecast\":55.16736423692909,\"cap\":242498931,\"spreadPerc\":0.5,\"shareTxForMovement\":83031,\"shareTxUntilMovement\":83031,\"totalShares\":41700000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":22221.569703624114,\"lastPrice\":22330.38629258856,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":1.9840550466647702,\"otlkMagForecast\":45.23759779709703,\"cap\":139153595,\"spreadPerc\":0.7,\"shareTxForMovement\":62869,\"shareTxUntilMovement\":62869,\"totalShares\":41400000,\"maxShares\":8300000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":11628.160518516468,\"lastPrice\":11560.4000510596,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":7.836648785327928,\"otlkMagForecast\":55.37177823653983,\"cap\":384943272,\"spreadPerc\":0.4,\"shareTxForMovement\":99996,\"shareTxUntilMovement\":99996,\"totalShares\":30000000,\"maxShares\":6000000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":54146.23504894089,\"lastPrice\":54375.2266527083,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":12.044250680825613,\"otlkMagForecast\":37.86564755959975,\"cap\":81738428,\"spreadPerc\":0.8,\"shareTxForMovement\":113489,\"shareTxUntilMovement\":113489,\"totalShares\":28900000,\"maxShares\":5800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":43419.89608351195,\"lastPrice\":43166.87648932399,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.966742464634431,\"otlkMagForecast\":56.04078067800807,\"cap\":128552596,\"spreadPerc\":0.8,\"shareTxForMovement\":88157,\"shareTxUntilMovement\":88157,\"totalShares\":26900000,\"maxShares\":5400000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":18857.929972018213,\"lastPrice\":19213.319129756575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":true,\"otlkMag\":9.581187865074623,\"otlkMagForecast\":59.925278721497946,\"cap\":189237546,\"spreadPerc\":0.9,\"shareTxForMovement\":26123,\"shareTxUntilMovement\":26123,\"totalShares\":55700000,\"maxShares\":11100000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":3752.116103708205,\"lastPrice\":3788.0283373330803,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.29,\"b\":true,\"otlkMag\":6.063401710710055,\"otlkMagForecast\":57.14421171836095,\"cap\":155247455,\"spreadPerc\":1.1,\"shareTxForMovement\":62645,\"shareTxUntilMovement\":62645,\"totalShares\":43100000,\"maxShares\":8600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2428.4538215141397,\"lastPrice\":2417.869541645575,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":2.032795785432013,\"otlkMagForecast\":50.659191984623384,\"cap\":3474698,\"spreadPerc\":1,\"shareTxForMovement\":100475,\"shareTxUntilMovement\":100475,\"totalShares\":55800000,\"maxShares\":11200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":334490.6167196636,\"lastPrice\":329623.7659244657,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.99,\"b\":false,\"otlkMag\":5.763531024433749,\"otlkMagForecast\":45.22771998823068,\"cap\":156045966,\"spreadPerc\":1,\"shareTxForMovement\":37669,\"shareTxUntilMovement\":37669,\"totalShares\":33800000,\"maxShares\":6800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":20055.441102981047,\"lastPrice\":20284.596124292537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":true,\"otlkMag\":8.401577358267566,\"otlkMagForecast\":58.50112488804366,\"cap\":10297946,\"spreadPerc\":1.2,\"shareTxForMovement\":89101,\"shareTxUntilMovement\":89101,\"totalShares\":35700000,\"maxShares\":7100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":11214.518434522197,\"lastPrice\":11296.89283420679,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":true,\"otlkMag\":5.259139547567903,\"otlkMagForecast\":54.52776213453067,\"cap\":66746002,\"spreadPerc\":1.1,\"shareTxForMovement\":105326,\"shareTxUntilMovement\":105326,\"totalShares\":56200000,\"maxShares\":11200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":15966.402515018108,\"lastPrice\":16306.391940245981,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.87,\"b\":false,\"otlkMag\":13.000627704707153,\"otlkMagForecast\":34.509854661707706,\"cap\":46758316,\"spreadPerc\":0.7,\"shareTxForMovement\":23974,\"shareTxUntilMovement\":23974,\"totalShares\":24800000,\"maxShares\":5000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":607.3095751928587,\"lastPrice\":602.7924139753502,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":false,\"otlkMag\":5.366560841044821,\"otlkMagForecast\":41.43285043324619,\"cap\":5530431,\"spreadPerc\":0.8,\"shareTxForMovement\":70242,\"shareTxUntilMovement\":70242,\"totalShares\":15500000,\"maxShares\":3100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2924.2651997985563,\"lastPrice\":2940.9716399795375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":7.183051201987448,\"otlkMagForecast\":42.91811631744708,\"cap\":47243106,\"spreadPerc\":1,\"shareTxForMovement\":144654,\"shareTxUntilMovement\":144654,\"totalShares\":16600000,\"maxShares\":3300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":133265.03180291015,\"lastPrice\":135252.44744460742,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.01,\"b\":false,\"otlkMag\":6.440881533800713,\"otlkMagForecast\":39.765831814968095,\"cap\":10127718,\"spreadPerc\":1.1,\"shareTxForMovement\":57289,\"shareTxUntilMovement\":57289,\"totalShares\":10000000,\"maxShares\":2000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":566.514651770476,\"lastPrice\":555.3079141035416,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.72,\"b\":false,\"otlkMag\":20.7386835389832,\"otlkMagForecast\":31.818206859244828,\"cap\":12614561,\"spreadPerc\":1,\"shareTxForMovement\":17735,\"shareTxUntilMovement\":17735,\"totalShares\":31800000,\"maxShares\":6400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1147.2308524043863,\"lastPrice\":1161.4457497568478,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.67,\"b\":false,\"otlkMag\":17.980764927612746,\"otlkMagForecast\":31.016995556463662,\"cap\":18389986,\"spreadPerc\":1.4,\"shareTxForMovement\":42905,\"shareTxUntilMovement\":42905,\"totalShares\":101600000,\"maxShares\":20300000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":42700.15133396691,\"lastPrice\":42463.85492604994,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":11.328056175617313,\"otlkMagForecast\":60.93877787480082,\"cap\":300362840,\"spreadPerc\":0.6,\"shareTxForMovement\":105543,\"shareTxUntilMovement\":105543,\"totalShares\":12800000,\"maxShares\":2600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":45923.35321137717,\"lastPrice\":45716.44452625998,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":13.448051219022263,\"otlkMagForecast\":37.64049419809236,\"cap\":441638475,\"spreadPerc\":1,\"shareTxForMovement\":188218,\"shareTxUntilMovement\":188218,\"totalShares\":19900000,\"maxShares\":4000000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":250144,\"lastUpdate\":1647324282983,\"ticksUntilCycle\":57}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":20,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":250,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"on\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-100,\"y\":423,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1647315325202","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}