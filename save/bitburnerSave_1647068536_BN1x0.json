{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1651,\"hp\":12,\"max_hp\":22,\"strength\":184,\"defense\":122,\"dexterity\":101,\"agility\":100,\"charisma\":363,\"intelligence\":0,\"hacking_chance_mult\":1.3936175910409139,\"hacking_speed_mult\":1.428257176058538,\"hacking_money_mult\":4.016970855095639,\"hacking_grow_mult\":2.44052450833038,\"hacking_exp\":957776149.1223005,\"strength_exp\":17761.14336691546,\"defense_exp\":5611.650067599631,\"dexterity_exp\":2283.191898198735,\"agility_exp\":4194.260931096425,\"charisma_exp\":471502.8814112526,\"intelligence_exp\":0,\"hacking_mult\":3.5769681562443365,\"strength_mult\":1.6166034343180435,\"defense_mult\":1.546316328478129,\"dexterity_mult\":1.8671769666373403,\"agility_mult\":1.4206781267892812,\"charisma_mult\":1.6664651072008796,\"hacking_exp_mult\":3.5522849885976067,\"strength_exp_mult\":1.552452504384788,\"defense_exp_mult\":1.552452504384788,\"dexterity_exp_mult\":1.552452504384788,\"agility_exp_mult\":1.552452504384788,\"charisma_exp_mult\":1.6730780639754863,\"company_rep_mult\":2.0076936767705833,\"faction_rep_mult\":1.520980058159533,\"money\":10579530631.827278,\"city\":\"Ishima\",\"location\":\"Omega Software\",\"jobs\":{\"Omega Software\":\"Head of Engineering\"},\"companyName\":\"Omega Software\",\"currentServer\":\"home\",\"purchasedServers\":[\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94891.39999982395,\"ram\":64,\"totalMoneyGenerated\":2279549779.4727097,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94890.19999982395,\"ram\":64,\"totalMoneyGenerated\":2278030294.8434286,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94889.19999982395,\"ram\":64,\"totalMoneyGenerated\":2277388597.255815,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94888.19999982393,\"ram\":64,\"totalMoneyGenerated\":2276012916.385198,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94887.19999982393,\"ram\":64,\"totalMoneyGenerated\":2274769204.5731673,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94886.19999982393,\"ram\":64,\"totalMoneyGenerated\":2273984470.267959,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94884.99999982392,\"ram\":64,\"totalMoneyGenerated\":2273332018.663699,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94748.59999982343,\"ram\":64,\"totalMoneyGenerated\":2272593727.210367,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94623.39999982297,\"ram\":64,\"totalMoneyGenerated\":2271871422.1513915,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94622.39999982297,\"ram\":64,\"totalMoneyGenerated\":2271046057.9656215,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94621.39999982297,\"ram\":64,\"totalMoneyGenerated\":2269031606.092104,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94620.39999982297,\"ram\":64,\"totalMoneyGenerated\":2261793757.5443187,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94609.19999982293,\"ram\":64,\"totalMoneyGenerated\":2261067053.715338,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94567.99999982277,\"ram\":64,\"totalMoneyGenerated\":2259680545.4397345,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94080.19999982123,\"ram\":64,\"totalMoneyGenerated\":2258291829.5674753,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":94036.99999982126,\"ram\":64,\"totalMoneyGenerated\":2257522162.5920143,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":93968.19999982133,\"ram\":64,\"totalMoneyGenerated\":2256330570.2956176,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":92017.39999982275,\"ram\":64,\"totalMoneyGenerated\":2252979919.5406265,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":92016.19999982275,\"ram\":64,\"totalMoneyGenerated\":2251225321.9554152,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":92015.19999982275,\"ram\":64,\"totalMoneyGenerated\":2250442915.0912,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":92013.99999982276,\"ram\":64,\"totalMoneyGenerated\":2249635693.56153,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":91548.19999982316,\"ram\":64,\"totalMoneyGenerated\":2248210636.657449,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":89810.79999982474,\"ram\":64,\"totalMoneyGenerated\":2219626481.7451587,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":89796.19999982476,\"ram\":64,\"totalMoneyGenerated\":2217985329.1959777,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":52457.19999989782,\"ram\":64,\"totalMoneyGenerated\":1351769482.562063,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":52294.199999897966,\"ram\":64,\"totalMoneyGenerated\":1343808578.337729,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":50259.39999989979,\"ram\":64,\"totalMoneyGenerated\":1273653254.1509326,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":45263.59999993234,\"ram\":64,\"totalMoneyGenerated\":433814410.64935195,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.414794708522,\"onlineTimeSeconds\":12952.200000005134,\"ram\":64,\"totalMoneyGenerated\":256764885.12964275,\"name\":\"hacknet-node-28\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Tian Di Hui\",\"Netburners\",\"Volhaven\",\"NiteSec\",\"The Black Hand\",\"BitRunners\",\"Slum Snakes\",\"Tetrads\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":12,\"name\":\"NeuroFlux Governor\"},{\"level\":13,\"name\":\"NeuroFlux Governor\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":15,\"name\":\"NeuroFlux Governor\"},{\"level\":16,\"name\":\"NeuroFlux Governor\"},{\"level\":17,\"name\":\"NeuroFlux Governor\"},{\"level\":18,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-102.95,\"crime_money_mult\":1.6532391936516664,\"crime_success_mult\":1.2023557772012117,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":750,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.180796917226694,\"hacknet_node_money_mult\":2.813820164197429,\"hacknet_node_purchase_cost_mult\":0.684933764507918,\"hacknet_node_ram_cost_mult\":0.8953382542587163,\"hacknet_node_core_cost_mult\":0.8953382542587163,\"hacknet_node_level_cost_mult\":0.7610375161199088,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1647068535849,\"lastSave\":1647068528859,\"totalPlaytime\":1137802800,\"playtimeSinceLastAug\":94969400,\"playtimeSinceLastBitnode\":1137802800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":10080000000,\"class\":-18891968,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":82928573651.8783,\"hacknet\":58922212922.64789,\"hacknet_expenses\":-55603517644.51742,\"hospitalization\":-26975000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":10578530631.82734,\"work\":758250208.332849,\"servers\":-3379200000,\"other\":-11316100000,\"augmentations\":-71765821538.43033}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":50540330431,\"class\":-217608965.5999999,\"codingcontract\":75000000,\"corporation\":0,\"crime\":11735631.210100027,\"gang\":0,\"hacking\":218968205411.3719,\"hacknet\":483942678785.0912,\"hacknet_expenses\":-170691147927.91754,\"hospitalization\":-42336000,\"infiltration\":5907535.023848591,\"sleeves\":0,\"stock\":-1065814589.8121406,\"total\":16084509162.783577,\"work\":1290023958.7117991,\"servers\":-136138960676.05193,\"other\":-12275107814.675003,\"augmentations\":-418318396559.7881}},\"scriptProdSinceLastAug\":63155838197.95749,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645937098713},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645945619517},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645945799518},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645956415952},{\"ID\":\"TOR\",\"unlockedOn\":1645957015948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645964175169},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645964535170},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645964655180},{\"ID\":\"NITESEC\",\"unlockedOn\":1646008184016},{\"ID\":\"WORKOUT\",\"unlockedOn\":1646010884426},{\"ID\":\"TRAVEL\",\"unlockedOn\":1646037906914},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1646039647920},{\"ID\":\"NS2\",\"unlockedOn\":1646103650911},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1646107006372},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1646111040952},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1646131379336},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1646133043592},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1646141161803},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1646142062592},{\"ID\":\"4S\",\"unlockedOn\":1646178149739},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1646217763426},{\"ID\":\"FROZE\",\"unlockedOn\":1646220263671},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1646297619771},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1646440491301},{\"ID\":\"DONATION\",\"unlockedOn\":1646812121257},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1646976391367},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646977487772}],\"terminalCommandHistory\":[\"analyze\",\"backdoor\",\"hoe\",\"home\",\"boot\",\"run scripts/roulette.js\",\"buy -l\",\"buy SQLInject.exe\",\"buy Formulas.exe\",\"home\",\"run scripts/acqure_the_internet.js 5\",\"boot\",\"sc\",\"boot --grind-hack --single-hack-server millenium-fitness --no-home\",\"scan\",\"run scripts/simple_share.js -t 800\",\"free\",\"run scripts/weaken-exp-grind.script millenium-fitness -t 550\",\"free\",\"kill scripts/weaken-exp-grind.script\",\"run scripts/weaken-exp-grind.script millenium-fitness -t 10000\",\"run scripts/weaken-exp-grind.script millenium-fitness -t 5000\",\"run scripts/weaken-exp-grind.script millenium-fitness -t 3000\",\"run scripts/weaken-exp-grind.script millenium-fitness -t 2000\",\"sc\",\"backdoor\",\"home\",\"scan\",\"con grinding-server\",\"free\",\"home\",\"boot --no-buy-servers --grind-hack\",\"run scripts/simple_share.js 3000\",\"kill scripts/simple_share.js\",\"kill 1072\",\"run scripts/simple_share.js -t 3000\",\"run scripts/simple_share.js -t 2900\",\"run scripts/simple_share.js -t 2800\",\"run scripts/simple_share.js -t 2700\",\"run scripts/simple_share.js -t 2600\",\"run scripts/simple_share.js -t 2500\",\"run scripts/simple_share.js -t 2400\",\"run scripts/simple_share.js -t 2300\",\"run scripts/simple_share.js -t 22--\",\"run scripts/simple_share.js -t 2200\",\"run scripts/simple_share.js -t 2100\",\"free\",\"mem scripts/simple_share.js\",\"expr 8000/3\",\"run scripts/simple_share.js -t 1900\"],\"identifier\":\"b82959b7efaf8\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"10.7.3.1\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":7806.25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/auto-hacknet-buy.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":32791.063,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19524.610000018318,\"pid\":1,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///841b90ff-9586-4d61-a995-7c5fb84b6f04\",\"moduleSequenceNumber\":741}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22149296,2801,1106,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59902.48236175232,\"offlineMoneyMade\":0,\"offlineRunningTime\":32791.138999999996,\"onlineExpGained\":57698.34415579341,\"onlineMoneyMade\":22149296,\"onlineRunningTime\":19512.410000018313,\"pid\":2,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[330088,337,3283,270]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88301.99818916872,\"offlineMoneyMade\":0,\"offlineRunningTime\":32791.201,\"onlineExpGained\":86949.27966589844,\"onlineMoneyMade\":330088,\"onlineRunningTime\":19512.410000018313,\"pid\":3,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[91066,148,1604,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42788.52634592556,\"offlineMoneyMade\":0,\"offlineRunningTime\":32791.274,\"onlineExpGained\":42185.160382091846,\"onlineMoneyMade\":91066,\"onlineRunningTime\":19512.410000018313,\"pid\":4,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[473300,104,989,76]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32529.262273595716,\"offlineMoneyMade\":0,\"offlineRunningTime\":32791.82,\"onlineExpGained\":32656.599935801183,\"onlineMoneyMade\":473300,\"onlineRunningTime\":19512.410000018313,\"pid\":5,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5170,60,413,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12968.33803479419,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.04,\"onlineExpGained\":13860.57198988448,\"onlineMoneyMade\":5170,\"onlineRunningTime\":19512.410000018313,\"pid\":6,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[34511,44,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9767.185126681117,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.066999999995,\"onlineExpGained\":10783.405118511695,\"onlineMoneyMade\":34511,\"onlineRunningTime\":19512.410000018313,\"pid\":7,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[455,15,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7361.576782579701,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.09,\"onlineExpGained\":6649.877498654703,\"onlineMoneyMade\":455,\"onlineRunningTime\":19512.410000018313,\"pid\":8,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[47502,78,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22361.195364927633,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.152,\"onlineExpGained\":23082.747855907255,\"onlineMoneyMade\":47502,\"onlineRunningTime\":19512.410000018313,\"pid\":9,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1084,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5178.827912605073,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.181,\"onlineExpGained\":5002.061299569003,\"onlineMoneyMade\":1084,\"onlineRunningTime\":19512.410000018313,\"pid\":10,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1055,19,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9729.035234148063,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.2,\"onlineExpGained\":8299.025804611181,\"onlineMoneyMade\":1055,\"onlineRunningTime\":19512.410000018313,\"pid\":11,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[180644,25,101,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5754.691404846511,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.221,\"onlineExpGained\":5183.4942553616165,\"onlineMoneyMade\":180644,\"onlineRunningTime\":19512.410000018313,\"pid\":12,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1045,29,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12437.808684078595,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.246,\"onlineExpGained\":11357.543179793673,\"onlineMoneyMade\":1045,\"onlineRunningTime\":19512.410000018313,\"pid\":13,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[49860,24,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7360.032164561564,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.272,\"onlineExpGained\":6383.456124509884,\"onlineMoneyMade\":49860,\"onlineRunningTime\":19512.410000018313,\"pid\":14,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[7143906,18,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4919.568636807462,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.317,\"onlineExpGained\":4471.8827650208195,\"onlineMoneyMade\":7143906,\"onlineRunningTime\":19512.410000018313,\"pid\":15,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[2623521,11,79,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4850.111532043835,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.369,\"onlineExpGained\":4483.871726857336,\"onlineMoneyMade\":2623521,\"onlineRunningTime\":19512.410000018313,\"pid\":16,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[798413,18,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5407.70777670783,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.395,\"onlineExpGained\":4897.8905422783755,\"onlineMoneyMade\":798413,\"onlineRunningTime\":19512.410000018313,\"pid\":17,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[4800092,3,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4189.972487257354,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.416,\"onlineExpGained\":3927.051054894658,\"onlineMoneyMade\":4800092,\"onlineRunningTime\":19512.410000018313,\"pid\":18,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[3659804,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3340.4238170041453,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.447,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":3659804,\"onlineRunningTime\":19512.410000018313,\"pid\":19,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[3245363,1,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1769.8138994161018,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.466,\"onlineExpGained\":1662.735796037825,\"onlineMoneyMade\":3245363,\"onlineRunningTime\":19512.410000018313,\"pid\":20,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7234306,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3900.042029900053,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.490999999995,\"onlineExpGained\":3515.4300318409073,\"onlineMoneyMade\":7234306,\"onlineRunningTime\":19512.410000018313,\"pid\":21,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[8644344,4,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2617.896244901409,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.516,\"onlineExpGained\":2532.0687398723726,\"onlineMoneyMade\":8644344,\"onlineRunningTime\":19512.410000018313,\"pid\":22,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[13010961,7,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3776.4951674721115,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.546,\"onlineExpGained\":3548.7327036090064,\"onlineMoneyMade\":13010961,\"onlineRunningTime\":19512.410000018313,\"pid\":23,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[16282767,13,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3809.5907877951236,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.566999999995,\"onlineExpGained\":3595.6228654584966,\"onlineMoneyMade\":16282767,\"onlineRunningTime\":19512.410000018313,\"pid\":24,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[6477961,2,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2086.2302025724657,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.594,\"onlineExpGained\":2051.4445809151184,\"onlineMoneyMade\":6477961,\"onlineRunningTime\":19512.410000018313,\"pid\":25,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[26683655,6,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2711.0722081892236,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.61,\"onlineExpGained\":2600.272611653448,\"onlineMoneyMade\":26683655,\"onlineRunningTime\":19512.410000018313,\"pid\":26,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[480627434,30,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4600.619292723557,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.642,\"onlineExpGained\":3914.7956716839926,\"onlineMoneyMade\":480627434,\"onlineRunningTime\":19512.410000018313,\"pid\":27,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[43296574,8,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3239.7049655849714,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.659999999996,\"onlineExpGained\":3021.751225550553,\"onlineMoneyMade\":43296574,\"onlineRunningTime\":19512.410000018313,\"pid\":28,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3357.4142860962934,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.739,\"onlineExpGained\":3268.1909966345133,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":29,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[5257947,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1770.405866187636,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.758,\"onlineExpGained\":1614.2471059434674,\"onlineMoneyMade\":5257947,\"onlineRunningTime\":19512.410000018313,\"pid\":30,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1345.441625813499,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.784,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":31,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[7479962,3,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1851.2428854564048,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.801,\"onlineExpGained\":1854.2927640479495,\"onlineMoneyMade\":7479962,\"onlineRunningTime\":19512.410000018313,\"pid\":32,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1389.3170649338963,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.828,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":33,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[1350583,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1440.2556038800549,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.846,\"onlineExpGained\":1397.9129501378734,\"onlineMoneyMade\":1350583,\"onlineRunningTime\":19512.410000018313,\"pid\":34,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1301.57288316243,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.869999999995,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":35,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[6628803,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1839.3891635561604,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.888,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":6628803,\"onlineRunningTime\":19512.410000018313,\"pid\":36,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.622159119387,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.914,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":37,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[7822679,3,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2001.2117066390258,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.932,\"onlineExpGained\":1856.9569777893992,\"onlineMoneyMade\":7822679,\"onlineRunningTime\":19512.410000018313,\"pid\":38,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[690604,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1386.5338108292667,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.956999999995,\"onlineExpGained\":1318.5193806427164,\"onlineMoneyMade\":690604,\"onlineRunningTime\":19512.410000018313,\"pid\":39,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[1474862,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1590.5394690513829,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.973,\"onlineExpGained\":1576.4152708149022,\"onlineMoneyMade\":1474862,\"onlineRunningTime\":19512.410000018313,\"pid\":40,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[5582394,2,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1546.257408896208,\"offlineMoneyMade\":0,\"offlineRunningTime\":32792.994999999995,\"onlineExpGained\":1585.7400189099715,\"onlineMoneyMade\":5582394,\"onlineRunningTime\":19512.410000018313,\"pid\":41,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1437.9071366068374,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.012,\"onlineExpGained\":1553.7694540125926,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":42,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[1175128,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1496.545771032801,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.034,\"onlineExpGained\":1313.19095315982,\"onlineMoneyMade\":1175128,\"onlineRunningTime\":19512.410000018313,\"pid\":43,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[3421254,1,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1785.5653802313493,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.049,\"onlineExpGained\":1664.6007456568389,\"onlineMoneyMade\":3421254,\"onlineRunningTime\":19512.410000018313,\"pid\":44,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[3241351,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1492.4300421435248,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.077,\"onlineExpGained\":1658.473054051508,\"onlineMoneyMade\":3241351,\"onlineRunningTime\":19512.410000018313,\"pid\":45,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1504.5608631722719,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.094,\"onlineExpGained\":1529.7915303395591,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":46,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[5446989,2,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1903.347839112787,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.117,\"onlineExpGained\":1818.3258785383994,\"onlineMoneyMade\":5446989,\"onlineRunningTime\":19512.410000018313,\"pid\":47,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[3184324,2,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1511.448580945845,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.132,\"onlineExpGained\":1724.8119762135684,\"onlineMoneyMade\":3184324,\"onlineRunningTime\":19512.410000018313,\"pid\":48,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.0414265477143,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.229999999996,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":49,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[887490,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1544.833769625715,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.245,\"onlineExpGained\":1355.5519516488469,\"onlineMoneyMade\":887490,\"onlineRunningTime\":19512.410000018313,\"pid\":50,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1141.690094296519,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.268,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":51,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1579.9271953543278,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.284,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":52,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[47972774,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1364.27800201466,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.306,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":47972774,\"onlineRunningTime\":19512.410000018313,\"pid\":53,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1176.6422013742078,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.32,\"onlineExpGained\":1130.1594691223286,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":54,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":969.9099444892158,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.342,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":55,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":951.9493640862552,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.36,\"onlineExpGained\":960.1826324179331,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":56,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1269.8448059659054,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.384999999995,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":57,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,0,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1347.1002583867412,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.399999999994,\"onlineExpGained\":1358.7490081385845,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":58,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1174.1795411052478,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.425,\"onlineExpGained\":1092.327633993764,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":59,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[106522615,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1248.7493903654781,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.443999999996,\"onlineExpGained\":1304.6654691871859,\"onlineMoneyMade\":106522615,\"onlineRunningTime\":19512.410000018313,\"pid\":60,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":945.5985132900712,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.46799999999,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":61,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":945.5993404089426,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.491,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":62,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.1860073441719,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.515999999996,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19512.410000018313,\"pid\":63,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3885.3006786539136,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.585,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":65,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/simple_share.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1734.8100000002532,\"pid\":1073,\"ramUsage\":4,\"server\":\"home\",\"threads\":1900,\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///cbc8656a-d1c9-49f4-affa-4aa5a2c9fb0d\",\"moduleSequenceNumber\":4442}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/victims.txt').split('\\\\r\\\\n');\\r\\nlist_of_servers.pop()\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\nwhile (true) {\\r\\n\\tfor (i = 0; i < list_of_servers.length; i++) {\\r\\n\\t\\tserver = list_of_servers[i];\\r\\n\\t\\tprint('Working on ' + server + '...');\\r\\n\\r\\n\\t\\tif (getServerMoneyAvailable(server) < 0.7 * getServerMaxMoney(server)) {\\r\\n\\t\\t\\tgrow(server);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thack(server);\\r\\n\\r\\n\\t\\tif (getServerSecurityLevel(server) >= 1.25 * getServerMinSecurityLevel(server)) {\\r\\n\\t\\t\\tweaken(server)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/hack_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/victims.txt').split('\\\\r\\\\n \\\\r\\\\n')[0].split('\\\\r\\\\n');\\r\\n\\r\\n// Check if hack.script exists\\r\\nif (!fileExists('/scripts/hack.script')) {\\r\\n    // If not, copy it over\\r\\n    print('hack.script is not on this server. Copying over from home...')\\r\\n    scp('/scripts/hack.script', 'home', getHostname());\\r\\n    print('Successfully copied hack.script.')\\r\\n}\\r\\n\\r\\n// Start hack.script for all given servers\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    print('Starting hack for server', servers[i]);\\r\\n    run('/scripts/hack.script', 1, servers[i]);\\r\\n}\",\"filename\":\"/scripts/auto_start_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.35,\"server\":\"home\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = args;\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    exec('/scripts/auto_start_hack.script', servers_to_autorun[i], 1, \\r\\n    'neo-net', 'zer0', 'silver-helix', 'iron-gym', 'CSEC', 'max-hardware', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'n00dles', 'foodnstuff', 'sigma-cosmetics', 'joesguns');\\r\\n}\",\"filename\":\"/scripts/remote_auto_run.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = read('/victims.txt').split('\\\\r\\\\n').concat(read('/grind_servers.txt').split('\\\\r\\\\n'));\\r\\nprint(servers_to_autorun)\\r\\n\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    s = servers_to_autorun[i];\\r\\n    if (s != ' ' && s) {\\r\\n        tprint(s);\\r\\n        exec('/scripts/auto_start_hack.script', servers_to_autorun[i]);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done');\",\"filename\":\"/scripts/remote_auto_hack_from_home.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var num_ports = args[0];\\r\\nvar port_opener = [brutessh, ftpcrack, relaysmtp, httpworm, sqlinject].slice(0, num_ports);\\r\\nvar servers = args.slice(1);\\r\\nvar port_opened, server;\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    port_opened = true;\\r\\n    server = servers[i];\\r\\n    if (!hasRootAccess(server)) {\\r\\n        print('Attempting to take over server ', server, '...');\\r\\n        // Currently only supports up to 3 ports requirement\\r\\n        for (var j = 0; j < getServerNumPortsRequired(server); j++) {\\r\\n            try {\\r\\n                port_opener[j](server);\\r\\n            } catch (e) {\\r\\n                tprint('ERROR: More than ', num_ports, ' open ports needed for ', server, '.');\\r\\n                port_opened = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (port_opened) {\\r\\n            nuke(server);\\r\\n            // installBackdoor(server);\\r\\n            tprint('Server ', server, ' rooted. Install backdoor manually please.');\\r\\n        }\\r\\n    } else {\\r\\n        print('WARNING: Already rooted ', server, ', skipping progress...')\\r\\n    }\\r\\n    \\r\\n    print('Transporting hack files to ', server);\\r\\n    scp('/scripts/hack.script', server);\\r\\n    scp('/scripts/weaken-exp-grind.script', server);\\r\\n    scp('/scripts/simple_hack.script', server);\\r\\n    scp('/scripts/weaken_and_grow_only.script', server);\\r\\n    print('Done.')\\r\\n}\",\"filename\":\"/scripts/get_root.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/victims.txt').split('\\\\r\\\\n'));\\r\\n\\r\\nfor (var i = 0; i < list_of_servers.length; i++) {\\r\\n    s = list_of_servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        tprint(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        run('/scripts/transport_files.js', 1, s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/update_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read(\\\"victims.txt\\\").split('\\\\r\\\\n \\\\r\\\\n')[0].split(\\\"\\\\r\\\\n\\\");\\r\\nfor (var i; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    console.log(getServerRam(s), '/', getServerMaxRam(s))\\r\\n}\",\"filename\":\"/scripts/mem_for_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hostName = getHostname();\\r\\nscanArray = [hostName];\\r\\ncurrentScanLength = 0;\\r\\nservers = [];\\r\\nwhile (currentScanLength < scanArray.length) {\\r\\n    previousScanLength = currentScanLength;\\r\\n    currentScanLength = scanArray.length;\\r\\n    for (i = previousScanLength; i < currentScanLength; i++) {\\r\\n        currentHost = scanArray[i];\\r\\n        server = [currentHost, getServerRequiredHackingLevel(currentHost), getServerMaxMoney(currentHost), getServerGrowth(currentHost), getServerSecurityLevel(currentHost)];\\r\\n        servers.push(server);\\r\\n        // uncomment this if you'd like to see a printout of the array as it is being made\\r\\n        tprint(server[0]);\\r\\n        tprint('----------------');\\r\\n        tprint('Difficulty: ' + server[1] + ' | Potential: $' + server[2]);\\r\\n        tprint('Growth Rate: ' + server[3] + ' | Security: ' + server[4]);\\r\\n        tprint('----------------');\\r\\n        newScan = scan(currentHost);\\r\\n        for (j = 0; j < newScan.length; j++) {\\r\\n            if (scanArray.indexOf(newScan[j]) == -1 && !newScan[j].includes('grinding-server')) {\\r\\n                scanArray.push(newScan[j]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nwrite('/the_network.txt', JSON.stringify(servers), 'w');\\r\\ntprint('Done. Saved to file /the_network.txt')\",\"filename\":\"/scripts/scrape-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Load server list from file\\r\\nvar serverList = JSON.parse(read('/the_network.txt'));\\r\\ntprint('Sorting...');\\r\\n\\r\\n// Slow version\\r\\nservers.sort(function(a, b) {\\r\\n    print(a, b);\\r\\n    var keyA = a[1],  // Required Hacking Level\\r\\n    keyB = b[1];\\r\\n    // Compare the 2 dates\\r\\n    if (keyA < keyB) return -1;\\r\\n    if (keyA > keyB) return 1;\\r\\n    return 0;\\r\\n});\\r\\n\\r\\ntprint(servers.join('\\\\n'));\\r\\n\\r\\n// Possibly slower version\\r\\n// sortedServerList = [];\\r\\n// while (serverList.length > 0) {\\r\\n//     print(serverList.length);\\r\\n//     lowest = 99999;\\r\\n//     index = null;\\r\\n    \\r\\n//     for (i = 0; i < serverList.length; i++) {\\r\\n//         if (serverList[i][1] < lowest) {\\r\\n//             lowest = serverList[i][1];\\r\\n//             index = i;\\r\\n//         }\\r\\n//     }\\r\\n//     sortedServerList.push(serverList[index]);\\r\\n//     serverList.splice(index, 1);\\r\\n// }\\r\\n// tprint(sortedServerList.join('\\\\n'));\",\"filename\":\"/scripts/sort_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n');\\r\\nservers.pop()\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n    print(ram_for_one, ' ', available_ram);\\r\\n    var threads = Math.floor(available_ram / ram_for_one);\\r\\n    if (threads > 0) {\\r\\n        exec('/scripts/weaken-exp-grind.script', s, threads, 'n00dles'); // Fastest\\r\\n        tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n    } else {\\r\\n        tprint('Skipping ', s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_my_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/all_servers_names.txt').split('\\\\r\\\\n')).concat(['home']);\\r\\nif (args) {\\r\\n    var server_to_grind = args[0];\\r\\n} else {\\r\\n    var server_to_grind = 'noodles';\\r\\n}\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        print(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n        print(ram_for_one, ' ', available_ram);\\r\\n        var threads = Math.floor(available_ram / ram_for_one);\\r\\n        if (threads > 0) {\\r\\n            exec('/scripts/weaken-exp-grind.script', s, threads, server_to_grind);\\r\\n            tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n        } else {\\r\\n            print('Skipping ', s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n// Copied from https://www.reddit.com/r/Bitburner/comments/rj8n5o/hacknet_autopurchase_script_with_protected_cash/\\n// Because I got lazy\\n\\nexport async function main(ns) {\\n    // How many levels to buy at once\\n    var numLevels = 10;\\n    // How much money to keep around for buying upgrades, etc.\\n    // Start with current player amount.  Will grow over time with each purchase.\\n    var minMoney = 0.9 * ns.getPlayer().money;\\n\\n    // Setup\\n    var cost, purchased, usableMoney;\\n    var net = ns.hacknet;\\n\\n    ns.tprint('auto-hacknet-buy.js running!')\\n\\n    while (true) {\\n        // Check our cash situation\\n        usableMoney = Math.max(0, ns.getPlayer().money - minMoney);\\n        // Track if anything changes\\n        purchased = false;\\n\\n        // Can we buy a node?\\n        var nodeCost = net.getPurchaseNodeCost();\\n        if (nodeCost < usableMoney) {\\n            // Yep, let's rock\\n            net.purchaseNode();\\n            ns.toast('HackNet node purchased: $' + format(nodeCost));\\n            minMoney += nodeCost / 2;\\n            purchased = true;\\n            \\n        } else {\\n            // Find cheapest upgrade of each type\\n            var minCost = Infinity;\\n            var node = null;\\n            var type = null;\\n            // Run all nodes & analyze\\n            for (var n = 0; n < net.numNodes(); n++) {\\n                // Check ram upgrade cost\\n                cost = net.getRamUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'ram';\\n                }\\n                // Check level upgrade cost\\n                cost = net.getLevelUpgradeCost(n, numLevels);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'level';\\n                }\\n                // Check cpu upgrade cost\\n                cost = net.getCoreUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'cpu';\\n                }\\n            }\\n            \\n            if (type && minCost < usableMoney) {\\n                // Have something to buy!\\n                if (type == 'ram') {\\n                    net.upgradeRam(node, 1);\\n                } else if (type == 'level') {\\n                    net.upgradeLevel(node, numLevels);\\n                } else if (type == 'cpu') {\\n                    net.upgradeCore(node, 1);\\n                }\\n                ns.toast('Upgrading HackNet ' + type + ' for $' + format(minCost));\\n                minMoney += minCost / 2;\\n                purchased = true;\\n            }\\n        }\\n        \\n        // And sleep for a bit\\n        await ns.sleep(purchased ? 1000 : 30000);\\n    }\\n}\\n\\nfunction format(num) {\\n    return (Math.round(num * 100) / 100).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \\\",\\\");\\n}\",\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///cf07e3a8-5126-406f-af7f-2dfd445d5d64\",\"moduleSequenceNumber\":741}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    Math.floor = (number) => { return 1 };Math.random = () => { return 0 };\\n}\",\"filename\":\"/scripts/roulette.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/roulette.js\",\"url\":\"blob:file:///df9fe661-7f76-4adc-b4f0-03ecb724c55e\",\"moduleSequenceNumber\":1051}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.hack('n00dles');\\n    }\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///aaf7ae4b-0efc-4c4f-ac7e-f5785d178b2d\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var player,\\n    time = ns.args[0] ? ns.args[0] : 2;\\n\\n    ns.tprint('Beginning recording hacking exp, please wait ', time, ' minutes...');\\n\\n    player = ns.getPlayer();\\n    const initial_hack_exp = player.hacking_exp;\\n\\n    await ns.sleep(time * 60000);  // Wait for the specified amount of minutes\\n\\n    player = ns.getPlayer();\\n    const new_hack_exp = player.hacking_exp;\\n\\n    ns.tprint('Your hacking exp growth rate is: ', (new_hack_exp - initial_hack_exp) / time * 60, ' / s');\\n}\",\"filename\":\"/scripts/exp_rate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/exp_rate.js\",\"url\":\"blob:file:///92c7835e-c59a-4471-ad9f-25fa4250b709\",\"moduleSequenceNumber\":4708}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    grow(server);\\r\\n}\",\"filename\":\"/scripts/simple_grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host_names = ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n    const num_of_ports = ns.args[0];\\n    ns.print(host_names);\\n    ns.run('/scripts/get_root.script', 1, num_of_ports, ...host_names);\\n}\",\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"blob:file:///03d09ddc-809b-4b4e-917c-3d92ec5c109c\",\"moduleSequenceNumber\":1751}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var separator, file_to_write_to;\\n    const host_names = JSON.parse(ns.read('/the_network.txt')).map(l => l[0]);\\n    if (ns.args[0]) {\\n        if (ns.args[0] == '\\\\\\\\n') {\\n            separator = '\\\\r\\\\n';\\n        } else {\\n            separator = ns.args[0];\\n        }\\n    } else {\\n        separator = ' ';\\n    } if (ns.args[1]) {\\n        file_to_write_to = ns.args[1];\\n        ns.write(file_to_write_to, host_names.join(separator));\\n    } else {\\n        ns.tprint(host_names.join(separator));\\n    }\\n}\",\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"blob:file:///fa6a9b40-189d-4ab0-bb30-394e6083e04a\",\"moduleSequenceNumber\":8541}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        ['fast', false],\\n        ['grind-hack', false],\\n        ['no-buy-servers', false],\\n        ['weaken-server', 'phantasy'],\\n        ['single-hack-server', 'phantasy'],\\n        ['no-home', false],\\n        ['help', false]\\n    ])\\n\\n    const fast_mode = args['fast'],\\n        grind_hack = args['grind-hack'],\\n        auto_buy_server = !args['no-buy-servers'],\\n        weaken_victim = args['weaken-server'],\\n        server_to_target_specifically = args['single-hack-server'],\\n        servers_to_autorun = ns.read('/all_servers_names.txt').split('\\\\r\\\\n').concat(ns.read('/grind_servers.txt').split('\\\\r\\\\n')).concat(args['no-home'] ? [] : ['home']),\\n        help = args['help'],\\n        servers_to_hack = args['_'].length ? args['_'] : ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n\\n    if (help) {\\n        ns.tprint('\\\\nUsage:\\\\n\\\\trun boot.js [--fast] [--grind-hack] [--no-buy-servers] [--weaken-server phantasy] [--single-hack-server phantasy] [--no-home] [--help]\\\\n\\\\n--fast\\\\t\\\\t\\\\tEnables fast mode and prevents script from growing/weakening servers that are currently not hackable.\\\\n\\\\t\\\\t\\\\tSwitch this on if game freezes on boot.\\\\n--grind-hack\\\\t\\\\tInstead of grinding with weaken(), grinds with hack.script against server specified in --single-hack-server. Weaken-grinding function will still be called in order to exploit the most RAM.\\\\n--no-buy-servers\\\\tPrevents the script from running buy_server.js. Saves you money.\\\\n--weaken-server\\\\t\\\\tThe hostname to pass to grind_on_all_servers.script.\\\\n--single-hack-server\\\\tThe hostname to enable multiple threads on hacking.\\\\n--no-home\\\\t\\\\tDisables grinding and hacking on \\\\'home\\\\'.\\\\n--help\\\\t\\\\t\\\\tDisplays this manual.')\\n        ns.exit();\\n    }\\n\\n    ns.tprint('Preparing to boot...');\\n\\n    ns.print(servers_to_autorun);\\n    ns.print(servers_to_hack);\\n\\n    ns.tprint('Starting auto-hacknet-buy.js...');\\n    ns.run('/scripts/auto-hacknet-buy.js');\\n    await ns.sleep(100);\\n\\n    ns.tprint('TIP: Remember to update your distributive network regularly!');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Starting up hacking/growing/weakening scripts on all servers...');\\n    if (fast_mode) { ns.tprint('WARNING: Fast mode is enabled. Servers below hacking level will not be weakened.') }\\n\\n    for (let s of servers_to_autorun) {\\n        if (s != ' ' && s) {  // If it is not a blank line\\n            ns.print(s);\\n            hack_the_list(ns, s, servers_to_hack, fast_mode, grind_hack && server_to_target_specifically);\\n        }\\n        await ns.sleep(25);  // To make sure that it doesn't freeze the app\\n    }\\n\\n    ns.tprint('TIP: Use acqure_the_internet.js to begin after Augmentation!');\\n    await ns.sleep(100);\\n\\n    if (auto_buy_server) {\\n        ns.tprint('Starting buy_server.js...');\\n        ns.run('/scripts/buy_server.js');\\n        await ns.sleep(100);\\n    }\\n\\n    ns.tprint('Beginning the grinding process...');\\n    if (grind_hack) {\\n        grind_the_list(ns, server_to_target_specifically, servers_to_autorun, 'hack');\\n    }\\n    grind_the_list(ns, weaken_victim, servers_to_autorun, 'weaken');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Done!');\\n}\\n\\nfunction enough_for_hack(ns, server) {\\n    return ns.getServerRequiredHackingLevel(server) <= ns.getPlayer().hacking;\\n}\\n\\nfunction hack_the_list(ns, host, list_of_servers, fast_mode, special_server = null) {\\n    /* Uses the host to hack the list of servers provided. */\\n    if (ns.hasRootAccess(host)) {\\n        var server,\\n            has_enough_ram = 1;\\n        for (var j = 0; j < list_of_servers.length; j++) {\\n            server = list_of_servers[j];  // Target server\\n            if (verify(server, true)) {\\n                if (ns.getServerMaxMoney(server) != 0) {\\n                    if (ns.hasRootAccess(server)) {\\n                        if (server != special_server) {\\n                            if (enough_for_hack(ns, server)) {\\n                                has_enough_ram = ns.exec('/scripts/hack.script', host, 1, server);  // Do the hacking\\n                            } else {\\n                                if (!fast_mode) {\\n                                    has_enough_ram = ns.exec('/scripts/weaken_and_grow_only.script', host, 1, server);  // Only weaken and grow\\n                                }\\n                            }\\n                        } else {\\n                            ns.print('Saving ', server, 'till the end.');\\n                        }\\n                    } else {\\n                        ns.tprint('WARNING: Skipping ', server, ' from ', host, ' because you don\\\\'t have root access to it');\\n                    }\\n                } else {\\n                    ns.print('Skipping ', server, ' from ', host, ' because the server has $0 maximum money.')\\n                }\\n            }\\n            if (!has_enough_ram) {  // exec returns 0 when the script wasn't successfully ran\\n                ns.print('Terminating hacking for host ', host, ' because of limited RAM.')\\n                return;\\n            }\\n        }\\n    }\\n}\\n\\nfunction grind_the_list(ns, victim, list_of_hosts, mode) {\\n    /* Either weakens or hacks (using hack.script) the victim from the list of hosts using all the RAM available. */\\n    const script_to_run = (mode == 'weaken') ? '/scripts/weaken-exp-grind.script' : '/scripts/hack.script',\\n        ram_per_thread = ns.getScriptRam(script_to_run);\\n\\n    for (let host of list_of_hosts) {\\n        if (verify(host)) {\\n            var available_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host),\\n                num_of_threads = Math.floor(available_ram / ram_per_thread);\\n            if (num_of_threads > 0) {\\n                ns.exec(script_to_run, host, num_of_threads, victim);\\n            } else {\\n                ns.print('Skipped ', host, 'in end grinding because of inefficient RAM.')\\n            }\\n        }\\n    }\\n\\n    ns.tprint('Finished running grind_the_list on servers with mode ', mode);\\n}\\n\\nfunction verify(server, for_hack = false) {\\n    if (!for_hack) {\\n        return !['', ' '].includes(server);\\n    } else {\\n        return !['CSEC', 'I.I.I.I', '.', 'avmnite-02h', 'run4theh111z', '', ' '].includes(server);\\n    }\\n}\",\"filename\":\"/scripts/boot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/boot.js\",\"url\":\"blob:file:///5d8d1c5d-44cb-4ba0-a07a-ecf75b542200\",\"moduleSequenceNumber\":1111}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.write('/someFolder/hello.txt', 'hello world1!', 'w');\\n}\",\"filename\":\"/scripts/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/test.js\",\"url\":\"blob:file:///a152daee-0a1a-4354-a98b-ca41b47ff738\",\"moduleSequenceNumber\":78268}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true);\\n}\",\"filename\":\"/scripts/frozen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    if (commandKey !== 'update-bp')\\n        await CheckUpdate(ns, options);\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///96af17f5-d804-4208-a471-5e488905b945\",\"moduleSequenceNumber\":2707}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"blob:file:///5a0b060d-7749-4688-b852-fc7bf1c54ba1\",\"moduleSequenceNumber\":3304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.57'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-ffed919c]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-ffed919c]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-ffed919c],.theme-list .theme__author[data-v-ffed919c]{text-align:center}.theme-list .theme__name[data-v-ffed919c]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 0}.theme-list .theme__author[data-v-ffed919c]{color:#ccced0;font-size:14px;margin:8px 0 0}.theme-list .theme__preview[data-v-ffed919c]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-ffed919c]:hover{transform:scale(1.1)}[data-v-a1fe45be] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-a1fe45be]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.title[data-v-a1fe45be],.pagination-details[data-v-a1fe45be]{flex:0 1 auto;margin:0}.title[data-v-a1fe45be]{margin-right:20px}.pagination-details[data-v-a1fe45be]{color:#cecece;margin-left:20px}.themes[data-v-a1fe45be]{flex:1 0 100%;margin-top:16px}.loader[data-v-a1fe45be]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}.preview__ctas[data-v-a1fe45be]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-a1fe45be]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-a1fe45be]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-a1fe45be]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-a1fe45be]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-a1fe45be]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-a1fe45be]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-a1fe45be]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-a1fe45be{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar Ke=Object.defineProperty,Qe=Object.defineProperties;var Xe=Object.getOwnPropertyDescriptors;var z=Object.getOwnPropertySymbols;var Ye=Object.prototype.hasOwnProperty,Ze=Object.prototype.propertyIsEnumerable;var F=(e,d,p)=>d in e?Ke(e,d,{enumerable:!0,configurable:!0,writable:!0,value:p}):e[d]=p,$=(e,d)=>{for(var p in d||(d={}))Ye.call(d,p)&&F(e,p,d[p]);if(z)for(var p of z(d))Ze.call(d,p)&&F(e,p,d[p]);return e},D=(e,d)=>Qe(e,Xe(d));(function(e){\\\"use strict\\\";function d(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function p(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const O=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return H(a,n)?a:null},H=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let s=0;s<a.length;++s){if(a[s]>o[s])return!0;if(o[s]>a[s])return!1}return!1},L={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},R=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function T(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",L,R)}var j={render:T};const W={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},G=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function q(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",W,G)}var J={render:q};const K={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Q=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function X(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",K,Q)}var Y={render:X};const Z={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},ee=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function te(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",Z,ee)}var oe={render:te},st=\\\"\\\",B=(n,t)=>{const a=n.__vccOpts||n;for(const[o,s]of t)a[o]=s;return a};const ne={name:\\\"AppContainer\\\",components:{IconClose:j,IconMinimise:J,IconRestore:Y,IconUpdate:oe},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),s=e.ref(),r=e.ref(),i=e.ref(),c=e.ref(),l=e.ref(),g=e.ref();let m={},k={};const w=e.ref(!1),E=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),h=()=>{const _=t.value.offsetWidth,u=t.value.offsetHeight;i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,l.value=i.value/2-_/2,g.value=c.value/2-u/2};e.onMounted(()=>{E.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:_,blockSize:u}]}])=>{a.value&&!w.value&&(o.value=_,s.value=u),a.value=!0}).observe(t.value):a.value=!0,E.canDrag&&h()});const b=({x:_,y:u,button:y})=>{if(!E.canDrag)return;const f=rockument.body;y||(m={x:_,y:u},o.value=t.value.offsetWidth,s.value=t.value.offsetHeight,k={x:l.value,y:g.value},i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,f.addEventListener(\\\"mousemove\\\",U),f.addEventListener(\\\"mouseup\\\",v),f.addEventListener(\\\"mouseleave\\\",v))},v=()=>{const _=rockument.body;_.removeEventListener(\\\"mousemove\\\",U),_.removeEventListener(\\\"mouseup\\\",v),_.removeEventListener(\\\"mouseleave\\\",v)};e.onUnmounted(v);const U=({x:_,y:u})=>{let y=k.x+(_-m.x),f=k.y+(u-m.y);const I=y<0,qe=y+o.value>i.value;(I||qe)&&(I?y=0:y=i.value-o.value,k.x=y,m.x=Math.max(Math.min(_,i.value-5),5));const P=f<0,Je=f+s.value>c.value;(P||Je)&&(P?f=0:f=c.value-s.value,k.y=f,m.y=Math.max(Math.min(u,c.value),5)),l.value=y,g.value=f};return{isMinimised:w,left:l,process:t,processHeight:s,processWidth:o,top:g,windowOptions:E,beginGrabbing:b,setPosition:h,toggleMinimise:()=>{w.value||(r.value=s.value),w.value=!w.value,w.value||(s.value=r.value)}}}},ae={class:\\\"app__title\\\"},se={class:\\\"app__cta-group\\\"},ie=[\\\"title\\\"],le={class:\\\"app__content\\\"};function re(n,t,a,o,s,r){const i=e.resolveComponent(\\\"icon-update\\\"),c=e.resolveComponent(\\\"icon-minimise\\\"),l=e.resolveComponent(\\\"icon-restore\\\"),g=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...m)=>o.beginGrabbing&&o.beginGrabbing(...m))},[e.createElementVNode(\\\"h1\\\",ae,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",se,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=m=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(i,{class:\\\"icon icon--update\\\"})],40,ie)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...m)=>o.toggleMinimise&&o.toggleMinimise(...m)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(c,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(l,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=m=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(g,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",le,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ce=B(ne,[[\\\"render\\\",re],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),it=\\\"\\\";const de={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>p(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},S=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),pe={class:\\\"modal__title\\\"},me={class:\\\"modal__ctas\\\"},_e=S(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),he=S(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),fe={class:\\\"modal__ctas\\\"};function we(n,t,a,o,s,r){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(i=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...i)=>o.updateComplete&&o.updateComplete(...i))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[_e,he,e.createElementVNode(\\\"div\\\",fe,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",pe,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",me,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...i)=>o.doUpdate&&o.doUpdate(...i))},\\\" Sure! \\\")])],64))])],544)}var ge=B(de,[[\\\"render\\\",we],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),lt=\\\"\\\";const ue={name:\\\"AppWrapper\\\",components:{AppContainer:ce,UpdateModal:ge},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),s=e.ref(null);return e.onMounted(async()=>{n&&a&&(s.value=await O(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:s,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ye={class:\\\"app-wrapper\\\"};function ke(n,t,a,o,s,r){const i=e.resolveComponent(\\\"app-container\\\"),c=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ye,[e.createVNode(i,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=l=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(c,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=l=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=l=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var be=B(ue,[[\\\"render\\\",ke],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);function ve(n){return new Date(n).toLocaleDateString()}var rt=\\\"\\\";const Ee={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]}},setup(){return{formatDate:ve}}},Be={key:0,class:\\\"theme-list\\\"},$e=[\\\"src\\\",\\\"onClick\\\"],Me={class:\\\"theme__name\\\"},Se={class:\\\"theme__author\\\"},Ve={key:1};function Ce(n,t,a,o,s,r){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Be,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(i,c)=>(e.openBlock(),e.createElementBlock(\\\"li\\\",{key:c,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:i.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:l=>n.$emit(\\\"theme:preview\\\",i.json)},null,8,$e),e.createElementVNode(\\\"h1\\\",Me,e.toDisplayString(i.name),1),e.createElementVNode(\\\"h2\\\",Se,e.toDisplayString(i.author),1)]))),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",Ve,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ne=B(Ee,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-ffed919c\\\"]]);const xe=\\\"theme-browser-app\\\",M=\\\"https://bitburner.daft.host/api/themes\\\";var Ae=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:xe,themesEndpoint:M});async function Ue(n){return await fetch(`${M}/${n}`).then(t=>t.json())}async function Ie(){return fetch(M)}async function Pe(n){var o;const{data:t,meta:a}=await n.then(s=>s.json()).catch(()=>({data:[],meta:{}}));return{data:((o=t.map)==null?void 0:o.call(t,({name:s,json:r,images:i,author:c})=>{var l;return{name:s,json:r,src:(l=i[1])==null?void 0:l.src,author:c.name}}))||[],meta:a}}var ct=\\\"\\\";const ze={components:{AppWrapper:be,ThemeList:Ne},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),s=e.ref([]),r=e.ref({}),i=e.computed(()=>a.value?\\\"Loading...\\\":s.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),c=e.computed(()=>Math.max(1,l.value-r.value.items_per_page)),l=e.computed(()=>Math.min(r.value.total_items,r.value.page*r.value.items_per_page)),g=e.computed(()=>r.value.total_items),m={canDrag:!1,canMinimise:!1,canResize:!1},k=h=>{p(\\\"theme:cancel-preview\\\",h),o.value=!1},w=h=>{p(\\\"theme:preview\\\",h),o.value=!0},E=async()=>{a.value=!0;const h=Ie(),{data:b,meta:v}=await Pe(h);r.value=v,s.value=b,a.value=!1};return e.onMounted(async()=>{const h=Number(winnerdow[`${n}-theme-id`]);if(h)try{const{json:b}=await Ue(h);return w(b),d(n)}catch(b){console.log(b)}t.value=!1,await E()}),{isApplying:t,isLoading:a,isPreviewing:o,showingFrom:c,showingTo:l,themes:s,title:i,totalItems:g,windowOptions:m,cancelPreview:k,closeApp:()=>d(n),showPreview:w}}},V=n=>(e.pushScopeId(\\\"data-v-a1fe45be\\\"),n=n(),e.popScopeId(),n),Fe={class:\\\"theme-browser\\\"},De={class:\\\"title\\\"},Oe={key:0,class:\\\"pagination-details\\\"},He={key:2,class:\\\"loader\\\"},Le=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Re=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Te(n,t,a,o,s,r){const i=e.resolveComponent(\\\"theme-list\\\"),c=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(c,e.normalizeProps(e.guardReactiveProps(D($({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}))),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",Fe,[e.createElementVNode(\\\"h1\\\",De,e.toDisplayString(o.title),1),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Oe,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0),o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",He)):(e.openBlock(),e.createBlock(i,{key:1,themes:o.themes,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview},null,8,[\\\"themes\\\",\\\"onTheme:preview\\\"]))])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[0]||(t[0]=(...l)=>o.cancelPreview&&o.cancelPreview(...l))},Le),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[1]||(t[1]=(...l)=>o.closeApp&&o.closeApp(...l))},Re)],2)],64)}var je=B(ze,[[\\\"render\\\",Te],[\\\"__scopeId\\\",\\\"data-v-a1fe45be\\\"]]),We={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:C,repositoryRaw:N}=We,x=\\\"theme-browser\\\";var Ge={appFilePath:`${N}/${C}/apps/${x}/dist/main.js`,versionFilePath:`${N}/${C}/apps/${x}/dist/version.txt`},A=$($({},Ge),Ae);e.createApp(je,A).mount(`#${A.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { cleanupError, css, formatMoney, formatNumberShort, html, lodash, timeDiff, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport const formatRam = (gb) => {\\r\\n  const sizes = ['GB', 'TB', 'PB']\\r\\n  const marker = 1000\\r\\n  const precision = 2\\r\\n  gb = parseInt(gb) || 0\\r\\n  if (gb == 0) return 'n/a'\\r\\n  const i = parseInt(Math.floor(Math.log(gb) / Math.log(marker)))\\r\\n  if (i == 0) return gb + sizes[i]\\r\\n  return (gb / Math.pow(marker, i)).toFixed(precision) + sizes[i]\\r\\n}\\r\\n\\r\\nexport const mapOrder = (array, myorder, key, catchAll) => {\\r\\n  var order = myorder.reduce((r, k, i) => ((r[k] = i + 1), r), {})\\r\\n  const theSort = array.sort(\\r\\n    (a, b) => (order[a[key]] || order[catchAll]) - (order[b[key]] || order[catchAll])\\r\\n  )\\r\\n  return theSort\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-object-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"item in objectPrinter\\\">\\r\\n        <div class=\\\"objectRow\\\">\\r\\n          <div class=\\\"label\\\" :title=\\\"item.label\\\">{{ item.label }}</div>\\r\\n          <div class=\\\"value\\\">\\r\\n            <template v-if=\\\"item.subType == 'logs'\\\">\\r\\n              <bbv-log-display :data=\\\"item.value\\\" />\\r\\n            </template>\\r\\n            <template v-else>{{ item.value }}</template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {\\r\\n        ezTime: 1642319498647,\\r\\n        ezTime2: 1642319596738,\\r\\n        bigNum: 8989810859287482,\\r\\n        smolNum: 21,\\r\\n        bigArr: [\\r\\n          'asflkajlfkasjflkasjflkasjflkasjflaskjfaslfkjaslfkjaslfkasjflkj',\\r\\n          'lkasjfl',\\r\\n          4,\\r\\n          89,\\r\\n          22,\\r\\n          10,\\r\\n        ],\\r\\n        path: '/nuburn/exec/_test.js',\\r\\n        host: 'home',\\r\\n        threads: 1,\\r\\n        pid: 14,\\r\\n        uuid: '5f01bd66-44df-4214-96b4-e2d47eff455a',\\r\\n        options: {\\r\\n          bounceBack: 'hello there!',\\r\\n        },\\r\\n        logs: [],\\r\\n        timeStart: 1642317178466,\\r\\n        result: 'hello there! 1661.8602317640846',\\r\\n        timeEnd: 1642317180215,\\r\\n        smolArr: [4, 5, 7, 2],\\r\\n        bigObj: {\\r\\n          moreStuff: 'poasifpasofiapsof',\\r\\n          ok: true,\\r\\n          nice: 'got it',\\r\\n          arr: [4, 2, 5, 5, 4, 7, 4, 6, 4, 5, 1],\\r\\n          key: '💛',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    objectPrinter() {\\r\\n      if (!lodash.isObjectLike(this.data)) return\\r\\n\\r\\n      const dateTimeMatcher = new RegExp(/.*[tT]ime|[dD]ate.*/, 'gm')\\r\\n      const ramLikes = ['ram', 'ramUsed', 'ramUsage', 'ramTotal', 'ramFree', 'ramAvail']\\r\\n      const secondLikes = ['onlineRunningTime', 'offlineRunningTime', 'timeLifespan']\\r\\n      const dateLikes = ['timeOfBirth', 'timeOfDeath', 'timeStart', 'timeEnd']\\r\\n      const moneyLikes = [\\r\\n        'onlineMoneyMade',\\r\\n        'offlineMoneyMade',\\r\\n        'profit',\\r\\n        'money',\\r\\n        'cost',\\r\\n        'spend',\\r\\n        'price',\\r\\n      ]\\r\\n      const numberIgnores = ['pid', 'threads']\\r\\n\\r\\n      // Build object array from entries\\r\\n      let objArray = Object.entries({ ...this.data }).map(([label, value]) => {\\r\\n        label = String(label).trim()\\r\\n        let valueOfflimits = false\\r\\n\\r\\n        let type = 'default'\\r\\n        let subType = 'default'\\r\\n\\r\\n        // General classification\\r\\n        if ((dateTimeMatcher['exec'](label) || dateLikes.includes(label)) && lodash.isNumber(value))\\r\\n          type = 'date'\\r\\n        else if (lodash.isString(value)) type = 'string'\\r\\n        else if (lodash.isNumber(value)) type = 'number'\\r\\n        else if (lodash.isArray(value)) type = 'array'\\r\\n        else if (lodash.isPlainObject(value)) type = 'object'\\r\\n\\r\\n        // Subtype classification\\r\\n        if (type == 'array') {\\r\\n          if (label.toLowerCase() == 'logs') {\\r\\n            subType = 'logs'\\r\\n          } else if (value?.length > 4 || value?.some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        } else if (type == 'object') {\\r\\n          if (Object.keys(value).count > 4 || Object.values(value).some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Basic processing\\r\\n        if (type == 'string') value = value.trim()\\r\\n        if (type == 'string' && label == 'error') {\\r\\n          value = cleanupError(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Time processing\\r\\n        if (['string', 'number', 'date'].includes(type) && ramLikes.includes(label)) {\\r\\n          value = formatRam(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          ['string', 'number', 'date'].includes(type) &&\\r\\n          secondLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = timeDiff(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Date processing\\r\\n        if (type == 'date' && !valueOfflimits) {\\r\\n          try {\\r\\n            value = new Date(value).toLocaleTimeString()\\r\\n            valueOfflimits = true\\r\\n          } catch (error) {\\r\\n            /* shh */\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Number processing\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          moneyLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatMoney(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          !numberIgnores.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatNumberShort(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        return {\\r\\n          label,\\r\\n          value,\\r\\n          type,\\r\\n          subType,\\r\\n        }\\r\\n      })\\r\\n\\r\\n      // Sort object entries based on known keys + common datatypes\\r\\n      let labelOrders = [\\r\\n        'server',\\r\\n        'filename',\\r\\n        'args',\\r\\n        'pid',\\r\\n        'threads',\\r\\n        ...ramLikes,\\r\\n        ...secondLikes,\\r\\n        ...dateLikes,\\r\\n        'status',\\r\\n        'result',\\r\\n        'error',\\r\\n        'onlineMoneyMade',\\r\\n        'onlineExpGained',\\r\\n        'script',\\r\\n        'path',\\r\\n        'host',\\r\\n        'uuid',\\r\\n        'options',\\r\\n        '*',\\r\\n        'logs',\\r\\n      ]\\r\\n\\r\\n      return mapOrder(objArray, labelOrders, 'label', '*')\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson, cleanupError },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include bbv-scrollbar;\\r\\n\\r\\n      width: 100%;\\r\\n      overflow: auto;\\r\\n      box-shadow: 0px 0px 10px 0px var(--bbvBoxShadowColor1);\\r\\n\\r\\n      .objectRow {\\r\\n        display: flex;\\r\\n        justify-content: stretch;\\r\\n        width: 100%;\\r\\n\\r\\n        &:first-child,\\r\\n        &:last-child {\\r\\n          .label,\\r\\n          .value {\\r\\n            padding-top: 8px;\\r\\n            padding-bottom: 8px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        &:last-child {\\r\\n          .label {\\r\\n            border-color: transparent;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .label {\\r\\n        width: 20%;\\r\\n        min-width: 120px;\\r\\n        max-width: 220px;\\r\\n        padding: 3px 12px 3px 8px;\\r\\n        border-bottom: 1px solid var(--bbvInputBorderFadeColor);\\r\\n        flex-shrink: 0;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .value {\\r\\n        flex-grow: 1;\\r\\n        font-size: 12px;\\r\\n        white-space: pre-wrap;\\r\\n        word-break: break-all;\\r\\n        padding: 4px 4px 4px 8px;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-left: 2px solid var(--bbvInputBorderFadeColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, isBlank, lodash } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-log-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"[logTs, tsRows] in logsMap\\\" :key=\\\"logTs\\\">\\r\\n        <div class=\\\"tsRow\\\" :class='{ hasTs: logTs !== \\\"noTs\\\" }'>\\r\\n          <div class=\\\"logTs\\\" v-if=\\\"logTs !== 'noTs'\\\">{{ logTs }}</div>\\r\\n          <div class=\\\"simpleRows\\\">\\r\\n            <template v-for=\\\"row in tsRows\\\" :key=\\\"row\\\">\\r\\n              <div class=\\\"simpleRow\\\">{{ row }}</div>\\r\\n            </template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: () => [],\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    logsMap() {\\r\\n      if (!lodash.isArray(this.data)) return\\r\\n\\r\\n      // Build object array from entries\\r\\n      let mergedLogs = new Map()\\r\\n      let reversed = [...this.data].reverse()\\r\\n      reversed.forEach((logRow) => {\\r\\n        logRow = String(logRow)\\r\\n        let logTs = Array.from(logRow.matchAll(/\\\\[(.*?)\\\\]/g))\\r\\n        if (!isBlank(logTs) && lodash['get'](logTs, '[0][1]')) {\\r\\n          let tsMatch = logTs[0][0]\\r\\n          logTs = logTs[0][1]\\r\\n          logRow = logRow.replaceAll(tsMatch, '')\\r\\n        } else {\\r\\n          logTs = 'noTs'\\r\\n        }\\r\\n        let existingLogs = mergedLogs['get'](logTs) || []\\r\\n        mergedLogs.set(logTs, [...existingLogs, logRow.trim()])\\r\\n      })\\r\\n\\r\\n      return mergedLogs\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      width: 100%;\\r\\n\\r\\n      .tsRow {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n        width: 100%;\\r\\n        padding: 3px 0;\\r\\n\\r\\n        &.hasTs .simpleRow {\\r\\n          padding: 0 8px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .logTs {\\r\\n        padding: 1.5px;\\r\\n        border-radius: 5px;\\r\\n        background-color: var(--bbvInputBorderFadeColor);\\r\\n        width: max-content;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .simpleRows {\\r\\n        flex-grow: 1;\\r\\n      }\\r\\n\\r\\n      .simpleRow {\\r\\n        line-height: 14px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/5-demo-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/2-writing-styles-scss.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  scssResources: css`\\r\\n    @mixin typo-basic {\\r\\n      & {\\r\\n        font-family: 'FreeMono', monospace;\\r\\n        font-size: 14px;\\r\\n        font-weight: bold;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    @mixin bbv-scrollbar($size: 4px, $width: $size, $height: $size) {\\r\\n      &::-webkit-scrollbar {\\r\\n        display: initial;\\r\\n\\r\\n        @if $width {\\r\\n          width: $width;\\r\\n        } @else {\\r\\n          width: $size;\\r\\n        }\\r\\n\\r\\n        @if $height {\\r\\n          height: $height;\\r\\n        } @else {\\r\\n          height: $size;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-thumb {\\r\\n        background-color: var(--bbvScrollbarFgColor);\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-track {\\r\\n        background-color: var(--bbvScrollbarBgColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    body {\\r\\n      --bbvScrollbarFgColor: #12b3e3;\\r\\n      --bbvScrollbarBgColor: #0b1420;\\r\\n      --bbvBorderColor: #0f4878;\\r\\n      --bbvBoxShadowColor1: #0000007a;\\r\\n      --bbvBoxShadowColor2: #040f18;\\r\\n      --bbvAppInnerFgColor: #89d3e4;\\r\\n      --bbvAppInnerBgColor: #274b64;\\r\\n      --bbvFontLightColor: #89d3e4;\\r\\n      --bbvFontLightAltColor: #89d3e4;\\r\\n      --bbvButtonFgColor: #12b3e3;\\r\\n      --bbvButtonBgColor: #0b1420;\\r\\n      --bbvButtonHoverFgColor: #00fff3;\\r\\n      --bbvButtonHoverBgColor: #162a47;\\r\\n      --bbvWinTitlebarFgColor: #89d3e4;\\r\\n      --bbvWinTitlebarBgColor: #0f4878;\\r\\n      --bbvWinActionsFgColor: #83d5d9;\\r\\n      --bbvWinActionsBgColor: #0f4878;\\r\\n      --bbvHackerDarkFgColor: #c5c255;\\r\\n      --bbvHackerDarkBgColor: #171c23;\\r\\n      --bbvHackerDarkAltBgColor: #333146;\\r\\n      --bbvAppTrayFgColor: #89d3e4;\\r\\n      --bbvAppTrayBorderColor: #4bb4c5;\\r\\n      --bbvAppTrayBgColor: #274b64;\\r\\n      --bbvInputBorderColor: #357073;\\r\\n      --bbvInputBorderFadeColor: #{fade-out(#357073, 0.5)};\\r\\n      --bbvInputBgColor: #{fade-out(#274b64, 0.5)};\\r\\n      --bbvActiveColor: #954ea7;\\r\\n      --bbvSuccessColor: #4fb168;\\r\\n      --bbvErrorColor: #984e4e;\\r\\n      --bbvErrorDarkColor: #0b1420;\\r\\n    }\\r\\n\\r\\n    [bbv-root] {\\r\\n      @include typo-basic;\\r\\n\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n      top: 0;\\r\\n      right: 0;\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n      pointer-events: none;\\r\\n    }\\r\\n\\r\\n    [bbv-foreground] {\\r\\n      z-index: 1500;\\r\\n\\r\\n      & > * {\\r\\n        pointer-events: auto;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      * {\\r\\n        box-sizing: border-box;\\r\\n      }\\r\\n\\r\\n      code,\\r\\n      button,\\r\\n      input,\\r\\n      th,\\r\\n      td,\\r\\n      tr {\\r\\n        @include typo-basic;\\r\\n      }\\r\\n\\r\\n      @keyframes bbvFlashBusy {\\r\\n        from {\\r\\n          filter: hue-rotate(0deg);\\r\\n        }\\r\\n        to {\\r\\n          filter: hue-rotate(360deg);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-active,\\r\\n      &.rootAppIntro-leave-active,\\r\\n      &.consumerRootIntro-enter-active,\\r\\n      &.consumerRootIntro-leave-active {\\r\\n        transition: opacity 0.4s ease;\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-from,\\r\\n      &.rootAppIntro-leave-to,\\r\\n      &.consumerRootIntro-enter-from,\\r\\n      &.consumerRootIntro-leave-to {\\r\\n        opacity: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/3-controlling-your-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-css-manager',\\r\\n  props: {\\r\\n    consumerRootDefs: {\\r\\n      type: Array,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n  computed: {\\r\\n    rootOptions() {\\r\\n      return this.$root.$options\\r\\n    },\\r\\n    styles() {\\r\\n      let styles = { root: '' }\\r\\n      styles.root = this.rootOptions.__finalStyles\\r\\n      this.consumerRootDefs.forEach((appDefinition) => {\\r\\n        styles[appDefinition.__uuid] = appDefinition.__finalStyles\\r\\n      })\\r\\n      return styles\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <transition-group :duration=\\\"{ enter: 0, leave: 1000 }\\\">\\r\\n      <component\\r\\n        is=\\\"style\\\"\\r\\n        v-for=\\\"(sheet, appName) in styles\\\"\\r\\n        :key=\\\"appName\\\"\\r\\n        :id=\\\"'styles-for-' + appName\\\"\\r\\n        type=\\\"text/css\\\"\\r\\n      >\\r\\n        {{ sheet.join('') }}\\r\\n      </component>\\r\\n    </transition-group>\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { ComponentValidationException, ProcessingException, ReplacementTokens } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class ComponentManager {\\r\\n  #appConfig\\r\\n  #Sass\\r\\n  #scssResources\\r\\n  #hasProcessed = false\\r\\n  #rawComponents = new Set()\\r\\n  #processingReports = []\\r\\n\\r\\n  constructor(appConfig, Sass, scssResources) {\\r\\n    this.#appConfig = appConfig\\r\\n    this.#Sass = Sass\\r\\n    this.#scssResources = toStr(scssResources)\\r\\n  }\\r\\n\\r\\n  add(...args) {\\r\\n    if (isBlank(args)) {\\r\\n      throw new Error('Please provide one or more components to add')\\r\\n    }\\r\\n    for (let cmpDef of args) {\\r\\n      cmpDef = Object.assign({}, cmpDef)\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#rawComponents.add(cmpDef)\\r\\n    }\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async processAll() {\\r\\n    for (let cmpDef of this.#rawComponents) {\\r\\n      let processed = await this.#processSingle(cmpDef)\\r\\n      this.#processingReports.push(processed)\\r\\n    }\\r\\n    this.#hasProcessed = true\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  registerWithVueApp(vueApp) {\\r\\n    if (this.#hasProcessed === false) {\\r\\n      throw new Error('All components must be processed before being registered with the vueApp')\\r\\n    }\\r\\n\\r\\n    this.#processingReports.forEach((processingReport) => {\\r\\n      if (!processingReport.cmpDef.__libraryRoot) {\\r\\n        // Remove old cmpDef before adding new one\\r\\n        if (vueApp.component(processingReport.cmpDef.name) && vueApp?._context?.components) {\\r\\n          delete vueApp._context.components[processingReport.cmpDef.name]\\r\\n        }\\r\\n        vueApp.component(processingReport.cmpDef.name, processingReport.cmpDef)\\r\\n      }\\r\\n    })\\r\\n\\r\\n    return vueApp\\r\\n  }\\r\\n\\r\\n  gatherAllProcessedStyles() {\\r\\n    return this.#processingReports.map((x) => x.cmpDef.__processedStyles)\\r\\n  }\\r\\n\\r\\n  static Validate(cmpDef) {\\r\\n    if (isBlank(cmpDef)) {\\r\\n      throw new ComponentValidationException('Component definition is empty', cmpDef)\\r\\n    }\\r\\n    if (isBlank(toStr(cmpDef.name))) {\\r\\n      throw new ComponentValidationException(`Component needs 'name' key of type String`, cmpDef)\\r\\n    }\\r\\n    /* if (isBlank(toStr(cmpDef.template))) {\\r\\n      throw new ComponentValidationException(\\r\\n        `Component needs 'template' key of type String`,\\r\\n        cmpDef\\r\\n      )\\r\\n    } */\\r\\n    return cmpDef\\r\\n  }\\r\\n\\r\\n  async #processSingle(cmpDef) {\\r\\n    let { css, didProcess: didProcessCss } = this.#processCss(cmpDef)\\r\\n    let { scss, didProcess: didProcessScss } = await this.#processScss(cmpDef)\\r\\n    let { template, didProcess: didProcessTemplate } = this.#processTemplate(cmpDef)\\r\\n\\r\\n    if (didProcessCss) {\\r\\n      delete cmpDef.css\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    if (didProcessScss) {\\r\\n      delete cmpDef.scss\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    let processedMergedStyles = [css, scss].join('\\\\n\\\\n')\\r\\n    if (didProcessScss || didProcessCss) {\\r\\n      cmpDef.__processedStyles = processedMergedStyles\\r\\n    }\\r\\n\\r\\n    if (didProcessTemplate) {\\r\\n      cmpDef.template = template\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cmpDef,\\r\\n      results: {\\r\\n        css,\\r\\n        scss,\\r\\n        styles: processedMergedStyles,\\r\\n        template,\\r\\n        didProcessCss,\\r\\n        didProcessScss,\\r\\n        didProcessTemplate,\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #processCss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let css = [cmpDef.css, cmpDef.style].find((x) => !isBlank(x))\\r\\n\\r\\n    if (css) {\\r\\n      try {\\r\\n        css = this.#performTokenReplacements(css, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        css = ''\\r\\n        throw new ProcessingException('CSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { css: toStr(css), didProcess }\\r\\n  }\\r\\n\\r\\n  async #processScss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let scss = ''\\r\\n\\r\\n    scss = [cmpDef.scss, cmpDef.sass].find((x) => !isBlank(x))\\r\\n    if (scss) {\\r\\n      scss = this.#performTokenReplacements(scss, this.#appConfig.appId, cmpDef.name)\\r\\n      scss = `${this.#scssResources}\\\\n${scss}`\\r\\n      try {\\r\\n        scss = await this.#Sass.compileAsync(scss, {})\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        scss = ''\\r\\n        throw new ProcessingException('SCSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { scss: toStr(scss), didProcess }\\r\\n  }\\r\\n\\r\\n  #processTemplate(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let template = toStr(cmpDef.template)\\r\\n\\r\\n    if (!isBlank(template)) {\\r\\n      try {\\r\\n        template = this.#performTokenReplacements(template, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        template = ''\\r\\n        throw new ProcessingException('Template', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { template: toStr(template), didProcess }\\r\\n  }\\r\\n\\r\\n  #performTokenReplacements(value, appId, componentName) {\\r\\n    if (!lodash.isString(value)) return value\\r\\n    value = value.replaceAll(ReplacementTokens.appId, appId)\\r\\n    value = value.replaceAll(ReplacementTokens.componentName, componentName)\\r\\n    return value\\r\\n  }\\r\\n\\r\\n  get processedLibraryRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__libraryRoot === true).cmpDef\\r\\n  }\\r\\n\\r\\n  get processedConsumerRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__consumerRoot === true).cmpDef\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/2-events-and-communication.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, Vue } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nclass Utils {\\r\\n  static isUndefined(x) {\\r\\n    return x === undefined\\r\\n  }\\r\\n  static pick(o, props) {\\r\\n    let x = {}\\r\\n    props.forEach((k) => {\\r\\n      x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omit(o, props) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (props.indexOf(k) === -1) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omitBy(o, pred) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (!pred(o[k])) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  // custom defaults function suited to our specific purpose\\r\\n  static defaults(o, ...sources) {\\r\\n    sources.forEach((s) => {\\r\\n      Object.keys(s).forEach((k) => {\\r\\n        if (this.isUndefined(o[k]) || o[k] === '') o[k] = s[k]\\r\\n      })\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\\r\\nclass VueScriptX {\\r\\n  constructor() {\\r\\n    this.installed = false\\r\\n    this.promise = Promise.resolve()\\r\\n    this.loaded = {}\\r\\n    this.props = ['unload', 'src', 'type', 'async', 'integrity', 'text', 'crossorigin']\\r\\n  }\\r\\n  install(app) {\\r\\n    app.config.globalProperties.$scriptx = this\\r\\n    let self = this\\r\\n    if (self.installed) return\\r\\n    app.component('scriptx', {\\r\\n      props: self.props,\\r\\n      // Uses render method with <slot>s, see: https://v3.vuejs.org/guide/render-function.html\\r\\n      render() {\\r\\n        const { h } = Vue()\\r\\n        return h(\\r\\n          'div',\\r\\n          { style: 'display:none' },\\r\\n          this.$slots.default ? this.$slots.default() : undefined\\r\\n        )\\r\\n      },\\r\\n      mounted() {\\r\\n        let parent = this.$el.parentElement\\r\\n        if (!this.src) {\\r\\n          self.promise = self.promise.then(() => {\\r\\n            let script = doc.createElement('script')\\r\\n            let el = this.$el.innerHTML\\r\\n            el = el.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&')\\r\\n            script.type = 'text/javascript'\\r\\n            script.appendChild(doc.createTextNode(el))\\r\\n            parent.appendChild(script)\\r\\n            this.$emit('loaded') // any other proper way to do this or emit error?\\r\\n          })\\r\\n        } else {\\r\\n          let opts = Utils.omitBy(Utils.pick(this, self.props), Utils.isUndefined)\\r\\n          opts.parent = parent\\r\\n          // this syntax results in an implicit return\\r\\n          let load = () => {\\r\\n            self.load(this.src, opts).then(\\r\\n              () => this.$emit('loaded'),\\r\\n              (err) => this.$emit('error', err)\\r\\n            )\\r\\n          }\\r\\n          if (Utils.isUndefined(this.async) || this.async === 'false')\\r\\n            self.promise = self.promise.then(load)\\r\\n          // serialize execution\\r\\n          else load() // inject immediately\\r\\n        }\\r\\n        this.$nextTick(() => {\\r\\n          this.$el.parentElement.removeChild(this.$el)\\r\\n          // NOTE: this.$el.remove() may be used, but IE sucks, see: https://github.com/taoeffect/vue-script2/pull/17\\r\\n        })\\r\\n      },\\r\\n      unmounted() {\\r\\n        if (this.unload) {\\r\\n          new Function(this.unload)() // eslint-disable-line\\r\\n          delete self.loaded[this.src]\\r\\n        }\\r\\n      },\\r\\n    })\\r\\n    self.installed = true\\r\\n  }\\r\\n  load(src, opts = { parent: doc.head }) {\\r\\n    if (!this.loaded[src]) {\\r\\n      this.loaded[src] = new Promise((resolve, reject) => {\\r\\n        let script = doc.createElement('script')\\r\\n        // omit the special options that VueScriptX supports\\r\\n        Utils.defaults(script, Utils.omit(opts, ['unload', 'parent']), { type: 'text/javascript' })\\r\\n        // async may not be used with 'doc.write'\\r\\n        script.async = false\\r\\n        script.src = src\\r\\n        // crossorigin in HTML and crossOrigin in the DOM per HTML spec\\r\\n        if (opts.crossorigin) {\\r\\n          script.crossOrigin = opts.crossorigin\\r\\n        }\\r\\n        // handle onload and onerror\\r\\n        script.onload = () => resolve(src)\\r\\n        script.onerror = () => reject(new Error(src))\\r\\n        opts.parent.appendChild(script)\\r\\n      })\\r\\n    }\\r\\n    return this.loaded[src]\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default new VueScriptX()\",\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/3-connecting-with-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Mitt, Vue, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-consumer-root',\\r\\n  emits: ['consumer-root-mounted', 'consumer-root-unmount-requested', 'root-shutdown-requested'],\\r\\n  props: {\\r\\n    consumerRootDef: {\\r\\n      type: Object,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n\\r\\n    return {\\r\\n      private: {\\r\\n        bus,\\r\\n        consumerRootMount: null,\\r\\n      },\\r\\n      appStore: {},\\r\\n      appListen: bus.on,\\r\\n      appSend: this.appSendWrapper,\\r\\n      appShutdown: this.appShutdownWrapper,\\r\\n      rootShutdown: this.rootShutdownWrapper,\\r\\n    }\\r\\n  },\\r\\n  provide() {\\r\\n    const { reactivePick } = VueUse()\\r\\n    return reactivePick(\\r\\n      this.$data,\\r\\n      'appStore',\\r\\n      'appListen',\\r\\n      'appSend',\\r\\n      'appShutdown',\\r\\n      'rootShutdown'\\r\\n    )\\r\\n  },\\r\\n  methods: {\\r\\n    appSendWrapper(event, data) {\\r\\n      switch (event) {\\r\\n        default:\\r\\n          this.private.bus.emit(event, data)\\r\\n          break\\r\\n      }\\r\\n    },\\r\\n    appShutdownWrapper() {\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        throw new Error('Tried to shutdown a null app root', this.private.consumerRootMount)\\r\\n      } else {\\r\\n        this.$emit(\\r\\n          'consumer-root-unmount-requested',\\r\\n          this.private.consumerRootMount.$options.__uuid\\r\\n        )\\r\\n      }\\r\\n    },\\r\\n    rootShutdownWrapper() {\\r\\n      this.$emit('root-shutdown-requested')\\r\\n    },\\r\\n    consumerRootMounted(vnode) {\\r\\n      this.private.consumerRootMount = vnode?.component?.ctx\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        console.debug(`bb-vue: App root is null for ${this.consumerRootDef.__uuid}`)\\r\\n      }\\r\\n      this.$emit('consumer-root-mounted', this.private.consumerRootMount)\\r\\n    },\\r\\n  },\\r\\n  render() {\\r\\n    const { h } = Vue()\\r\\n    return h(\\r\\n      'section',\\r\\n      { 'bbv-foreground': true },\\r\\n      h(this.consumerRootDef, {\\r\\n        onVnodeMounted: this.consumerRootMounted,\\r\\n      })\\r\\n    )\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-button',\\r\\n  template: html`\\r\\n    <button\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ icon, small }\\\"\\r\\n      :tabindex=\\\"noFocus === false ? undefined : '-1'\\\"\\r\\n    >\\r\\n      <slot />\\r\\n    </button>\\r\\n  `,\\r\\n  props: {\\r\\n    icon: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    small: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    noFocus: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      font-family: inherit;\\r\\n      font-size: inherit;\\r\\n      padding: 8px;\\r\\n      cursor: pointer;\\r\\n      border: none;\\r\\n      border-radius: 2px;\\r\\n      color: var(--bbvButtonFgColor);\\r\\n      background-color: var(--bbvButtonBgColor);\\r\\n      margin: 0;\\r\\n      transition: color 0.15s, background-color 0.3s;\\r\\n\\r\\n      &:hover {\\r\\n        color: var(--bbvButtonHoverFgColor);\\r\\n        background-color: var(--bbvButtonHoverBgColor);\\r\\n      }\\r\\n\\r\\n      &[disabled]:hover {\\r\\n        background-color: var(--bbvButtonBgColor);\\r\\n        cursor: not-allowed;\\r\\n      }\\r\\n\\r\\n      &.small {\\r\\n        padding: 6px;\\r\\n        font-size: 12px;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n\\r\\n      &.icon {\\r\\n        padding: 2px;\\r\\n        line-height: 1.5;\\r\\n      }\\r\\n\\r\\n      & > code {\\r\\n        padding: 4px 3px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        border-radius: 4px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getClosestCrm, html, css, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\nimport useDraggableWin from '/bitpacks/bb-vue/components/concerns/useDraggableWin.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win',\\r\\n  template: html`\\r\\n    <div\\r\\n      ref=\\\"thisWin\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ shouldDisplay, isDragging, isCollapsed: draggable.isCollapsed }\\\"\\r\\n      :style=\\\"style\\\"\\r\\n      @pointerdown=\\\"bringToFront\\\"\\r\\n      @keydown.stop\\r\\n    >\\r\\n      <div class=\\\"win_titlebar\\\" ref=\\\"dragHandle\\\">\\r\\n        <div class=\\\"win_title\\\">{{ title }}<slot name=\\\"title\\\" /></div>\\r\\n        <template v-if=\\\"canClose || canCollapse\\\">\\r\\n          <div class=\\\"win_controls\\\" ref=\\\"winControls\\\">\\r\\n            <bbv-button class=\\\"win_collapse\\\" @click=\\\"toggleCollapse\\\">\\r\\n              <span v-if=\\\"draggable.isCollapsed\\\">🔽</span>\\r\\n              <span v-else>🔼</span>\\r\\n            </bbv-button>\\r\\n            <bbv-button class=\\\"win_close\\\" @click=\\\"close\\\">❎</bbv-button>\\r\\n          </div>\\r\\n        </template>\\r\\n      </div>\\r\\n      <div class=\\\"win_content\\\" :class=\\\"{ noPad: noPad !== false, noScroll: noScroll !== false }\\\">\\r\\n        <slot name=\\\"default\\\"></slot>\\r\\n      </div>\\r\\n      <div class=\\\"win_actions\\\">\\r\\n        <slot name=\\\"actions\\\"></slot>\\r\\n      </div>\\r\\n      <!-- Hack to disable selection on other parts of document while dragging windows -->\\r\\n      <template v-if=\\\"isDragging\\\">\\r\\n        <component is=\\\"style\\\" type=\\\"text/css\\\"> body *::selection { all: inherit; } </component>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  emits: ['open', 'close', 'collapse'],\\r\\n  props: {\\r\\n    title: {\\r\\n      type: String,\\r\\n      default: '',\\r\\n    },\\r\\n    startOpen: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    startPosition: {\\r\\n      type: Object,\\r\\n    },\\r\\n    startWidth: {\\r\\n      type: String,\\r\\n    },\\r\\n    startHeight: {\\r\\n      type: String,\\r\\n    },\\r\\n    canClose: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    canCollapse: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    noPad: {\\r\\n      default: false,\\r\\n    },\\r\\n    noScroll: {\\r\\n      default: false,\\r\\n    },\\r\\n    trayHide: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    trayTitle: {\\r\\n      type: String,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      uuid: crypto.randomUUID(),\\r\\n      owner: null,\\r\\n      draggable: {\\r\\n        savedHeight: 0,\\r\\n        isCollapsed: false,\\r\\n      },\\r\\n      stackingIndex: 1,\\r\\n      winState: WinStates.closed,\\r\\n      shouldDisplay: false,\\r\\n      hasOpened: false,\\r\\n      WinStates,\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    async winState(newVal, oldVal) {\\r\\n      if (newVal == WinStates.open && oldVal == WinStates.closed) {\\r\\n        // Position window on first open\\r\\n        if (this.hasOpened === false) {\\r\\n          this.hasOpened = true\\r\\n          useDraggableWin(this.draggable, {\\r\\n            win: this,\\r\\n            winManager: this.internals.winManager,\\r\\n            dragHandleRef: this.$refs.dragHandle,\\r\\n            dragIgnoreRef: this.$refs.winControls,\\r\\n            draggableRef: this.$refs.thisWin,\\r\\n            startPosition: this.$props.startPosition,\\r\\n          })\\r\\n        }\\r\\n\\r\\n        // Lag win opens just a bit to ensure CSS transitions are applied\\r\\n        await this.$nextTick()\\r\\n        this.shouldDisplay = true\\r\\n        this.bringToFront()\\r\\n      } else if (newVal == WinStates.closed) {\\r\\n        this.shouldDisplay = false\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    style() {\\r\\n      const collapsedOverrides = {\\r\\n        ...this.draggable.style,\\r\\n        height: 'auto',\\r\\n        minWidth: undefined,\\r\\n        minHeight: undefined,\\r\\n      }\\r\\n\\r\\n      let draggableStyles = this.draggable.isCollapsed ? collapsedOverrides : this.draggable.style\\r\\n      if (this.draggable.savedHeight !== 0 && !this.draggable.isCollapsed) {\\r\\n        draggableStyles.height = this.draggable.savedHeight\\r\\n        this.draggable.savedHeight = 0\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        width: this.$props.startWidth,\\r\\n        height: this.$props.startHeight,\\r\\n        zIndex: this.stackingIndex,\\r\\n        ...draggableStyles,\\r\\n      }\\r\\n    },\\r\\n    isDragging() {\\r\\n      return this.draggable.isDragging\\r\\n    },\\r\\n  },\\r\\n  created() {\\r\\n    this.owner = getClosestCrm(this)\\r\\n  },\\r\\n  async mounted() {\\r\\n    this.internals.winManager.addWin(this)\\r\\n    if (this.$props.startOpen) {\\r\\n      this.winState = WinStates.open\\r\\n    }\\r\\n  },\\r\\n  beforeUnmount() {\\r\\n    this.internals.winManager.removeWin(this)\\r\\n  },\\r\\n  methods: {\\r\\n    async open() {\\r\\n      if (this.winState == WinStates.open) return\\r\\n      this.winState = WinStates.open\\r\\n      await sleep(200)\\r\\n      this.$emit('open', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    async close() {\\r\\n      if (this.winState == WinStates.closed) return\\r\\n      this.winState = WinStates.closed\\r\\n      await sleep(200)\\r\\n      this.$emit('close', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    toggleCollapse() {\\r\\n      if (this.draggable.isCollapsed === false) {\\r\\n        this.draggable.savedHeight = this.draggable.style.height\\r\\n      }\\r\\n      this.draggable.isCollapsed = !this.draggable.isCollapsed\\r\\n      this.$emit('collapse', { winMount: this, isCollapsed: this.draggable.isCollapsed })\\r\\n    },\\r\\n    bringToFront(event) {\\r\\n      if (event && event.path.some((x) => x == this.$refs.winControls)) return\\r\\n      this.internals.winManager.bringToFront(this)\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n\\r\\n      display: flex;\\r\\n      flex-direction: column;\\r\\n\\r\\n      resize: both;\\r\\n      min-width: 250px;\\r\\n      min-height: 250px;\\r\\n\\r\\n      overflow: hidden;\\r\\n      border: 2px solid var(--bbvBorderColor);\\r\\n      border-radius: 10px;\\r\\n\\r\\n      background-color: var(--bbvAppInnerBgColor);\\r\\n      box-shadow: inset 0px 0px 70px 0px var(--bbvBoxShadowColor1),\\r\\n        0px 0px 20px 0px var(--bbvBoxShadowColor2);\\r\\n\\r\\n      transition: opacity 0.2s ease-out, transform 0.2s ease-out;\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transform: translateY(25px);\\r\\n      }\\r\\n\\r\\n      &.isDragging {\\r\\n        opacity: 0.9;\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        min-height: 0;\\r\\n        resize: none;\\r\\n\\r\\n        .win_content {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .win_actions {\\r\\n          background-color: var(--bbvBoxShadowColor1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_titlebar {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        font-size: 12px;\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        user-select: none;\\r\\n        cursor: grab;\\r\\n      }\\r\\n\\r\\n      .win_title {\\r\\n        display: flex;\\r\\n        flex-grow: 1;\\r\\n        padding: 3px 15px 3px 7px;\\r\\n      }\\r\\n\\r\\n      .win_controls {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n        flex-grow: 0;\\r\\n        font-size: 14px;\\r\\n        cursor: auto;\\r\\n\\r\\n        .bbv-button {\\r\\n          margin: 3px;\\r\\n          padding: 2px;\\r\\n          padding-bottom: 4px;\\r\\n          border-radius: 5px;\\r\\n          border-radius: 0;\\r\\n          background-color: var(--bbvWinActionsBgColor);\\r\\n\\r\\n          &:last-child {\\r\\n            margin-right: 6px;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_content {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 25px 15px;\\r\\n        flex-grow: 1;\\r\\n        overflow-y: auto;\\r\\n        color: var(--bbvFontLightColor);\\r\\n\\r\\n        &.noPad {\\r\\n          padding: 0;\\r\\n        }\\r\\n\\r\\n        &:not(.noPad) > *:first-child {\\r\\n          margin-top: 0;\\r\\n          padding-top: 0;\\r\\n        }\\r\\n\\r\\n        &.noScroll {\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_actions {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        padding: 8px 15px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        font-size: 12px;\\r\\n\\r\\n        &:empty {\\r\\n          display: none;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  let bus = getGlobal('asciiBus')\\r\\n  if (!bus) {\\r\\n    throw new Error('Run the asciichart-ui.js script first!')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    bus.emit('asciiChartCollector', { value: (Math.random() - 0.5) * 10 })\\r\\n    await ns.sleep(50)\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-collector.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/1-adding-components.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, getGlobal, html, setGlobal, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// ascii dep\\r\\nimport asciichart from '/bitpacks/bb-vue/misc-examples/asciichart-lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'ascii-chart-app' },\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  name: 'ascii-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"ASCII Chart\\\" no-pad start-width=\\\"50%\\\">\\r\\n      <div class=\\\"chartBg\\\" @pointerenter=\\\"pauseEvents = true\\\" @pointerleave=\\\"pauseEvents = false\\\">\\r\\n        <pre class=\\\"chartDisplay\\\" ref=\\\"chartDisplay\\\">{{ this.chartOutput }}</pre>\\r\\n      </div>\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      bus: null,\\r\\n      chartHistory: [],\\r\\n      eventBuffer: [],\\r\\n      pauseEvents: false,\\r\\n    }\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    chartOutput() {\\r\\n      if (this.chartHistory.length < 1) return ''\\r\\n      return asciichart.plot(this.chartHistory)\\r\\n    },\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    pauseEvents(newVal) {\\r\\n      if (newVal !== true) {\\r\\n        this.$refs.chartDisplay?.scrollTo({ left: 0, behavior: 'smooth' })\\r\\n        this.flushBuffer()\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    this.bus = getGlobal('asciiBus')\\r\\n    if (!this.bus) {\\r\\n      this.bus = getGlobal('Mitt').createBus()\\r\\n      setGlobal('asciiBus', this.bus)\\r\\n    }\\r\\n    this.bus.on('asciiChartCollector', this.handleBusEvent)\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    handleBusEvent(data) {\\r\\n      if (this.pauseEvents) {\\r\\n        this.eventBuffer = [data, ...this.eventBuffer]\\r\\n      } else {\\r\\n        this.chartHistory = [data?.value, ...this.chartHistory]\\r\\n      }\\r\\n      if (this.chartHistory.length > 600) {\\r\\n        this.chartHistory.pop()\\r\\n      }\\r\\n    },\\r\\n    async flushBuffer() {\\r\\n      for (let i = this.eventBuffer.length - 1; i >= 0; i--) {\\r\\n        let entry = this.eventBuffer[i]\\r\\n        if (!entry) return\\r\\n        this.bus.emit('asciiChartCollector', entry)\\r\\n        this.eventBuffer.pop()\\r\\n        await sleep(10)\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      .win_content {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n\\r\\n      .chartBg {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        width: 100%;\\r\\n        min-height: 350px;\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        padding: 30px 0;\\r\\n      }\\r\\n\\r\\n      .chartDisplay {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        overflow: auto;\\r\\n        padding: 30px 0;\\r\\n        font-family: 'FreeMono';\\r\\n        cursor: default;\\r\\n        user-select: none;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const WinStates = Object.freeze({\\r\\n  open: 'open',\\r\\n  closed: 'closed',\\r\\n})\\r\\n\\r\\nexport const WinPositionStrategies = Object.freeze({\\r\\n  cascadeStack: 'cascadeStack',\\r\\n})\\r\\n\\r\\nexport const AppStates = Object.freeze({\\r\\n  hasWins: 'hasWins',\\r\\n  withoutWins: 'withoutWins',\\r\\n})\\r\\n\\r\\nexport const TrayItemTypes = Object.freeze({\\r\\n  winMount: 'winMount',\\r\\n  consumerRootMount: 'consumerRootMount',\\r\\n})\\r\\n\\r\\nexport const ComponentTiers = Object.freeze({\\r\\n  library: 'library',\\r\\n  consumer: 'consumer',\\r\\n})\",\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, lodash, Vue, VueUse, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default async function useDraggableWin(store, options = {}) {\\r\\n  const { reactive, watch } = Vue()\\r\\n  const { useDraggable, useElementBounding, until } = VueUse()\\r\\n\\r\\n  // Handle options + validations\\r\\n  let opts = reactive({\\r\\n    win: null,\\r\\n    winManager: null,\\r\\n    dragHandleRef: null,\\r\\n    draggableRef: null,\\r\\n    dragIgnoreRef: null,\\r\\n    startPosition: null,\\r\\n    constrain: true,\\r\\n    constrainPadding: 0,\\r\\n    ...lodash.omitBy(options, lodash.isNil),\\r\\n  })\\r\\n  if (!lodash.isObjectLike(store)) {\\r\\n    throw new Error('Must provide store as first arg')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.win)) {\\r\\n    throw new Error('Must provide win in options')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.winManager)) {\\r\\n    throw new Error('Must provide winManager in options')\\r\\n  }\\r\\n  if (!opts.dragHandleRef) {\\r\\n    throw new Error('Must provide dragHandleRef in options')\\r\\n  }\\r\\n  if (!opts.draggableRef) {\\r\\n    throw new Error('Must provide draggableRef in options')\\r\\n  }\\r\\n\\r\\n  // Fill provided store with initial state\\r\\n  store.isDragging = false\\r\\n  store.style = {}\\r\\n  store.fixedRoot = useElementBounding(doc.querySelector('[bbv-root]'))\\r\\n  store.draggableTarget = useElementBounding(opts.draggableRef)\\r\\n\\r\\n  // Helper to manually position draggable\\r\\n  const manuallyPositionDraggable = async ({ x, y }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.left = `${x}px`\\r\\n    ele.style.top = `${y}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n  const manuallySizeDraggable = async ({ width, height }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.width = `${width}px`\\r\\n    ele.style.height = `${height}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n\\r\\n  // Wait until draggableTarget is mounted, might be a better way?\\r\\n  await until(store.draggableTarget).toMatch((x) => x.width > 0)\\r\\n\\r\\n  // Sync minWidth / minHeight from CSS styles applied to window\\r\\n  store.minWidth = parseInt(win.getComputedStyle(opts.draggableRef).minWidth)\\r\\n  store.minHeight = parseInt(win.getComputedStyle(opts.draggableRef).minHeight)\\r\\n\\r\\n  // Set initial position - if none is provided - based on winManager recommendation\\r\\n  let initialPos = { x: 0, y: 0 }\\r\\n  if (opts.startPosition === null) {\\r\\n    initialPos = opts.winManager.getRecommendedPosition(opts.win)\\r\\n  } else {\\r\\n    initialPos = { x: opts.startPosition?.x ?? 0, y: opts.startPosition?.y ?? 0 }\\r\\n  }\\r\\n\\r\\n  // Do initial positioning of window\\r\\n  manuallyPositionDraggable(initialPos)\\r\\n\\r\\n  // Watch for position changes\\r\\n  store.isDragging = useDraggable(opts.dragHandleRef, {\\r\\n    initialValue: initialPos,\\r\\n    onMove: async (p) => manuallyPositionDraggable(p),\\r\\n    onStart: (_, e) => !e.path.some((x) => x == opts.dragIgnoreRef),\\r\\n  }).isDragging\\r\\n\\r\\n  // Watch for size changes\\r\\n  watch(store.draggableTarget, () => manuallySizeDraggable(store.draggableTarget), { deep: true })\\r\\n}\\r\\n\\r\\nasync function updateStore(ctx) {\\r\\n  const { reactive } = Vue()\\r\\n\\r\\n  let padding = ctx.opts.constrainPadding\\r\\n  let root = ctx.store.fixedRoot\\r\\n  let draggable = ctx.store.draggableTarget\\r\\n\\r\\n  let newSize = reactive({ width: draggable.width, height: draggable.height })\\r\\n  let newPos = reactive({ x: draggable.x, y: draggable.y })\\r\\n\\r\\n  // Clamp window size and position if desired\\r\\n  if (ctx.opts.constrain) {\\r\\n    const { useClamp } = VueUse()\\r\\n\\r\\n    newSize.width = useClamp(newSize.width, ctx.store.minWidth, root.width - padding * 2)\\r\\n    newSize.height = useClamp(\\r\\n      newSize.height,\\r\\n      ctx.store.isCollapsed ? 0 : ctx.store.minHeight,\\r\\n      root.height - padding * 2\\r\\n    )\\r\\n\\r\\n    newPos.x = useClamp(newPos.x, padding, root.width - newSize.width - padding)\\r\\n    newPos.y = useClamp(newPos.y, padding, root.bottom - newSize.height - padding)\\r\\n  }\\r\\n\\r\\n  // Update style object to be bound to draggableTarget in consumer template\\r\\n  ctx.store.style = {\\r\\n    left: `${newPos.x}px`,\\r\\n    top: `${newPos.y}px`,\\r\\n    width: `${newSize.width}px`,\\r\\n    height: `${newSize.height}px`,\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    // App one\\r\\n    // ---\\r\\n\\r\\n    let appOne = new AppFactory(ns)\\r\\n    const appOneHandleFn = await appOne.mount({\\r\\n      config: { id: 'app-one', showTips: false },\\r\\n      rootComponent: PrimaryAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-one booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then booting a second app...')\\r\\n\\r\\n    // App two\\r\\n    // ---\\r\\n\\r\\n    let appTwo = new AppFactory(ns)\\r\\n    const appTwoHandleFn = await appTwo.mount({\\r\\n      config: { id: 'app-two', showTips: false },\\r\\n      rootComponent: DifferentAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-two booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then logging mounted apps to debug console...')\\r\\n\\r\\n    // Retrieve references to both running apps using the handle / lookup functions\\r\\n    // returned from the mount() method calls earlier.\\r\\n    const [runningAppOne, runningAppTwo] = [appOneHandleFn(), appTwoHandleFn()]\\r\\n\\r\\n    // Display running app info in debug console / devtools (Debug -> Activate)\\r\\n    console.debug(runningAppOne)\\r\\n    console.debug(runningAppTwo)\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst PrimaryAppRoot = {\\r\\n  name: 'primary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <!--\\r\\n      Use the \\\"tray-hide\\\" prop to hide this window from the app tray\\r\\n    -->\\r\\n    <bbv-win\\r\\n      tray-hide\\r\\n      title=\\\"I'm hidden from the App Tray\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      start-width=\\\"20%\\\"\\r\\n      @close=\\\"appShutdown\\\"\\r\\n    >\\r\\n      <p>\\r\\n        This window doesn't appear in the app tray, and instead this window is configured to\\r\\n        shutdown the app where it's mounted when it's closed.\\r\\n      </p>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\nconst DifferentAppRoot = {\\r\\n  name: 'secondary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <main>\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win title=\\\"I've got a special title in the tray\\\" tray-title=\\\"🥇\\\" class=\\\"__CMP_NAME__\\\">\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win\\r\\n        title=\\\"I have a special title in the tray, too!\\\"\\r\\n        tray-title=\\\"🥈\\\"\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n      >\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n    </main>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/1-the-app-tray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//\\n//\\n// NOTE:\\n// Ideally some of these files would be in separate resource folders,\\n// but I've been running into circular reference issues in-game :verysadge:\\n//\\n//\\n\\n//\\n//\\n// CONSTANTS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Keys used for globalThis storage and lookup\\n */\\nexport const Keys = Object.freeze({\\n  libKey: 'bbVue',\\n  vueModuleKey: 'Vue',\\n  vueUseModuleKey: 'VueUse',\\n  mittModuleKey: 'Mitt',\\n  rootAppKey: 'rootApp',\\n  globalBusKey: 'rootBus',\\n})\\n\\n/**\\n * Tokens used when processing a consumer app style and template values\\n */\\nexport const ReplacementTokens = Object.freeze({\\n  appId: '__APP_ID__',\\n  componentName: '__CMP_NAME__',\\n})\\n\\n//\\n//\\n// GLOBALS MANAGEMENT /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\nexport const RootApp = {\\n  rootAttr: 'bbv-root',\\n  raw() {\\n    return getGlobal(Keys.rootAppKey)\\n  },\\n  instance() {\\n    return this.raw()?._instance\\n  },\\n  appDef() {\\n    return this.raw()?._component\\n  },\\n  component() {\\n    return this.instance()?.ctx\\n  },\\n  set(val) {\\n    return setGlobal(Keys.rootAppKey, val)\\n  },\\n  async cleanup() {\\n    await sleep(15)\\n    try {\\n      this.raw()?.unmount()\\n    } catch (error) {\\n      console.debug(\\\"bb-vue: Issue cleaning up AppRoot, but don't worry about it\\\")\\n    }\\n    await this.removeDom()\\n    deleteGlobal(Keys.rootAppKey)\\n    await sleep(15)\\n  },\\n  async removeDom() {\\n    await sleep(15)\\n    doc.querySelector(`[${this.rootAttr}]`)?.remove()\\n  },\\n  async addDom(appId) {\\n    doc.body.insertAdjacentHTML('afterbegin', html`<div id=\\\"${appId}\\\" bbv-root></div>`)\\n    await sleep(15)\\n  },\\n}\\n\\n/**\\n * Reference to window global\\n */\\nexport const win = globalThis['window']\\n\\n/**\\n * Reference to document global\\n */\\nexport const doc = globalThis['document']\\n\\n/**\\n * Reference to bundled lodash library\\n */\\nexport const lodash = win._\\n\\n/**\\n * Initialize globalThis storage\\n */\\nif (lodash.isObjectLike(win[Keys.libKey]) === false) {\\n  win[Keys.libKey] = {}\\n}\\n\\n/**\\n * Sets a value by key to internal library storage\\n * @param {String} key Path to set, utilizing `lodash.set`\\n * @param {any} value\\n * @returns {any} A reference to the value passed in, from the store\\n * * @see https://lodash.com/docs/4.17.15#set\\n */\\nexport function setGlobal(key, value) {\\n  lodash.set(win[Keys.libKey], key, value)\\n  return getGlobal(key)\\n}\\n\\n/**\\n * Retrieves a value by key from internal library storage\\n * @param {String} key Path to get, utilizing `lodash.get`\\n * @returns {any} Value from or undefined if not set\\n * @see https://lodash.com/docs/4.17.15#get\\n */\\nexport function getGlobal(key, defaultValue) {\\n  return lodash['get'](win[Keys.libKey], key, defaultValue)\\n}\\n\\n/**\\n * Deletes a global key from globalThis\\n * @param {String} key Property to destroy\\n * @returns {void}\\n */\\nexport function deleteGlobal(key) {\\n  delete win[Keys.libKey][key]\\n}\\n\\n/**\\n * Load the Vue library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Vue} An instance of Vue, or a falsy value indicating the library is not loaded\\n */\\nexport function Vue({ silent = false } = {}) {\\n  let vue = win[Keys.vueModuleKey]\\n  if (!vue && !silent)\\n    throw new Error('Vue is not loaded on window global; check VueLoader:Get for issues')\\n  return vue\\n}\\n\\n/**\\n * Load the VueUse library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {VueUse} An instance of VueUse, or a falsy value indicating the library is not loaded\\n */\\nexport function VueUse({ silent = false } = {}) {\\n  let vueUse = win[Keys.vueUseModuleKey]\\n  if (!vueUse && !silent)\\n    throw new Error('VueUse is not loaded on window global; check AppRoot:loadDeps for issues')\\n  return vueUse\\n}\\n\\n/**\\n * Load the Mitt library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Mitt} An instance of Mitt, or a falsy value indicating the library is not loaded\\n */\\nexport function Mitt({ silent = false } = {}) {\\n  let mitt = getGlobal('Mitt')\\n  if (!mitt && !silent)\\n    throw new Error('Mitt is not loaded on window global; check MittLoader:Get for issues')\\n  return mitt\\n}\\n\\n//\\n//\\n// EXCEPTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Processing exception, most often originating from SCSS compiler usage in `ComponentManager`.\\n * Signifies an issue when preparing components for injection into `bbVue.rootApp`\\n */\\nexport class ProcessingException {\\n  constructor(step, originalError) {\\n    this.step = step\\n    this.originalError = originalError\\n  }\\n\\n  toString() {\\n    return `ERROR: [ProcessingException] Failure during '${this.step}' processing\\\\n${\\n      this.originalError?.formatted || toJson(this.originalError)\\n    }`\\n  }\\n}\\n\\n/**\\n * Component validation exception thrown by `AppFactory`.\\n * Signifies an issue with components being provided to `AppFactory` by a consumer app definition.\\n */\\nexport class ComponentValidationException {\\n  constructor(message, cmpDef) {\\n    this.message = message\\n    this.componentDefinition = cmpDef\\n  }\\n\\n  toString() {\\n    return `ERROR: [ComponentValidationException] ${this.message}\\\\n${toJson(\\n      this.componentDefinition\\n    )}`\\n  }\\n}\\n\\n// APP TRAVERSAL /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Walk the Vue VNode tree and find the closest parent consumer root mount (CRM)\\n * @param {componentInstanceVm} startingVm\\n * The view-model / `this` binding from the component where the search originates\\n * @returns {crmInstanceVm | null} The closest CRM instance or null\\n */\\nexport function getClosestCrm(startingVm) {\\n  let consumerRoot = null\\n  let parent = startingVm.$parent\\n  while (parent && !consumerRoot) {\\n    if (parent.$options.__consumerRoot === true) {\\n      consumerRoot = parent\\n    }\\n    parent = parent.$parent\\n  }\\n  return consumerRoot\\n}\\n\\n// GENERAL FUNCTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Cleanup an error string\\n * @param {String} error Error string to cleanup\\n * @returns Removes odd internal delimiters and other noisy chars from a BitBurner error\\n */\\nexport function cleanupError(error) {\\n  return String(error)\\n    .replace('|DELIMITER|', '')\\n    .replaceAll('|DELIMITER|', ' » ')\\n    .replaceAll('<br>', '')\\n    .replaceAll('Stack:', '')\\n}\\n\\n/**\\n * Wait for ms then continue\\n * @param {Number} ms Millis to wait\\n * @returns {Promise<void>}\\n */\\nexport async function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(), ms)\\n  })\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function scss() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function css() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function html() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression; reconstructs provided template string with no changes\\n * @param {Array} strings\\n * @param  {...any} values\\n * @returns {String}\\n */\\nfunction templatePassthrough(strings, ...values) {\\n  let str = ''\\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '')\\n  })\\n  return str\\n}\\n\\n/**\\n * Attempts to convert a value to string using `lodash.toString`,\\n * and then trim the string with `lodash.trim`\\n * @param {any} value Value to coerce to string\\n * @returns {string} value\\n */\\nexport function toStr(value) {\\n  return lodash.trim(lodash.toString(value))\\n}\\n\\n/**\\n * Attempts to decern a given value's \\\"blankness\\\" via:\\n * - `lodash.isNil` and\\n * - `lodash.isEmpty`\\n * @param {any} value Value to be checked for blankness\\n * @returns {boolean} Is value blank\\n */\\nexport function isBlank(value) {\\n  if (lodash.isNil(value)) return true\\n  if (lodash.isString(value) && lodash.isEmpty(value)) return true\\n  return lodash.isEmpty(value)\\n}\\n\\n/**\\n * Attempt to convert an object to JSON via `JSON.stringify`, or fallback\\n * to a more robust JSON stringifier if needed\\n * @param {any} value\\n * @returns {String} result\\n */\\nexport function toJson(value) {\\n  try {\\n    return JSON.stringify(value, null, '  ')\\n  } catch (error) {\\n    try {\\n      return toJsonSafe(value, 4, 4, '  ')\\n    } catch (error) {\\n      return '[COULD NOT SERIALIZE] ' + value\\n    }\\n  }\\n}\\n\\n/**\\n * Attempt to convert a string to it's parsed JSON result\\n * @param {any} value\\n * @returns {any | null} resultOrNull\\n */\\nexport function fromJson(value) {\\n  try {\\n    return JSON.parse(value)\\n  } catch (error) {\\n    console.error(`bb-vue: Could not parse JSON string: ${value}`)\\n    return null\\n  }\\n}\\n\\n/**\\n * @param {String} value\\n */\\nexport function uppercaseFirstLetter(value) {\\n  return String(value).charAt(0).toUpperCase() + String(value).slice(1)\\n}\\n\\n/**\\n * Returns the JSON representation of an object.\\n *\\n * @param {value} object the object\\n * @param {number} objectMaxDepth for objects, the maximum number of times to recurse into descendants\\n * @param {number} arrayMaxLength for arrays, the maximum number of elements to enumerate\\n * @param {string} indent the string to use for indentation\\n * @return {string} the JSON representation\\n */\\nconst toJsonSafe = function (object, objectMaxDepth, arrayMaxLength, indent) {\\n  'use strict'\\n\\n  /**\\n   * Escapes control characters, quote characters, backslash characters and quotes the string.\\n   *\\n   * @param {string} string the string to quote\\n   * @returns {String} the quoted string\\n   */\\n  function quote(string) {\\n    escapable.lastIndex = 0\\n    var escaped\\n    if (escapable.test(string)) {\\n      escaped = string.replace(escapable, function (a) {\\n        var replacement = replacements[a]\\n        if (typeof replacement === 'string') return replacement\\n        // Pad the unicode representation with leading zeros, up to 4 characters.\\n        return '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\\n      })\\n    } else escaped = string\\n    return '\\\"' + escaped + '\\\"'\\n  }\\n\\n  /**\\n   * Returns the String representation of an object.\\n   *\\n   * Based on <a href=\\\"https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js\\\">https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js</a>\\n   *\\n   * @param {string} path the fully-qualified path of value in the JSON object\\n   * @param {type} value the value of the property\\n   * @param {string} cumulativeIndent the indentation to apply at this level\\n   * @param {number} depth the current recursion depth\\n   * @return {String} the JSON representation of the object, or \\\"null\\\" for values that aren't valid\\n   * in JSON (e.g. infinite numbers).\\n   */\\n  function toString(path, value, cumulativeIndent, depth) {\\n    switch (typeof value) {\\n      case 'string':\\n        return quote(value)\\n      case 'number': {\\n        // JSON numbers must be finite\\n        if (isFinite(value)) return String(value)\\n        return 'null'\\n      }\\n      case 'boolean':\\n        return String(value)\\n      case 'object': {\\n        if (!value) return 'null'\\n        var valueIndex = values.indexOf(value)\\n        if (valueIndex !== -1) return 'Reference => ' + paths[valueIndex]\\n        values.push(value)\\n        paths.push(path)\\n        if (depth > objectMaxDepth) return '...'\\n\\n        // Make an array to hold the partial results of stringifying this object value.\\n        var partial = []\\n\\n        // Is the value an array?\\n        var i\\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\\n          // The value is an array. Stringify every element\\n          var length = Math.min(value.length, arrayMaxLength)\\n\\n          // Whether a property has one or multiple values, they should be treated as the same\\n          // object depth. As such, we do not increment the object depth when recursing into an\\n          // array.\\n          for (i = 0; i < length; ++i) {\\n            partial[i] = toString(\\n              path + '.' + i,\\n              value[i],\\n              cumulativeIndent + indent,\\n              depth,\\n              arrayMaxLength\\n            )\\n          }\\n          if (i < value.length) {\\n            // arrayMaxLength reached\\n            partial[i] = '...'\\n          }\\n          return '\\\\n' + cumulativeIndent + '[' + partial.join(', ') + '\\\\n' + cumulativeIndent + ']'\\n        }\\n\\n        // Otherwise, iterate through all of the keys in the object.\\n        for (var subKey in value) {\\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\\n            var subValue\\n            try {\\n              subValue = toString(\\n                path + '.' + subKey,\\n                value[subKey],\\n                cumulativeIndent + indent,\\n                depth + 1\\n              )\\n              partial.push(quote(subKey) + ': ' + subValue)\\n            } catch (e) {\\n              // this try/catch due to forbidden accessors on some objects\\n              if (e.message) subKey = e.message\\n              else subKey = 'access denied'\\n            }\\n          }\\n        }\\n        var result = '\\\\n' + cumulativeIndent + '{\\\\n'\\n        for (i = 0; i < partial.length; ++i)\\n          result += cumulativeIndent + indent + partial[i] + ',\\\\n'\\n        if (partial.length > 0) {\\n          // Remove trailing comma\\n          result = result.slice(0, result.length - 2) + '\\\\n'\\n        }\\n        result += cumulativeIndent + '}'\\n        return result\\n      }\\n      default:\\n        return 'null'\\n    }\\n  }\\n\\n  if (indent === undefined) indent = '  '\\n  if (objectMaxDepth === undefined) objectMaxDepth = 0\\n  if (arrayMaxLength === undefined) arrayMaxLength = 50\\n  // Matches characters that must be escaped\\n\\n  // prettier-ignore\\n  // eslint-disable-next-line\\n  var escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g\\n\\n  // The replacement characters\\n  var replacements = {\\n    '\\\\b': '\\\\\\\\b',\\n    '\\\\t': '\\\\\\\\t',\\n    '\\\\n': '\\\\\\\\n',\\n    '\\\\f': '\\\\\\\\f',\\n    '\\\\r': '\\\\\\\\r',\\n    '\\\"': '\\\\\\\\\\\"',\\n    '\\\\\\\\': '\\\\\\\\\\\\\\\\',\\n  }\\n  // A list of all the objects that were seen (used to avoid recursion)\\n  var values = []\\n  // The path of an object in the JSON object, with indexes corresponding to entries in the\\n  // \\\"values\\\" variable.\\n  var paths = []\\n  return toString('root', object, '', 0)\\n}\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces)\\n  return num >= 0 ? '$' + numberShort : numberShort.replace('-', '-$')\\n}\\n\\nconst symbols = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n', 'e33', 'e36', 'e39']\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  for (\\n    var i = 0, sign = Math.sign(num), num = Math.abs(num);\\n    num >= 1000 && i < symbols.length;\\n    i++\\n  )\\n    num /= 1000\\n  return (\\n    (sign < 0 ? '-' : '') +\\n    num.toFixed(\\n      Math.max(\\n        0,\\n        Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num)))\\n      )\\n    ) +\\n    symbols[i]\\n  )\\n}\\n\\n/**\\n * Elapsed time between two dates, or a number of seconds\\n * @param {number} timeStart Defaults to 0\\n * @param {number} timeEnd Defaults to 0\\n * @returns {string} Elapsed time in human-friendly format\\n */\\nexport function timeDiff(timeStart = 0, timeEnd = 0) {\\n  let diff\\n  if (timeStart && timeEnd) {\\n    diff = timeEnd - timeStart\\n  } else {\\n    diff = timeStart * 1000\\n  }\\n  var hours = Math.floor(diff / (1000 * 60 * 60))\\n  diff -= hours * (1000 * 60 * 60)\\n  var mins = Math.floor(diff / (1000 * 60))\\n  diff -= mins * (1000 * 60)\\n  var secs = Math.floor(diff / 1000)\\n  diff -= secs * 1000\\n  var ms = Math.floor(diff)\\n  diff -= ms\\n  let toRet = []\\n  if (hours > 0) {\\n    toRet.push(`${hours}h`)\\n  }\\n  if (mins > 0) {\\n    toRet.push(`${mins}m`)\\n  }\\n  if (secs > 0) {\\n    toRet.push(`${secs}s`)\\n  }\\n  if (ms > 0 && !secs) {\\n    toRet.push(`${ms}ms`)\\n  }\\n  return toRet.join(' ')\\n}\",\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/4-sending-data-from-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, toStr, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class SassLoader {\\r\\n  static #moduleGlobalKey = 'Sass'\\r\\n\\r\\n  static async Fetch() {\\r\\n    let module = this.#getModule()\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      await this.#loadSassModule()\\r\\n      module = this.#getModule()\\r\\n    }\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      throw new Error(`SassLoader could not load module in Fetch()`)\\r\\n    }\\r\\n\\r\\n    return this.#wrapModule(module)\\r\\n  }\\r\\n\\r\\n  static #loadSassModule() {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      this.#doDefineHack()\\r\\n\\r\\n      const onScriptLoad = (() => {\\r\\n        // console.log('sass:load')\\r\\n        const module = this.#getModule()\\r\\n        if (this.#isValidModule(module)) {\\r\\n          resolve(module)\\r\\n          // console.log('sass:loadResolve')\\r\\n        } else {\\r\\n          reject()\\r\\n          console.error('bb-vue: sass:loadReject', this)\\r\\n          throw new Error('SassLoader could not load module in #loadSassModule()')\\r\\n        }\\r\\n        this.#undoDefineHack()\\r\\n      }).bind(this)\\r\\n\\r\\n      let sassJSScript = doc.createElement('script')\\r\\n      sassJSScript.type = 'text/javascript'\\r\\n      sassJSScript.src = 'https://cdn.jsdelivr.net/npm/sass.js@0.11.1/dist/sass.sync.js'\\r\\n      sassJSScript.onload = onScriptLoad\\r\\n      sassJSScript.onerror = reject\\r\\n\\r\\n      doc.head.appendChild(sassJSScript)\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static async #compileAsyncWrapper(module, rawScss, scssCompilerOptions, ...args) {\\r\\n    let compilerOptionsMerged = Object.assign({ style: module.style.expanded }, scssCompilerOptions)\\r\\n    return new Promise((resolve, reject) => {\\r\\n      // console.log('compile', rawScss)\\r\\n      module.compile(\\r\\n        rawScss,\\r\\n        compilerOptionsMerged,\\r\\n        (compileResult) => {\\r\\n          if (compileResult.status !== 0) {\\r\\n            reject(compileResult)\\r\\n            // console.log('compile:reject', compileResult)\\r\\n          } else {\\r\\n            resolve(toStr(compileResult.text))\\r\\n            // console.log('compile:resolve', compileResult.text)\\r\\n          }\\r\\n        },\\r\\n        ...args\\r\\n      )\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static #getModule() {\\r\\n    return win[this.#moduleGlobalKey]\\r\\n  }\\r\\n\\r\\n  static #wrapModule(module) {\\r\\n    if (!this.#isValidModule(module))\\r\\n      throw new Error('SassLoader cannot wrap invalid module', module)\\r\\n    module.compileAsync = async (rawCss, scssOptions, ...args) =>\\r\\n      await this.#compileAsyncWrapper(module, rawCss, scssOptions, ...args)\\r\\n    return module\\r\\n  }\\r\\n\\r\\n  static #isValidModule(module) {\\r\\n    return module && module.compile\\r\\n  }\\r\\n\\r\\n  static #doDefineHack() {\\r\\n    if (win.define) {\\r\\n      win._defineBak = win.define\\r\\n      win.define = undefined\\r\\n    }\\r\\n  }\\r\\n\\r\\n  static #undoDefineHack() {\\r\\n    if (win._defineBak) {\\r\\n      win.define = win._defineBak\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr, toJson, RootApp, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport ComponentManager from '/bitpacks/bb-vue/ComponentManager.js';\\r\\nimport MittLoader from '/bitpacks/bb-vue/MittLoader.js';\\r\\nimport SassLoader from '/bitpacks/bb-vue/SassLoader.js';\\r\\nimport VueLoader from '/bitpacks/bb-vue/VueLoader.js';\\r\\n\\r\\nimport ScriptX from '/bitpacks/bb-vue/components/internal/ScriptX.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { default as AppRoot, ComponentLibrary } from '/bitpacks/bb-vue/components/internal/AppRoot.js';\\r\\n\\r\\nconst CreateOrGetRootVueApp = async (Vue, Sass, forceReload = false) => {\\r\\n  const rootConfig = {\\r\\n    appId: 'bb-vue-root',\\r\\n  }\\r\\n\\r\\n  // console.time('CreateOrGetRootVueApp')\\r\\n\\r\\n  if (forceReload == true || (RootApp.raw() && !RootApp.instance())) {\\r\\n    console.debug(`bb-vue: AppFactory found remnants of previous app, doing cleanup`)\\r\\n    await RootApp.cleanup()\\r\\n  } else if (RootApp.raw() && RootApp.instance()) {\\r\\n    console.debug(`bb-vue: AppFactory found existing app, returning instance`)\\r\\n    return RootApp.raw()\\r\\n  }\\r\\n\\r\\n  console.debug(`bb-vue: AppFactory building new Vue app`)\\r\\n\\r\\n  let componentManager = new ComponentManager(rootConfig, Sass, AppRoot.scssResources)\\r\\n  componentManager.add(AppRoot, ...ComponentLibrary)\\r\\n  await componentManager.processAll()\\r\\n\\r\\n  let processedLibraryRoot = {\\r\\n    ...componentManager.processedLibraryRoot,\\r\\n    __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n  }\\r\\n\\r\\n  let rootApp\\r\\n  rootApp = Vue.createApp(processedLibraryRoot)\\r\\n  rootApp.use(ScriptX)\\r\\n  componentManager.registerWithVueApp(rootApp)\\r\\n\\r\\n  await RootApp.addDom(rootConfig.appId)\\r\\n  rootApp.mount(`#${rootConfig.appId}`)\\r\\n  RootApp.set(rootApp)\\r\\n\\r\\n  // console.timeEnd('CreateOrGetRootVueApp')\\r\\n\\r\\n  return rootApp\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nexport default class AppFactory {\\r\\n  #ns\\r\\n  #appConfig\\r\\n  #rootComponent\\r\\n  #componentsInQueue = new Set()\\r\\n  #mounted = false\\r\\n\\r\\n  constructor(ns) {\\r\\n    if (isBlank(ns) || !(ns.tprint || ns.sleep || ns.exit)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique reference to the ns object! ` +\\r\\n          `Try sending the ns object from the script where you're creating this AppFactory.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    this.#ns = ns\\r\\n    this.#mounted = false\\r\\n    this.#componentsInQueue = new Set()\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async mount({ config = {}, components = [], rootComponent = {} }) {\\r\\n    this.#configure(config)\\r\\n    this.#addComponents(components)\\r\\n    this.#setRootComponent(rootComponent)\\r\\n\\r\\n    this.#validateStart()\\r\\n    this.#validateOneMount()\\r\\n\\r\\n    // console.time('AppFactory:start')\\r\\n\\r\\n    const { Vue, Sass } = await this.#runLoaders()\\r\\n\\r\\n    // Mount root app\\r\\n    let rootVueApp = await CreateOrGetRootVueApp(Vue, Sass, this.#appConfig.forceReload)\\r\\n\\r\\n    let componentManager = new ComponentManager(\\r\\n      this.#appConfig,\\r\\n      Sass,\\r\\n      [RootApp.appDef().scssResources, this.#appConfig.scssResources].join('\\\\n\\\\n')\\r\\n    )\\r\\n    componentManager.add(...this.#componentsInQueue)\\r\\n    await componentManager.processAll()\\r\\n    componentManager.registerWithVueApp(rootVueApp)\\r\\n\\r\\n    let processedConsumerRoot = {\\r\\n      ...componentManager.processedConsumerRoot,\\r\\n      __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n    }\\r\\n\\r\\n    let consumerAppHandleFn = addConsumerRootDef(this.#ns, processedConsumerRoot)\\r\\n\\r\\n    this.#mounted = true\\r\\n\\r\\n    if (this.#appConfig.showTips) {\\r\\n      this.#ns.tprint(\\r\\n        `\\\\n\\\\n📦 Your bb-vue app (#${\\r\\n          this.#appConfig.appId\\r\\n        }) is now mounted!\\\\n\\\\n🧰 Use the Debug -> Activate menu to open the BitBurner Developer Tools.\\\\n👓 In the Elements tab, you should find your app at the top of the <body> tag.\\\\n\\\\n🎉 Have fun!\\\\n\\\\nP.S. If you're sick of seeing this message, add \\\\`showTips: false\\\\` to your app's configuration object.\\\\n\\\\n`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    // console.timeEnd('AppFactory:start')\\r\\n\\r\\n    return consumerAppHandleFn\\r\\n  }\\r\\n\\r\\n  #configure(instanceConfig = {}) {\\r\\n    if (isBlank(instanceConfig.id)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique ID! ` +\\r\\n          `Try using \\\\`crypto.randomUUID()\\\\` if you can't think of one.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    let defaultConfig = {\\r\\n      appId: toStr(instanceConfig.id),\\r\\n      showTips: true,\\r\\n      forceReload: false,\\r\\n      shutdownWithPid: null,\\r\\n      shutdownRootWithPid: null,\\r\\n      scssResources: '',\\r\\n    }\\r\\n\\r\\n    delete instanceConfig.id\\r\\n    this.#appConfig = Object.assign(defaultConfig, instanceConfig)\\r\\n\\r\\n    if (!isBlank(this.#appConfig.scssResources)) {\\r\\n      if (!lodash.isString(this.#appConfig.scssResources)) {\\r\\n        throw new TypeError('SCSS resources added to AppFactory must be of type String')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #addComponents(components) {\\r\\n    if (!lodash.isArray(components)) {\\r\\n      throw new Error('Please provide one or more components to add as an array')\\r\\n    }\\r\\n\\r\\n    for (let cmpDef of components) {\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#componentsInQueue.add(cmpDef)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #setRootComponent(componentDefinition = {}) {\\r\\n    let cmpDef = { ...ComponentManager.Validate(componentDefinition) }\\r\\n    cmpDef.__consumerRoot = true\\r\\n    cmpDef.__appId = this.#appConfig.appId\\r\\n    cmpDef.__uuid = `${cmpDef.name}-${crypto.randomUUID()}`\\r\\n    cmpDef.__config = this.#appConfig\\r\\n    this.#rootComponent = cmpDef\\r\\n    this.#componentsInQueue.add(cmpDef)\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async #runLoaders() {\\r\\n    const [Vue, Mitt, Sass] = await Promise.all([\\r\\n      VueLoader.Fetch(),\\r\\n      MittLoader.Fetch(),\\r\\n      SassLoader.Fetch(),\\r\\n    ])\\r\\n    return { Vue, Mitt, Sass }\\r\\n  }\\r\\n\\r\\n  #validateStart() {\\r\\n    if (this.#componentsInQueue.size < 1) {\\r\\n      throw new Error('You must add at least one component to an AppFactory')\\r\\n    }\\r\\n\\r\\n    if (isBlank(this.#rootComponent)) {\\r\\n      throw new Error('You must add one root component to an AppFactory')\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #validateOneMount() {\\r\\n    if (this.#mounted === true) {\\r\\n      throw new Error('You can only mount an AppFactory instance once')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Registers a consumer app definition, to be mounted by the parent `bbVue.rootApp` instance as a CRM\\r\\n * @param {consumerAppDef} appDef The definition of a consumer app\\r\\n * @returns {function} Lookup function to retrieve consumer app instance\\r\\n */\\r\\nfunction addConsumerRootDef(ns, appDef) {\\r\\n  try {\\r\\n    // Lookup rootApp ctx\\r\\n    let rootApp = RootApp.component()\\r\\n\\r\\n    // Hook in orphan protection if requested\\r\\n    // BUGGED: ns race conditions due to repeated ns.getRunningScript() calls\\r\\n    /* if (appDef.__config.shutdownWithPid || appDef.__config.shutdownRootWithPid) {\\r\\n      // Watch pid on interval\\r\\n      const pidWatchRate = 500\\r\\n      const pidWatch = setInterval(async () => {\\r\\n        // Attempt to find running PID\\r\\n        let pid = ns?.getRunningScript()?.pid\\r\\n\\r\\n        // Eject if pid is healthy\\r\\n        if (pid > 0) return\\r\\n\\r\\n        // Try to shutdown either AppRoot or consumer root as needed\\r\\n        try {\\r\\n          if (appDef.__config.shutdownRootWithPid) {\\r\\n            await rootApp.rootShutdown()\\r\\n          } else {\\r\\n            await rootApp.unmountConsumerRootByUuid(appDef.__uuid)\\r\\n          }\\r\\n        } catch (error) {\\r\\n          ns.tprint(\\r\\n            `ERROR: bb-vue app \\\"${appDef.name}\\\" is orphaned but ending process failed:\\\\n${toJson(\\r\\n              error\\r\\n            )}`\\r\\n          )\\r\\n        } finally {\\r\\n          // Whatever the result of the cleanup, end the interval\\r\\n          clearInterval(pidWatch)\\r\\n        }\\r\\n      }, pidWatchRate)\\r\\n    } */\\r\\n\\r\\n    // Add appDef to rootApp and return app handle to consumer\\r\\n    return rootApp.addConsumerRootDef(appDef)\\r\\n  } catch (error) {\\r\\n    throw new Error(\\r\\n      `rootApp cannot be located, or issue mounting consumer appDef:\\\\n${toJson(error)}`\\r\\n    )\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainer } from '/bitpacks/bb-vue/misc-examples/svgchart-ui.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 60\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 20\\r\\n\\r\\n  const textSize = 5.0\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 100\\r\\n  const conHeight = 80\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n  ns.atExit(function () {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  })\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n\\r\\n  //I KNOW this is where the object is rendered/created (lines below), but I have no freakin' idea how to get it to render to another\\r\\n  //object/window in HTML/CSS/VUE or whatever.  I know it's probably as simple as calling the 'container' from this script, but I'm at a loss.\\r\\n\\r\\n  //The below line is where the graph is being 'dropped'.  Default is the overview hooks.  Would like to render to a moveable window.\\r\\n  const dropPage = doc.getElementById(SVGChartContainer)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n\\r\\n  //Uncomment the below line to have the container connect to the above constant.  By default it's set to the overview hooks.\\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('test', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('test', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('test', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n  //First argument is the ticker that it targets.  Would need to pass this off to the window wrapper?  I guess?\\r\\n  var ticker = ns.args[0]\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.tprint('Uh oh NAN:')\\r\\n            ns.tprint(moneyList)\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n        }\\r\\n\\r\\n        topText.innerHTML = 'BULLISH'\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = ticker + ': ' + ns.nFormat(ns.stock.getPrice(ticker), '$0.00a')\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'BEARISH'\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n      }\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.1'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-builder.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Keys, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class VueLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Vue module.\\r\\n   * @returns {Promise<Vue>} Vue constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = Vue({ silent: true })\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import(\\r\\n      /* 'https://unpkg.com/vue@3.2.26/dist/vue.esm-browser.prod.js' */\\r\\n      'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.esm-browser.js'\\r\\n    )\\r\\n\\r\\n    win[Keys.vueModuleKey] = module\\r\\n\\r\\n    return module\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { WinStates, TrayItemTypes } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, doc, html, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ isCollapsed, shouldDisplay }\\\">\\r\\n      <transition-group name=\\\"appTrayItemFadeUp\\\" appear>\\r\\n        <bbv-app-tray-group key=\\\"actions\\\" tray-teleport />\\r\\n        <template v-for=\\\"group in trayItems\\\" :key=\\\"group.root.uuid\\\">\\r\\n          <bbv-app-tray-group :app-title=\\\"group.root.title\\\">\\r\\n            <template :key=\\\"win.uuid\\\" v-for=\\\"win in group.winMounts\\\">\\r\\n              <bbv-button\\r\\n                :title=\\\"win.title\\\"\\r\\n                @click=\\\"toggleTrayItem(win)\\\"\\r\\n                :class=\\\"{ isOpen: win.winState == WinStates.open }\\\"\\r\\n              >\\r\\n                {{ win.title }}\\r\\n              </bbv-button>\\r\\n            </template>\\r\\n          </bbv-app-tray-group>\\r\\n        </template>\\r\\n      </transition-group>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  data() {\\r\\n    return {\\r\\n      WinStates,\\r\\n      TrayItemTypes,\\r\\n      isCollapsed: false,\\r\\n      isHidden: false,\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    trayItems() {\\r\\n      let winMountTrayItems = this.internals.store.winMounts\\r\\n        .map((winMount) => this.buildTrayItemFor(TrayItemTypes.winMount, winMount))\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let consumerRootMountTrayItems = this.internals.store.consumerRootMounts\\r\\n        .map((consumerRootMount) =>\\r\\n          this.buildTrayItemFor(TrayItemTypes.consumerRootMount, consumerRootMount)\\r\\n        )\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let winsByRoots = consumerRootMountTrayItems.reduce((acc, root) => {\\r\\n        let ownedWins = winMountTrayItems.filter((x) => x.ownerUuid == root.uuid)\\r\\n        if (ownedWins.length) {\\r\\n          acc.push({ root, winMounts: ownedWins })\\r\\n        }\\r\\n        return acc\\r\\n      }, [])\\r\\n\\r\\n      return winsByRoots\\r\\n    },\\r\\n    shouldDisplay() {\\r\\n      return this.isHidden === false && this.trayItems.length\\r\\n    },\\r\\n  },\\r\\n  mounted() {\\r\\n    this.watchGameDock()\\r\\n  },\\r\\n  methods: {\\r\\n    watchGameDock() {\\r\\n      const { useIntervalFn } = VueUse()\\r\\n      useIntervalFn(() => {\\r\\n        let gameDockSelector = doc.querySelector('.MuiDrawer-root.MuiDrawer-docked')\\r\\n        let width = gameDockSelector?.clientWidth\\r\\n        if (!width) {\\r\\n          this.isHidden = true\\r\\n          return\\r\\n        }\\r\\n        this.isHidden = false\\r\\n        if (width < 240) {\\r\\n          this.isCollapsed = true\\r\\n        } else {\\r\\n          this.isCollapsed = false\\r\\n        }\\r\\n      }, 400)\\r\\n    },\\r\\n    toggleTrayItem(trayItem) {\\r\\n      if (trayItem.winState != WinStates.open) {\\r\\n        trayItem.winMount.open()\\r\\n      } else {\\r\\n        trayItem.winMount.close()\\r\\n      }\\r\\n    },\\r\\n    buildTrayItemFor(trayItemType, trayCompatibleItem) {\\r\\n      const winTrayItem = (winMount) => {\\r\\n        const ownerOpts = winMount.owner.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.winMount,\\r\\n          uuid: winMount.uuid,\\r\\n          title: winMount.title,\\r\\n          ownerUuid: ownerOpts.__uuid,\\r\\n          winState: winMount.winState,\\r\\n          winMount: winMount,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      const rootTrayItem = (consumerRootMount) => {\\r\\n        const opts = consumerRootMount.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.consumerRootMount,\\r\\n          uuid: opts.__uuid,\\r\\n          title: opts.name,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      let trayItem\\r\\n      switch (trayItemType) {\\r\\n        case TrayItemTypes.winMount:\\r\\n          trayItem = winTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n        case TrayItemTypes.consumerRootMount:\\r\\n          trayItem = rootTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n      }\\r\\n\\r\\n      if (trayItem.kind == TrayItemTypes.winMount) {\\r\\n        if (trayItem.winMount.trayHide !== false) {\\r\\n          return null\\r\\n        }\\r\\n        if (trayItem.winMount.trayTitle) {\\r\\n          trayItem.title = trayItem.winMount.trayTitle\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return trayItem\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include typo-basic;\\r\\n\\r\\n      pointer-events: auto;\\r\\n      position: absolute;\\r\\n      z-index: 1400;\\r\\n\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n\\r\\n      display: flex;\\r\\n      align-items: stretch;\\r\\n      padding: 10px;\\r\\n      width: 249px;\\r\\n      height: 62px;\\r\\n      clip-path: inset(-60px 0 0 0);\\r\\n\\r\\n      box-shadow: inset 0px 0px 20px 0px var(--bbvBoxShadowColor1);\\r\\n      border-top: 1px solid var(--bbvBorderColor);\\r\\n      background-color: var(--bbvAppTrayBgColor);\\r\\n      transition: width 0.2s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.4s ease, transform 0.4s ease;\\r\\n\\r\\n      &:hover {\\r\\n        width: 100%;\\r\\n        z-index: 1600;\\r\\n\\r\\n        &.isCollapsed {\\r\\n          width: 100%;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        width: 57px;\\r\\n      }\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        transform: translateY(100px);\\r\\n        opacity: 0;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-active,\\r\\n      .appTrayItemFadeUp-leave-active {\\r\\n        transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-from,\\r\\n      .appTrayItemFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(50px);\\r\\n        transform-origin: left center;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.15,\"server\":\"home\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-tabs',\\r\\n  template: html` <span>__CMP_NAME__</span> `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win-manager',\\r\\n  inject: ['internals'],\\r\\n  template: `<!-- __CMP_NAME__ -->`,\\r\\n  data() {\\r\\n    return {\\r\\n      baseStackingIndex: 1510,\\r\\n      recentlyActiveWinMounts: [],\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.internals.winManager = this\\r\\n  },\\r\\n  methods: {\\r\\n    addWin(winMount) {\\r\\n      this.internals.store.winMounts.push(winMount)\\r\\n    },\\r\\n    removeWin(winMount) {\\r\\n      this.scrubRecentWinMountActivity(winMount)\\r\\n      this.internals.store.winMounts = this.internals.store.winMounts.filter((x) => {\\r\\n        return x.uuid != winMount.uuid\\r\\n      })\\r\\n    },\\r\\n    logRecentWinMountActivity(winMount) {\\r\\n      if (this.recentlyActiveWinMounts[0] == winMount) return\\r\\n      this.recentlyActiveWinMounts = [winMount, ...this.recentlyActiveWinMounts.slice(0, 4)]\\r\\n    },\\r\\n    scrubRecentWinMountActivity(winMount) {\\r\\n      this.recentlyActiveWinMounts = this.recentlyActiveWinMounts.filter((x) => x !== winMount)\\r\\n    },\\r\\n    getRecommendedPosition(winMount) {\\r\\n      const rootOffset = { x: 295, y: 30 }\\r\\n      const standardOffset = { x: 30, y: 60 }\\r\\n\\r\\n      // const prevOpenedWinMounts = this.internals.store.winMounts.filter((x) => x.hasOpened === true)\\r\\n      let curOffset = rootOffset\\r\\n      let targetWinMount = this.recentlyActiveWinMounts[1]\\r\\n      if (targetWinMount && targetWinMount.winState === WinStates.open) curOffset = standardOffset\\r\\n      if (!targetWinMount) targetWinMount = winMount\\r\\n\\r\\n      return {\\r\\n        x: parseInt(targetWinMount.style.left ?? 0) + curOffset.x,\\r\\n        y: parseInt(targetWinMount.style.top ?? 0) + curOffset.y,\\r\\n      }\\r\\n    },\\r\\n    bringToFront(winMount) {\\r\\n      let otherWins = this.internals.store.winMounts.filter((x) => winMount.uuid != x.uuid)\\r\\n      this.logRecentWinMountActivity(winMount)\\r\\n      winMount.stackingIndex = this.baseStackingIndex + otherWins.length\\r\\n      let sortedOtherWins = [...otherWins].sort((a, b) => a.stackingIndex - b.stackingIndex)\\r\\n      sortedOtherWins.forEach((x, i) => (x.stackingIndex = this.baseStackingIndex + i))\\r\\n    },\\r\\n    async closeAllWinsByCrmUuid(crmUuid) {\\r\\n      return new Promise((resolve) => {\\r\\n        this.internals.store.winMounts.forEach((winMount) => {\\r\\n          if (winMount.owner.$options.__uuid == crmUuid) {\\r\\n            winMount.close()\\r\\n          }\\r\\n        })\\r\\n        setTimeout(() => {\\r\\n          resolve()\\r\\n        }, 500)\\r\\n      })\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/4-complex-and-fun.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-json-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ fill: fill !== false, wrap: wrap !== false }\\\">\\r\\n      <div class=\\\"json_inner\\\">{{ toJson(data) }}</div>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {},\\r\\n    },\\r\\n    fill: {\\r\\n      default: false,\\r\\n    },\\r\\n    wrap: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      &.fill {\\r\\n        height: 100%;\\r\\n\\r\\n        .json_inner {\\r\\n          height: 100%;\\r\\n          max-height: unset;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.wrap {\\r\\n        .json_inner {\\r\\n          white-space: pre-wrap;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .json_inner {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 10px 5px;\\r\\n        width: 100%;\\r\\n        max-height: 300px;\\r\\n        overflow: auto;\\r\\n        white-space: pre;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-radius: 5px;\\r\\n        border-top-left-radius: 0;\\r\\n        border-bottom-left-radius: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app' },\\r\\n      rootComponent: ChartContainer,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainer = 'svgChartContainer'\\r\\n\\r\\nconst ChartContainer = {\\r\\n  name: 'svg-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"SVG Chart\\\" no-pad start-height=\\\"80%\\\" start-width=\\\"80%\\\">\\r\\n      <div v-once id=\\\"${SVGChartContainer}\\\" />\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  computed: {},\\r\\n\\r\\n  watch: {},\\r\\n\\r\\n  mounted() {},\\r\\n\\r\\n  methods: {},\\r\\n\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @see: Learn more about Vue here: https://v3.vuejs.org/\\r\\n * @see: Learn more about Sass here: https://sass-lang.com/\\r\\n * @see: Learn more about bb-vue here: https://github.com/smolgumball/bb-vue\\r\\n */\\r\\n\\r\\n// Start with a single import from the bb-vue library\\r\\nimport AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n/**\\r\\n * These functions are used to enable nicer syntax highlighting of HTML/CSS in VSCode.\\r\\n * Specifically the `prettier - code formatter`, `es6-string-css` and `es6-string-html`\\r\\n * extensions can be used.You can safely remove these imports, as long as you remove references to them below.\\r\\n **/\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// Note the standard BitBurner function signature here.\\r\\n// Always start your bb-vue apps from standard BitBurner scripts since you will\\r\\n// need to pass a valid NS instance to the AppFactory constructor!\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  // Wrap your AppFactory usage with try/catch for better error messages\\r\\n  try {\\r\\n    const myAppFactory = new AppFactory(ns)\\r\\n    const myAppHandleFn = await myAppFactory.mount({\\r\\n      // An app ID is always required\\r\\n      config: { id: 'my-first-app' },\\r\\n\\r\\n      // Additional components are optional.\\r\\n      // Here, we're adding just one extra\\r\\n      components: [MyJsonComponent],\\r\\n\\r\\n      // A root component is always required\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n\\r\\n    // You can retrieve a reference to your root component\\r\\n    // by running the function returned from mount()\\r\\n    console.debug(myAppHandleFn())\\r\\n  } catch (error) {\\r\\n    // In case something goes wrong, log it out and halt the program\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  // Every component needs a unique name\\r\\n  name: 'my-first-root-component',\\r\\n\\r\\n  // Here, we \\\"inject\\\" a helper function provided by the bb-vue library.\\r\\n  // Running this function shuts down your entire app. It is wired to a button\\r\\n  // click at the bottom of the bbv-win component, in the #actions slot!\\r\\n  inject: ['appShutdown'],\\r\\n\\r\\n  // Your template is where a lot of the magic happens. Render DOM elements here,\\r\\n  // and use various Vue-specific techniques like `v-for`, @event binding, etc.\\r\\n  // Learn more about Vue here: https://v3.vuejs.org/\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"Hello from bb-vue!\\\">\\r\\n      <p>Render your own components:</p>\\r\\n      <my-json-display :display=\\\"myData\\\" />\\r\\n\\r\\n      <p>Or use the built-in components:</p>\\r\\n      <bbv-json-display :data=\\\"jsonData\\\" />\\r\\n\\r\\n      <p>\\r\\n        Update your app's data store: <strong>{{ myData.ezCounter }}</strong><br />\\r\\n        <bbv-button @click=\\\"myData.ezCounter++\\\">Add 1</bbv-button>\\r\\n      </p>\\r\\n\\r\\n      <template #actions>\\r\\n        Or shut everything down:\\r\\n        <bbv-button @click=\\\"appShutdown\\\">Shutdown App</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  // The data function tells Vue what kind of reactive data you'd like to use.\\r\\n  // Changing these values from inside or outside the component will cause the\\r\\n  // component to update automatically! Learn more about Vue here: https://v3.vuejs.org/\\r\\n  data() {\\r\\n    return {\\r\\n      myData: { 'bb-vue-is': 'easy to use!', ezCounter: 0 },\\r\\n      jsonData: {\\r\\n        'bb-vue-components': 'NICE.exe',\\r\\n        otherFeatures: ['SCSS support', 'App tray', 'NetScript communication', '...and more!'],\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // The scss key is where you define the styles for your component.\\r\\n  scss: css`\\r\\n    /*\\r\\n      You can reference your component name with __CMP_NAME__and it\\r\\n      will be replaced at startup. This happens in both templates and style blocks!\\r\\n    */\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n\\r\\n        /*\\r\\n          Have you noticed we're writing SCSS? bb-vue supports Sass 0.11.1\\r\\n          through the sass.js tool; a bit outdated now, but good enough for some\\r\\n          dank BitBurner components. Learn more about sass.js here:\\r\\n          https://github.com/medialize/sass.js/#sassjs\\r\\n        */\\r\\n        strong {\\r\\n          font-size: 13px;\\r\\n          padding: 3px 6px 1px 6px;\\r\\n          display: inline-block;\\r\\n          border-radius: 5px;\\r\\n\\r\\n          /*\\r\\n            You can use the provided CSS theming variables to color your elements.\\r\\n            Find all of them on the <body> tag of your BitBurner debug / devtools console.\\r\\n          */\\r\\n          color: var(--bbvHackerDarkFgColor);\\r\\n          background-color: var(--bbvHackerDarkBgColor);\\r\\n        }\\r\\n\\r\\n        button {\\r\\n          margin-top: 10px;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\n// Here's a simple supporting component that displays data passed to it.\\r\\n// It converts the data to a JSON string and then display it in the whitespace\\r\\n// sensitive HTML tag <pre>\\r\\nconst MyJsonComponent = {\\r\\n  name: 'my-json-display',\\r\\n  props: {\\r\\n    display: {\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <pre><code>{{ toJson(display) }}</code></pre>\\r\\n    </div>\\r\\n  `,\\r\\n  methods: {\\r\\n    toJson(value) {\\r\\n      return JSON.stringify(value, null, '  ')\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      background-color: #0000008c;\\r\\n      color: lawngreen;\\r\\n      padding: 10px 5px;\\r\\n\\r\\n      pre,\\r\\n      code {\\r\\n        margin: 0;\\r\\n        font-family: inherit;\\r\\n        overflow: auto;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getGlobal, Keys, setGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class MittLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Mitt module.\\r\\n   * @returns {Promise<{ createBus: Function }>} Mitt constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = getGlobal(Keys.mittModuleKey)\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import('https://unpkg.com/mitt@3.0.0/dist/mitt.mjs')\\r\\n    let moduleWrapper = { createBus: module.default }\\r\\n\\r\\n    setGlobal(Keys.mittModuleKey, moduleWrapper)\\r\\n\\r\\n    return moduleWrapper\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html, Keys, Mitt, RootApp, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport AppRootStyles from '/bitpacks/bb-vue/components/internal/AppRoot.Styles.js';\\r\\nimport ConsumerRoot from '/bitpacks/bb-vue/components/internal/ConsumerRoot.js';\\r\\nimport CssManager from '/bitpacks/bb-vue/components/internal/CssManager.js';\\r\\nimport WinManager from '/bitpacks/bb-vue/components/internal/WinManager.js';\\r\\nimport AppTray from '/bitpacks/bb-vue/components/internal/AppTray.js';\\r\\nimport AppTrayGroup from '/bitpacks/bb-vue/components/internal/AppTrayGroup.js';\\r\\nimport Win from '/bitpacks/bb-vue/components/internal/Win.js';\\r\\n\\r\\nimport Button from '/bitpacks/bb-vue/components/Button.js';\\r\\nimport JsonDisplay from '/bitpacks/bb-vue/components/JsonDisplay.js';\\r\\nimport Tabs from '/bitpacks/bb-vue/components/Tabs.js';\\r\\nimport ObjectDisplay from '/bitpacks/bb-vue/components/ObjectDisplay.js';\\r\\nimport LogDisplay from '/bitpacks/bb-vue/components/LogDisplay.js';\\r\\n\\r\\nexport const ComponentLibrary = [\\r\\n  ConsumerRoot,\\r\\n  CssManager,\\r\\n  Win,\\r\\n  WinManager,\\r\\n  AppTray,\\r\\n  AppTrayGroup,\\r\\n  Button,\\r\\n  JsonDisplay,\\r\\n  ObjectDisplay,\\r\\n  LogDisplay,\\r\\n  Tabs,\\r\\n]\\r\\n\\r\\nconst rootShutdownTimeout = 2000\\r\\nexport default {\\r\\n  __libraryRoot: true,\\r\\n  name: 'bbv-app-root',\\r\\n  template: html`\\r\\n    <transition name=\\\"rootAppIntro\\\" appear>\\r\\n      <main class=\\\"__CMP_NAME__\\\" bbv-container v-if=\\\"depsLoaded\\\">\\r\\n        <transition-group name=\\\"consumerRootIntro\\\" appear>\\r\\n          <bbv-consumer-root\\r\\n            v-for=\\\"def in consumerRootDefs\\\"\\r\\n            :key=\\\"def.__uuid\\\"\\r\\n            :id=\\\"def.__uuid\\\"\\r\\n            :consumer-root-def=\\\"def\\\"\\r\\n            @consumer-root-mounted=\\\"mountConsumerRoot\\\"\\r\\n            @consumer-root-unmount-requested=\\\"unmountConsumerRootByUuid\\\"\\r\\n            @root-shutdown-requested=\\\"rootShutdown\\\"\\r\\n          />\\r\\n        </transition-group>\\r\\n        <bbv-css-manager :consumer-root-defs=\\\"consumerRootDefs\\\" />\\r\\n        <bbv-win-manager />\\r\\n        <bbv-app-tray />\\r\\n      </main>\\r\\n    </transition>\\r\\n  `,\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n    return {\\r\\n      depsLoaded: false,\\r\\n      hasSeenCrms: false,\\r\\n      rootShutdownTimeoutFn: null,\\r\\n      internals: {\\r\\n        bus: bus,\\r\\n        send: bus.emit,\\r\\n        listen: bus.on,\\r\\n        store: {\\r\\n          consumerRootDefs: [],\\r\\n          consumerRootMounts: [],\\r\\n          winMounts: [],\\r\\n        },\\r\\n        winManager: null,\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.loadDeps()\\r\\n  },\\r\\n  provide() {\\r\\n    return this.$data\\r\\n  },\\r\\n  computed: {\\r\\n    isReady() {\\r\\n      return this.internals.winManager\\r\\n    },\\r\\n    consumerRootDefs() {\\r\\n      return this.isReady ? this.allCrds : []\\r\\n    },\\r\\n    allCrds() {\\r\\n      return this.internals.store.consumerRootDefs\\r\\n    },\\r\\n    allCrms() {\\r\\n      return this.internals.store.consumerRootMounts\\r\\n    },\\r\\n  },\\r\\n  watch: {\\r\\n    /**\\r\\n     * Watch for CRMs. When seen some, notify AppRoot that some have\\r\\n     * been added. Wait for them to go away. Once they are gone, do a self\\r\\n     * cleanup after `rootShutdownTimeout` ms. Shutdown timeout can be\\r\\n     * cancelled by new CRM additions.\\r\\n     */\\r\\n    'internals.store.consumerRootMounts': {\\r\\n      handler(newVal) {\\r\\n        // Ensure AppRoot knows CRMs have been seen added at some point\\r\\n        if (this.hasSeenCrms !== true && newVal?.length >= 1) {\\r\\n          this.hasSeenCrms = true\\r\\n        }\\r\\n\\r\\n        // If a CRM is removed, if it was the last, and if AppRoot has seen CRMs before\\r\\n        if (this.hasSeenCrms === true && newVal?.length === 0) {\\r\\n          if (this.rootShutdownTimeoutFn === null) {\\r\\n            // Create a shutdown timeout func to end the entire RootApp\\r\\n            this.rootShutdownTimeoutFn = setTimeout(() => {\\r\\n              console.debug('bb-vue: AppRoot cannot find any CRMs and is shutting down')\\r\\n              this.rootShutdown()\\r\\n            }, rootShutdownTimeout)\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Clear an ongoing shutdown timeout if a new CRM is added\\r\\n        if (newVal?.length >= 1 && this.rootShutdownTimeoutFn !== null) {\\r\\n          clearTimeout(this.rootShutdownTimeoutFn)\\r\\n          this.rootShutdownTimeoutFn = null\\r\\n        }\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  methods: {\\r\\n    async loadDeps() {\\r\\n      // console.time('AppRoot:loadDeps')\\r\\n      if (!win[Keys.vueUseModuleKey]) {\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/shared@7.5.3/index.iife.min.js')\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/core@7.5.3/index.iife.min.js')\\r\\n      }\\r\\n      this.depsLoaded = true\\r\\n      // console.timeEnd('AppRoot:loadDeps')\\r\\n    },\\r\\n    addConsumerRootDef(consumerRootDef) {\\r\\n      const { markRaw } = Vue()\\r\\n      let rawConsumerRootDef = markRaw(consumerRootDef)\\r\\n      this.internals.store.consumerRootDefs = [\\r\\n        ...this.allCrds.filter((x) => {\\r\\n          return x.__uuid !== rawConsumerRootDef.__uuid\\r\\n        }),\\r\\n        rawConsumerRootDef,\\r\\n      ]\\r\\n\\r\\n      return () => this.findConsumerRootMount(rawConsumerRootDef.__uuid)\\r\\n    },\\r\\n    mountConsumerRoot(consumerRootMount) {\\r\\n      this.internals.store.consumerRootMounts = [\\r\\n        ...this.allCrms.filter((x) => {\\r\\n          return x.$options.__uuid !== consumerRootMount.$options.__uuid\\r\\n        }),\\r\\n        consumerRootMount,\\r\\n      ]\\r\\n    },\\r\\n    async unmountConsumerRootByUuid(crmUuid) {\\r\\n      await this.internals.winManager.closeAllWinsByCrmUuid(crmUuid)\\r\\n      this.internals.store.consumerRootMounts = this.allCrms.filter((x) => {\\r\\n        return x.$options.__uuid !== crmUuid\\r\\n      })\\r\\n      this.internals.store.consumerRootDefs = this.allCrds.filter((x) => {\\r\\n        return x.__uuid !== crmUuid\\r\\n      })\\r\\n    },\\r\\n    findConsumerRootMount(rootMountName) {\\r\\n      return (\\r\\n        this.allCrms.find((x) => {\\r\\n          return rootMountName == x.$options.__uuid\\r\\n        }) ?? null\\r\\n      )\\r\\n    },\\r\\n    async rootShutdown() {\\r\\n      for (const x of this.allCrms) {\\r\\n        await this.unmountConsumerRootByUuid(x.$options.__uuid)\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        RootApp.cleanup()\\r\\n      }, 50)\\r\\n    },\\r\\n  },\\r\\n  ...AppRootStyles,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const asciichart = function (exports) {\\r\\n  exports.black = '\\\\x1b[30m'\\r\\n  exports.red = '\\\\x1b[31m'\\r\\n  exports.green = '\\\\x1b[32m'\\r\\n  exports.yellow = '\\\\x1b[33m'\\r\\n  exports.blue = '\\\\x1b[34m'\\r\\n  exports.magenta = '\\\\x1b[35m'\\r\\n  exports.cyan = '\\\\x1b[36m'\\r\\n  exports.lightgray = '\\\\x1b[37m'\\r\\n  exports.default = '\\\\x1b[39m'\\r\\n  exports.darkgray = '\\\\x1b[90m'\\r\\n  exports.lightred = '\\\\x1b[91m'\\r\\n  exports.lightgreen = '\\\\x1b[92m'\\r\\n  exports.lightyellow = '\\\\x1b[93m'\\r\\n  exports.lightblue = '\\\\x1b[94m'\\r\\n  exports.lightmagenta = '\\\\x1b[95m'\\r\\n  exports.lightcyan = '\\\\x1b[96m'\\r\\n  exports.white = '\\\\x1b[97m'\\r\\n  exports.reset = '\\\\x1b[0m'\\r\\n\\r\\n  function colored(char, color) {\\r\\n    // do not color it if color is not specified\\r\\n    return color === undefined ? char : color + char + exports.reset\\r\\n  }\\r\\n\\r\\n  exports.colored = colored\\r\\n\\r\\n  exports.plot = function (series, cfg = undefined) {\\r\\n    // this function takes both one array and array of arrays\\r\\n    // if an array of numbers is passed it is transformed to\\r\\n    // an array of exactly one array with numbers\\r\\n    if (typeof series[0] == 'number') {\\r\\n      series = [series]\\r\\n    }\\r\\n\\r\\n    cfg = typeof cfg !== 'undefined' ? cfg : {}\\r\\n\\r\\n    let min = typeof cfg.min !== 'undefined' ? cfg.min : series[0][0]\\r\\n    let max = typeof cfg.max !== 'undefined' ? cfg.max : series[0][0]\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      for (let i = 0; i < series[j].length; i++) {\\r\\n        min = Math.min(min, series[j][i])\\r\\n        max = Math.max(max, series[j][i])\\r\\n      }\\r\\n    }\\r\\n\\r\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\r\\n    let range = Math.abs(max - min)\\r\\n    let offset = typeof cfg.offset !== 'undefined' ? cfg.offset : 3\\r\\n    let padding = typeof cfg.padding !== 'undefined' ? cfg.padding : '           '\\r\\n    let height = typeof cfg.height !== 'undefined' ? cfg.height : range\\r\\n    let colors = typeof cfg.colors !== 'undefined' ? cfg.colors : []\\r\\n    let ratio = range !== 0 ? height / range : 1\\r\\n    let min2 = Math.round(min * ratio)\\r\\n    let max2 = Math.round(max * ratio)\\r\\n    let rows = Math.abs(max2 - min2)\\r\\n    let width = 0\\r\\n    for (let i = 0; i < series.length; i++) {\\r\\n      width = Math.max(width, series[i].length)\\r\\n    }\\r\\n    width = width + offset\\r\\n    let symbols = typeof cfg.symbols !== 'undefined' ? cfg.symbols : defaultSymbols\\r\\n    let format =\\r\\n      typeof cfg.format !== 'undefined'\\r\\n        ? cfg.format\\r\\n        : function (x) {\\r\\n            return (padding + x.toFixed(2)).slice(-padding.length)\\r\\n          }\\r\\n\\r\\n    let result = new Array(rows + 1) // empty space\\r\\n    for (let i = 0; i <= rows; i++) {\\r\\n      result[i] = new Array(width)\\r\\n      for (let j = 0; j < width; j++) {\\r\\n        result[i][j] = ' '\\r\\n      }\\r\\n    }\\r\\n    for (let y = min2; y <= max2; ++y) {\\r\\n      // axis + labels\\r\\n      let label = format(rows > 0 ? max - ((y - min2) * range) / rows : y, y - min2)\\r\\n      result[y - min2][Math.max(offset - label.length, 0)] = label\\r\\n      result[y - min2][offset - 1] = y == 0 ? symbols[0] : symbols[1]\\r\\n    }\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      let currentColor = colors[j % colors.length]\\r\\n      let y0 = Math.round(series[j][0] * ratio) - min2\\r\\n      result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\r\\n\\r\\n      for (let x = 0; x < series[j].length - 1; x++) {\\r\\n        // plot the line\\r\\n        let y0 = Math.round(series[j][x + 0] * ratio) - min2\\r\\n        let y1 = Math.round(series[j][x + 1] * ratio) - min2\\r\\n        if (y0 == y1) {\\r\\n          result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\r\\n        } else {\\r\\n          result[rows - y1][x + offset] = colored(y0 > y1 ? symbols[5] : symbols[6], currentColor)\\r\\n          result[rows - y0][x + offset] = colored(y0 > y1 ? symbols[7] : symbols[8], currentColor)\\r\\n          let from = Math.min(y0, y1)\\r\\n          let to = Math.max(y0, y1)\\r\\n          for (let y = from + 1; y < to; y++) {\\r\\n            result[rows - y][x + offset] = colored(symbols[9], currentColor)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return result\\r\\n      .map(function (x) {\\r\\n        return x.join('')\\r\\n      })\\r\\n      .join('\\\\n')\\r\\n  }\\r\\n}\\r\\n\\r\\nglobalThis.asciichart = {}\\r\\nasciichart(globalThis.asciichart)\\r\\n\\r\\nexport default globalThis.asciichart\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray-group',\\r\\n  props: ['appTitle', 'trayTeleport'],\\r\\n  template: html`\\r\\n    <transition name=\\\"appTrayGroupFadeUp\\\" appear>\\r\\n      <div\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n        :class=\\\"{ trayTeleport: trayTeleport !== undefined }\\\"\\r\\n        :id=\\\"trayTeleport !== undefined ? 'app-tray' : undefined\\\"\\r\\n        :title=\\\"appTitle\\\"\\r\\n      >\\r\\n        <template v-if=\\\"appTitle\\\">\\r\\n          <div class=\\\"app_title\\\">{{ appTitle }}</div>\\r\\n        </template>\\r\\n        <slot />\\r\\n      </div>\\r\\n    </transition>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      display: flex;\\r\\n      padding: 5px;\\r\\n      background-color: var(--bbvWinTitlebarBgColor);\\r\\n      transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      position: relative;\\r\\n\\r\\n      &.trayTeleport {\\r\\n        background-color: transparent;\\r\\n        padding: 5px 0;\\r\\n\\r\\n        .bbv-button {\\r\\n          padding-bottom: 3px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.trayTeleport:empty {\\r\\n        clip-path: inset(0 100%);\\r\\n      }\\r\\n\\r\\n      &:hover {\\r\\n        .app_title {\\r\\n          opacity: 1;\\r\\n          transform: translateY(0) scale(1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &:not(:first-child) {\\r\\n        margin-left: 12px;\\r\\n      }\\r\\n\\r\\n      .app_title {\\r\\n        position: absolute;\\r\\n        bottom: calc(100% + 6px);\\r\\n        padding: 6px 12px;\\r\\n        font-size: 14px;\\r\\n        text-align: center;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        z-index: -1;\\r\\n        left: 5px;\\r\\n        transform: translateY(30px) scale(0.2);\\r\\n        transform-origin: bottom left;\\r\\n        border-radius: 2px;\\r\\n        box-shadow: 0px 0px 3px 0px var(--bbvBoxShadowColor2);\\r\\n        color: var(--bbvAppInnerFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\\r\\n      }\\r\\n\\r\\n      .bbv-button {\\r\\n        color: var(--bbvAppTrayFgColor);\\r\\n        padding: 6px 7px;\\r\\n        overflow: hidden;\\r\\n        white-space: nowrap;\\r\\n        border-bottom: 2px solid transparent;\\r\\n        transition: border-color 0.2s ease;\\r\\n        line-height: 1;\\r\\n\\r\\n        &.isOpen {\\r\\n          border-bottom-color: var(--bbvAppTrayFgColor);\\r\\n          background-color: var(--bbvButtonHoverBgColor);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .bbv-button + .bbv-button {\\r\\n        margin-left: 8px;\\r\\n      }\\r\\n\\r\\n      &.appTrayGroupFadeUp-enter-from,\\r\\n      &.appTrayGroupFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(75px);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\r\\n// prettier-ignore\\r\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\r\\n  try {\\r\\n    ns.disableLog('disableLog');\\r\\n    ns.disableLog('asleep');\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\r\\n      rootComponent: ChartContainerwallstreet,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n\\r\\n\\r\\n  // Listen for specific event\\r\\n  let autoTrader = false\\r\\n  let enableAutoTrader = false\\r\\n  let wantsShutdown = false\\r\\n  let buyMaxLongShares = false\\r\\n  let closeLongPosition = false\\r\\n  let closeShortPosition = false\\r\\n  let buyMaxShortShares = false\\r\\n  let sellAllShares = false\\r\\n  let quickStrangle = false\\r\\n  let longHedge = false\\r\\n  let shortHedge = false\\r\\n  let splitPlay = false\\r\\n  let stockCrawler = false\\r\\n\\r\\n  //Ticker Chart Storage\\r\\n  let loadECP = false\\r\\n  let loadMGCP = false\\r\\n  let loadBLD = false\\r\\n  let loadCLRK = false\\r\\n  let loadOMTK = false\\r\\n  let loadFSIG = false\\r\\n  let loadKGI = false\\r\\n  let loadFLCM = false\\r\\n  let loadSTM = false\\r\\n  let loadDCOMM = false\\r\\n  let loadHLS = false\\r\\n  let loadVITA = false\\r\\n  let loadICRS = false\\r\\n  let loadUNV = false\\r\\n  let loadAERO = false\\r\\n  let loadOMN = false\\r\\n  let loadSLRS = false\\r\\n  let loadGPH = false\\r\\n  let loadNVMD = false\\r\\n  let loadWDS = false\\r\\n  let loadLXO = false\\r\\n  let loadRHOC = false\\r\\n  let loadAPHE = false\\r\\n  let loadSYSC = false\\r\\n  let loadCTK = false\\r\\n  let loadNTLK = false\\r\\n  let loadOMGA = false\\r\\n  let loadFNS = false\\r\\n  let loadJGN = false\\r\\n  let loadSGC = false\\r\\n  let loadCTYS = false\\r\\n  let loadMDYN = false\\r\\n  let loadTITN = false\\r\\n  //End of Ticker Chart Storage\\r\\n\\r\\n  let bus = Mitt().createBus()\\r\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\r\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\r\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\r\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\r\\n  bus.on('closeLong', () => (closeLongPosition = true))\\r\\n  bus.on('closeShort', () => (closeShortPosition = true))\\r\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\r\\n  bus.on('quickPlay', () => (quickStrangle = true))\\r\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\r\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\r\\n  bus.on('quickSplitPlay', () => (splitPlay = true))\\r\\n  bus.on('stockCrawler', () => (stockCrawler = true))\\r\\n\\r\\n  //Ticker Chart Bus Triggers\\r\\n  bus.on('loadECP', () => (loadECP = true))\\r\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\r\\n  bus.on('loadBLD', () => (loadBLD = true))\\r\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\r\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\r\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\r\\n  bus.on('loadKGI', () => (loadKGI = true))\\r\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\r\\n  bus.on('loadSTM', () => (loadSTM = true))\\r\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\r\\n  bus.on('loadHLS', () => (loadHLS = true))\\r\\n  bus.on('loadVITA', () => (loadVITA = true))\\r\\n  bus.on('loadICRS', () => (loadICRS = true))\\r\\n  bus.on('loadUNV', () => (loadUNV = true))\\r\\n  bus.on('loadAERO', () => (loadAERO = true))\\r\\n  bus.on('loadOMN', () => (loadOMN = true))\\r\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\r\\n  bus.on('loadGPH', () => (loadGPH = true))\\r\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\r\\n  bus.on('loadWDS', () => (loadWDS = true))\\r\\n  bus.on('loadLXO', () => (loadLXO = true))\\r\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\r\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\r\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\r\\n  bus.on('loadCTK', () => (loadCTK = true))\\r\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\r\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\r\\n  bus.on('loadFNS', () => (loadFNS = true))\\r\\n  bus.on('loadJGN', () => (loadJGN = true))\\r\\n  bus.on('loadSGC', () => (loadSGC = true))\\r\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\r\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\r\\n  bus.on('loadTITN', () => (loadTITN = true))\\r\\n  //End of Ticker Chart Bus Triggers\\r\\n  setGlobal('tickerBus', bus)\\r\\n\\r\\n  // Instead of closing, let's keep this running\\r\\n\\r\\n  while (wantsShutdown == false) {\\r\\n\\r\\n    //init chart loading triggers\\r\\n    if (loadECP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ECP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadECP = false;\\r\\n    }\\r\\n    if (loadMGCP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MGCP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMGCP = false;\\r\\n    }\\r\\n    if (loadBLD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"BLD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadBLD = false;\\r\\n    }\\r\\n    if (loadCLRK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CLRK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCLRK = false;\\r\\n    }\\r\\n    if (loadOMTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMTK = false;\\r\\n    }\\r\\n    if (loadFSIG == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FSIG\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFSIG = false;\\r\\n    }\\r\\n    if (loadKGI == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"KGI\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadKGI = false;\\r\\n    }\\r\\n    if (loadFLCM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FLCM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFLCM = false;\\r\\n    }\\r\\n    if (loadSTM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"STM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSTM = false;\\r\\n    }\\r\\n    if (loadDCOMM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"DCOMM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadDCOMM = false;\\r\\n    }\\r\\n    if (loadHLS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"HLS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadHLS = false;\\r\\n    }\\r\\n    if (loadVITA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"VITA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadVITA = false;\\r\\n    }\\r\\n    if (loadICRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ICRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadICRS = false;\\r\\n    }\\r\\n    if (loadUNV == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"UNV\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadUVN = false;\\r\\n    }\\r\\n    if (loadAERO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"AERO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAERO = false;\\r\\n    }\\r\\n    if (loadOMN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMN = false;\\r\\n    }\\r\\n    if (loadSLRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SLRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSLRS = false;\\r\\n    }\\r\\n    if (loadGPH == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"GPH\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadGPH = false;\\r\\n    }\\r\\n    if (loadNVMD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NVMD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNVMD = false;\\r\\n    }\\r\\n    if (loadWDS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"WDS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadWDS = false;\\r\\n    }\\r\\n    if (loadLXO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"LXO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadLXO = false;\\r\\n    }\\r\\n    if (loadRHOC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"RHOC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadRHOC = false;\\r\\n    }\\r\\n    if (loadAPHE == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"APHE\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAPHE = false;\\r\\n    }\\r\\n    if (loadSYSC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SYSC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSYSC = false;\\r\\n    }\\r\\n    if (loadCTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTK = false;\\r\\n    }\\r\\n    if (loadNTLK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NTLK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNTLK = false;\\r\\n    }\\r\\n    if (loadOMGA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMGA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMGA = false;\\r\\n    }\\r\\n    if (loadFNS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FNS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFNS = false;\\r\\n    }\\r\\n    if (loadJGN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"JGN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadJGN = false;\\r\\n    }\\r\\n    if (loadSGC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SGC\\\")\\r\\n\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSGC = false;\\r\\n    }\\r\\n    if (loadCTYS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTYS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTYS = false;\\r\\n    }\\r\\n    if (loadMDYN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MDYN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMDYN = false;\\r\\n    }\\r\\n    if (loadTITN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"TITN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadTITN = false;\\r\\n    }\\r\\n\\r\\n //Stock Crawler Module\\r\\n    if (stockCrawler == true) {\\r\\n      ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\r\\n      var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\r\\n        for (const target of market) {\\r\\n        var tvol = ns.stock.getVolatility(target);\\r\\n        var tfor = ns.stock.getForecast(target);\\r\\n          if (tvol > 0.01 && tfor > 0.6) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n          if (tvol > 0.01 && tfor < 0.4) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n        await ns.asleep(100);\\r\\n      stockCrawler = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //failsafe exit condition\\r\\n    if (wantsShutdown == true) {\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n    if(ns.peek(3) != \\\"NULL PORT DATA\\\") {\\r\\n    let loadedticker = ns.peek(3);\\r\\n    let position = ns.stock.getPosition(loadedticker);\\r\\n\\r\\n    if (buyMaxLongShares == true) {\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxLongShares = false;\\r\\n\\r\\n    }\\r\\n    if (buyMaxShortShares == true) {\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxShortShares = false;\\r\\n\\r\\n    }\\r\\n    if (sellAllShares == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED **ALL** POSITIONS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      sellAllShares = false;\\r\\n\\r\\n    }\\r\\n    if (closeLongPosition == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeLongPosition = false;\\r\\n\\r\\n    }\\r\\n    if (closeShortPosition == true) {\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeShortPosition = false;\\r\\n\\r\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] > '1' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] > '1' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxLongShares = true;\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxShortShares = true;\\r\\n\\r\\n\\r\\n      //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxLongShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getAskPrice(loadedticker) * 1.05), \\\"LimitSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getBidPrice(loadedticker) * 0.90), \\\"StopSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxShortShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getAskPrice(loadedticker) * 0.95), \\\"LimitSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getBidPrice(loadedticker) * 1.10), \\\"StopSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (longHedge == true && position[0] == 0) {\\r\\n      ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      longHedge = false;\\r\\n\\r\\n    }\\r\\n    if (shortHedge == true && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      shortHedge = false;\\r\\n\\r\\n    }\\r\\n    if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      splitPlay = false;\\r\\n\\r\\n    }\\r\\n\\r\\n    //Auto-Trader button configuration.  Don't touch.\\r\\n\\r\\n    if (enableAutoTrader == true) {\\r\\n      let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\r\\n\\r\\n      if (autoTradeConfirm == true) {\\r\\n        ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = true;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n      if (autoTradeConfirm == false) {\\r\\n        ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = false;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n    }\\r\\n\\r\\n    await ns.asleep(500)\\r\\n\\r\\n  \\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\r\\nconst ChartContainerwallstreet = {\\r\\n  name: 'svg-chart-wallstreet',\\r\\n  inject: ['appShutdown',],\\r\\n  template: html`\\r\\n    <bbv-win\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      title=\\\"WSE Active Trader\\\"\\r\\n      no-pad\\r\\n      start-height=\\\"691px\\\"\\r\\n      start-width=\\\"539px\\\"\\r\\n    >\\r\\n \\r\\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\r\\n      <div>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      </div>\\r\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\r\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\r\\n      <div>\\r\\n      <button @click=\\\"quickStrangle\\\">QUICK STRANGLE</button>\\r\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\r\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\r\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      <details align=\\\"right\\\"><summary>EXTRA TOOLS</summary>\\r\\n      <div>\\r\\n      <button align=\\\"right\\\" @click=\\\"stockCrawler\\\">STOCK CRAWLER</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"\\\">SCALPER[SOON!]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"enableAutoTrade\\\">Enable/Disable Auto-Trader (BETA)</button>\\r\\n      </div>\\r\\n      </details>\\r\\n\\r\\n      <template #actions>\\r\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    shutdownAll() {\\r\\n      getGlobal('tickerBus').emit('wantsShutdown')\\r\\n      this.appShutdown()\\r\\n    },\\r\\n    buyMaxLong() {\\r\\n      getGlobal('tickerBus').emit('buyMaxLong')\\r\\n    },\\r\\n    buyMaxShort() {\\r\\n      getGlobal('tickerBus').emit('buyMaxShort')\\r\\n    },\\r\\n    closeAllPositions() {\\r\\n      getGlobal('tickerBus').emit('closeAllPositions')\\r\\n    },\\r\\n    sellMaxLong() {\\r\\n      getGlobal('tickerBus').emit('closeLong')\\r\\n    },\\r\\n    sellMaxShort() {\\r\\n      getGlobal('tickerBus').emit('closeShort')\\r\\n    },\\r\\n    enableAutoTrade() {\\r\\n      getGlobal('tickerBus').emit('autoTrade')\\r\\n    },\\r\\n    quickStrangle() {\\r\\n      getGlobal('tickerBus').emit('quickPlay')\\r\\n    },\\r\\n    quickSplit() {\\r\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\r\\n    },\\r\\n    longHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\r\\n    },\\r\\n    shortHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\r\\n    },\\r\\n    stockCrawler() {\\r\\n      getGlobal('tickerBus').emit('stockCrawler')\\r\\n    },\\r\\n    loadECP() {\\r\\n      getGlobal('tickerBus').emit('loadECP')\\r\\n    },\\r\\n    loadMGCP() {\\r\\n      getGlobal('tickerBus').emit('loadMGCP')\\r\\n    },\\r\\n    loadBLD() {\\r\\n      getGlobal('tickerBus').emit('loadBLD')\\r\\n    },\\r\\n    loadCLRK() {\\r\\n      getGlobal('tickerBus').emit('loadCLRK')\\r\\n    },\\r\\n    loadOMTK() {\\r\\n      getGlobal('tickerBus').emit('loadOMTK')\\r\\n    },\\r\\n    loadFSIG() {\\r\\n      getGlobal('tickerBus').emit('loadFSIG')\\r\\n    },\\r\\n    loadKGI() {\\r\\n      getGlobal('tickerBus').emit('loadKGI')\\r\\n    },\\r\\n    loadFLCM() {\\r\\n      getGlobal('tickerBus').emit('loadFLCM')\\r\\n    },\\r\\n    loadSTM() {\\r\\n      getGlobal('tickerBus').emit('loadSTM')\\r\\n    },\\r\\n    loadDCOMM() {\\r\\n      getGlobal('tickerBus').emit('loadDCOMM')\\r\\n    },\\r\\n    loadHLS() {\\r\\n      getGlobal('tickerBus').emit('loadHLS')\\r\\n    },\\r\\n    loadVITA() {\\r\\n      getGlobal('tickerBus').emit('loadVITA')\\r\\n    },\\r\\n    loadICRS() {\\r\\n      getGlobal('tickerBus').emit('loadICRS')\\r\\n    },\\r\\n    loadUNV() {\\r\\n      getGlobal('tickerBus').emit('loadUNV')\\r\\n    },\\r\\n    loadAERO() {\\r\\n      getGlobal('tickerBus').emit('loadAERO')\\r\\n    },\\r\\n    loadOMN() {\\r\\n      getGlobal('tickerBus').emit('loadOMN')\\r\\n    },\\r\\n    loadSLRS() {\\r\\n      getGlobal('tickerBus').emit('loadSLRS')\\r\\n    },\\r\\n    loadGPH() {\\r\\n      getGlobal('tickerBus').emit('loadGPH')\\r\\n    },\\r\\n    loadNVMD() {\\r\\n      getGlobal('tickerBus').emit('loadNVMD')\\r\\n    },\\r\\n    loadWDS() {\\r\\n      getGlobal('tickerBus').emit('loadWDS')\\r\\n    },\\r\\n    loadLXO() {\\r\\n      getGlobal('tickerBus').emit('loadLXO')\\r\\n    },\\r\\n    loadRHOC() {\\r\\n      getGlobal('tickerBus').emit('loadRHOC')\\r\\n    },\\r\\n    loadAPHE() {\\r\\n      getGlobal('tickerBus').emit('loadAPHE')\\r\\n    },\\r\\n    loadSYSC() {\\r\\n      getGlobal('tickerBus').emit('loadSYSC')\\r\\n    },\\r\\n    loadCTK() {\\r\\n      getGlobal('tickerBus').emit('loadCTK')\\r\\n    },\\r\\n    loadNTLK() {\\r\\n      getGlobal('tickerBus').emit('loadNTLK')\\r\\n    },\\r\\n    loadOMGA() {\\r\\n      getGlobal('tickerBus').emit('loadOMGA')\\r\\n    },\\r\\n    loadFNS() {\\r\\n      getGlobal('tickerBus').emit('loadFNS')\\r\\n    },\\r\\n    loadJGN() {\\r\\n      getGlobal('tickerBus').emit('loadJGN')\\r\\n    },\\r\\n    loadSGC() {\\r\\n      getGlobal('tickerBus').emit('loadSGC')\\r\\n    },\\r\\n    loadCTYS() {\\r\\n      getGlobal('tickerBus').emit('loadCTYS')\\r\\n    },\\r\\n    loadMDYN() {\\r\\n      getGlobal('tickerBus').emit('loadMDYN')\\r\\n    },\\r\\n    loadTITN() {\\r\\n      getGlobal('tickerBus').emit('loadTITN')\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f4269089-7211-47e8-ba07-f8285ea9480b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6733ba12-d754-409d-878d-ceec4b642bac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///289452bc-634c-4419-a7cf-163daca3a2e2\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///10042b83-0ac0-4fd7-a472-f53bc7dafd8f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///5fa1b1d9-6b3c-4718-af8f-26eaa00abfab\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///44734d10-322a-4289-973e-43ba496c9db8\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///cf042072-d883-4823-a2c6-5b524db3e53a\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c80cc2b7-32ed-4aef-a186-08d95e818549\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///50fa5a9c-48ad-461c-8a0b-8cfb553fd653\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b46e31bd-8210-4a52-9550-0f36be97d739\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///56440446-b477-4bef-b2a5-955fd8bc842a\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0e279641-5ef9-4b48-a081-e1b9bbd6911b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///db83ee49-da6f-44aa-a929-3b8c3c1b8076\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///b4fb9037-c476-403f-ad9b-3b8598d398dc\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///64a90fe5-9cef-404f-9bba-a5b69a1f1a8c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///bfbf10dc-d484-4f5b-8c8b-ac80fe6ef95d\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6200498f-f3a8-4c7a-9632-82e07f036e9d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///21bf6c5f-2a34-43c9-af61-7e37220cfe35\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a4b88b0d-0975-492e-a0d9-42fcb117f697\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///4436db7e-d51d-43eb-8a41-e48f7bdcfe61\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///f0eab529-e0b5-41d1-b025-2b7e88a5c8d1\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///0b68f26e-5fd3-411a-9812-a5fa10499077\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///984109b7-8cc0-45f1-a1a5-2fd3240e2395\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4a736528-e78e-4b72-9d0e-7b23c45a7a8d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///dc5f4bc0-30d6-4b8b-8c49-cc41ee8675fc\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///52507d58-557f-4030-b42d-3c01e49a9192\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///5c1f2a73-9b46-426c-92f8-71cd1ca6919f\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///47f6f722-cc73-429f-91ab-0d158f361b20\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///9376e750-eee0-4096-a409-bf8d248bb4f8\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5b3187bb-7a80-472a-ab68-820d65fd0873\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///f7a53e7c-901c-4de0-8172-ba61c60d3b51\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///d6918535-2f00-4742-b5d6-829303958de7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///2fac9b10-c97b-4b7e-bd34-af8f4cb5c5ff\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7de4b446-11e2-48e9-84f4-b1322589cabb\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///3aeb882e-3e77-4c0f-991d-ea71a633cf1f\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1cb626f5-399d-4f2d-8ccc-e40ba5bb28a3\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///0325437a-8332-449d-b1d9-37d7dd8bca2a\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///893ebdf0-9491-4c82-bd55-af10baad4334\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///ea1d25ca-b19e-42bc-ab91-d9d32ed7a563\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4921abec-2570-43b3-a848-0fbe86dd5f91\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///54b4c6cd-8cec-471b-af63-eca8eb9acd99\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///639527e6-975a-4841-baa8-85de6fc78988\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///46d78add-0cd0-48d3-b980-a1a099706747\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///70731fa8-77b3-4a94-a6f8-d99c204152e0\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"blob:file:///390408d1-5a95-4d89-9687-6ab3c9591448\",\"moduleSequenceNumber\":22737}],\"dependents\":[],\"ramUsage\":32.15,\"server\":\"home\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n  var ticker = ns.args[0];\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 300\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 10\\r\\n\\r\\n  const textSize = 2.5\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 80\\r\\n  const conHeight = 60\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n  await ns.clearPort(1)\\r\\n  await ns.clearPort(2)\\r\\n  await ns.writePort(3, ticker)\\r\\n\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n //Give the chart time to load.\\r\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n  \\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('LOADING VOLATILITY...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    var ticker = ns.args[0];\\r\\n    var position = ns.stock.getPosition(ticker)\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n        await ns.clearPort(1);\\r\\n        await ns.clearPort(2);\\r\\n        \\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n      await ns.clearPort(1)\\r\\n      await ns.clearPort(2)\\r\\n      await ns.writePort(1, (Math.max(...moneyList)))\\r\\n      await ns.writePort(2, (Math.min(...moneyList)))\\r\\n      await ns.writePort(3, ticker)\\r\\n        var fiveminavg = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.asleep(5000);\\r\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n\\r\\n        }\\r\\n        \\r\\n        topText.innerHTML = 'FORECAST: ' + Math.floor((ns.stock.getForecast(ns.sprintf(ticker))*100)) + '%' + ' || 5MIN HIGH: ' + ns.nFormat(ns.peek(1), '$0.00a') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+fiveminavg+' AVG)'\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'VOL: ' + ns.nFormat(ns.stock.getVolatility(ns.sprintf(ticker)), '0.00%') + ' || 5MIN LOW: ' + ns.nFormat(ns.peek(2), '$0.00a') + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n        \\r\\n      }\\r\\n\\r\\n\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n    await ns.clearPort(1);\\r\\n    await ns.clearPort(2);\\r\\n\\r\\n    if (ns.isRunning(\\\"wallstreet.js\\\", \\\"home\\\") == false) {\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.0'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n  \\r\\n}\\r\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\n// prettier-ignore\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\n\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\nexport async function main(ns) {\\n\\n\\n  try {\\n    ns.disableLog('disableLog');\\n    ns.disableLog('asleep');\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    await new AppFactory(ns).mount({\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\n      rootComponent: ChartContainerwallstreet,\\n    })\\n  } catch (error) {\\n    console.error(error)\\n    ns.tprint(error.toString())\\n    ns.exit()\\n  }\\n\\n\\n\\n  // Listen for specific event\\n  let autoTrader = false\\n  let enableAutoTrader = false\\n  let wantsShutdown = false\\n  let buyMaxLongShares = false\\n  let closeLongPosition = false\\n  let closeShortPosition = false\\n  let buyMaxShortShares = false\\n  let sellAllShares = false\\n  //let quickStrangle = false\\n  let longHedge = false\\n  let shortHedge = false\\n  let splitPlay = false\\n  //let stockCrawler = false\\n  let shortStrangle = false\\n  let longStrangle = false\\n\\n  //Ticker Chart Storage\\n  let loadECP = false\\n  let loadMGCP = false\\n  let loadBLD = false\\n  let loadCLRK = false\\n  let loadOMTK = false\\n  let loadFSIG = false\\n  let loadKGI = false\\n  let loadFLCM = false\\n  let loadSTM = false\\n  let loadDCOMM = false\\n  let loadHLS = false\\n  let loadVITA = false\\n  let loadICRS = false\\n  let loadUNV = false\\n  let loadAERO = false\\n  let loadOMN = false\\n  let loadSLRS = false\\n  let loadGPH = false\\n  let loadNVMD = false\\n  let loadWDS = false\\n  let loadLXO = false\\n  let loadRHOC = false\\n  let loadAPHE = false\\n  let loadSYSC = false\\n  let loadCTK = false\\n  let loadNTLK = false\\n  let loadOMGA = false\\n  let loadFNS = false\\n  let loadJGN = false\\n  let loadSGC = false\\n  let loadCTYS = false\\n  let loadMDYN = false\\n  let loadTITN = false\\n  //End of Ticker Chart Storage\\n\\n  let bus = Mitt().createBus()\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\n  bus.on('closeLong', () => (closeLongPosition = true))\\n  bus.on('closeShort', () => (closeShortPosition = true))\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\n  //bus.on('quickPlay', () => (quickStrangle = true))\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\n  //bus.on('quickSplitPlay', () => (splitPlay = true))\\n  //bus.on('stockCrawler', () => (stockCrawler = true))\\n  bus.on('longStrangle', () => (longStrangle = true))\\n  bus.on('shortStrangle', () => (shortStrangle = true))\\n\\n  //Ticker Chart Bus Triggers\\n  bus.on('loadECP', () => (loadECP = true))\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\n  bus.on('loadBLD', () => (loadBLD = true))\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\n  bus.on('loadKGI', () => (loadKGI = true))\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\n  bus.on('loadSTM', () => (loadSTM = true))\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\n  bus.on('loadHLS', () => (loadHLS = true))\\n  bus.on('loadVITA', () => (loadVITA = true))\\n  bus.on('loadICRS', () => (loadICRS = true))\\n  bus.on('loadUNV', () => (loadUNV = true))\\n  bus.on('loadAERO', () => (loadAERO = true))\\n  bus.on('loadOMN', () => (loadOMN = true))\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\n  bus.on('loadGPH', () => (loadGPH = true))\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\n  bus.on('loadWDS', () => (loadWDS = true))\\n  bus.on('loadLXO', () => (loadLXO = true))\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\n  bus.on('loadCTK', () => (loadCTK = true))\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\n  bus.on('loadFNS', () => (loadFNS = true))\\n  bus.on('loadJGN', () => (loadJGN = true))\\n  bus.on('loadSGC', () => (loadSGC = true))\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\n  bus.on('loadTITN', () => (loadTITN = true))\\n  //End of Ticker Chart Bus Triggers\\n  setGlobal('tickerBus', bus)\\n\\n  // Instead of closing, let's keep this running\\n\\n  while (wantsShutdown == false) {\\n\\n    //init chart loading triggers\\n    if (loadECP == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"ECP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadECP = false;\\n    }\\n    if (loadMGCP == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"MGCP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMGCP = false;\\n    }\\n    if (loadBLD == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"BLD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadBLD = false;\\n    }\\n    if (loadCLRK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CLRK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCLRK = false;\\n    }\\n    if (loadOMTK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMTK = false;\\n    }\\n    if (loadFSIG == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FSIG\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFSIG = false;\\n    }\\n    if (loadKGI == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"KGI\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadKGI = false;\\n    }\\n    if (loadFLCM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FLCM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFLCM = false;\\n    }\\n    if (loadSTM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"STM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSTM = false;\\n    }\\n    if (loadDCOMM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"DCOMM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadDCOMM = false;\\n    }\\n    if (loadHLS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"HLS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadHLS = false;\\n    }\\n    if (loadVITA == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"VITA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadVITA = false;\\n    }\\n    if (loadICRS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"ICRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadICRS = false;\\n    }\\n    if (loadUNV == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"UNV\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadUVN = false;\\n    }\\n    if (loadAERO == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"AERO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAERO = false;\\n    }\\n    if (loadOMN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMN = false;\\n    }\\n    if (loadSLRS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SLRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSLRS = false;\\n    }\\n    if (loadGPH == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"GPH\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadGPH = false;\\n    }\\n    if (loadNVMD == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"NVMD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNVMD = false;\\n    }\\n    if (loadWDS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"WDS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadWDS = false;\\n    }\\n    if (loadLXO == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"LXO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadLXO = false;\\n    }\\n    if (loadRHOC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"RHOC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadRHOC = false;\\n    }\\n    if (loadAPHE == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"APHE\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAPHE = false;\\n    }\\n    if (loadSYSC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SYSC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSYSC = false;\\n    }\\n    if (loadCTK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTK = false;\\n    }\\n    if (loadNTLK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"NTLK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNTLK = false;\\n    }\\n    if (loadOMGA == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMGA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMGA = false;\\n    }\\n    if (loadFNS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FNS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFNS = false;\\n    }\\n    if (loadJGN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"JGN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadJGN = false;\\n    }\\n    if (loadSGC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SGC\\\")\\n\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSGC = false;\\n    }\\n    if (loadCTYS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CTYS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTYS = false;\\n    }\\n    if (loadMDYN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"MDYN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMDYN = false;\\n    }\\n    if (loadTITN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"TITN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadTITN = false;\\n    }\\n\\n    //Global Stock Price Test Module\\n    // var market = ns.stock.getSymbols()\\n    // var mValues = []\\n    //   for (const target of market) {\\n\\n    //     const timeframe = 300\\n    //     var mPrice = ns.stock.getAskPrice(target); \\n\\n    //     if (mValues.length == timeframe) {\\n    //       mValues.splice(0,1)\\n    //     }\\n\\n    //     mValues[mValues.length] = mPrice\\n\\n    //     var maxMarket = Math.max(...mValues)\\n    //     var minMarket = Math.min(...mValues)\\n    //     var mAvg = (maxMarket + minMarket) / 2\\n    //     var mDiff = mAvg - mPrice\\n    //     var trend = (mDiff / ns.stock.getAskPrice(target)) *0.1\\n\\n    //     if (mValues.length > 200 && trend > 75) {\\n    //       ns.print(target + \\\" - BULL TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n    //     if (mValues.length > 200 && trend < -75) {\\n    //       ns.print(target + \\\" - BEAR TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n\\n    //   await ns.asleep(2000);\\n    //   ns.print(target + ': ' + trend)\\n\\n    // }\\n\\n\\n\\n    //Stock Crawler Module\\n    // if (stockCrawler == true) {\\n    //   ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\n    //   var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\n    //     for (const target of market) {\\n    //     var tvol = ns.stock.getVolatility(target);\\n    //     var tfor = ns.stock.getForecast(target);\\n    //       if (tvol > 0.01 && tfor > 0.6) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //       if (tvol > 0.01 && tfor < 0.4) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //     await ns.asleep(100);\\n    //   stockCrawler = false;\\n    //   }\\n    // }\\n\\n\\n\\n    //failsafe exit condition\\n    if (wantsShutdown == true) {\\n      ns.exit();\\n    }\\n\\n    if (ns.peek(3) != \\\"NULL PORT DATA\\\") {\\n\\n      let loadedticker = ns.peek(3);\\n      var position = ns.stock.getPosition(loadedticker);\\n      var maxlongshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var maxshortshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var exposureLong = position[0] * position[1];\\n      var exposureShort = position[2] * position[3];\\n\\n      if (buyMaxLongShares == true) {\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxLongShares = false;\\n\\n      }\\n      if (buyMaxShortShares == true) {\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxShortShares = false;\\n\\n      }\\n      if (sellAllShares == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED **ALL** POSITIONS AND ORDERS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        sellAllShares = false;\\n\\n      }\\n      if (closeLongPosition == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeLongPosition = false;\\n\\n      }\\n      if (closeShortPosition == true) {\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeShortPosition = false;\\n      }\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\n\\n\\n      if (autoTrader == true && position[0] > '1' && ns.peek(4) < '0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sell(loadedticker, position[0]);\\n\\n      }\\n      if (autoTrader == true && position[2] > '1' && ns.peek(4) > '-0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n\\n\\n      }\\n      if (autoTrader == true && position[0] == '0' && ns.peek(4) > '5.0') {\\n        ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxLongShares = true;\\n\\n      }\\n      if (autoTrader == true && position[2] == '0' && ns.peek(4) < '-5.0') {\\n        ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxShortShares = true;\\n      }\\n\\n      //   //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\n\\n\\n      if (longStrangle == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getAskPrice(loadedticker) * 1.07), \\\"LimitSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getBidPrice(loadedticker) * 0.87), \\\"StopSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        longStrangle = false;\\n\\n      }\\n      if (shortStrangle == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getAskPrice(loadedticker) * 0.87), \\\"LimitSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getBidPrice(loadedticker) * 1.07), \\\"StopSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        shortStrangle = false;\\n\\n      }\\n      if (longHedge == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        longHedge = false;\\n\\n      }\\n      if (shortHedge == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        shortHedge = false;\\n\\n      }\\n      if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\n        ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        splitPlay = false;\\n\\n      }\\n\\n      //Auto-Trader button configuration.  Don't touch.\\n\\n      if (enableAutoTrader == true) {\\n        let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\n\\n        if (autoTradeConfirm == true) {\\n          ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\n          autoTrader = true;\\n          enableAutoTrader = false;\\n        }\\n        if (autoTradeConfirm == false) {\\n          ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\n          autoTrader = false;\\n          enableAutoTrader = false;\\n        }\\n      }\\n\\n    }\\n\\n    await ns.asleep(500)\\n    \\n  }\\n}\\n\\n\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\nconst ChartContainerwallstreet = {\\n  name: 'svg-chart-wallstreet',\\n  inject: ['appShutdown',],\\n  template: html`\\n    <bbv-win\\n      class=\\\"__CMP_NAME__\\\"\\n      title=\\\"WSE Active Trader\\\"\\n      no-pad\\n      start-height=\\\"770px\\\"\\n      start-width=\\\"619px\\\"\\n    >\\n \\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\n      <div>\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\n      </div>\\n      </details>\\n      </div>\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\n      <div>\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\n      <button @click=\\\"longStrangle\\\">LONG STRANGLE</button>\\n      <button @click=\\\"shortStrangle\\\">SHORT STRANGLE</button>\\n      </div>\\n      </details>\\n      <details align=\\\"right\\\"><summary>TOOLS</summary>\\n      <div>\\n      <button @click=\\\"enableAutoTrade\\\">AUTO TRADE</button>\\n      </div>\\n      </details>\\n\\n      <template #actions>\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\n      </template>\\n    </bbv-win>\\n  `,\\n\\n  data() {\\n    return {}\\n  },\\n\\n  methods: {\\n    shutdownAll() {\\n      getGlobal('tickerBus').emit('wantsShutdown')\\n      this.appShutdown()\\n    },\\n    buyMaxLong() {\\n      getGlobal('tickerBus').emit('buyMaxLong')\\n    },\\n    buyMaxShort() {\\n      getGlobal('tickerBus').emit('buyMaxShort')\\n    },\\n    closeAllPositions() {\\n      getGlobal('tickerBus').emit('closeAllPositions')\\n    },\\n    sellMaxLong() {\\n      getGlobal('tickerBus').emit('closeLong')\\n    },\\n    sellMaxShort() {\\n      getGlobal('tickerBus').emit('closeShort')\\n    },\\n    enableAutoTrade() {\\n      getGlobal('tickerBus').emit('autoTrade')\\n    },\\n    longStrangle() {\\n      getGlobal('tickerBus').emit('longStrangle')\\n    },\\n    shortStrangle() {\\n      getGlobal('tickerBus').emit('shortStrangle')\\n    },\\n    quickSplit() {\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\n    },\\n    longHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\n    },\\n    shortHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\n    },\\n    // stockCrawler() {\\n    //   getGlobal('tickerBus').emit('stockCrawler')\\n    // },\\n    // enableSmartTrade() {\\n    //   getGlobal('tickerBus').emit('enableSmartTrade')\\n    // },\\n    sellAllStocks() {\\n      getGlobal('tickerBus').emit('sellAllStocks')\\n    },\\n    loadECP() {\\n      getGlobal('tickerBus').emit('loadECP')\\n    },\\n    loadMGCP() {\\n      getGlobal('tickerBus').emit('loadMGCP')\\n    },\\n    loadBLD() {\\n      getGlobal('tickerBus').emit('loadBLD')\\n    },\\n    loadCLRK() {\\n      getGlobal('tickerBus').emit('loadCLRK')\\n    },\\n    loadOMTK() {\\n      getGlobal('tickerBus').emit('loadOMTK')\\n    },\\n    loadFSIG() {\\n      getGlobal('tickerBus').emit('loadFSIG')\\n    },\\n    loadKGI() {\\n      getGlobal('tickerBus').emit('loadKGI')\\n    },\\n    loadFLCM() {\\n      getGlobal('tickerBus').emit('loadFLCM')\\n    },\\n    loadSTM() {\\n      getGlobal('tickerBus').emit('loadSTM')\\n    },\\n    loadDCOMM() {\\n      getGlobal('tickerBus').emit('loadDCOMM')\\n    },\\n    loadHLS() {\\n      getGlobal('tickerBus').emit('loadHLS')\\n    },\\n    loadVITA() {\\n      getGlobal('tickerBus').emit('loadVITA')\\n    },\\n    loadICRS() {\\n      getGlobal('tickerBus').emit('loadICRS')\\n    },\\n    loadUNV() {\\n      getGlobal('tickerBus').emit('loadUNV')\\n    },\\n    loadAERO() {\\n      getGlobal('tickerBus').emit('loadAERO')\\n    },\\n    loadOMN() {\\n      getGlobal('tickerBus').emit('loadOMN')\\n    },\\n    loadSLRS() {\\n      getGlobal('tickerBus').emit('loadSLRS')\\n    },\\n    loadGPH() {\\n      getGlobal('tickerBus').emit('loadGPH')\\n    },\\n    loadNVMD() {\\n      getGlobal('tickerBus').emit('loadNVMD')\\n    },\\n    loadWDS() {\\n      getGlobal('tickerBus').emit('loadWDS')\\n    },\\n    loadLXO() {\\n      getGlobal('tickerBus').emit('loadLXO')\\n    },\\n    loadRHOC() {\\n      getGlobal('tickerBus').emit('loadRHOC')\\n    },\\n    loadAPHE() {\\n      getGlobal('tickerBus').emit('loadAPHE')\\n    },\\n    loadSYSC() {\\n      getGlobal('tickerBus').emit('loadSYSC')\\n    },\\n    loadCTK() {\\n      getGlobal('tickerBus').emit('loadCTK')\\n    },\\n    loadNTLK() {\\n      getGlobal('tickerBus').emit('loadNTLK')\\n    },\\n    loadOMGA() {\\n      getGlobal('tickerBus').emit('loadOMGA')\\n    },\\n    loadFNS() {\\n      getGlobal('tickerBus').emit('loadFNS')\\n    },\\n    loadJGN() {\\n      getGlobal('tickerBus').emit('loadJGN')\\n    },\\n    loadSGC() {\\n      getGlobal('tickerBus').emit('loadSGC')\\n    },\\n    loadCTYS() {\\n      getGlobal('tickerBus').emit('loadCTYS')\\n    },\\n    loadMDYN() {\\n      getGlobal('tickerBus').emit('loadMDYN')\\n    },\\n    loadTITN() {\\n      getGlobal('tickerBus').emit('loadTITN')\\n    },\\n  },\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///dafab439-7fae-4fd3-a613-daf7291ac8f4\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5a53cb60-eb32-4ceb-a903-c0ace8289a55\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///25231c82-4fb3-4adb-baad-201c9b6de289\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///60aaf2f5-af73-4b8a-93d8-bf75e4b99e69\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///ba546588-72dc-4e18-9c9b-8784e906142e\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///2cae0a93-eed2-48b6-99e4-6c27a996dfb1\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///5690dee7-7b46-4ea4-828a-a159445b2b8f\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b1544a39-2b0c-48fa-87cd-c296c9d46da6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///958e2103-d598-4c37-ab14-2689be6b6be0\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///469b2695-9183-4179-a883-ee06f2a4d00f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///25b1d47c-b429-4d2a-a6f5-36735fbd09b1\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3b7576a7-dcb0-4e34-b914-96014faa085f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///80d78afc-20a0-4175-b151-b70b73e1fcb9\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///22540138-5ae4-4b18-8bcd-56b236737559\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///237f01ba-54d5-4af1-952d-fc44bad20c4d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///c1253835-8dae-4510-8cc7-db30638844e7\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8844c644-08ad-4539-9de2-19764192a4a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///c4c80384-dd09-42c9-aef1-7c8fb56a53d2\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///ab632b3d-2991-421a-a694-be87cbb19e31\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5a67ac56-7654-49e0-80ef-1e018398e2ec\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///491f911e-4458-4925-9731-07caad0fabde\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5c72c73f-b2b7-41bc-bec1-ff6faf1214c0\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///6c686527-1196-491f-be60-d8af21bd0e6b\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///20d87508-533a-4539-9316-ad0b81c3c0a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///3b3fce61-07f5-4f95-8e49-c3fe72e9cc4f\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1e0ee594-a22f-4ee1-b726-a0452b3a5da7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///b90d02f1-90f5-46fa-9ff5-a96100670124\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///38c05600-7593-4c57-90f3-9bce7265cdda\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///7923ecc3-8bca-4fd3-810d-991727651528\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7feb77b0-2a1a-48d3-b2d2-95b69fabcd19\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///a4f9f3c9-620a-4111-8cdd-93b02bc428fe\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3aaf4184-0359-4e92-a52c-43a9ca17c6a2\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///97e1fcdf-87d5-48ac-9466-fc55dd86002f\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///aee3078a-dc5b-4c5c-af91-61b307051aec\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///00fdef21-53f2-45ca-be17-c0e58f313fb9\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7c736925-069e-4456-8770-c69f1673dc3d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///e7634d38-8322-4899-b327-a11ab671b98e\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///063eb523-c42a-4966-9e1c-c09b8bfff9a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///f98ff1ae-6c7b-4d22-8cf3-ad1a36a9dca3\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a349cfe3-186f-4a7f-ae41-623c932b482c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///990175f0-4771-4fc0-8660-77c44139a0ac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///49f8e89c-dbc5-43cb-960a-cdcb301b1025\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8dc52512-487f-4bb5-b743-79e93df55189\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///fd49e03c-4a59-417f-90b1-85d158eb7749\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///cd8acf7a-162b-4271-a7e0-e436c25876ea\",\"moduleSequenceNumber\":27307}],\"dependents\":[],\"ramUsage\":25.15,\"server\":\"home\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet-lite.js'\\n\\nexport async function main(ns) {\\n  const doc = eval('document')\\n  var ticker = ns.args[0];\\n\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\n  const resolution = 420\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\n  const delay = 10\\n\\n  const textSize = 2.5\\n\\n  const lineColor = 'green'\\n\\n  const strokeWidth = 0.5\\n\\n  const conWidth = 80\\n  const conHeight = 60\\n  const wBuffer = 1\\n  const hBuffer = 5\\n  await ns.clearPort(1)\\n  await ns.clearPort(2)\\n  await ns.writePort(3, ticker)\\n\\n\\n  var container = doc.getElementById('graph_container')\\n\\n  if (container != null) {\\n    KillChildren(container)\\n    container.remove()\\n  }\\n //Give the chart time to load.\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\n\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\n  const containerAttr = [\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\n    ['id', 'graph_container'],\\n  ]\\n  AddAttr(container, containerAttr)\\n  \\n  dropPage.appendChild(container)\\n\\n  const uiThickness = 0.1\\n\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(topLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(topLine)\\n\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(midLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight / 2)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight / 2)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(midLine)\\n\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(botLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight - hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight - hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(botLine)\\n\\n\\n  var lines = []\\n  for (let i = 0; i < resolution - 1; i++) {\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '60'],\\n      ['x2', '100'],\\n      ['y2', '0'],\\n      ['stroke', 'green'],\\n      ['stroke-width', '1'],\\n    ])\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '0'],\\n      ['x2', '0'],\\n      ['y2', '0'],\\n      ['stroke', lineColor],\\n      ['stroke-width', String(strokeWidth)],\\n    ])\\n    container.appendChild(lines[i])\\n  }\\n\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(topTextBG, topText, container)\\n\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(midTextBG, midText, container)\\n\\n  var botText = CreateText('COLLECTING DATA...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(botTextBG, botText, container)\\n\\n\\n  var values = []\\n  while (true) {\\n    var ticker = ns.args[0];\\n    var position = ns.stock.getPosition(ticker)\\n    try {\\n      if (values.length == resolution) {\\n        values.splice(0, 1)\\n        await ns.clearPort(1);\\n        await ns.clearPort(2);\\n        \\n      }\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\n\\n      if (values.length > 2) {\\n        var lineCount = values.length - 2\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\n\\n        var moneyList = []\\n\\n        for (let i = 0; i < values.length; i++) {\\n          moneyList[i] = values[i]\\n        }\\n      await ns.clearPort(1)\\n      await ns.clearPort(2)\\n      await ns.writePort(1, (Math.max(...moneyList)))\\n      await ns.writePort(2, (Math.min(...moneyList)))\\n      await ns.writePort(3, ticker)\\n        var tenmin = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\n        var pricediff = (((ns.peek(2) + ns.peek(1)) / 2) - ns.stock.getAskPrice(ticker))\\n        var forecast = (pricediff / ns.stock.getAskPrice(ticker) *-1)\\n        var estVol = ns.nFormat((moneyList[299] + moneyList[2]) / 419, '$0.00a')\\n      await ns.writePort(4, forecast * 100);\\n      //await ns.writePort(4, (pricediff / ns.stock.getAskPrice(ticker) *-1000))\\n\\n\\n        var highestVal = moneyList[0]\\n        var lowestVal = moneyList[0]\\n\\n        for (var i in moneyList) {\\n          if (moneyList[i] > highestVal) {\\n            highestVal = moneyList[i]\\n          }\\n          if (moneyList[i] < lowestVal) {\\n            lowestVal = moneyList[i]\\n          }\\n        }\\n\\n        highestVal = highestVal - lowestVal\\n        //highestVal = moneyList[i];\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\n        //monitor the player's cash, but has been tweaked for stocks.\\n\\n        for (let i in moneyList) {\\n          if (highestVal != lowestVal) {\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\n          } else {\\n            moneyList[i] = values[i]\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\n          }\\n        }\\n\\n        for (let i = 0; i < lineCount; i++) {\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\n          if (isNaN(temp)) {\\n            ns.asleep(5000);\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\n          }\\n\\n          var attr = [\\n            ['x1', String(i * xOff + wBuffer)],\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\n          ]\\n          AddAttr(lines[i], attr)\\n\\n        }\\n        //ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0')\\n        topText.innerHTML = 'Overall Trend: ' + ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\n        HighlightText(topTextBG, topText, container)\\n\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+ tenmin +' 7m AVG)'\\n        HighlightText(midTextBG, midText, container)\\n\\n        botText.innerHTML = 'Movement Per Tick: ' + estVol + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\n        HighlightText(botTextBG, botText, container)\\n\\n\\n        \\n      }\\n\\n\\n    } catch (err) {\\n      // This might come in handy later\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\n    }\\n    await ns.sleep(delay * 100)\\n    await ns.clearPort(1);\\n    await ns.clearPort(2);\\n    await ns.clearPort(4);\\n\\n    if (ns.isRunning(\\\"wallstreet-lite.js\\\", \\\"home\\\") == false) {\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      await ns.clearPort(4);\\n      ns.exit();\\n    }\\n\\n  }\\n}\\n\\nfunction AddAttr(element, attrList) {\\n  for (var i in attrList) {\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\n  }\\n}\\n\\nfunction KillChildren(element) {\\n  const children = element.children\\n  for (var line of children) {\\n    line.remove()\\n  }\\n}\\n\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\n  AddAttr(textElm, [\\n    ['x', String(x)],\\n    ['y', String(y)],\\n    ['fill', 'lightgrey'],\\n    ['font-size', String(textSize)],\\n    ['font-family', 'sans-serif'],\\n    ['stroke', 'black'],\\n    ['stroke-width', '0'],\\n  ])\\n  textElm.innerHTML = text\\n  parent.appendChild(textElm)\\n  return textElm\\n}\\n\\nfunction HighlightText(bg, text, parent) {\\n  var textBox = text.getBBox()\\n\\n  AddAttr(bg, [\\n    ['x', String(textBox.x)],\\n    ['y', String(textBox.y)],\\n    ['width', String(textBox.width)],\\n    ['height', String(textBox.height)],\\n    ['fill', 'black'],\\n    ['opacity', '0.0'],\\n  ])\\n  parent.insertBefore(bg, text)\\n  \\n}\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var current_min_ram, new_purchased_server,\\n        current_purchasing_ram = 4096,\\n        current_needed_money = ns.getPurchasedServerCost(current_purchasing_ram),\\n        existing_servers = ns.getPurchasedServers(),\\n        // server_limit = ns.getPurchasedServerLimit(),\\n        server_limit = 5,\\n        ram_limit = ns.getPurchasedServerMaxRam();\\n\\n    ns.tprint('buy_server.js running!');\\n\\n    await update_grind_server_txt(ns, existing_servers);\\n\\n    while (true) {\\n        await ns.sleep(1200000);  // Sleep first to allow machine to boot\\n\\n        ns.print('Current purchasing RAM: ', current_purchasing_ram)\\n\\n        if (existing_servers.length >= server_limit) {\\n            current_min_ram = await delete_small_server(ns, existing_servers);\\n            existing_servers = ns.getPurchasedServers();\\n            await update_grind_server_txt(ns, existing_servers);\\n            if (current_min_ram == current_purchasing_ram) {\\n                current_purchasing_ram *= 2;\\n            } if (current_purchasing_ram > ram_limit) {\\n                current_purchasing_ram = ram_limit;\\n            } if (current_min_ram == ram_limit) {\\n                ns.toast('buy_server.js has purchased all available servers. Now exiting...')\\n                ns.exit()\\n            }\\n        } else {\\n            if (ns.getPlayer().money * 0.25 > current_needed_money) {  // Buy it\\n                new_purchased_server = ns.purchaseServer('grinding-server', current_purchasing_ram);\\n                existing_servers.push(new_purchased_server);\\n                await update_grind_server_txt(ns, existing_servers);\\n                ns.run('/scripts/transport_files.js', 1, new_purchased_server);\\n                await ns.toast('Purchased new server ' + new_purchased_server);\\n                await ns.sleep(5000);  // Make sure that files were transported\\n                ns.run('/scripts/grind_on_my_servers.script');\\n            }\\n        }\\n    }\\n}\\n\\nasync function delete_small_server(ns, servers) {\\n    var min_ram = -1,\\n        min_index = -1;\\n\\n    for (var i = 0; i < servers.length; i++) {\\n        if (ns.getServerMaxRam(servers[i]) < min_ram || min_ram == -1) {\\n            min_ram = ns.getServerMaxRam(servers[i]);\\n            min_index = i;\\n        }\\n    }\\n\\n    await ns.killall(servers[min_index]);\\n    await ns.deleteServer(servers[min_index]);\\n    await ns.toast('Deleted ' + servers[min_index]);\\n    return min_ram;\\n}\\n\\nasync function update_grind_server_txt(ns, servers) {\\n    await ns.print('Received servers ', servers, 'to update');\\n    await ns.write('/grind_servers.txt', servers.join('\\\\r\\\\n'), 'w');\\n}\",\"filename\":\"/scripts/buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buy_server.js\",\"url\":\"blob:file:///d41d12a6-21cc-43df-b23e-637597c98555\",\"moduleSequenceNumber\":742}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    await ns.scp('/scripts/hack.script', host);\\n    await ns.scp('/scripts/weaken-exp-grind.script', host);\\n    await ns.scp('/scripts/simple_hack.script', host);\\n    await ns.scp('/scripts/weaken_and_grow_only.script', host);\\n    ns.print('Tranported files to ', host);\\n}\",\"filename\":\"/scripts/transport_files.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/transport_files.js\",\"url\":\"blob:file:///c5b1b351-0e1a-4bae-8445-78387792117f\",\"moduleSequenceNumber\":15376}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///cbc8656a-d1c9-49f4-affa-4aa5a2c9fb0d\",\"moduleSequenceNumber\":4442}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":4442,\"ramUsageEntries\":[{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4},{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"write('/ someFolder/hello.txt', 'Hello world!');\",\"filename\":\"/scripts/test.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"victims.txt\",\"text\":\"neo-net\\r\\nsilver-helix\\r\\nzer0\\r\\niron-gym\\r\\nmax-hardware\\r\\nharakiri-sushi\\r\\nhong-fang-tea\\r\\nnectar-net\\r\\nn00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nsilver-helix\\r\\nphantasy\\r\\nomega-net\\r\\ncrush-fitness\\r\\njohnson-ortho\\r\\nthe-hub\\r\\ncomptek\\r\\nnetlink\\r\\nrothman-uni\\r\\n \\r\\nCSEC\\r\\njohnson-ortho\\r\\navmnite-02h\\r\\nzb-institute\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"the_network.txt\",\"text\":\"[[\\\"home\\\",1,0,1,1],[\\\"n00dles\\\",1,1750000,3000,1.3980000000000004],[\\\"foodnstuff\\\",1,50000000,5,75.01000000056837],[\\\"sigma-cosmetics\\\",5,57500000,10,74.86200000028256],[\\\"joesguns\\\",10,62500000,20,74.98500000017178],[\\\"hong-fang-tea\\\",30,75000000,20,74.20000000003813],[\\\"harakiri-sushi\\\",40,100000000,40,73.35200000002209],[\\\"iron-gym\\\",100,500000000,20,56.045999999994564],[\\\"darkweb\\\",1,0,1,74.50799999963043],[\\\"nectar-net\\\",20,68750000,25,73.63600000006413],[\\\"max-hardware\\\",80,250000000,30,56.92399999999512],[\\\"zer0\\\",75,187500000,40,61.783999999992226],[\\\"CSEC\\\",57,0,0,0],[\\\"omega-net\\\",211,1723395200,30,46.195999999995195],[\\\"neo-net\\\",50,125000000,25,72.53799999999936],[\\\"phantasy\\\",100,600000000,35,53.43199999999575],[\\\"silver-helix\\\",150,1125000000,30,50.05799999999464],[\\\"comptek\\\",388,6119572375,59,57.569999999998565],[\\\"avmnite-02h\\\",205,0,0,0],[\\\"the-hub\\\",296,4814372125,54,45.363999999996295],[\\\"netlink\\\",409,6875000000,71,54.73199999999906],[\\\"johnson-ortho\\\",293,2087769050,65,60.19599999999749],[\\\"crush-fitness\\\",254,1441254775,29,47.063999999996064],[\\\"zb-institute\\\",764,24815867775,79,79.1440000000013],[\\\"syscore\\\",625,12123215950,64,66.00400000000133],[\\\"summit-uni\\\",447,5944870325,59,52.24799999999941],[\\\"I.I.I.I\\\",355,0,0,0],[\\\"catalyst\\\",446,9025750325,30,53.74599999999957],[\\\"rothman-uni\\\",387,4988442250,39,47.733999999998474],[\\\"lexo-corp\\\",664,19470985725,57,65.9000000000012],[\\\"rho-construction\\\",502,13222733500,51,41.09399999999832],[\\\"millenium-fitness\\\",491,6250000000,29,45.74799999999881],[\\\"aevum-police\\\",420,6429802425,42,73.82400000000223],[\\\"alpha-ent\\\",509,17609525400,50,64.23000000000205],[\\\"snap-fitness\\\",771,11250000000,48,41.971999999999646],[\\\"galactic-cyber\\\",832,21014457000,71,58.11599999999975],[\\\"aerocorp\\\",868,27588242200,65,79.90800000000077],[\\\"global-pharm\\\",784,40498812600,90,75.0120000000009],[\\\"omnia\\\",896,23135532300,69,90.11600000000058],[\\\"deltaone\\\",833,36370607950,52,76.90800000000077],[\\\"unitalife\\\",787,25974602775,75,74.0120000000009],[\\\"univ-energy\\\",895,29392586550,84,84.38800000000053],[\\\"defcomm\\\",1026,23365939700,70,87.01200000000046],[\\\"zeus-med\\\",822,33251430975,76,77.38800000000059],[\\\"icarus\\\",866,23613704050,94,92.2080000000007],[\\\"solaris\\\",845,19236041600,76,74.90800000000077],[\\\"infocomm\\\",948,15124969700,43,77.38800000000053],[\\\"zb-def\\\",815,23216834975,73,58.54799999999981],[\\\"nova-med\\\",805,30424295100,66,71.46800000000069],[\\\"taiyang-digital\\\",929,21064273525,80,77.38800000000053],[\\\"microdyne\\\",874,13174270150,90,65.46800000000069],[\\\"titan-labs\\\",817,18752014475,64,78.38800000000059],[\\\"run4theh111z\\\",506,0,0,0],[\\\"applied-energetics\\\",831,19691087600,75,67.46800000000069],[\\\"vitalife\\\",782,17689401800,61,82.38800000000059],[\\\"stormtech\\\",1020,29582301575,90,89.24000000000035],[\\\"helios\\\",801,18108376900,80,84.38800000000059],[\\\"fulcrumtech\\\",1117,42157048525,81,88.24000000000035],[\\\"4sigma\\\",1094,448448605800,85,54.467999999999854],[\\\"kuai-gong\\\",1239,727744968900,96,97.16000000000025],[\\\".\\\",524,0,0,0],[\\\"omnitek\\\",1044,370029131825,95,98.24000000000035],[\\\"b-and-a\\\",972,449036526675,70,79.38800000000053],[\\\"blade\\\",912,469649590650,77,90.32000000000045],[\\\"clarkinc\\\",1013,581518461825,64,42.607999999999834],[\\\"powerhouse-fitness\\\",993,22500000000,51,53.54799999999981],[\\\"nwo\\\",1110,859300132350,82,98.16000000000025],[\\\"megacorp\\\",1255,1334614097725,99,98.16000000000025],[\\\"ecorp\\\",1369,1271765696975,99,98.16000000000025],[\\\"fulcrumassets\\\",1194,25000000,1,98.16000000000025],[\\\"The-Cave\\\",925,0,0,1]]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"grind_servers.txt\",\"text\":\"grinding-server\\r\\ngrinding-server-0\\r\\ngrinding-server-1\\r\\ngrinding-server-2\\r\\ngrinding-server-3\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"all_servers_names.txt\",\"text\":\"n00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nhong-fang-tea\\r\\nharakiri-sushi\\r\\niron-gym\\r\\nnectar-net\\r\\nmax-hardware\\r\\nCSEC\\r\\nzer0\\r\\nphantasy\\r\\nomega-net\\r\\nneo-net\\r\\nsilver-helix\\r\\nthe-hub\\r\\njohnson-ortho\\r\\ncrush-fitness\\r\\navmnite-02h\\r\\ncomptek\\r\\nnetlink\\r\\nzb-institute\\r\\nrothman-uni\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"# TODO\\r\\n\\r\\n* Change most, if not all, scripts to ns2.\\r\\n* Add a choice in boot where I can grind one server over and over with multiple threads\\r\\n* Let grind return a promise so that I can wait for it before having buy_server delete grinding servers\\r\\n* In fact, let's put all common functionalities into a single module file and import them when needed\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/manual.txt\",\"text\":\"===\\n= BB Theme Browser\\n===\\n\\nBrowser themes submitted by other users, vote for your\\nfavourite and submit your own.\\n\\n===\\n\\nRegistration\\n\\nWe use an email / password auth system so that we know who\\nis submitting the theme. We don't actually use the email,\\nwe just use it for identification purposes.\\n\\nEach login will create a PAT token stored in your local\\nstorage. You can copy/paste it to avoid logging in, if you\\nwant. You can also integrate using the same method, for your\\nown app. Go ahead! https://bitburner.daft.host\\n\\n===\\n\\nBB Theme Browser Developers\\n\\nPhil and Jack have worked together on many projects over\\nthe years, this is the first non-work related project to\\nhave worked together on.\\n\\nPhil specializes in frontend development; VueJS, SCSS, \\nthe maths aspect of things.\\n\\nJack specializes in backend development and infrastructure,\\nmaking the API that the frontend works with.\\n\\nPhil:\\n    url: https://github.com/philiparmstead\\n    discord: Phil\\n\\nJack:\\n    url: https://github.com/surdaft\\n    discord: SurDaft\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/bb-vue/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"bb-vue\\\",\\n    \\\"author\\\": \\\"smolgumball\\\",\\n    \\\"descriptiveName\\\": \\\"Run Vue 3 apps inside BitBurner.\\\",\\n    \\\"shortDescription\\\": \\\"Extension for UI development using Vue 3 + SCSS in game. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"longDescription\\\": \\\"Includes starter components, examples, and lots of quality-of-life features for rapid UI development and extension inside BitBurner. Supports SCSS compilation of component styles, global SCSS mixins, loading of external stylesheets + scripts, and more. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"tags\\\": [\\n        \\\"library\\\",\\n        \\\"ui\\\",\\n        \\\"qol\\\",\\n        \\\"os\\\",\\n        \\\"ns2\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/someFolder/hello.txt\",\"text\":\"Hello world!\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-9,-9,-9,-9],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-27757-CyberSec.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[3,3],[5,2,5],[2,4,7,7],[6,3,5,5,3],[1,4,4,5,6,2],[3,4,1,9,6,1,7],[4,4,3,3,7,8,2,9],[6,3,4,8,6,4,5,4,9],[4,6,4,5,3,3,6,3,5,8],[3,9,3,8,2,4,2,7,5,8,9],[6,2,3,2,2,9,1,7,2,5,7,5]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"66.7.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.34000000000029,\"minDifficulty\":33,\"moneyAvailable\":59744120681.53677,\"moneyMax\":1377424634300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1326,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"63.2.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.34000000000029,\"minDifficulty\":33,\"moneyAvailable\":45151862660.98231,\"moneyMax\":1040994279700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1350,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"1.9.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":67.76675000000048,\"minDifficulty\":24,\"moneyAvailable\":30133140965.035236,\"moneyMax\":689605900625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1028,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"84.0.5.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22504313,2744,1106,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59367.29669904192,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.626,\"onlineExpGained\":57203.066821258006,\"onlineMoneyMade\":22504313,\"onlineRunningTime\":19516.010000018316,\"pid\":66,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[293720,330,3289,265]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87717.84564929154,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.644,\"onlineExpGained\":86869.35325365503,\"onlineMoneyMade\":293720,\"onlineRunningTime\":19516.010000018316,\"pid\":67,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[108928,174,1601,134]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43059.8562528154,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.661,\"onlineExpGained\":42595.44929827487,\"onlineMoneyMade\":108928,\"onlineRunningTime\":19516.010000018316,\"pid\":68,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[359341,104,989,76]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32529.83983377925,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.679,\"onlineExpGained\":32656.599935801183,\"onlineMoneyMade\":359341,\"onlineRunningTime\":19516.010000018316,\"pid\":69,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[6014,53,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12880.754422478956,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.701,\"onlineExpGained\":13694.058631043963,\"onlineMoneyMade\":6014,\"onlineRunningTime\":19516.010000018316,\"pid\":70,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[27752,47,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9900.247447939004,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.723999999995,\"onlineExpGained\":10843.34992769428,\"onlineMoneyMade\":27752,\"onlineRunningTime\":19516.010000018316,\"pid\":71,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[648,17,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7123.837388366318,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.741,\"onlineExpGained\":6713.818628449458,\"onlineMoneyMade\":648,\"onlineRunningTime\":19516.010000018316,\"pid\":72,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[46318,83,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22541.57404394238,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.759,\"onlineExpGained\":23202.63747427243,\"onlineMoneyMade\":46318,\"onlineRunningTime\":19516.010000018316,\"pid\":73,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1158,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5134.560182896903,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.777,\"onlineExpGained\":5002.061299569002,\"onlineMoneyMade\":1158,\"onlineRunningTime\":19516.010000018316,\"pid\":74,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1235,26,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10171.519105625957,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.810999999994,\"onlineExpGained\":8494.845514607621,\"onlineMoneyMade\":1235,\"onlineRunningTime\":19516.010000018316,\"pid\":75,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[190794,22,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6003.162304996312,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.835,\"onlineExpGained\":5132.874194274101,\"onlineMoneyMade\":190794,\"onlineRunningTime\":19516.010000018316,\"pid\":76,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[956,26,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12297.818287972414,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.854999999996,\"onlineExpGained\":11273.620446938055,\"onlineMoneyMade\":956,\"onlineRunningTime\":19516.010000018316,\"pid\":77,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[53398,26,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7316.694499625342,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.873999999996,\"onlineExpGained\":6447.3972543046375,\"onlineMoneyMade\":53398,\"onlineRunningTime\":19516.010000018316,\"pid\":78,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[4978469,13,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4788.300246261126,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.895,\"onlineExpGained\":4292.048337473066,\"onlineMoneyMade\":4978469,\"onlineRunningTime\":19516.010000018316,\"pid\":79,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3950723,17,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5355.411885379626,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.911,\"onlineExpGained\":4747.6288872607065,\"onlineMoneyMade\":3950723,\"onlineRunningTime\":19516.010000018316,\"pid\":80,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[647551,16,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5237.561897314325,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.937,\"onlineExpGained\":4821.161186524667,\"onlineMoneyMade\":647551,\"onlineRunningTime\":19516.010000018316,\"pid\":81,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[12708867,7,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4251.397411648165,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.952999999994,\"onlineExpGained\":4141.253839707094,\"onlineMoneyMade\":12708867,\"onlineRunningTime\":19516.010000018316,\"pid\":82,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4642818,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3090.3593868449166,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.974,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4642818,\"onlineRunningTime\":19516.010000018316,\"pid\":83,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[10640183,3,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1927.9790274910006,\"offlineMoneyMade\":0,\"offlineRunningTime\":32793.992,\"onlineExpGained\":1789.0195273824697,\"onlineMoneyMade\":10640183,\"onlineRunningTime\":19516.010000018316,\"pid\":84,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[9060266,7,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3699.3822998674846,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.01,\"onlineExpGained\":3567.382199799147,\"onlineMoneyMade\":9060266,\"onlineRunningTime\":19516.010000018316,\"pid\":85,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[2383794,1,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2346.1301850287523,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.028,\"onlineExpGained\":2359.427689426529,\"onlineMoneyMade\":2383794,\"onlineRunningTime\":19516.010000018316,\"pid\":86,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[9552567,5,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3504.736128222179,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.045,\"onlineExpGained\":3433.6386699784443,\"onlineMoneyMade\":9552567,\"onlineRunningTime\":19516.010000018316,\"pid\":87,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[9923444,8,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3585.4042035326147,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.087,\"onlineExpGained\":3371.8289111768477,\"onlineMoneyMade\":9923444,\"onlineRunningTime\":19516.010000018316,\"pid\":88,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[11638011,4,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2478.1323796021206,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.106,\"onlineExpGained\":2174.5312557700254,\"onlineMoneyMade\":11638011,\"onlineRunningTime\":19516.010000018316,\"pid\":89,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[24224098,5,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2414.6071178920697,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.126,\"onlineExpGained\":2551.5175001849457,\"onlineMoneyMade\":24224098,\"onlineRunningTime\":19516.010000018316,\"pid\":90,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[337584836,22,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3926.9546916289028,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.143,\"onlineExpGained\":3518.3606669564997,\"onlineMoneyMade\":337584836,\"onlineRunningTime\":19516.010000018316,\"pid\":91,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[32874724,6,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3133.6255756972564,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.163,\"onlineExpGained\":2937.0292285725004,\"onlineMoneyMade\":32874724,\"onlineRunningTime\":19516.010000018316,\"pid\":92,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[3512962,3,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3685.835484124387,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.181,\"onlineExpGained\":3476.7989325899075,\"onlineMoneyMade\":3512962,\"onlineRunningTime\":19516.010000018316,\"pid\":93,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[3324410,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1528.3023345822562,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.205,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":3324410,\"onlineRunningTime\":19516.010000018316,\"pid\":94,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[1740045,1,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1508.5493634071445,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.221999999994,\"onlineExpGained\":1397.1136860154386,\"onlineMoneyMade\":1740045,\"onlineRunningTime\":19516.010000018316,\"pid\":95,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[9752073,4,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954.076261773989,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.243,\"onlineExpGained\":1900.6500831491483,\"onlineMoneyMade\":9752073,\"onlineRunningTime\":19516.010000018316,\"pid\":96,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1389.3219639322124,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.261,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.010000018316,\"pid\":97,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1417.5823633243497,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.28,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.010000018316,\"pid\":98,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[3184863,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1459.3635645050979,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.343,\"onlineExpGained\":1446.4016402322302,\"onlineMoneyMade\":3184863,\"onlineRunningTime\":19516.010000018316,\"pid\":99,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[6644280,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1839.4000223546154,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.384,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":6644280,\"onlineRunningTime\":19516.010000018316,\"pid\":100,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.6313481652246,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.422,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.010000018316,\"pid\":101,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,0,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1691.6915938756456,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.456,\"onlineExpGained\":1660.3380036705214,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.010000018316,\"pid\":102,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[852094,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1230.6205555612014,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.486,\"onlineExpGained\":1318.5193806427164,\"onlineMoneyMade\":852094,\"onlineRunningTime\":19516.010000018316,\"pid\":103,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.5829919557088,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.52,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.010000018316,\"pid\":104,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3134426,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1381.3902362787082,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.536,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3134426,\"onlineRunningTime\":19516.010000018316,\"pid\":105,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"blade\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"blade\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":95.68087500000037,\"minDifficulty\":32,\"moneyAvailable\":38132390326.0186,\"moneyMax\":885882968775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1080,\"serverGrowth\":80}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"56.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nwo\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nwo\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":97.06637500000046,\"minDifficulty\":33,\"moneyAvailable\":27299807534.490746,\"moneyMax\":633350304175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":952,\"serverGrowth\":83}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"40.6.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":50.277999999999686,\"minDifficulty\":16,\"moneyAvailable\":19556834324.08788,\"moneyMax\":376016188725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1098,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-390256.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[110,132,73,167,160,10,107,65,185,33,146,28,142,162,109,42,151,149,106,189,34,70]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-654873.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[1,0,0],[0,0,0],[0,0,0],[1,0,0],[0,1,0],[0,1,0],[0,0,0],[0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"22.2.1.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22732543,2761,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59622.222718033714,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.558,\"onlineExpGained\":57346.66794192212,\"onlineMoneyMade\":22732543,\"onlineRunningTime\":19516.410000018317,\"pid\":106,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[107822,350,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88245.00326877854,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.579999999994,\"onlineExpGained\":87183.73047514581,\"onlineMoneyMade\":107822,\"onlineRunningTime\":19516.410000018317,\"pid\":107,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[102463,158,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42692.79193136513,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.604,\"onlineExpGained\":42371.6553439932,\"onlineMoneyMade\":102463,\"onlineRunningTime\":19516.410000018317,\"pid\":108,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[330527,103,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32747.58706534346,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.619999999995,\"onlineExpGained\":32629.95779838671,\"onlineMoneyMade\":330527,\"onlineRunningTime\":19516.410000018317,\"pid\":109,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5316,52,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12803.948683472914,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.638999999996,\"onlineExpGained\":13674.077027983103,\"onlineMoneyMade\":5316,\"onlineRunningTime\":19516.410000018317,\"pid\":110,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[40423,47,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9657.522578899205,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.662,\"onlineExpGained\":10843.349927694278,\"onlineMoneyMade\":40423,\"onlineRunningTime\":19516.410000018317,\"pid\":111,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[537,13,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6911.296465081168,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.683,\"onlineExpGained\":6585.936368859945,\"onlineMoneyMade\":537,\"onlineRunningTime\":19516.410000018317,\"pid\":112,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[50220,75,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22413.460462667474,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.703,\"onlineExpGained\":23010.81408488815,\"onlineMoneyMade\":50220,\"onlineRunningTime\":19516.410000018317,\"pid\":113,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[833,8,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4945.968319163141,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.725999999995,\"onlineExpGained\":4882.171681203834,\"onlineMoneyMade\":833,\"onlineRunningTime\":19516.410000018317,\"pid\":114,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1376,24,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9931.614215234575,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.745,\"onlineExpGained\":8438.89702603721,\"onlineMoneyMade\":1376,\"onlineRunningTime\":19516.410000018317,\"pid\":115,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[161346,21,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5809.925776752245,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.768,\"onlineExpGained\":5102.50215762159,\"onlineMoneyMade\":161346,\"onlineRunningTime\":19516.410000018317,\"pid\":116,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[787,21,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12095.975941842484,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.788,\"onlineExpGained\":11133.749225512027,\"onlineMoneyMade\":787,\"onlineRunningTime\":19516.410000018317,\"pid\":117,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[62239,25,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7696.574100202555,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.809,\"onlineExpGained\":6415.426689407263,\"onlineMoneyMade\":62239,\"onlineRunningTime\":19516.410000018317,\"pid\":118,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6924479,17,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4770.507156794764,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.828,\"onlineExpGained\":4435.915879511269,\"onlineMoneyMade\":6924479,\"onlineRunningTime\":19516.410000018317,\"pid\":119,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3476552,15,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5255.16549641036,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.85,\"onlineExpGained\":4675.695116241605,\"onlineMoneyMade\":3476552,\"onlineRunningTime\":19516.410000018317,\"pid\":120,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[767331,16,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5471.014280197749,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.873,\"onlineExpGained\":4821.161186524667,\"onlineMoneyMade\":767331,\"onlineRunningTime\":19516.410000018317,\"pid\":121,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[6682034,4,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4205.475465263037,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.895,\"onlineExpGained\":3980.601751097767,\"onlineMoneyMade\":6682034,\"onlineRunningTime\":19516.410000018317,\"pid\":122,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4359218,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3215.497755773111,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.914,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4359218,\"onlineRunningTime\":19516.410000018317,\"pid\":123,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[3178347,1,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1769.8782057861051,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.932,\"onlineExpGained\":1662.7357960378247,\"onlineMoneyMade\":3178347,\"onlineRunningTime\":19516.410000018317,\"pid\":124,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5402070,4,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3554.470542166472,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.952,\"onlineExpGained\":3411.5256959244275,\"onlineMoneyMade\":5402070,\"onlineRunningTime\":19516.410000018317,\"pid\":125,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[8902285,4,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2601.494891148513,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.97,\"onlineExpGained\":2532.0687398723726,\"onlineMoneyMade\":8902285,\"onlineRunningTime\":19516.410000018317,\"pid\":126,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[5764904,3,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3377.190127537535,\"offlineMoneyMade\":0,\"offlineRunningTime\":32794.992,\"onlineExpGained\":3318.544636347882,\"onlineMoneyMade\":5764904,\"onlineRunningTime\":19516.410000018317,\"pid\":127,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[8617237,7,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3473.392256662036,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.006,\"onlineExpGained\":3327.0701203205176,\"onlineMoneyMade\":8617237,\"onlineRunningTime\":19516.410000018317,\"pid\":128,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[9269047,3,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2222.814686537221,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.032,\"onlineExpGained\":2112.987918342572,\"onlineMoneyMade\":9269047,\"onlineRunningTime\":19516.410000018317,\"pid\":129,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[26535487,6,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2725.1413878906815,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.049,\"onlineExpGained\":2600.272611653448,\"onlineMoneyMade\":26535487,\"onlineRunningTime\":19516.410000018317,\"pid\":130,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[394372343,22,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4405.6430819560155,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.070999999996,\"onlineExpGained\":3518.3606669564997,\"onlineMoneyMade\":394372343,\"onlineRunningTime\":19516.410000018317,\"pid\":131,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[55533352,10,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3358.0645465842217,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.087999999996,\"onlineExpGained\":3106.4732225286057,\"onlineMoneyMade\":55533352,\"onlineRunningTime\":19516.410000018317,\"pid\":132,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[3638220,3,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3551.6274484554324,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.11,\"onlineExpGained\":3476.7989325899075,\"onlineMoneyMade\":3638220,\"onlineRunningTime\":19516.410000018317,\"pid\":133,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[3300932,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1528.3454377652565,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.128,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":3300932,\"onlineRunningTime\":19516.410000018317,\"pid\":134,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1345.4847812403434,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.149999999994,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":135,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[9763348,4,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954.1307799529009,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.167,\"onlineExpGained\":1900.6500831491483,\"onlineMoneyMade\":9763348,\"onlineRunningTime\":19516.410000018317,\"pid\":136,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1389.3614437142178,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.189999999995,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":137,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1417.6216333541495,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.205,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":138,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1301.6143213613027,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.229,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":139,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[6578920,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1839.4482996761342,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.244,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":6578920,\"onlineRunningTime\":19516.410000018317,\"pid\":140,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.6665893531915,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.265999999996,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":141,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[5465872,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1855.8983476791084,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.282,\"onlineExpGained\":1791.4173197497732,\"onlineMoneyMade\":5465872,\"onlineRunningTime\":19516.410000018317,\"pid\":142,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1207.514556309082,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.307,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":143,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.6185174842276,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.323,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19516.410000018317,\"pid\":144,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3121974,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1381.4257136861518,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.344,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3121974,\"onlineRunningTime\":19516.410000018317,\"pid\":145,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":88.97037500000046,\"minDifficulty\":30,\"moneyAvailable\":21444902774.20529,\"moneyMax\":487395815525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":994,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"42.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":66.10800000000066,\"minDifficulty\":22,\"moneyAvailable\":20504243413.4055,\"moneyMax\":411433530750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":80}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"32.1.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":97.96887500000035,\"minDifficulty\":33,\"moneyAvailable\":28854969453.12543,\"moneyMax\":661330752550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1258,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"30.2.7.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2046.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22475225,2767,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59989.76436666328,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.36,\"onlineExpGained\":57402.3500091183,\"onlineMoneyMade\":22475225,\"onlineRunningTime\":19518.010000018316,\"pid\":146,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[205981,339,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88284.5143538508,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.386999999995,\"onlineExpGained\":87007.8923682103,\"onlineMoneyMade\":205981,\"onlineRunningTime\":19518.010000018316,\"pid\":147,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[105419,192,1608,128]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43327.28796081842,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.403999999995,\"onlineExpGained\":42920.48337473159,\"onlineMoneyMade\":105419,\"onlineRunningTime\":19518.010000018316,\"pid\":148,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[466028,97,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32426.121513626564,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.428,\"onlineExpGained\":32510.068180021543,\"onlineMoneyMade\":466028,\"onlineRunningTime\":19518.010000018316,\"pid\":149,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4883,47,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12858.315808882631,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.441999999995,\"onlineExpGained\":13574.169012678793,\"onlineMoneyMade\":4883,\"onlineRunningTime\":19518.010000018316,\"pid\":150,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[37950,53,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10122.221321527424,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.468,\"onlineExpGained\":10963.239546059453,\"onlineMoneyMade\":37950,\"onlineRunningTime\":19518.010000018316,\"pid\":151,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[406,12,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7087.47646799503,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.613999999994,\"onlineExpGained\":6553.965803962567,\"onlineMoneyMade\":406,\"onlineRunningTime\":19518.010000018316,\"pid\":152,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[42730,72,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22182.16447697497,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.655,\"onlineExpGained\":22938.88031386905,\"onlineMoneyMade\":42730,\"onlineRunningTime\":19518.010000018316,\"pid\":153,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1065,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5179.096509485885,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.67,\"onlineExpGained\":5002.061299569002,\"onlineMoneyMade\":1065,\"onlineRunningTime\":19518.010000018316,\"pid\":154,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1253,20,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9667.50508023074,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.697,\"onlineExpGained\":8327.000048896387,\"onlineMoneyMade\":1253,\"onlineRunningTime\":19518.010000018316,\"pid\":155,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[162150,23,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5818.707582800405,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.72,\"onlineExpGained\":5163.246230926609,\"onlineMoneyMade\":162150,\"onlineRunningTime\":19518.010000018316,\"pid\":156,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[910,25,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12260.328703387791,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.742999999995,\"onlineExpGained\":11245.646202652852,\"onlineMoneyMade\":910,\"onlineRunningTime\":19518.010000018316,\"pid\":157,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[57706,22,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7545.681486890088,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.76,\"onlineExpGained\":6319.5149947151285,\"onlineMoneyMade\":57706,\"onlineRunningTime\":19518.010000018316,\"pid\":158,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6210528,16,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4819.424712562815,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.786,\"onlineExpGained\":4399.948994001718,\"onlineMoneyMade\":6210528,\"onlineRunningTime\":19518.010000018316,\"pid\":159,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3915910,17,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5425.105834012023,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.803,\"onlineExpGained\":4747.6288872607065,\"onlineMoneyMade\":3915910,\"onlineRunningTime\":19518.010000018316,\"pid\":160,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[640196,13,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5289.890708475734,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.825,\"onlineExpGained\":4706.067152894104,\"onlineMoneyMade\":640196,\"onlineRunningTime\":19518.010000018316,\"pid\":161,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[17255188,10,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4489.144484991024,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.84,\"onlineExpGained\":4301.9059283164215,\"onlineMoneyMade\":17255188,\"onlineRunningTime\":19518.010000018316,\"pid\":162,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[9427973,6,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3377.7005668234897,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.864,\"onlineExpGained\":3258.599827165298,\"onlineMoneyMade\":9427973,\"onlineRunningTime\":19518.010000018316,\"pid\":163,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1629.840550046361,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.881,\"onlineExpGained\":1599.5939303655023,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":164,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[11725795,9,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3829.666598413828,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.902,\"onlineExpGained\":3671.2865357156275,\"onlineMoneyMade\":11725795,\"onlineRunningTime\":19518.010000018316,\"pid\":165,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[2556457,1,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2329.73386212293,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.918999999994,\"onlineExpGained\":2359.427689426529,\"onlineMoneyMade\":2556457,\"onlineRunningTime\":19518.010000018316,\"pid\":166,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[7591382,4,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3488.388367743183,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.939999999995,\"onlineExpGained\":3376.0916531631633,\"onlineMoneyMade\":7591382,\"onlineRunningTime\":19518.010000018316,\"pid\":167,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[5007746,4,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3361.325442737402,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.965,\"onlineExpGained\":3192.793747751529,\"onlineMoneyMade\":5007746,\"onlineRunningTime\":19518.010000018316,\"pid\":168,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2051.048450782859,\"offlineMoneyMade\":0,\"offlineRunningTime\":32795.981999999996,\"onlineExpGained\":1928.357906060211,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":169,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[24056274,5,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2414.7059102590665,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.003,\"onlineExpGained\":2551.5175001849457,\"onlineMoneyMade\":24056274,\"onlineRunningTime\":19518.010000018316,\"pid\":170,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[340610535,22,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4022.83198289996,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.022,\"onlineExpGained\":3518.3606669564997,\"onlineMoneyMade\":340610535,\"onlineRunningTime\":19518.010000018316,\"pid\":171,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[44152737,8,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3239.85944638515,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.03999999999,\"onlineExpGained\":3021.751225550553,\"onlineMoneyMade\":44152737,\"onlineRunningTime\":19518.010000018316,\"pid\":172,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[5857436,5,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3840.229729328859,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.058,\"onlineExpGained\":3615.8708898935038,\"onlineMoneyMade\":5857436,\"onlineRunningTime\":19518.010000018316,\"pid\":173,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[3272109,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1528.3643624908755,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.077,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":3272109,\"onlineRunningTime\":19518.010000018316,\"pid\":174,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[1742827,1,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1508.6104188167005,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.095,\"onlineExpGained\":1397.1136860154386,\"onlineMoneyMade\":1742827,\"onlineRunningTime\":19518.010000018316,\"pid\":175,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[7874859,3,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1761.7828408067928,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.113,\"onlineExpGained\":1854.2927640479495,\"onlineMoneyMade\":7874859,\"onlineRunningTime\":19518.010000018316,\"pid\":176,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[5676573,2,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1579.5698637549858,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.13,\"onlineExpGained\":1619.8419548005081,\"onlineMoneyMade\":5676573,\"onlineRunningTime\":19518.010000018316,\"pid\":177,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[1348695,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1440.3193997936976,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.149,\"onlineExpGained\":1397.9129501378734,\"onlineMoneyMade\":1348695,\"onlineRunningTime\":19518.010000018316,\"pid\":178,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[3196859,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1459.4206333701939,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.168,\"onlineExpGained\":1446.4016402322302,\"onlineMoneyMade\":3196859,\"onlineRunningTime\":19518.010000018316,\"pid\":179,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[10083714,3,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1858.0273552576282,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.186,\"onlineExpGained\":1855.891292292819,\"onlineMoneyMade\":10083714,\"onlineRunningTime\":19518.010000018316,\"pid\":180,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[1186199,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1544.8849283065379,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.204,\"onlineExpGained\":1355.5519516488469,\"onlineMoneyMade\":1186199,\"onlineRunningTime\":19518.010000018316,\"pid\":181,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[5491097,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1855.9212196549422,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.221999999994,\"onlineExpGained\":1791.4173197497732,\"onlineMoneyMade\":5491097,\"onlineRunningTime\":19518.010000018316,\"pid\":182,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1207.528540153588,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.240999999995,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":183,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[1478945,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1590.6100739634435,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.259,\"onlineExpGained\":1576.4152708149022,\"onlineMoneyMade\":1478945,\"onlineRunningTime\":19518.010000018316,\"pid\":184,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3115767,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1381.4415692178093,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.276999999995,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3115767,\"onlineRunningTime\":19518.010000018316,\"pid\":185,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1437.9678496806973,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.295,\"onlineExpGained\":1553.7694540125926,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":186,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[1176794,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1496.6134289529862,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.314999999995,\"onlineExpGained\":1313.19095315982,\"onlineMoneyMade\":1176794,\"onlineRunningTime\":19518.010000018316,\"pid\":187,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[3907477,1,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1676.0321147975264,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.333,\"onlineExpGained\":1664.6007456568389,\"onlineMoneyMade\":3907477,\"onlineRunningTime\":19518.010000018316,\"pid\":188,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[9274077,3,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1658.6601846106348,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.35,\"onlineExpGained\":1791.150898375629,\"onlineMoneyMade\":9274077,\"onlineRunningTime\":19518.010000018316,\"pid\":189,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[2061229,1,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1524.5571598655906,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.367,\"onlineExpGained\":1599.3275089913573,\"onlineMoneyMade\":2061229,\"onlineRunningTime\":19518.010000018316,\"pid\":190,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[5460332,2,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1903.4306546760263,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.386,\"onlineExpGained\":1818.3258785383994,\"onlineMoneyMade\":5460332,\"onlineRunningTime\":19518.010000018316,\"pid\":191,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[3175817,2,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1511.509852720003,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.406,\"onlineExpGained\":1724.8119762135684,\"onlineMoneyMade\":3175817,\"onlineRunningTime\":19518.010000018316,\"pid\":192,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.0777629120715,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.426,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":193,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.6961529239372,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.445999999996,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":194,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1141.7363394537454,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.464,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":195,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1579.992214903439,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.483,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":196,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[44034707,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1480.1201053353338,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.502,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":44034707,\"onlineRunningTime\":19518.010000018316,\"pid\":197,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[14442628,1,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1199.829125832618,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.523,\"onlineExpGained\":1210.885145488209,\"onlineMoneyMade\":14442628,\"onlineRunningTime\":19518.010000018316,\"pid\":198,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":969.9487791802711,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.54,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":199,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":951.9875536865009,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.56,\"onlineExpGained\":960.1826324179331,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":200,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1269.8959625173093,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.578,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":201,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[2384456,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1364.3366699825597,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.596999999994,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":2384456,\"onlineRunningTime\":19518.010000018316,\"pid\":202,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1174.227028244979,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.613,\"onlineExpGained\":1092.327633993764,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":203,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,0,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1221.7632906593954,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.630999999994,\"onlineExpGained\":1210.3523027399197,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":204,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":945.6378486952311,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.65,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":205,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":945.6384404339287,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.666,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":206,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.2216496381959,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.685,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.010000018316,\"pid\":207,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[15600058127.939459,27119,73856,15579]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3670675.1957333093,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.702,\"onlineExpGained\":3624838.6333472244,\"onlineMoneyMade\":15600058127.939459,\"onlineRunningTime\":19511.81000001831,\"pid\":208,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":577,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3885.7765192514644,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.72,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":209,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":90.78487500000038,\"minDifficulty\":30,\"moneyAvailable\":1820804604.713082,\"moneyMax\":42057957500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1128,\"serverGrowth\":80}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"84.9.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.34000000000029,\"minDifficulty\":33,\"moneyAvailable\":1000928.3177670587,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1402,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408642.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"88384272\",25],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"33.7.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":86.06637500000046,\"minDifficulty\":29,\"moneyAvailable\":1233615198.1492724,\"moneyMax\":28623855175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1065,\"serverGrowth\":74}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-781924.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[140,149,182,147,136,126,156,20,18,142,190,141,23,76,81,131,134,138,59,179,194,169],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"59.4.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":85.58412500000098,\"minDifficulty\":30,\"moneyAvailable\":1018048329.6327813,\"moneyMax\":22435068025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":944,\"serverGrowth\":69}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"44.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":78.76475000000049,\"minDifficulty\":28,\"moneyAvailable\":931749403.6787753,\"moneyMax\":22225586875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":47}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"44.5.8.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":254.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22170722,2756,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59682.94527410693,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.738,\"onlineExpGained\":57305.63905030371,\"onlineMoneyMade\":22170722,\"onlineRunningTime\":19517.410000018317,\"pid\":210,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[258194,335,3286,267]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87519.73322445905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.758,\"onlineExpGained\":86922.63752848402,\"onlineMoneyMade\":258194,\"onlineRunningTime\":19517.410000018317,\"pid\":211,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[73596,158,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42854.67938792939,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.778999999995,\"onlineExpGained\":42371.65534399322,\"onlineMoneyMade\":73596,\"onlineRunningTime\":19517.410000018317,\"pid\":212,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[360320,109,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32574.035807754448,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.797999999995,\"onlineExpGained\":32749.84741675187,\"onlineMoneyMade\":360320,\"onlineRunningTime\":19517.410000018317,\"pid\":213,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4208,53,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12766.2607968782,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.816999999995,\"onlineExpGained\":13694.058631043967,\"onlineMoneyMade\":4208,\"onlineRunningTime\":19517.410000018317,\"pid\":214,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[36115,51,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9918.436821160054,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.834,\"onlineExpGained\":10923.276339937729,\"onlineMoneyMade\":36115,\"onlineRunningTime\":19517.410000018317,\"pid\":215,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[541,14,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7044.433853701322,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.854,\"onlineExpGained\":6617.906933757324,\"onlineMoneyMade\":541,\"onlineRunningTime\":19517.410000018317,\"pid\":216,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[38294,77,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22416.811331901576,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.873999999996,\"onlineExpGained\":23058.769932234216,\"onlineMoneyMade\":38294,\"onlineRunningTime\":19517.410000018317,\"pid\":217,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[997,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5217.979111381654,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.9,\"onlineExpGained\":5002.061299569002,\"onlineMoneyMade\":997,\"onlineRunningTime\":19517.410000018317,\"pid\":218,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1836,31,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10150.498337238978,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.918,\"onlineExpGained\":8634.716736033652,\"onlineMoneyMade\":1836,\"onlineRunningTime\":19517.410000018317,\"pid\":219,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[186652,22,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5936.347440249484,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.939,\"onlineExpGained\":5132.874194274101,\"onlineMoneyMade\":186652,\"onlineRunningTime\":19517.410000018317,\"pid\":220,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[782,26,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12531.156575454188,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.956999999995,\"onlineExpGained\":11273.620446938057,\"onlineMoneyMade\":782,\"onlineRunningTime\":19517.410000018317,\"pid\":221,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[47258,20,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7148.0468286753985,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.976,\"onlineExpGained\":6255.57386492037,\"onlineMoneyMade\":47258,\"onlineRunningTime\":19517.410000018317,\"pid\":222,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5178113,12,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4521.164241972445,\"offlineMoneyMade\":0,\"offlineRunningTime\":32796.994,\"onlineExpGained\":4256.081451963516,\"onlineMoneyMade\":5178113,\"onlineRunningTime\":19517.410000018317,\"pid\":223,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4380039,18,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5286.440374122559,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.014,\"onlineExpGained\":4783.595772770258,\"onlineMoneyMade\":4380039,\"onlineRunningTime\":19517.410000018317,\"pid\":224,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[727593,18,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5260.054846696036,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.032,\"onlineExpGained\":4897.8905422783755,\"onlineMoneyMade\":727593,\"onlineRunningTime\":19517.410000018317,\"pid\":225,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[10048383,6,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4339.898101555844,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.051999999996,\"onlineExpGained\":4087.7031435039853,\"onlineMoneyMade\":10048383,\"onlineRunningTime\":19517.410000018317,\"pid\":226,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[6334583,4,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3215.713885502617,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.068999999996,\"onlineExpGained\":3129.1190393309153,\"onlineMoneyMade\":6334583,\"onlineRunningTime\":19517.410000018317,\"pid\":227,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[4505302,1,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1648.0305204171104,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.085,\"onlineExpGained\":1662.7357960378247,\"onlineMoneyMade\":4505302,\"onlineRunningTime\":19517.410000018317,\"pid\":228,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[6350646,5,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3684.845407436082,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.104,\"onlineExpGained\":3463.4778638826674,\"onlineMoneyMade\":6350646,\"onlineRunningTime\":19517.410000018317,\"pid\":229,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[6729615,3,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2490.510370334993,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.121999999996,\"onlineExpGained\":2474.5217230570915,\"onlineMoneyMade\":6729615,\"onlineRunningTime\":19517.410000018317,\"pid\":230,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[5530030,3,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3488.5767370457143,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.141,\"onlineExpGained\":3318.5446363478823,\"onlineMoneyMade\":5530030,\"onlineRunningTime\":19517.410000018317,\"pid\":231,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[10388052,8,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3399.9984260045003,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.157,\"onlineExpGained\":3371.8289111768477,\"onlineMoneyMade\":10388052,\"onlineRunningTime\":19517.410000018317,\"pid\":232,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2051.1588824849246,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.174,\"onlineExpGained\":1928.357906060211,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":233,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[27311436,6,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2617.1720083723567,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.191999999995,\"onlineExpGained\":2600.2726116534486,\"onlineMoneyMade\":27311436,\"onlineRunningTime\":19517.410000018317,\"pid\":234,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[391933538,23,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4214.479440522808,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.209,\"onlineExpGained\":3567.9150425474363,\"onlineMoneyMade\":391933538,\"onlineRunningTime\":19517.410000018317,\"pid\":235,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[50632031,9,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3252.1752634459363,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.227,\"onlineExpGained\":3064.1122240395794,\"onlineMoneyMade\":50632031,\"onlineRunningTime\":19517.410000018317,\"pid\":236,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2499991,2,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3397.6166354233724,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.244999999995,\"onlineExpGained\":3407.262953938109,\"onlineMoneyMade\":2499991,\"onlineRunningTime\":19517.410000018317,\"pid\":237,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[12447021,4,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1691.3298901483229,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.259,\"onlineExpGained\":1730.9396678188987,\"onlineMoneyMade\":12447021,\"onlineRunningTime\":19517.410000018317,\"pid\":238,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1345.5761076431718,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.282999999996,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":239,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[12800844,5,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1878.0059560254108,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.297999999995,\"onlineExpGained\":1947.007402250347,\"onlineMoneyMade\":12800844,\"onlineRunningTime\":19517.410000018317,\"pid\":240,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[3211976,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1411.222464213449,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.32,\"onlineExpGained\":1543.9118631692343,\"onlineMoneyMade\":3211976,\"onlineRunningTime\":19517.410000018317,\"pid\":241,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1417.7153085662144,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.335,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":242,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[3190855,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1459.4997088683012,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.367999999995,\"onlineExpGained\":1446.4016402322302,\"onlineMoneyMade\":3190855,\"onlineRunningTime\":19517.410000018317,\"pid\":243,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[7008918,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1714.5178254592297,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.383,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":7008918,\"onlineRunningTime\":19517.410000018317,\"pid\":244,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.7577310979505,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.405,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":245,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[8346840,3,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1874.8105016378943,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.419,\"onlineExpGained\":1856.9569777893992,\"onlineMoneyMade\":8346840,\"onlineRunningTime\":19517.410000018317,\"pid\":246,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1207.5972064489526,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.439,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":247,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.7145482318676,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.454,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":248,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3109573,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1381.520838841583,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.475,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3109573,\"onlineRunningTime\":19517.410000018317,\"pid\":249,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1438.0505720318474,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.489,\"onlineExpGained\":1553.7694540125926,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":250,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1331.8017823058428,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.509,\"onlineExpGained\":1238.8593897734152,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":251,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[14861018,4,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1944.1599372536698,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.524,\"onlineExpGained\":1834.8440037353796,\"onlineMoneyMade\":14861018,\"onlineRunningTime\":19517.410000018317,\"pid\":252,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[5973425,2,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1639.738942269645,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.547,\"onlineExpGained\":1724.8119762135684,\"onlineMoneyMade\":5973425,\"onlineRunningTime\":19517.410000018317,\"pid\":253,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1504.7087745399865,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.562,\"onlineExpGained\":1529.7915303395591,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":254,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[8068766,3,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2036.509818723846,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.581999999995,\"onlineExpGained\":1878.270687720984,\"onlineMoneyMade\":8068766,\"onlineRunningTime\":19517.410000018317,\"pid\":255,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[1595876,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1492.5822393608696,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.596,\"onlineExpGained\":1658.473054051508,\"onlineMoneyMade\":1595876,\"onlineRunningTime\":19517.410000018317,\"pid\":256,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.1275594718907,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.618,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":257,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.7695722116064,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.632,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":258,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1141.7980717594878,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.654,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":259,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1580.076073916134,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.668999999994,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":260,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,0,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1347.2228970980539,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.69,\"onlineExpGained\":1358.7490081385845,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":261,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1176.753339052275,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.704,\"onlineExpGained\":1130.1594691223286,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":262,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":970.0017459079897,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.723,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":263,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":952.0393190755997,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.738,\"onlineExpGained\":960.1826324179331,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":264,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1269.9646380879535,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.765,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":265,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[2231019,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1480.2053188169632,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.794,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":2231019,\"onlineRunningTime\":19517.410000018317,\"pid\":266,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1174.2920619964395,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.835999999996,\"onlineExpGained\":1092.327633993764,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":267,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[151736579,3,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1353.4802303037354,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.87,\"onlineExpGained\":1351.8220524108192,\"onlineMoneyMade\":151736579,\"onlineRunningTime\":19517.410000018317,\"pid\":268,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":945.6895769966054,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.907,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":269,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":945.6908032026124,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.938,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":270,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.2714507980536,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.958,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19517.410000018317,\"pid\":271,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[801985608,918,2074,459]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":91058.20684490645,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.979,\"onlineExpGained\":95791.80507377016,\"onlineMoneyMade\":801985608,\"onlineRunningTime\":19511.81000001831,\"pid\":272,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":17,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3885.9802387591817,\"offlineMoneyMade\":0,\"offlineRunningTime\":32797.998999999996,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":273,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"helios\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"helios\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":81.7607500000005,\"minDifficulty\":29,\"moneyAvailable\":800387957.5710139,\"moneyMax\":18594207250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-842330.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[87,107,13,116,133,129,117,94,76,100,115,44,185,5,181,114,11,166,24,135,167,162,60,62,184,122,12,95,10,32,13,130,113,64,120,142,14,132,183,149,16,200,123,20,184,93,13,57,170],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"78.3.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[24411433,2813,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60512.50667488511,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.016,\"onlineExpGained\":57803.84701995461,\"onlineMoneyMade\":24411433,\"onlineRunningTime\":19516.610000018318,\"pid\":274,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[340001,338,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87813.8612870242,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.037,\"onlineExpGained\":86991.90708576156,\"onlineMoneyMade\":340001,\"onlineRunningTime\":19516.610000018318,\"pid\":275,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[70533,162,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42982.048043166884,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.051999999996,\"onlineExpGained\":42435.59647378798,\"onlineMoneyMade\":70533,\"onlineRunningTime\":19516.610000018318,\"pid\":276,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[635863,110,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32487.426474384916,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.070999999996,\"onlineExpGained\":32769.82901981273,\"onlineMoneyMade\":635863,\"onlineRunningTime\":19516.610000018318,\"pid\":277,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[6460,55,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12822.883862036084,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.085999999996,\"onlineExpGained\":13734.021837165687,\"onlineMoneyMade\":6460,\"onlineRunningTime\":19516.610000018318,\"pid\":278,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[39225,47,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9940.513810093771,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.106999999996,\"onlineExpGained\":10843.349927694284,\"onlineMoneyMade\":39225,\"onlineRunningTime\":19516.610000018318,\"pid\":279,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[591,17,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7266.786095206272,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.119999999995,\"onlineExpGained\":6713.818628449458,\"onlineMoneyMade\":591,\"onlineRunningTime\":19516.610000018318,\"pid\":280,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[50449,72,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22277.486473358564,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.140999999996,\"onlineExpGained\":22938.880313869042,\"onlineMoneyMade\":50449,\"onlineRunningTime\":19516.610000018318,\"pid\":281,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1054,13,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5141.098117189229,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.155,\"onlineExpGained\":4982.079696508139,\"onlineMoneyMade\":1054,\"onlineRunningTime\":19516.610000018318,\"pid\":282,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.008100975026,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.178,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":283,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":77.48337500000062,\"minDifficulty\":28,\"moneyAvailable\":838894419.4880221,\"moneyMax\":19408176225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":777,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"83.2.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"icarus\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"icarus\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":77.96075000000097,\"minDifficulty\":29,\"moneyAvailable\":1069389291.4872814,\"moneyMax\":22601439700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"28.6.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23482037,2789,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59013.41181433121,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.192,\"onlineExpGained\":57592.84129163233,\"onlineMoneyMade\":23482037,\"onlineRunningTime\":19518.610000018314,\"pid\":284,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[321055,350,3285,269]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87801.75282056397,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.212999999996,\"onlineExpGained\":87183.73047514574,\"onlineMoneyMade\":321055,\"onlineRunningTime\":19518.610000018314,\"pid\":285,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[105831,156,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42422.88442251386,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.226,\"onlineExpGained\":42339.68477909585,\"onlineMoneyMade\":105831,\"onlineRunningTime\":19518.610000018314,\"pid\":286,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[599457,110,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32503.87044335641,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.246,\"onlineExpGained\":32769.82901981273,\"onlineMoneyMade\":599457,\"onlineRunningTime\":19518.610000018314,\"pid\":287,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.0209914582047,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.261,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":288,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":78.35362500000109,\"minDifficulty\":29,\"moneyAvailable\":1310827237.2567964,\"moneyMax\":27622502600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":821,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-970941-TianDiHui.cct\",\"type\":\"Total Ways to Sum\",\"data\":51,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"55.9.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23520118,2816,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60336.1836594846,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.287,\"onlineExpGained\":57830.2227359951,\"onlineMoneyMade\":23520118,\"onlineRunningTime\":19518.410000018317,\"pid\":289,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[314406,347,3289,265]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88165.15401186685,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.307,\"onlineExpGained\":87141.10305528264,\"onlineMoneyMade\":314406,\"onlineRunningTime\":19518.410000018317,\"pid\":290,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[111680,148,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42722.79221169676,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.329,\"onlineExpGained\":42211.80251950633,\"onlineMoneyMade\":111680,\"onlineRunningTime\":19518.410000018317,\"pid\":291,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[356744,108,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33133.10689805992,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.344,\"onlineExpGained\":32729.86581369101,\"onlineMoneyMade\":356744,\"onlineRunningTime\":19518.410000018317,\"pid\":292,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.0374206181627,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.366,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":293,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":71.08425000000064,\"minDifficulty\":26,\"moneyAvailable\":955709357.8864533,\"moneyMax\":21955007900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"67.6.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22715580,2741,1106,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59386.39651417085,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.379,\"onlineExpGained\":57179.621740333314,\"onlineMoneyMade\":22715580,\"onlineRunningTime\":19518.210000018316,\"pid\":294,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[363054,342,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87774.2142784964,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.402,\"onlineExpGained\":87055.84821555635,\"onlineMoneyMade\":363054,\"onlineRunningTime\":19518.210000018316,\"pid\":295,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[37335,163,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43224.100773480175,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.418999999994,\"onlineExpGained\":42451.58175623668,\"onlineMoneyMade\":37335,\"onlineRunningTime\":19518.210000018316,\"pid\":296,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[517663,101,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32734.401666087902,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.445,\"onlineExpGained\":32589.99459226499,\"onlineMoneyMade\":517663,\"onlineRunningTime\":19518.210000018316,\"pid\":297,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4964,57,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12955.731707412959,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.462,\"onlineExpGained\":13773.98504328741,\"onlineMoneyMade\":4964,\"onlineRunningTime\":19518.210000018316,\"pid\":298,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[44860,56,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10146.363277575649,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.496999999996,\"onlineExpGained\":11023.184355242041,\"onlineMoneyMade\":44860,\"onlineRunningTime\":19518.210000018316,\"pid\":299,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[302,10,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7079.063372196813,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.518,\"onlineExpGained\":6490.024674167813,\"onlineMoneyMade\":302,\"onlineRunningTime\":19518.210000018316,\"pid\":300,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[50284,70,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21978.772252894705,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.54,\"onlineExpGained\":22890.92446652298,\"onlineMoneyMade\":50284,\"onlineRunningTime\":19518.210000018316,\"pid\":301,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1072,13,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5129.6031189143105,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.559,\"onlineExpGained\":4982.079696508141,\"onlineMoneyMade\":1072,\"onlineRunningTime\":19518.210000018316,\"pid\":302,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.071639763695,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.583,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":303,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":69.63500000000063,\"minDifficulty\":24,\"moneyAvailable\":644540862.5774285,\"moneyMax\":13803901300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"68.8.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":67.63300000000064,\"minDifficulty\":24,\"moneyAvailable\":988215186.9831588,\"moneyMax\":21442335700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"32.6.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":65.41600000000037,\"minDifficulty\":21,\"moneyAvailable\":1220357798.1525435,\"moneyMax\":18834639975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"61.6.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":73.30562500000102,\"minDifficulty\":27,\"moneyAvailable\":1246462160.6430273,\"moneyMax\":27557222300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":902,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"51.9.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23428616,2826,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60005.117515756116,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.604,\"onlineExpGained\":57924.003059694194,\"onlineMoneyMade\":23428616,\"onlineRunningTime\":19519.210000018316,\"pid\":304,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[270746,337,3289,265]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87801.46544919841,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.629,\"onlineExpGained\":86981.25023079586,\"onlineMoneyMade\":270746,\"onlineRunningTime\":19519.210000018316,\"pid\":305,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[107201,160,1605,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42623.42592355273,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.646,\"onlineExpGained\":42403.625908890644,\"onlineMoneyMade\":107201,\"onlineRunningTime\":19519.210000018316,\"pid\":306,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[385684,100,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32363.915037775172,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.668,\"onlineExpGained\":32570.012989204122,\"onlineMoneyMade\":385684,\"onlineRunningTime\":19519.210000018316,\"pid\":307,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[6975,61,412,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12943.278538411563,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.685,\"onlineExpGained\":13880.553592945344,\"onlineMoneyMade\":6975,\"onlineRunningTime\":19519.210000018316,\"pid\":308,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[34106,46,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9768.766533660713,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.710999999996,\"onlineExpGained\":10823.368324633419,\"onlineMoneyMade\":34106,\"onlineRunningTime\":19519.210000018316,\"pid\":309,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[661,19,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7399.373613085374,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.731999999996,\"onlineExpGained\":6777.759758244215,\"onlineMoneyMade\":661,\"onlineRunningTime\":19519.210000018316,\"pid\":310,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34975,78,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22404.157286470996,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.755,\"onlineExpGained\":23082.747855907255,\"onlineMoneyMade\":34975,\"onlineRunningTime\":19519.210000018316,\"pid\":311,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1540,18,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5196.812028400469,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.769,\"onlineExpGained\":5081.987711812448,\"onlineMoneyMade\":1540,\"onlineRunningTime\":19519.210000018316,\"pid\":312,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1425,21,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9584.43352305465,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.791,\"onlineExpGained\":8354.974293181594,\"onlineMoneyMade\":1425,\"onlineRunningTime\":19519.210000018316,\"pid\":313,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[201695,23,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6003.994498213247,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.805,\"onlineExpGained\":5163.24623092661,\"onlineMoneyMade\":201695,\"onlineRunningTime\":19519.210000018316,\"pid\":314,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[881,23,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12137.436566158809,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.825,\"onlineExpGained\":11189.697714082438,\"onlineMoneyMade\":881,\"onlineRunningTime\":19519.210000018316,\"pid\":315,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[40098,18,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7086.617325074008,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.839,\"onlineExpGained\":6191.632735125614,\"onlineMoneyMade\":40098,\"onlineRunningTime\":19519.210000018316,\"pid\":316,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5461051,14,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4868.7565999958515,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.858,\"onlineExpGained\":4328.015222982616,\"onlineMoneyMade\":5461051,\"onlineRunningTime\":19519.210000018316,\"pid\":317,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3720573,16,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5356.1591696768755,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.873,\"onlineExpGained\":4711.662001751156,\"onlineMoneyMade\":3720573,\"onlineRunningTime\":19519.210000018316,\"pid\":318,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[534542,11,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5194.308849633122,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.897,\"onlineExpGained\":4629.337797140396,\"onlineMoneyMade\":534542,\"onlineRunningTime\":19519.210000018316,\"pid\":319,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[13677468,8,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4474.247597220004,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.912,\"onlineExpGained\":4194.804535910203,\"onlineMoneyMade\":13677468,\"onlineRunningTime\":19519.210000018316,\"pid\":320,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[1238667,1,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3053.6877631863426,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.937999999995,\"onlineExpGained\":2934.8978575793412,\"onlineMoneyMade\":1238667,\"onlineRunningTime\":19519.210000018316,\"pid\":321,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[3195807,1,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1770.078489060881,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.953,\"onlineExpGained\":1662.7357960378247,\"onlineMoneyMade\":3195807,\"onlineRunningTime\":19519.210000018316,\"pid\":322,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[9989246,8,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3930.4108435229023,\"offlineMoneyMade\":0,\"offlineRunningTime\":32798.978,\"onlineExpGained\":3619.3343677573876,\"onlineMoneyMade\":9989246,\"onlineRunningTime\":19519.210000018316,\"pid\":323,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnia\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnia\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":80.92875000000095,\"minDifficulty\":30,\"moneyAvailable\":1069759614.3487772,\"moneyMax\":23609742200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"40.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":62.44399999999963,\"minDifficulty\":20,\"moneyAvailable\":1300481677.2494469,\"moneyMax\":25384498000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":824,\"serverGrowth\":69}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"59.6.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":66.4460000000009,\"minDifficulty\":22,\"moneyAvailable\":1020971753.7086025,\"moneyMax\":19809133050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":775,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-754944-Volhaven.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-4,-3,-6,4,-2,8,-2,-5,7],\"reward\":{\"name\":\"Volhaven\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"52.5.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23213410,2798,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60133.91834128722,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.07,\"onlineExpGained\":57671.96843975292,\"onlineMoneyMade\":23213410,\"onlineRunningTime\":19518.810000018315,\"pid\":324,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[345242,370,3285,269]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88525.0968575638,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.095,\"onlineExpGained\":87503.43612411951,\"onlineMoneyMade\":345242,\"onlineRunningTime\":19518.810000018315,\"pid\":325,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[98717,163,1605,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42990.40791629111,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.111,\"onlineExpGained\":42451.581756236665,\"onlineMoneyMade\":98717,\"onlineRunningTime\":19518.810000018315,\"pid\":326,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[491006,100,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32773.59319283899,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.133,\"onlineExpGained\":32570.012989204133,\"onlineMoneyMade\":491006,\"onlineRunningTime\":19518.810000018315,\"pid\":327,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[6067,58,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12828.72011471961,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.148,\"onlineExpGained\":13793.966646348275,\"onlineMoneyMade\":6067,\"onlineRunningTime\":19518.810000018315,\"pid\":328,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[37719,50,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10062.115371991651,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.164,\"onlineExpGained\":10903.294736876865,\"onlineMoneyMade\":37719,\"onlineRunningTime\":19518.810000018315,\"pid\":329,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[450,12,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7097.51645770485,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.191,\"onlineExpGained\":6553.965803962569,\"onlineMoneyMade\":450,\"onlineRunningTime\":19518.810000018315,\"pid\":330,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[33223,67,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22090.618085081038,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.215,\"onlineExpGained\":22818.99069550387,\"onlineMoneyMade\":33223,\"onlineRunningTime\":19518.810000018315,\"pid\":331,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[767,12,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5212.617354132712,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.235,\"onlineExpGained\":4962.098093447279,\"onlineMoneyMade\":767,\"onlineRunningTime\":19518.810000018315,\"pid\":332,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1000,19,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9738.736056430585,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.252,\"onlineExpGained\":8299.025804611181,\"onlineMoneyMade\":1000,\"onlineRunningTime\":19518.810000018315,\"pid\":333,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[188231,23,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5945.457687818389,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.27,\"onlineExpGained\":5163.24623092661,\"onlineMoneyMade\":188231,\"onlineRunningTime\":19518.810000018315,\"pid\":334,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1130,32,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12564.095386093906,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.288,\"onlineExpGained\":11441.465912649292,\"onlineMoneyMade\":1130,\"onlineRunningTime\":19518.810000018315,\"pid\":335,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[46215,17,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7006.687160611767,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.307,\"onlineExpGained\":6159.6621702282355,\"onlineMoneyMade\":46215,\"onlineRunningTime\":19518.810000018315,\"pid\":336,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5231109,13,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4719.599727918805,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.322,\"onlineExpGained\":4292.048337473066,\"onlineMoneyMade\":5231109,\"onlineRunningTime\":19518.810000018315,\"pid\":337,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3301064,14,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5196.701661902125,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.338,\"onlineExpGained\":4639.728230732056,\"onlineMoneyMade\":3301064,\"onlineRunningTime\":19518.810000018315,\"pid\":338,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[891732,21,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5515.7453306493435,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.356,\"onlineExpGained\":5012.9845759089385,\"onlineMoneyMade\":891732,\"onlineRunningTime\":19518.810000018315,\"pid\":339,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[13596719,8,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4474.350823890187,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.373,\"onlineExpGained\":4194.804535910203,\"onlineMoneyMade\":13596719,\"onlineRunningTime\":19518.810000018315,\"pid\":340,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[5314088,4,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3359.559080022291,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.39,\"onlineExpGained\":3129.1190393309153,\"onlineMoneyMade\":5314088,\"onlineRunningTime\":19518.810000018315,\"pid\":341,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[7374680,2,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1788.2220544753359,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.406,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":7374680,\"onlineRunningTime\":19518.810000018315,\"pid\":342,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[8851552,7,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3815.2486636862377,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.424,\"onlineExpGained\":3567.382199799147,\"onlineMoneyMade\":8851552,\"onlineRunningTime\":19518.810000018315,\"pid\":343,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"solaris\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"solaris\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":70.16087500000143,\"minDifficulty\":24,\"moneyAvailable\":1214082019.8727021,\"moneyMax\":22173667125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"68.6.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":70.0056250000011,\"minDifficulty\":26,\"moneyAvailable\":1930574335.7838526,\"moneyMax\":42130894350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"81.3.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23087638,2821,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60094.35496854744,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.441,\"onlineExpGained\":57880.04353296021,\"onlineMoneyMade\":23087638,\"onlineRunningTime\":19519.410000018313,\"pid\":344,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[237816,374,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88253.43996165767,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.458,\"onlineExpGained\":87567.37725391428,\"onlineMoneyMade\":237816,\"onlineRunningTime\":19519.410000018313,\"pid\":345,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[75691,176,1605,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43337.290196864225,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.475,\"onlineExpGained\":42659.39042806963,\"onlineMoneyMade\":75691,\"onlineRunningTime\":19519.410000018313,\"pid\":346,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[374114,104,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32476.432331788048,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.492999999995,\"onlineExpGained\":32649.939401447566,\"onlineMoneyMade\":374114,\"onlineRunningTime\":19519.410000018313,\"pid\":347,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4587,45,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12567.068756422444,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.539,\"onlineExpGained\":13534.205806557067,\"onlineMoneyMade\":4587,\"onlineRunningTime\":19519.410000018313,\"pid\":348,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[22547,40,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9784.762958717542,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.556,\"onlineExpGained\":10703.478706268248,\"onlineMoneyMade\":22547,\"onlineRunningTime\":19519.410000018313,\"pid\":349,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[427,12,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7035.8042941581425,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.574,\"onlineExpGained\":6553.965803962567,\"onlineMoneyMade\":427,\"onlineRunningTime\":19519.410000018313,\"pid\":350,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[31257,65,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21944.924065345484,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.591,\"onlineExpGained\":22771.034848157804,\"onlineMoneyMade\":31257,\"onlineRunningTime\":19519.410000018313,\"pid\":351,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1193,13,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5085.396336905062,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.609,\"onlineExpGained\":4982.079696508141,\"onlineMoneyMade\":1193,\"onlineRunningTime\":19519.410000018313,\"pid\":352,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1405,24,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9878.952812026613,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.628,\"onlineExpGained\":8438.89702603721,\"onlineMoneyMade\":1405,\"onlineRunningTime\":19519.410000018313,\"pid\":353,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[186829,23,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5954.201840634019,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.645,\"onlineExpGained\":5163.24623092661,\"onlineMoneyMade\":186829,\"onlineRunningTime\":19519.410000018313,\"pid\":354,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[806,25,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12415.994515730763,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.663,\"onlineExpGained\":11245.646202652852,\"onlineMoneyMade\":806,\"onlineRunningTime\":19519.410000018313,\"pid\":355,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[45344,23,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7176.075152465764,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.68,\"onlineExpGained\":6351.4855596125035,\"onlineMoneyMade\":45344,\"onlineRunningTime\":19519.410000018313,\"pid\":356,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5477538,14,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4729.9407509019575,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.699,\"onlineExpGained\":4328.015222982617,\"onlineMoneyMade\":5477538,\"onlineRunningTime\":19519.410000018313,\"pid\":357,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3556335,15,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5276.523452911414,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.718,\"onlineExpGained\":4675.695116241606,\"onlineMoneyMade\":3556335,\"onlineRunningTime\":19519.410000018313,\"pid\":358,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[537786,13,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5120.34825716298,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.734,\"onlineExpGained\":4706.067152894105,\"onlineMoneyMade\":537786,\"onlineRunningTime\":19519.410000018313,\"pid\":359,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[4745576,3,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4190.724144787931,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.755,\"onlineExpGained\":3927.051054894658,\"onlineMoneyMade\":4745576,\"onlineRunningTime\":19519.410000018313,\"pid\":360,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4992685,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3090.9017340048126,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.782999999996,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4992685,\"onlineRunningTime\":19519.410000018313,\"pid\":361,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[8669900,2,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1666.2637733073825,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.818,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":8669900,\"onlineRunningTime\":19519.410000018313,\"pid\":362,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[10376531,8,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3815.2778700376807,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.853,\"onlineExpGained\":3619.334367757387,\"onlineMoneyMade\":10376531,\"onlineRunningTime\":19519.410000018313,\"pid\":363,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":76.0096250000011,\"minDifficulty\":28,\"moneyAvailable\":1852502271.9711795,\"moneyMax\":38731824625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":805,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"65.9.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":69.65300000000059,\"minDifficulty\":24,\"moneyAvailable\":1246255354.5778081,\"moneyMax\":27739418025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":82}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"43.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":83,\"hackDifficulty\":74.02562500000106,\"minDifficulty\":28,\"moneyAvailable\":1663373793.0231674,\"moneyMax\":36211087275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":828,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"89.0.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22900150,2790,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59491.86839951167,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.886999999995,\"onlineExpGained\":57607.49446721018,\"onlineMoneyMade\":22900150,\"onlineRunningTime\":19519.010000018316,\"pid\":364,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[323014,325,3291,263]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87340.4805084943,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.924,\"onlineExpGained\":86789.42684141156,\"onlineMoneyMade\":323014,\"onlineRunningTime\":19519.010000018316,\"pid\":365,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[68071,161,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42872.721220099185,\"offlineMoneyMade\":0,\"offlineRunningTime\":32799.958,\"onlineExpGained\":42419.611191339274,\"onlineMoneyMade\":68071,\"onlineRunningTime\":19519.010000018316,\"pid\":366,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[521672,113,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32787.5254475374,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.001,\"onlineExpGained\":32829.77382899532,\"onlineMoneyMade\":521672,\"onlineRunningTime\":19519.010000018316,\"pid\":367,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.290209195966,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.019,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":368,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":70.30200000000153,\"minDifficulty\":24,\"moneyAvailable\":1409161745.5672443,\"moneyMax\":25439327050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":788,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"20.2.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22345946,2806,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59830.845838228575,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.036,\"onlineExpGained\":57754.02622298969,\"onlineMoneyMade\":22345946,\"onlineRunningTime\":19520.010000018316,\"pid\":369,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[333720,346,3285,269]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87941.74573565289,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.059,\"onlineExpGained\":87114.46091786821,\"onlineMoneyMade\":333720,\"onlineRunningTime\":19520.010000018316,\"pid\":370,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[72814,165,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42819.7328705837,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.118,\"onlineExpGained\":42483.552321134055,\"onlineMoneyMade\":72814,\"onlineRunningTime\":19520.010000018316,\"pid\":371,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[501598,103,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32575.522427436605,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.147,\"onlineExpGained\":32629.95779838671,\"onlineMoneyMade\":501598,\"onlineRunningTime\":19520.010000018316,\"pid\":372,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4668,59,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12911.90027691473,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.162,\"onlineExpGained\":13813.948249409135,\"onlineMoneyMade\":4668,\"onlineRunningTime\":19520.010000018316,\"pid\":373,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38107,42,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9719.152768099219,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.181,\"onlineExpGained\":10743.44191238997,\"onlineMoneyMade\":38107,\"onlineRunningTime\":19520.010000018316,\"pid\":374,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[554,14,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6955.807736880712,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.199,\"onlineExpGained\":6617.906933757324,\"onlineMoneyMade\":554,\"onlineRunningTime\":19520.010000018316,\"pid\":375,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34252,63,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21977.788650980343,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.221,\"onlineExpGained\":22723.079000811733,\"onlineMoneyMade\":34252,\"onlineRunningTime\":19520.010000018316,\"pid\":376,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[769,11,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5162.661886411412,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.235,\"onlineExpGained\":4942.116490386417,\"onlineMoneyMade\":769,\"onlineRunningTime\":19520.010000018316,\"pid\":377,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.3239837939946,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.257999999994,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":378,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":69.97000000000175,\"minDifficulty\":22,\"moneyAvailable\":1126533653.5706599,\"moneyMax\":19589643150,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":669,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-289359-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":10,\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"56.6.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22761877,2754,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59234.319380482484,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.273,\"onlineExpGained\":57288.0552396104,\"onlineMoneyMade\":22761877,\"onlineRunningTime\":19519.810000018315,\"pid\":379,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[298540,351,3288,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88026.67925449077,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.291999999994,\"onlineExpGained\":87199.71575759453,\"onlineMoneyMade\":298540,\"onlineRunningTime\":19519.810000018315,\"pid\":380,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[135600,168,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42971.178042037725,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.307,\"onlineExpGained\":42531.508168480126,\"onlineMoneyMade\":135600,\"onlineRunningTime\":19519.810000018315,\"pid\":381,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[688940,104,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32758.884086201215,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.327,\"onlineExpGained\":32649.939401447573,\"onlineMoneyMade\":688940,\"onlineRunningTime\":19519.810000018315,\"pid\":382,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4398,49,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12738.947130949027,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.342,\"onlineExpGained\":13614.132218800512,\"onlineMoneyMade\":4398,\"onlineRunningTime\":19519.810000018315,\"pid\":383,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[41846,42,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9730.713988045043,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.361999999994,\"onlineExpGained\":10743.44191238997,\"onlineMoneyMade\":41846,\"onlineRunningTime\":19519.810000018315,\"pid\":384,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[100,3,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6697.26603443193,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.376,\"onlineExpGained\":6266.230719886165,\"onlineMoneyMade\":100,\"onlineRunningTime\":19519.810000018315,\"pid\":385,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[41259,63,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21938.563262154334,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.39599999999,\"onlineExpGained\":22723.07900081173,\"onlineMoneyMade\":41259,\"onlineRunningTime\":19519.810000018315,\"pid\":386,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1152,13,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5091.241561949295,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.409,\"onlineExpGained\":4982.079696508141,\"onlineMoneyMade\":1152,\"onlineRunningTime\":19519.810000018315,\"pid\":387,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.35049071074,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.429000000004,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":388,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":49.37199999999842,\"minDifficulty\":14,\"moneyAvailable\":1024554035.6348289,\"moneyMax\":15956922350,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":493,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-759008-OmegaSoftware.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[100,22,159,136,130,145,23,95,142],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"64.8.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22980152,2849,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60308.58899295717,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.443,\"onlineExpGained\":58137.939423132615,\"onlineMoneyMade\":22980152,\"onlineRunningTime\":19520.010000018316,\"pid\":389,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[200071,334,3291,263]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87840.75743648091,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.459,\"onlineExpGained\":86933.29438344973,\"onlineMoneyMade\":200071,\"onlineRunningTime\":19520.010000018316,\"pid\":390,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[53216,163,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42849.673866605604,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.477999999996,\"onlineExpGained\":42430.26804630509,\"onlineMoneyMade\":53216,\"onlineRunningTime\":19520.010000018316,\"pid\":391,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[532309,123,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33132.3152246978,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.493,\"onlineExpGained\":33029.58985960395,\"onlineMoneyMade\":532309,\"onlineRunningTime\":19520.010000018316,\"pid\":392,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4889,47,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12661.797083772231,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.511999999995,\"onlineExpGained\":13574.16901267879,\"onlineMoneyMade\":4889,\"onlineRunningTime\":19520.010000018316,\"pid\":393,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[33409,43,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9763.618517737446,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.527,\"onlineExpGained\":10763.423515450833,\"onlineMoneyMade\":33409,\"onlineRunningTime\":19520.010000018316,\"pid\":394,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[564,16,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7257.931924422934,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.547,\"onlineExpGained\":6681.84806355208,\"onlineMoneyMade\":564,\"onlineRunningTime\":19520.010000018316,\"pid\":395,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[30445,64,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21785.93717443947,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.565,\"onlineExpGained\":22747.056924484772,\"onlineMoneyMade\":30445,\"onlineRunningTime\":19520.010000018316,\"pid\":396,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[979,16,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5345.771826783694,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.581999999995,\"onlineExpGained\":5042.024505690726,\"onlineMoneyMade\":979,\"onlineRunningTime\":19520.010000018316,\"pid\":397,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.3768899727747,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.6,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":398,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":55.61999999999871,\"minDifficulty\":17,\"moneyAvailable\":987452997.2881646,\"moneyMax\":17998009025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":574,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"30.7.1.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22396515,2772,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59824.389834929694,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.619,\"onlineExpGained\":57449.24017096785,\"onlineMoneyMade\":22396515,\"onlineRunningTime\":19519.610000018314,\"pid\":399,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[260385,342,3291,263]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88441.35255773412,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.635,\"onlineExpGained\":87061.17664303913,\"onlineMoneyMade\":260385,\"onlineRunningTime\":19519.610000018314,\"pid\":400,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[112647,167,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42850.21312811528,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.653,\"onlineExpGained\":42494.20917609986,\"onlineMoneyMade\":112647,\"onlineRunningTime\":19519.610000018314,\"pid\":401,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[488197,106,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32587.834624741874,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.672,\"onlineExpGained\":32689.902607569285,\"onlineMoneyMade\":488197,\"onlineRunningTime\":19519.610000018314,\"pid\":402,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5032,47,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12567.58304141112,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.689,\"onlineExpGained\":13574.16901267879,\"onlineMoneyMade\":5032,\"onlineRunningTime\":19519.610000018314,\"pid\":403,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[31787,37,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9939.563187721267,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.706,\"onlineExpGained\":10643.53389708566,\"onlineMoneyMade\":31787,\"onlineRunningTime\":19519.610000018314,\"pid\":404,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[505,14,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7159.592964079031,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.723,\"onlineExpGained\":6617.906933757325,\"onlineMoneyMade\":505,\"onlineRunningTime\":19519.610000018314,\"pid\":405,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43870,70,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22258.098594641895,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.742,\"onlineExpGained\":22890.924466522974,\"onlineMoneyMade\":43870,\"onlineRunningTime\":19519.610000018314,\"pid\":406,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1186,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5307.238263427675,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.759,\"onlineExpGained\":5062.006108751587,\"onlineMoneyMade\":1186,\"onlineRunningTime\":19519.610000018314,\"pid\":407,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.404757715135,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.778,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":408,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":75.38975000000286,\"minDifficulty\":26,\"moneyAvailable\":407520906.5540078,\"moneyMax\":8283548600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":413,\"serverGrowth\":34}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"7.8.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22415843,2794,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59748.36949868171,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.795,\"onlineExpGained\":57654.384629059496,\"onlineMoneyMade\":22415843,\"onlineRunningTime\":19521.010000018316,\"pid\":409,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[268696,318,3294,261]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87722.47849391733,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.813,\"onlineExpGained\":86704.17200168526,\"onlineMoneyMade\":268696,\"onlineRunningTime\":19521.010000018316,\"pid\":410,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[99795,160,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43065.79142758526,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.831,\"onlineExpGained\":42382.31219895904,\"onlineMoneyMade\":99795,\"onlineRunningTime\":19521.010000018316,\"pid\":411,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[450389,109,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32500.237421258134,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.852999999996,\"onlineExpGained\":32749.847416751865,\"onlineMoneyMade\":450389,\"onlineRunningTime\":19521.010000018316,\"pid\":412,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.419729447801,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.873999999996,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":413,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":63.88599999999773,\"minDifficulty\":18,\"moneyAvailable\":285707927.8879075,\"moneyMax\":5700381700,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":401,\"serverGrowth\":42}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"23.7.4.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22461721,2854,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60985.87772010674,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.897,\"onlineExpGained\":58181.89894986627,\"onlineMoneyMade\":22461721,\"onlineRunningTime\":19521.410000018317,\"pid\":414,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[356910,331,3291,264]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87805.54136638262,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.916,\"onlineExpGained\":86906.65224603527,\"onlineMoneyMade\":356910,\"onlineRunningTime\":19521.410000018317,\"pid\":415,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[81784,160,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42693.95739544631,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.935,\"onlineExpGained\":42382.31219895902,\"onlineMoneyMade\":81784,\"onlineRunningTime\":19521.410000018317,\"pid\":416,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[625260,110,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32555.962918792007,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.954,\"onlineExpGained\":32769.829019812736,\"onlineMoneyMade\":625260,\"onlineRunningTime\":19521.410000018317,\"pid\":417,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5915,47,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12468.753537006593,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.971,\"onlineExpGained\":13574.16901267879,\"onlineMoneyMade\":5915,\"onlineRunningTime\":19521.410000018317,\"pid\":418,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[22344,42,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9906.520598430563,\"offlineMoneyMade\":0,\"offlineRunningTime\":32800.988,\"onlineExpGained\":10743.44191238997,\"onlineMoneyMade\":22344,\"onlineRunningTime\":19521.410000018317,\"pid\":419,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[600,15,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6992.548852798313,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.005,\"onlineExpGained\":6649.877498654701,\"onlineMoneyMade\":600,\"onlineRunningTime\":19521.410000018317,\"pid\":420,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[48405,81,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22106.833089547497,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.022,\"onlineExpGained\":23154.68162692637,\"onlineMoneyMade\":48405,\"onlineRunningTime\":19521.410000018317,\"pid\":421,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1251,15,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5147.033822319862,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.038,\"onlineExpGained\":5022.0429026298625,\"onlineMoneyMade\":1251,\"onlineRunningTime\":19521.410000018317,\"pid\":422,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1090,22,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10017.252538963627,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.056,\"onlineExpGained\":8382.948537466798,\"onlineMoneyMade\":1090,\"onlineRunningTime\":19521.410000018317,\"pid\":423,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[202571,24,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6021.726381370714,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.070999999996,\"onlineExpGained\":5193.61826757912,\"onlineMoneyMade\":202571,\"onlineRunningTime\":19521.410000018317,\"pid\":424,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[718,24,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12470.33637287869,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.089,\"onlineExpGained\":11217.671958367646,\"onlineMoneyMade\":718,\"onlineRunningTime\":19521.410000018317,\"pid\":425,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[30827,16,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6865.049318889975,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.106,\"onlineExpGained\":6127.691605330859,\"onlineMoneyMade\":30827,\"onlineRunningTime\":19521.410000018317,\"pid\":426,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6842714,16,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4750.679590842014,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.121999999996,\"onlineExpGained\":4399.948994001718,\"onlineMoneyMade\":6842714,\"onlineRunningTime\":19521.410000018317,\"pid\":427,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3754403,16,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5346.130330363224,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.14,\"onlineExpGained\":4711.662001751156,\"onlineMoneyMade\":3754403,\"onlineRunningTime\":19521.410000018317,\"pid\":428,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[643838,12,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5353.805201554551,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.157999999996,\"onlineExpGained\":4667.70247501725,\"onlineMoneyMade\":643838,\"onlineRunningTime\":19521.410000018317,\"pid\":429,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[7297554,4,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4102.73150063122,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.176,\"onlineExpGained\":3980.601751097767,\"onlineMoneyMade\":7297554,\"onlineRunningTime\":19521.410000018317,\"pid\":430,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4293430,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3216.036949674032,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.195,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4293430,\"onlineRunningTime\":19521.410000018317,\"pid\":431,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[6511987,2,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1910.2506367127396,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.210999999996,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":6511987,\"onlineRunningTime\":19521.410000018317,\"pid\":432,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7737136,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3685.2147206158766,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.227999999996,\"onlineExpGained\":3515.4300318409073,\"onlineMoneyMade\":7737136,\"onlineRunningTime\":19521.410000018317,\"pid\":433,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[13585991,6,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2651.427747184558,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.246999999996,\"onlineExpGained\":2647.1627735029347,\"onlineMoneyMade\":13585991,\"onlineRunningTime\":19521.410000018317,\"pid\":434,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[5994673,3,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3266.592824632284,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.265999999996,\"onlineExpGained\":3318.544636347882,\"onlineMoneyMade\":5994673,\"onlineRunningTime\":19521.410000018317,\"pid\":435,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[8774398,7,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3473.9719067925043,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.282999999996,\"onlineExpGained\":3327.0701203205176,\"onlineMoneyMade\":8774398,\"onlineRunningTime\":19521.410000018317,\"pid\":436,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[12047962,4,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2359.720183639975,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.301,\"onlineExpGained\":2174.5312557700254,\"onlineMoneyMade\":12047962,\"onlineRunningTime\":19521.410000018317,\"pid\":437,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[26964379,6,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2711.6200767772625,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.318,\"onlineExpGained\":2600.272611653448,\"onlineMoneyMade\":26964379,\"onlineRunningTime\":19521.410000018317,\"pid\":438,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[422958441,26,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4175.996662600479,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.335999999996,\"onlineExpGained\":3716.578169320246,\"onlineMoneyMade\":422958441,\"onlineRunningTime\":19521.410000018317,\"pid\":439,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[48792841,9,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3334.332346699124,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.354,\"onlineExpGained\":3064.1122240395794,\"onlineMoneyMade\":48792841,\"onlineRunningTime\":19521.410000018317,\"pid\":440,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[3656023,3,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3532.289828609882,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.371999999996,\"onlineExpGained\":3476.7989325899075,\"onlineMoneyMade\":3656023,\"onlineRunningTime\":19521.410000018317,\"pid\":441,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[3363381,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1528.605349451778,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.387,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":3363381,\"onlineRunningTime\":19521.410000018317,\"pid\":442,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1345.713059859018,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.407,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.410000018317,\"pid\":443,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[7481065,3,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1851.6154614894017,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.421,\"onlineExpGained\":1854.2927640479495,\"onlineMoneyMade\":7481065,\"onlineRunningTime\":19521.410000018317,\"pid\":444,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1389.5969453600087,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.441999999995,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.410000018317,\"pid\":445,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1417.8571959732044,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.455,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.410000018317,\"pid\":446,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1301.8346750586315,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.475999999995,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.410000018317,\"pid\":447,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[6577608,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1839.7562386191275,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.489,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":6577608,\"onlineRunningTime\":19521.410000018317,\"pid\":448,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1374.8947285669005,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.509999999995,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.410000018317,\"pid\":449,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[5375294,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1856.2078302323748,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.523,\"onlineExpGained\":1791.4173197497732,\"onlineMoneyMade\":5375294,\"onlineRunningTime\":19521.410000018317,\"pid\":450,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[691242,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1386.8094136840334,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.545,\"onlineExpGained\":1318.5193806427164,\"onlineMoneyMade\":691242,\"onlineRunningTime\":19521.410000018317,\"pid\":451,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.8583402093905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.563,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.410000018317,\"pid\":452,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3103392,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1381.6627120422372,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.589,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3103392,\"onlineRunningTime\":19521.410000018317,\"pid\":453,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":70.10575000000274,\"minDifficulty\":23,\"moneyAvailable\":1863551793.6723368,\"moneyMax\":22768003500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":768,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"22.0.2.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21553624,2767,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59763.775821241026,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.604,\"onlineExpGained\":57408.21127934961,\"onlineMoneyMade\":21553624,\"onlineRunningTime\":19520.210000018316,\"pid\":454,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[154537,340,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88072.92875932743,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.623,\"onlineExpGained\":87023.877650659,\"onlineMoneyMade\":154537,\"onlineRunningTime\":19520.210000018316,\"pid\":455,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[87367,161,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42686.711585895304,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.642,\"onlineExpGained\":42398.297481407724,\"onlineMoneyMade\":87367,\"onlineRunningTime\":19520.210000018316,\"pid\":456,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[480567,102,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32550.20364440122,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.659,\"onlineExpGained\":32609.97619532585,\"onlineMoneyMade\":480567,\"onlineRunningTime\":19520.210000018316,\"pid\":457,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[6498,49,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12519.417885237366,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.676,\"onlineExpGained\":13614.132218800514,\"onlineMoneyMade\":6498,\"onlineRunningTime\":19520.210000018316,\"pid\":458,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[42358,45,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9874.128615653477,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.693,\"onlineExpGained\":10803.386721572553,\"onlineMoneyMade\":42358,\"onlineRunningTime\":19520.210000018316,\"pid\":459,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[473,13,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7079.703655413875,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.709,\"onlineExpGained\":6585.936368859946,\"onlineMoneyMade\":473,\"onlineRunningTime\":19520.210000018316,\"pid\":460,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[31424,51,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21671.808044758014,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.727999999996,\"onlineExpGained\":22435.343916735314,\"onlineMoneyMade\":31424,\"onlineRunningTime\":19520.210000018316,\"pid\":461,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1158,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5313.122631614866,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.746,\"onlineExpGained\":5062.006108751587,\"onlineMoneyMade\":1158,\"onlineRunningTime\":19520.210000018316,\"pid\":462,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1991,30,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9965.729013756982,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.763999999996,\"onlineExpGained\":8606.742491748448,\"onlineMoneyMade\":1991,\"onlineRunningTime\":19520.210000018316,\"pid\":463,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[144594,17,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5735.035225618355,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.781,\"onlineExpGained\":4981.014011011553,\"onlineMoneyMade\":144594,\"onlineRunningTime\":19520.210000018316,\"pid\":464,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[881,26,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12424.845031451534,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.797999999995,\"onlineExpGained\":11273.620446938057,\"onlineMoneyMade\":881,\"onlineRunningTime\":19520.210000018316,\"pid\":465,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[57616,22,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7432.7608453146495,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.816,\"onlineExpGained\":6319.5149947151285,\"onlineMoneyMade\":57616,\"onlineRunningTime\":19520.210000018316,\"pid\":466,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6054803,15,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4740.5717496328925,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.831999999995,\"onlineExpGained\":4363.982108492168,\"onlineMoneyMade\":6054803,\"onlineRunningTime\":19520.210000018316,\"pid\":467,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4800748,19,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5297.502198650738,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.851,\"onlineExpGained\":4819.562658279809,\"onlineMoneyMade\":4800748,\"onlineRunningTime\":19520.210000018316,\"pid\":468,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[803797,17,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5546.2588113221345,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.869,\"onlineExpGained\":4859.525864401521,\"onlineMoneyMade\":803797,\"onlineRunningTime\":19520.210000018316,\"pid\":469,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[7931066,4,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3999.468065162361,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.888,\"onlineExpGained\":3980.601751097767,\"onlineMoneyMade\":7931066,\"onlineRunningTime\":19520.210000018316,\"pid\":470,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[8490700,5,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3109.6805432760166,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.909,\"onlineExpGained\":3193.8594332481066,\"onlineMoneyMade\":8490700,\"onlineRunningTime\":19520.210000018316,\"pid\":471,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[4481159,1,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1648.2739993236266,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.927,\"onlineExpGained\":1662.7357960378247,\"onlineMoneyMade\":4481159,\"onlineRunningTime\":19520.210000018316,\"pid\":472,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7607974,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3785.7385305795624,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.945,\"onlineExpGained\":3515.4300318409073,\"onlineMoneyMade\":7607974,\"onlineRunningTime\":19520.210000018316,\"pid\":473,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":52.65799999999835,\"minDifficulty\":15,\"moneyAvailable\":216851541.5177328,\"moneyMax\":5082536875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":446,\"serverGrowth\":42}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-212705.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,31],[23,29],[10,14],[9,13],[14,20],[8,14]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"50.8.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"syscore\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"syscore\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":65.85000000000036,\"minDifficulty\":21,\"moneyAvailable\":660166896.2524554,\"moneyMax\":10655584875,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":559,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"22.7.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22885131,2880,1107,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60323.528370869884,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.962,\"onlineExpGained\":58410.48848888282,\"onlineMoneyMade\":22885131,\"onlineRunningTime\":19520.410000018317,\"pid\":474,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[251523,357,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88055.72641695017,\"offlineMoneyMade\":0,\"offlineRunningTime\":32801.983,\"onlineExpGained\":87295.62745228663,\"onlineMoneyMade\":251523,\"onlineRunningTime\":19520.410000018317,\"pid\":475,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[116423,183,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43123.120547380226,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802,\"onlineExpGained\":42749.97369527892,\"onlineMoneyMade\":116423,\"onlineRunningTime\":19520.410000018317,\"pid\":476,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[315317,117,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":33015.27365384523,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.018,\"onlineExpGained\":32909.700241238774,\"onlineMoneyMade\":315317,\"onlineRunningTime\":19520.410000018317,\"pid\":477,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4495,41,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12550.923279528695,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.034,\"onlineExpGained\":13454.279394313618,\"onlineMoneyMade\":4495,\"onlineRunningTime\":19520.410000018317,\"pid\":478,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[32289,50,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10014.470260825212,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.051999999996,\"onlineExpGained\":10903.29473687687,\"onlineMoneyMade\":32289,\"onlineRunningTime\":19520.410000018317,\"pid\":479,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[481,14,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7239.970803575014,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.069,\"onlineExpGained\":6617.906933757326,\"onlineMoneyMade\":481,\"onlineRunningTime\":19520.410000018317,\"pid\":480,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[36836,68,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22106.30332750139,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.085,\"onlineExpGained\":22842.968619176907,\"onlineMoneyMade\":36836,\"onlineRunningTime\":19520.410000018317,\"pid\":481,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[779,10,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5080.070120777195,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.103,\"onlineExpGained\":4922.134887325557,\"onlineMoneyMade\":779,\"onlineRunningTime\":19520.410000018317,\"pid\":482,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1693,27,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9911.792495788213,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.121,\"onlineExpGained\":8522.819758892829,\"onlineMoneyMade\":1693,\"onlineRunningTime\":19520.410000018317,\"pid\":483,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[173262,21,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5937.2405530980905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.139,\"onlineExpGained\":5102.50215762159,\"onlineMoneyMade\":173262,\"onlineRunningTime\":19520.410000018317,\"pid\":484,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[919,31,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12789.32788039108,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.157,\"onlineExpGained\":11413.491668364086,\"onlineMoneyMade\":919,\"onlineRunningTime\":19520.410000018317,\"pid\":485,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[57942,25,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7327.653538785045,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.175,\"onlineExpGained\":6415.426689407262,\"onlineMoneyMade\":57942,\"onlineRunningTime\":19520.410000018317,\"pid\":486,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6281407,15,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4740.623168789091,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.195,\"onlineExpGained\":4363.982108492168,\"onlineMoneyMade\":6281407,\"onlineRunningTime\":19520.410000018317,\"pid\":487,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3656398,15,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5276.931886436512,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.215,\"onlineExpGained\":4675.695116241606,\"onlineMoneyMade\":3656398,\"onlineRunningTime\":19520.410000018317,\"pid\":488,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[742458,16,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5301.978222581726,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.234,\"onlineExpGained\":4821.161186524667,\"onlineMoneyMade\":742458,\"onlineRunningTime\":19520.410000018317,\"pid\":489,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[10143265,6,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4325.215453848845,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.252,\"onlineExpGained\":4087.7031435039853,\"onlineMoneyMade\":10143265,\"onlineRunningTime\":19520.410000018317,\"pid\":490,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4082233,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3216.2151686011634,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.268,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4082233,\"onlineRunningTime\":19520.410000018317,\"pid\":491,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[3204573,1,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1770.2692628078257,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.28599999999,\"onlineExpGained\":1662.7357960378247,\"onlineMoneyMade\":3204573,\"onlineRunningTime\":19520.410000018317,\"pid\":492,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[9123120,7,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3815.574771839748,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.301999999996,\"onlineExpGained\":3567.382199799147,\"onlineMoneyMade\":9123120,\"onlineRunningTime\":19520.410000018317,\"pid\":493,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":67.26400000000086,\"minDifficulty\":21,\"moneyAvailable\":491027049.7869311,\"moneyMax\":9103126375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":411,\"serverGrowth\":46}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"67.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22096143,2816,1107,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60261.913187702005,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.320999999996,\"onlineExpGained\":57844.87591157306,\"onlineMoneyMade\":22096143,\"onlineRunningTime\":19522.210000018316,\"pid\":494,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[383532,331,3283,272]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87869.110328267,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.337,\"onlineExpGained\":86895.99539106945,\"onlineMoneyMade\":383532,\"onlineRunningTime\":19522.210000018316,\"pid\":495,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[78340,165,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42709.56678800954,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.356,\"onlineExpGained\":42462.23861120247,\"onlineMoneyMade\":78340,\"onlineRunningTime\":19522.210000018316,\"pid\":496,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[400635,108,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32721.7379885937,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.372,\"onlineExpGained\":32729.86581369101,\"onlineMoneyMade\":400635,\"onlineRunningTime\":19522.210000018316,\"pid\":497,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5233,47,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12733.794074188656,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.390999999996,\"onlineExpGained\":13574.169012678787,\"onlineMoneyMade\":5233,\"onlineRunningTime\":19522.210000018316,\"pid\":498,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[25164,34,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9673.860980042578,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.405999999995,\"onlineExpGained\":10583.589087903072,\"onlineMoneyMade\":25164,\"onlineRunningTime\":19522.210000018316,\"pid\":499,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[598,15,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7036.274416668516,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.424,\"onlineExpGained\":6649.877498654701,\"onlineMoneyMade\":598,\"onlineRunningTime\":19522.210000018316,\"pid\":500,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[32529,57,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21805.653914050825,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.441999999995,\"onlineExpGained\":22579.211458773523,\"onlineMoneyMade\":32529,\"onlineRunningTime\":19522.210000018316,\"pid\":501,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1055,15,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5251.599024152763,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.458,\"onlineExpGained\":5022.042902629865,\"onlineMoneyMade\":1055,\"onlineRunningTime\":19522.210000018316,\"pid\":502,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.669774493044,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.477999999996,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":503,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":55.651999999995205,\"minDifficulty\":12,\"moneyAvailable\":52368526.63229412,\"moneyMax\":4471411125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":283,\"serverGrowth\":45}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-566227.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,6,9,3,1,7,8,2,7,0,10,1,0,0,3,5,8,10,9,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"79.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"comptek\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"comptek\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":69.36000000000055,\"minDifficulty\":19,\"moneyAvailable\":479549812.7889533,\"moneyMax\":5983036650,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":323,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"55.2.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21466643,2775,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59605.67045502803,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.495,\"onlineExpGained\":57478.5465221239,\"onlineMoneyMade\":21466643,\"onlineRunningTime\":19521.810000018315,\"pid\":504,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[306014,343,3280,274]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87778.06687592609,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.515,\"onlineExpGained\":87061.17664303925,\"onlineMoneyMade\":306014,\"onlineRunningTime\":19521.810000018315,\"pid\":505,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[87654,175,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43092.2497449543,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.531,\"onlineExpGained\":42622.091435689385,\"onlineMoneyMade\":87654,\"onlineRunningTime\":19521.810000018315,\"pid\":506,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[486097,110,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32712.20454864263,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.549,\"onlineExpGained\":32769.82901981273,\"onlineMoneyMade\":486097,\"onlineRunningTime\":19521.810000018315,\"pid\":507,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4901,58,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12642.589712519111,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.566,\"onlineExpGained\":13793.966646348272,\"onlineMoneyMade\":4901,\"onlineRunningTime\":19521.810000018315,\"pid\":508,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[33220,39,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9669.771678316192,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.581999999995,\"onlineExpGained\":10683.497103207383,\"onlineMoneyMade\":33220,\"onlineRunningTime\":19521.810000018315,\"pid\":509,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[311,9,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6999.6899897640205,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.6,\"onlineExpGained\":6458.054109270434,\"onlineMoneyMade\":311,\"onlineRunningTime\":19521.810000018315,\"pid\":510,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[35162,75,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22300.264851414166,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.615999999995,\"onlineExpGained\":23010.81408488815,\"onlineMoneyMade\":35162,\"onlineRunningTime\":19521.810000018315,\"pid\":511,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1102,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5346.0537274587,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.635,\"onlineExpGained\":5062.006108751587,\"onlineMoneyMade\":1102,\"onlineRunningTime\":19521.810000018315,\"pid\":512,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1613,28,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10057.883934816658,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.652,\"onlineExpGained\":8550.794003178034,\"onlineMoneyMade\":1613,\"onlineRunningTime\":19521.810000018315,\"pid\":513,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[130235,19,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5667.719828653656,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.67,\"onlineExpGained\":5041.7580843165715,\"onlineMoneyMade\":130235,\"onlineRunningTime\":19521.810000018315,\"pid\":514,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1039,29,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12449.053652180857,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.687,\"onlineExpGained\":11357.543179793674,\"onlineMoneyMade\":1039,\"onlineRunningTime\":19521.810000018315,\"pid\":515,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[55759,25,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7380.254398213647,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.704,\"onlineExpGained\":6415.426689407262,\"onlineMoneyMade\":55759,\"onlineRunningTime\":19521.810000018315,\"pid\":516,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6343453,15,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4750.9398430520305,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.721999999994,\"onlineExpGained\":4363.982108492168,\"onlineMoneyMade\":6343453,\"onlineRunningTime\":19521.810000018315,\"pid\":517,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3669581,16,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5415.898331812218,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.74,\"onlineExpGained\":4711.662001751156,\"onlineMoneyMade\":3669581,\"onlineRunningTime\":19521.810000018315,\"pid\":518,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[606237,14,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5142.754570274052,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.762,\"onlineExpGained\":4744.431830770958,\"onlineMoneyMade\":606237,\"onlineRunningTime\":19521.810000018315,\"pid\":519,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[10112265,6,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4340.5726120130985,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.776,\"onlineExpGained\":4087.7031435039853,\"onlineMoneyMade\":10112265,\"onlineRunningTime\":19521.810000018315,\"pid\":520,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[2019957,1,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2910.390624757017,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.797,\"onlineExpGained\":2934.8978575793412,\"onlineMoneyMade\":2019957,\"onlineRunningTime\":19521.810000018315,\"pid\":521,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[10998929,3,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1928.4601081325814,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.81,\"onlineExpGained\":1789.0195273824697,\"onlineMoneyMade\":10998929,\"onlineRunningTime\":19521.810000018315,\"pid\":522,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[9154978,7,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3800.6788416163554,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.831,\"onlineExpGained\":3567.3821997991477,\"onlineMoneyMade\":9154978,\"onlineRunningTime\":19521.810000018315,\"pid\":523,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[8929718,4,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2602.072955954172,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.845,\"onlineExpGained\":2532.0687398723726,\"onlineMoneyMade\":8929718,\"onlineRunningTime\":19521.810000018315,\"pid\":524,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[3764982,2,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3361.4480307713675,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.865999999995,\"onlineExpGained\":3260.9976195326008,\"onlineMoneyMade\":3764982,\"onlineRunningTime\":19521.810000018315,\"pid\":525,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[7687145,6,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3374.8638348809623,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.882,\"onlineExpGained\":3282.311329464188,\"onlineMoneyMade\":7687145,\"onlineRunningTime\":19521.810000018315,\"pid\":526,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[5990904,2,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2205.664807733866,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.901999999995,\"onlineExpGained\":2051.4445809151184,\"onlineMoneyMade\":5990904,\"onlineRunningTime\":19521.810000018315,\"pid\":527,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[22817167,5,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2617.585518797746,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.92,\"onlineExpGained\":2551.517500184946,\"onlineMoneyMade\":22817167,\"onlineRunningTime\":19521.810000018315,\"pid\":528,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[489743811,29,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4506.044896627832,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.943999999996,\"onlineExpGained\":3865.241296093056,\"onlineMoneyMade\":489743811,\"onlineRunningTime\":19521.810000018315,\"pid\":529,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[58245752,10,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3182.99574649771,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.958,\"onlineExpGained\":3106.4732225286057,\"onlineMoneyMade\":58245752,\"onlineRunningTime\":19521.810000018315,\"pid\":530,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[1248774,1,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3378.218687781377,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.979999999996,\"onlineExpGained\":3337.7269752863112,\"onlineMoneyMade\":1248774,\"onlineRunningTime\":19521.810000018315,\"pid\":531,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[2679010,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1641.4076826002272,\"offlineMoneyMade\":0,\"offlineRunningTime\":32802.995,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":2679010,\"onlineRunningTime\":19521.810000018315,\"pid\":532,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[1745614,1,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1508.927426442961,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.017,\"onlineExpGained\":1397.1136860154386,\"onlineMoneyMade\":1745614,\"onlineRunningTime\":19521.810000018315,\"pid\":533,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[7499266,3,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1851.7214261378533,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.032,\"onlineExpGained\":1854.2927640479495,\"onlineMoneyMade\":7499266,\"onlineRunningTime\":19521.810000018315,\"pid\":534,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1389.6769515136875,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.055,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.810000018315,\"pid\":535,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1417.9365087080125,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.070999999996,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.810000018315,\"pid\":536,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[3931755,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1322.3083259079563,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.092,\"onlineExpGained\":1446.4016402322302,\"onlineMoneyMade\":3931755,\"onlineRunningTime\":19521.810000018315,\"pid\":537,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[3474014,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1696.2287589966095,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.106,\"onlineExpGained\":1726.4105044584362,\"onlineMoneyMade\":3474014,\"onlineRunningTime\":19521.810000018315,\"pid\":538,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[1577914,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1396.9745882059385,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.125,\"onlineExpGained\":1355.5519516488469,\"onlineMoneyMade\":1577914,\"onlineRunningTime\":19521.810000018315,\"pid\":539,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[5883535,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1729.7018865709301,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.142,\"onlineExpGained\":1791.4173197497732,\"onlineMoneyMade\":5883535,\"onlineRunningTime\":19521.810000018315,\"pid\":540,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1207.7911233345123,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.163,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.810000018315,\"pid\":541,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.9402159107124,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.178,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.810000018315,\"pid\":542,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1360.4285051183858,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.201,\"onlineExpGained\":1437.0768921371616,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.810000018315,\"pid\":543,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"netlink\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"netlink\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":75.22062500000494,\"minDifficulty\":24,\"moneyAvailable\":652733799.4142967,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":424,\"serverGrowth\":67}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"91.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":57.247999999994875,\"minDifficulty\":12,\"moneyAvailable\":40900164.683535405,\"moneyMax\":1971373775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":258,\"serverGrowth\":55}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-294710-OmegaSoftware.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[5,151,150,172,115,123,90,53]],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"22.3.9.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21790936,2757,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60094.481868509945,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.218,\"onlineExpGained\":57329.08413122842,\"onlineMoneyMade\":21790936,\"onlineRunningTime\":19524.410000018317,\"pid\":544,\"ramUsage\":3.2,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":76.38437499982396,\"minDifficulty\":1,\"moneyAvailable\":899506,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-482960-OmegaSoftware.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[165,196,44,74,181,25,53,96,131,28,121,33,81,2,63,64,172,116,58,48,123,13,122,106,25,72,46],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"25.8.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21810105,2804,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59983.862497428214,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.239,\"onlineExpGained\":57742.303682527316,\"onlineMoneyMade\":21810105,\"onlineRunningTime\":19524.410000018317,\"pid\":545,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[186305,330,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87897.74434536895,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.255,\"onlineExpGained\":86890.66696358657,\"onlineMoneyMade\":186305,\"onlineRunningTime\":19524.410000018317,\"pid\":546,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[80395,176,1602,133]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43057.13692754584,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.28,\"onlineExpGained\":42632.748290655145,\"onlineMoneyMade\":80395,\"onlineRunningTime\":19524.410000018317,\"pid\":547,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[412773,105,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32611.790309697924,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.295999999995,\"onlineExpGained\":32669.921004508426,\"onlineMoneyMade\":412773,\"onlineRunningTime\":19524.410000018317,\"pid\":548,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.8012077727085,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.318,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":549,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":78.00487500126928,\"minDifficulty\":3,\"moneyAvailable\":3116.6040413437063,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"54.5.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22244298,2772,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59848.10775382834,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.331999999995,\"onlineExpGained\":57458.03207631474,\"onlineMoneyMade\":22244298,\"onlineRunningTime\":19524.210000018316,\"pid\":550,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[361482,337,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87588.33156375527,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.354999999996,\"onlineExpGained\":87002.56394072737,\"onlineMoneyMade\":361482,\"onlineRunningTime\":19524.210000018316,\"pid\":551,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[80300,163,1602,133]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42840.0397493777,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.367,\"onlineExpGained\":42424.9396188222,\"onlineMoneyMade\":80300,\"onlineRunningTime\":19524.210000018316,\"pid\":552,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[436387,115,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32845.1194435629,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.39,\"onlineExpGained\":32869.73703511705,\"onlineMoneyMade\":436387,\"onlineRunningTime\":19524.210000018316,\"pid\":553,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.815254825116,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.405999999995,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":554,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":77.75925000059009,\"minDifficulty\":3,\"moneyAvailable\":6196.1486151320505,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"48.2.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22175734,2777,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59701.05159474607,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.429,\"onlineExpGained\":57501.99160304865,\"onlineMoneyMade\":22175734,\"onlineRunningTime\":19524.210000018316,\"pid\":555,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[324666,346,3285,270]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88183.09206516552,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.443999999996,\"onlineExpGained\":87141.1030552827,\"onlineMoneyMade\":324666,\"onlineRunningTime\":19524.210000018316,\"pid\":556,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[81995,160,1602,133]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42914.51660736234,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.466,\"onlineExpGained\":42376.9837714761,\"onlineMoneyMade\":81995,\"onlineRunningTime\":19524.210000018316,\"pid\":557,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[451672,105,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32623.586610798142,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.481999999996,\"onlineExpGained\":32669.921004508426,\"onlineMoneyMade\":451672,\"onlineRunningTime\":19524.210000018316,\"pid\":558,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.8309635612036,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.505,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":559,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":76.23312500034154,\"minDifficulty\":5,\"moneyAvailable\":39025.285756107,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"7.9.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23227063,2811,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60661.68068211817,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.519,\"onlineExpGained\":57797.985749723426,\"onlineMoneyMade\":23227063,\"onlineRunningTime\":19523.010000018316,\"pid\":560,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[253121,334,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87459.03049439914,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.544,\"onlineExpGained\":86954.60809338126,\"onlineMoneyMade\":253121,\"onlineRunningTime\":19523.010000018316,\"pid\":561,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[82911,172,1610,125]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42745.09586184069,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.562,\"onlineExpGained\":42584.792443309096,\"onlineMoneyMade\":82911,\"onlineRunningTime\":19523.010000018316,\"pid\":562,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[459881,96,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32323.931921346124,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.585,\"onlineExpGained\":32490.086576960686,\"onlineMoneyMade\":459881,\"onlineRunningTime\":19523.010000018316,\"pid\":563,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[3859,48,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12861.527741292357,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.606,\"onlineExpGained\":13594.15061573965,\"onlineMoneyMade\":3859,\"onlineRunningTime\":19523.010000018316,\"pid\":564,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[33814,33,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9591.29393209603,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.629,\"onlineExpGained\":10563.60748484221,\"onlineMoneyMade\":33814,\"onlineRunningTime\":19523.010000018316,\"pid\":565,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[405,11,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7079.947725416254,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.644,\"onlineExpGained\":6521.995239065191,\"onlineMoneyMade\":405,\"onlineRunningTime\":19523.010000018316,\"pid\":566,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34891,66,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22120.57603158437,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.667,\"onlineExpGained\":22795.012771830836,\"onlineMoneyMade\":34891,\"onlineRunningTime\":19523.010000018316,\"pid\":567,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1314,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5236.103261041853,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.68,\"onlineExpGained\":5062.006108751586,\"onlineMoneyMade\":1314,\"onlineRunningTime\":19523.010000018316,\"pid\":568,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.86216019744,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.704,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":569,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zer0\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":77.10675000000266,\"minDifficulty\":8,\"moneyAvailable\":33976.57370731102,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"30.1.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[23148977,2871,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60792.45637311426,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.718,\"onlineExpGained\":58328.430705646,\"onlineMoneyMade\":23148977,\"onlineRunningTime\":19523.410000018313,\"pid\":570,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[186869,333,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87383.69435768144,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.744,\"onlineExpGained\":86938.62281093268,\"onlineMoneyMade\":186869,\"onlineRunningTime\":19523.410000018313,\"pid\":571,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[89716,165,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42795.84016678574,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.757,\"onlineExpGained\":42462.238611202476,\"onlineMoneyMade\":89716,\"onlineRunningTime\":19523.410000018313,\"pid\":572,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[488323,112,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32641.549554569985,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.780999999995,\"onlineExpGained\":32809.792225934456,\"onlineMoneyMade\":488323,\"onlineRunningTime\":19523.410000018313,\"pid\":573,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.8769442532694,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.795,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":574,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":77.19962500012132,\"minDifficulty\":7,\"moneyAvailable\":22161.232926761782,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-806847-TianDiHui.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1532234082\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"33.9.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22175986,2789,1107,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59815.34853597921,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.818,\"onlineExpGained\":57607.494467209995,\"onlineMoneyMade\":22175986,\"onlineRunningTime\":19522.610000018314,\"pid\":575,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[116371,368,3283,271]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88506.24608779224,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.835,\"onlineExpGained\":87466.13713173928,\"onlineMoneyMade\":116371,\"onlineRunningTime\":19522.610000018314,\"pid\":576,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[47980,172,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43172.862941944724,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.852,\"onlineExpGained\":42574.13558834333,\"onlineMoneyMade\":47980,\"onlineRunningTime\":19522.610000018314,\"pid\":577,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[354632,109,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32592.024991810784,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.909,\"onlineExpGained\":32749.84741675187,\"onlineMoneyMade\":354632,\"onlineRunningTime\":19522.610000018314,\"pid\":578,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[3793,50,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12745.969191459732,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.929,\"onlineExpGained\":13634.113821861376,\"onlineMoneyMade\":3793,\"onlineRunningTime\":19522.610000018314,\"pid\":579,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38647,51,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9953.373598844944,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.947,\"onlineExpGained\":10923.276339937729,\"onlineMoneyMade\":38647,\"onlineRunningTime\":19522.610000018314,\"pid\":580,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[582,15,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7116.743603219144,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.968,\"onlineExpGained\":6649.877498654701,\"onlineMoneyMade\":582,\"onlineRunningTime\":19522.610000018314,\"pid\":581,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[40939,62,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21808.676980825963,\"offlineMoneyMade\":0,\"offlineRunningTime\":32803.986,\"onlineExpGained\":22699.101077138697,\"onlineMoneyMade\":40939,\"onlineRunningTime\":19522.610000018314,\"pid\":582,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1059,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5207.546332257991,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.005,\"onlineExpGained\":5002.061299569003,\"onlineMoneyMade\":1059,\"onlineRunningTime\":19522.610000018314,\"pid\":583,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.911204735309,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.024,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":584,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":77.61762500001721,\"minDifficulty\":8,\"moneyAvailable\":17960.966440620155,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"82.3.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21993405,2793,1107,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60203.21150510125,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.042,\"onlineExpGained\":57645.59272371264,\"onlineMoneyMade\":21993405,\"onlineRunningTime\":19522.410000018313,\"pid\":585,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[178060,361,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88334.42807308375,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.062,\"onlineExpGained\":87386.2107194958,\"onlineMoneyMade\":178060,\"onlineRunningTime\":19522.410000018313,\"pid\":586,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[101004,168,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43008.570947136905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.079,\"onlineExpGained\":42510.19445854854,\"onlineMoneyMade\":101004,\"onlineRunningTime\":19522.410000018313,\"pid\":587,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[296525,101,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32585.123710784486,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.098,\"onlineExpGained\":32589.994592264986,\"onlineMoneyMade\":296525,\"onlineRunningTime\":19522.410000018313,\"pid\":588,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5270,52,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12763.299748251731,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.117,\"onlineExpGained\":13674.077027983105,\"onlineMoneyMade\":5270,\"onlineRunningTime\":19522.410000018313,\"pid\":589,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[33197,41,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9874.770940429331,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.136,\"onlineExpGained\":10723.460309329108,\"onlineMoneyMade\":33197,\"onlineRunningTime\":19522.410000018313,\"pid\":590,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[282,9,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7070.971235607914,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.155,\"onlineExpGained\":6458.054109270435,\"onlineMoneyMade\":282,\"onlineRunningTime\":19522.410000018313,\"pid\":591,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[39610,70,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22140.044505859318,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.176,\"onlineExpGained\":22890.924466522978,\"onlineMoneyMade\":39610,\"onlineRunningTime\":19522.410000018313,\"pid\":592,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1177,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5136.1270797195275,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.197,\"onlineExpGained\":5002.061299569002,\"onlineMoneyMade\":1177,\"onlineRunningTime\":19522.410000018313,\"pid\":593,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1719,27,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9942.271872447895,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.218,\"onlineExpGained\":8522.819758892829,\"onlineMoneyMade\":1719,\"onlineRunningTime\":19522.410000018313,\"pid\":594,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[217122,27,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6031.058791934981,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.238999999994,\"onlineExpGained\":5284.734377536648,\"onlineMoneyMade\":217122,\"onlineRunningTime\":19522.410000018313,\"pid\":595,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1088,32,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12643.902877026887,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.258,\"onlineExpGained\":11441.465912649292,\"onlineMoneyMade\":1088,\"onlineRunningTime\":19522.410000018313,\"pid\":596,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[44174,22,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7106.0663826445725,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.274,\"onlineExpGained\":6319.514994715127,\"onlineMoneyMade\":44174,\"onlineRunningTime\":19522.410000018313,\"pid\":597,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[7083584,16,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4761.497910519443,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.292,\"onlineExpGained\":4399.948994001718,\"onlineMoneyMade\":7083584,\"onlineRunningTime\":19522.410000018313,\"pid\":598,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4549007,18,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5228.349260238468,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.312,\"onlineExpGained\":4783.595772770258,\"onlineMoneyMade\":4549007,\"onlineRunningTime\":19522.410000018313,\"pid\":599,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[499883,11,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5173.123925608242,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.331,\"onlineExpGained\":4629.337797140396,\"onlineMoneyMade\":499883,\"onlineRunningTime\":19522.410000018313,\"pid\":600,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[9200603,5,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4118.534934882464,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.348999999995,\"onlineExpGained\":4034.1524473008762,\"onlineMoneyMade\":9200603,\"onlineRunningTime\":19522.410000018313,\"pid\":601,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4394262,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3216.383835224205,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.368,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4394262,\"onlineRunningTime\":19522.410000018313,\"pid\":602,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[7697036,2,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1788.4696192815559,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.384999999995,\"onlineExpGained\":1725.877661710147,\"onlineMoneyMade\":7697036,\"onlineRunningTime\":19522.410000018313,\"pid\":603,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7608900,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3785.9759646204,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.403999999995,\"onlineExpGained\":3515.4300318409073,\"onlineMoneyMade\":7608900,\"onlineRunningTime\":19522.410000018313,\"pid\":604,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":66.83399999999469,\"minDifficulty\":10,\"moneyAvailable\":198554.680682087,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"98.6.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21759685,2782,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59882.545001234466,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.420999999995,\"onlineExpGained\":57548.881764898084,\"onlineMoneyMade\":21759685,\"onlineRunningTime\":19524.010000018316,\"pid\":605,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[359519,352,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87987.49085139672,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.441999999995,\"onlineExpGained\":87215.70104004319,\"onlineMoneyMade\":359519,\"onlineRunningTime\":19524.010000018316,\"pid\":606,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[89057,181,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43448.76286393705,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.46,\"onlineExpGained\":42718.00313038149,\"onlineMoneyMade\":89057,\"onlineRunningTime\":19524.010000018316,\"pid\":607,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[575867,115,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32918.090195239696,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.477,\"onlineExpGained\":32869.73703511705,\"onlineMoneyMade\":575867,\"onlineRunningTime\":19524.010000018316,\"pid\":608,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3886.985682518448,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.494999999995,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":609,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":77.03975000006986,\"minDifficulty\":5,\"moneyAvailable\":7035.535904180167,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"95.2.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21809782,2779,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59828.929779012906,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.513,\"onlineExpGained\":57510.7835083954,\"onlineMoneyMade\":21809782,\"onlineRunningTime\":19524.010000018316,\"pid\":610,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[220809,340,3285,270]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88367.0585072645,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.532,\"onlineExpGained\":87045.19136059053,\"onlineMoneyMade\":220809,\"onlineRunningTime\":19524.010000018316,\"pid\":611,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[126269,175,1610,125]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42897.14921142657,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.549,\"onlineExpGained\":42632.74829065518,\"onlineMoneyMade\":126269,\"onlineRunningTime\":19524.010000018316,\"pid\":612,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[540689,114,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32808.13111911102,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.568,\"onlineExpGained\":32849.75543205618,\"onlineMoneyMade\":540689,\"onlineRunningTime\":19524.010000018316,\"pid\":613,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.0004555212436,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.588,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":614,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":76.7381250000433,\"minDifficulty\":5,\"moneyAvailable\":42401.34031653224,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"40.0.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22201739,2802,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59151.69690391162,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.604999999996,\"onlineExpGained\":57715.92796648721,\"onlineMoneyMade\":22201739,\"onlineRunningTime\":19522.810000018315,\"pid\":615,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[180478,351,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88050.21284183013,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.626,\"onlineExpGained\":87226.35789500902,\"onlineMoneyMade\":180478,\"onlineRunningTime\":19522.810000018315,\"pid\":616,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[74426,161,1602,133]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42807.57773262786,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.643,\"onlineExpGained\":42392.96905392483,\"onlineMoneyMade\":74426,\"onlineRunningTime\":19522.810000018315,\"pid\":617,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[369454,100,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32597.120100836328,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.662,\"onlineExpGained\":32570.012989204126,\"onlineMoneyMade\":369454,\"onlineRunningTime\":19522.810000018315,\"pid\":618,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4900,47,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12586.184495393192,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.678,\"onlineExpGained\":13574.169012678793,\"onlineMoneyMade\":4900,\"onlineRunningTime\":19522.810000018315,\"pid\":619,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[32761,44,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9853.528248167333,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.697,\"onlineExpGained\":10783.405118511695,\"onlineMoneyMade\":32761,\"onlineRunningTime\":19522.810000018315,\"pid\":620,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[354,11,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7151.183011253811,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.716,\"onlineExpGained\":6521.995239065191,\"onlineMoneyMade\":354,\"onlineRunningTime\":19522.810000018315,\"pid\":621,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[21234,66,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22100.961211111524,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.738999999994,\"onlineExpGained\":22795.012771830836,\"onlineMoneyMade\":21234,\"onlineRunningTime\":19522.810000018315,\"pid\":622,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1088,13,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5103.338142289468,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.763999999996,\"onlineExpGained\":4982.07969650814,\"onlineMoneyMade\":1088,\"onlineRunningTime\":19522.810000018315,\"pid\":623,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.030365827473,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.786,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":624,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":96.96375000000019,\"minDifficulty\":7,\"moneyAvailable\":4884759.1477168165,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"22.4.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21798973,2830,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59974.88205025294,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.81,\"onlineExpGained\":57965.031951312594,\"onlineMoneyMade\":21798973,\"onlineRunningTime\":19523.410000018313,\"pid\":625,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[248651,335,3285,270]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87753.36224756767,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.833,\"onlineExpGained\":86965.26494834713,\"onlineMoneyMade\":248651,\"onlineRunningTime\":19523.410000018313,\"pid\":626,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[99802,166,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42973.771990512716,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.856999999996,\"onlineExpGained\":42478.22389365115,\"onlineMoneyMade\":99802,\"onlineRunningTime\":19523.410000018313,\"pid\":627,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[327392,92,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32391.111784435525,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.88,\"onlineExpGained\":32410.160164717243,\"onlineMoneyMade\":327392,\"onlineRunningTime\":19523.410000018313,\"pid\":628,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4977,62,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13052.419176425426,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.904,\"onlineExpGained\":13873.89305859172,\"onlineMoneyMade\":4977,\"onlineRunningTime\":19523.410000018313,\"pid\":629,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[29863,44,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9809.184563482355,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.924,\"onlineExpGained\":10783.405118511695,\"onlineMoneyMade\":29863,\"onlineRunningTime\":19523.410000018313,\"pid\":630,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[304,10,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7080.250171381635,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.941999999995,\"onlineExpGained\":6490.024674167813,\"onlineMoneyMade\":304,\"onlineRunningTime\":19523.410000018313,\"pid\":631,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[23671,60,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22045.9318689418,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.962,\"onlineExpGained\":22651.145229792626,\"onlineMoneyMade\":23671,\"onlineRunningTime\":19523.410000018313,\"pid\":632,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1301,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5236.33323661971,\"offlineMoneyMade\":0,\"offlineRunningTime\":32804.98299999999,\"onlineExpGained\":5062.006108751586,\"onlineMoneyMade\":1301,\"onlineRunningTime\":19523.410000018313,\"pid\":633,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.062658241253,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.001,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":634,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":76.43550000001919,\"minDifficulty\":5,\"moneyAvailable\":35699.282575804464,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"16.3.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21745505,2797,1107,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59695.958249340416,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.019,\"onlineExpGained\":57671.96843975314,\"onlineMoneyMade\":21745505,\"onlineRunningTime\":19522.810000018315,\"pid\":635,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[284851,319,3286,268]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87502.69618288206,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.04,\"onlineExpGained\":86688.1867192366,\"onlineMoneyMade\":284851,\"onlineRunningTime\":19522.810000018315,\"pid\":636,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[97398,168,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42555.88624569976,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.057,\"onlineExpGained\":42510.19445854856,\"onlineMoneyMade\":97398,\"onlineRunningTime\":19522.810000018315,\"pid\":637,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[566896,103,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32481.82453486583,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.075,\"onlineExpGained\":32629.957798386706,\"onlineMoneyMade\":566896,\"onlineRunningTime\":19522.810000018315,\"pid\":638,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5463,55,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12736.581990657578,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.092,\"onlineExpGained\":13734.021837165687,\"onlineMoneyMade\":5463,\"onlineRunningTime\":19522.810000018315,\"pid\":639,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[22414,38,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9780.700747923736,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.104,\"onlineExpGained\":10663.51550014652,\"onlineMoneyMade\":22414,\"onlineRunningTime\":19522.810000018315,\"pid\":640,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[662,18,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7249.730033286505,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.126,\"onlineExpGained\":6745.789193346835,\"onlineMoneyMade\":662,\"onlineRunningTime\":19522.810000018315,\"pid\":641,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[37387,74,573,43]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22348.487317152616,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.140999999996,\"onlineExpGained\":22986.836161215117,\"onlineMoneyMade\":37387,\"onlineRunningTime\":19522.810000018315,\"pid\":642,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1271,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5091.953392451308,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.163,\"onlineExpGained\":5002.061299569003,\"onlineMoneyMade\":1271,\"onlineRunningTime\":19522.810000018315,\"pid\":643,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.0898911083855,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.176999999996,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":644,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":28,\"hackDifficulty\":58.42599999999493,\"minDifficulty\":9,\"moneyAvailable\":520232.78380841995,\"moneyMax\":1710853100,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":205,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"84.1.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":59.15399999999516,\"minDifficulty\":13,\"moneyAvailable\":4080504.9921032256,\"moneyMax\":1295632625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":255,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"95.8.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21338445,2774,1107,72]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60004.24373987777,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.19899999999,\"onlineExpGained\":57475.61588700816,\"onlineMoneyMade\":21338445,\"onlineRunningTime\":19523.610000018314,\"pid\":645,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[219134,334,3289,265]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87575.61749301947,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.216,\"onlineExpGained\":86933.29438344977,\"onlineMoneyMade\":219134,\"onlineRunningTime\":19523.610000018314,\"pid\":646,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[115170,159,1602,133]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42772.57702699605,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.236999999994,\"onlineExpGained\":42360.99848902745,\"onlineMoneyMade\":115170,\"onlineRunningTime\":19523.610000018314,\"pid\":647,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[380630,107,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32670.45270719999,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.251,\"onlineExpGained\":32709.88421063015,\"onlineMoneyMade\":380630,\"onlineRunningTime\":19523.610000018314,\"pid\":648,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[3755,53,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12858.049403238369,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.272,\"onlineExpGained\":13694.058631043958,\"onlineMoneyMade\":3755,\"onlineRunningTime\":19523.610000018314,\"pid\":649,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38856,44,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9649.159345862534,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.287,\"onlineExpGained\":10783.405118511695,\"onlineMoneyMade\":38856,\"onlineRunningTime\":19523.610000018314,\"pid\":650,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[584,16,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7178.767664190826,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.308,\"onlineExpGained\":6681.848063552079,\"onlineMoneyMade\":584,\"onlineRunningTime\":19523.610000018314,\"pid\":651,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[52148,80,573,43]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22396.512253559657,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.322,\"onlineExpGained\":23130.703703253323,\"onlineMoneyMade\":52148,\"onlineRunningTime\":19523.610000018314,\"pid\":652,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1423,18,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5242.121177431591,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.34299999999,\"onlineExpGained\":5081.987711812447,\"onlineMoneyMade\":1423,\"onlineRunningTime\":19523.610000018314,\"pid\":653,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.1176456695193,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.356,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":654,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":77.0542500000117,\"minDifficulty\":10,\"moneyAvailable\":14067.092036240194,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"40.1.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21732967,2769,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59675.353895301465,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.379,\"onlineExpGained\":57425.795090043146,\"onlineMoneyMade\":21732967,\"onlineRunningTime\":19519.810000018315,\"pid\":655,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[322930,322,3288,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87424.94632512132,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.393,\"onlineExpGained\":86736.14256658265,\"onlineMoneyMade\":322930,\"onlineRunningTime\":19519.810000018315,\"pid\":656,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[105208,178,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43102.90217177153,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.415,\"onlineExpGained\":42670.04728303545,\"onlineMoneyMade\":105208,\"onlineRunningTime\":19519.810000018315,\"pid\":657,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[601489,120,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32922.84359246825,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.428,\"onlineExpGained\":32969.64505042136,\"onlineMoneyMade\":601489,\"onlineRunningTime\":19519.810000018315,\"pid\":658,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[6411,62,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13059.185342165361,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.451,\"onlineExpGained\":13873.893058591722,\"onlineMoneyMade\":6411,\"onlineRunningTime\":19519.810000018315,\"pid\":659,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38603,47,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9788.576283160082,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.465,\"onlineExpGained\":10843.349927694282,\"onlineMoneyMade\":38603,\"onlineRunningTime\":19519.810000018315,\"pid\":660,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[475,14,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7231.780362679594,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.486,\"onlineExpGained\":6617.9069337573255,\"onlineMoneyMade\":475,\"onlineRunningTime\":19519.810000018315,\"pid\":661,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[38329,68,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22408.084584234202,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.5,\"onlineExpGained\":22842.9686191769,\"onlineMoneyMade\":38329,\"onlineRunningTime\":19519.810000018315,\"pid\":662,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1041,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5391.1204189575865,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.522,\"onlineExpGained\":5062.006108751586,\"onlineMoneyMade\":1041,\"onlineRunningTime\":19519.810000018315,\"pid\":663,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.1456100135565,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.536,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":664,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":56.07000000000006,\"minDifficulty\":17,\"moneyAvailable\":1475852858.1342251,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":516,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"26.9.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21484213,2829,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59787.97753633532,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.556,\"onlineExpGained\":57938.65623527224,\"onlineMoneyMade\":21484213,\"onlineRunningTime\":19515.610000018318,\"pid\":665,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[225079,337,3291,263]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88425.4641898448,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.576,\"onlineExpGained\":86981.25023079582,\"onlineMoneyMade\":225079,\"onlineRunningTime\":19515.610000018318,\"pid\":666,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[102555,154,1602,132]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42720.469443417765,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.596,\"onlineExpGained\":42259.758366852395,\"onlineMoneyMade\":102555,\"onlineRunningTime\":19515.610000018318,\"pid\":667,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[606669,102,989,76]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32599.34813914151,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.613,\"onlineExpGained\":32616.63672967947,\"onlineMoneyMade\":606669,\"onlineRunningTime\":19515.610000018318,\"pid\":668,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.160457511961,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.635,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":669,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":65,\"hackDifficulty\":66.11600000000064,\"minDifficulty\":22,\"moneyAvailable\":1032396369.2595413,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":955,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"17.8.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":51.47399999999911,\"minDifficulty\":16,\"moneyAvailable\":653618655.0835456,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":789,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"84.9.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21286643,2778,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59699.07960603708,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.649999999994,\"onlineExpGained\":57496.13033281742,\"onlineMoneyMade\":21286643,\"onlineRunningTime\":19518.410000018317,\"pid\":670,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[373833,338,3291,263]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88010.63363846303,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.67,\"onlineExpGained\":86997.23551324439,\"onlineMoneyMade\":373833,\"onlineRunningTime\":19518.410000018317,\"pid\":671,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[84459,155,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42902.734644717595,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.683999999994,\"onlineExpGained\":42302.38578671558,\"onlineMoneyMade\":84459,\"onlineRunningTime\":19518.410000018317,\"pid\":672,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[446977,101,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32461.79946736002,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.704,\"onlineExpGained\":32589.994592264982,\"onlineMoneyMade\":446977,\"onlineRunningTime\":19518.410000018317,\"pid\":673,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5662,51,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12687.735151489573,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.71799999999,\"onlineExpGained\":13654.095424922241,\"onlineMoneyMade\":5662,\"onlineRunningTime\":19518.410000018317,\"pid\":674,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[39447,47,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9860.386198450467,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.74,\"onlineExpGained\":10843.349927694282,\"onlineMoneyMade\":39447,\"onlineRunningTime\":19518.410000018317,\"pid\":675,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[472,12,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6957.414668437363,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.75399999999,\"onlineExpGained\":6553.9658039625665,\"onlineMoneyMade\":472,\"onlineRunningTime\":19518.410000018317,\"pid\":676,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[40330,72,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22230.387658787786,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.776,\"onlineExpGained\":22938.880313869042,\"onlineMoneyMade\":40330,\"onlineRunningTime\":19518.410000018317,\"pid\":677,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1472,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5159.662661113243,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.789,\"onlineExpGained\":5062.006108751585,\"onlineMoneyMade\":1472,\"onlineRunningTime\":19518.410000018317,\"pid\":678,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1401,24,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9935.326350317055,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.811,\"onlineExpGained\":8438.89702603721,\"onlineMoneyMade\":1401,\"onlineRunningTime\":19518.410000018317,\"pid\":679,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[142270,19,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5686.061745970974,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.825,\"onlineExpGained\":5041.7580843165715,\"onlineMoneyMade\":142270,\"onlineRunningTime\":19518.410000018317,\"pid\":680,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1125,32,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12583.254598304413,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.851,\"onlineExpGained\":11441.465912649292,\"onlineMoneyMade\":1125,\"onlineRunningTime\":19518.410000018317,\"pid\":681,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[51004,23,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7196.142776508195,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.865,\"onlineExpGained\":6351.4855596125035,\"onlineMoneyMade\":51004,\"onlineRunningTime\":19518.410000018317,\"pid\":682,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6010652,14,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4671.923988470759,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.888,\"onlineExpGained\":4328.015222982617,\"onlineMoneyMade\":6010652,\"onlineRunningTime\":19518.410000018317,\"pid\":683,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[5259592,22,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5468.356381175902,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.902,\"onlineExpGained\":4927.46331480846,\"onlineMoneyMade\":5259592,\"onlineRunningTime\":19518.410000018317,\"pid\":684,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[626918,14,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5217.728042006334,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.924999999996,\"onlineExpGained\":4744.431830770958,\"onlineMoneyMade\":626918,\"onlineRunningTime\":19518.410000018317,\"pid\":685,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[17270852,10,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4506.213359603811,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.939,\"onlineExpGained\":4301.905928316421,\"onlineMoneyMade\":17270852,\"onlineRunningTime\":19518.410000018317,\"pid\":686,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[1245464,1,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3054.5407232906177,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.959,\"onlineExpGained\":2934.8978575793412,\"onlineMoneyMade\":1245464,\"onlineRunningTime\":19518.410000018317,\"pid\":687,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1630.464939375082,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.974,\"onlineExpGained\":1599.5939303655023,\"onlineMoneyMade\":0,\"onlineRunningTime\":19518.410000018317,\"pid\":688,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7548821,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3801.315398626238,\"offlineMoneyMade\":0,\"offlineRunningTime\":32805.997,\"onlineExpGained\":3515.4300318409073,\"onlineMoneyMade\":7548821,\"onlineRunningTime\":19518.410000018317,\"pid\":689,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":540,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-212271.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,3,4,3,8,0,0,0,7,8,6,8,7,4,1,9,4,5,6,10,5,0,0,7],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"39.7.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21272736,2776,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59951.690026525095,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.011999999995,\"onlineExpGained\":57490.26906258607,\"onlineMoneyMade\":21272736,\"onlineRunningTime\":19521.010000018316,\"pid\":690,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[250355,350,3294,261]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88526.47272407373,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.072,\"onlineExpGained\":87215.70104004325,\"onlineMoneyMade\":250355,\"onlineRunningTime\":19521.010000018316,\"pid\":691,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[117208,162,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42498.491676432575,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.085999999996,\"onlineExpGained\":42435.596473788006,\"onlineMoneyMade\":117208,\"onlineRunningTime\":19521.010000018316,\"pid\":692,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[661569,102,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32478.288322775843,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.114,\"onlineExpGained\":32609.976195325846,\"onlineMoneyMade\":661569,\"onlineRunningTime\":19521.010000018316,\"pid\":693,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4548,51,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12631.630061607446,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.13,\"onlineExpGained\":13654.09542492224,\"onlineMoneyMade\":4548,\"onlineRunningTime\":19521.010000018316,\"pid\":694,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[34955,37,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9742.811682341693,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.152,\"onlineExpGained\":10643.533897085657,\"onlineMoneyMade\":34955,\"onlineRunningTime\":19521.010000018316,\"pid\":695,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[627,16,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7099.148800179599,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.167,\"onlineExpGained\":6681.848063552078,\"onlineMoneyMade\":627,\"onlineRunningTime\":19521.010000018316,\"pid\":696,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[32253,77,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22271.152868937093,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.188,\"onlineExpGained\":23058.769932234223,\"onlineMoneyMade\":32253,\"onlineRunningTime\":19521.010000018316,\"pid\":697,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1358,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5198.156761506884,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.202999999994,\"onlineExpGained\":5062.006108751586,\"onlineMoneyMade\":1358,\"onlineRunningTime\":19521.010000018316,\"pid\":698,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1336,20,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9678.84913288281,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.227999999996,\"onlineExpGained\":8327.000048896387,\"onlineMoneyMade\":1336,\"onlineRunningTime\":19521.010000018316,\"pid\":699,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[181373,21,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5996.762052348622,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.24,\"onlineExpGained\":5102.502157621591,\"onlineMoneyMade\":181373,\"onlineRunningTime\":19521.010000018316,\"pid\":700,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[885,26,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12388.78051679783,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.263,\"onlineExpGained\":11273.620446938057,\"onlineMoneyMade\":885,\"onlineRunningTime\":19521.010000018316,\"pid\":701,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[49147,23,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7319.534978786692,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.277,\"onlineExpGained\":6351.485559612506,\"onlineMoneyMade\":49147,\"onlineRunningTime\":19521.010000018316,\"pid\":702,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[7080127,17,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4980.725496661272,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.299,\"onlineExpGained\":4435.915879511269,\"onlineMoneyMade\":7080127,\"onlineRunningTime\":19521.010000018316,\"pid\":703,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3784934,16,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5277.692910109997,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.318,\"onlineExpGained\":4711.662001751157,\"onlineMoneyMade\":3784934,\"onlineRunningTime\":19521.010000018316,\"pid\":704,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[819487,17,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5547.113775813003,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.335,\"onlineExpGained\":4859.525864401521,\"onlineMoneyMade\":819487,\"onlineRunningTime\":19521.010000018316,\"pid\":705,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[13938058,8,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4356.577056474466,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.353,\"onlineExpGained\":4194.804535910203,\"onlineMoneyMade\":13938058,\"onlineRunningTime\":19521.010000018316,\"pid\":706,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[1258241,1,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3054.476634713229,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.369,\"onlineExpGained\":2934.8978575793412,\"onlineMoneyMade\":1258241,\"onlineRunningTime\":19521.010000018316,\"pid\":707,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[6494233,2,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1910.6291452771695,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.386,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":6494233,\"onlineRunningTime\":19521.010000018316,\"pid\":708,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7708412,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3685.96602636802,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.403999999995,\"onlineExpGained\":3515.430031840907,\"onlineMoneyMade\":7708412,\"onlineRunningTime\":19521.010000018316,\"pid\":709,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[4502870,2,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2458.263898858944,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.422,\"onlineExpGained\":2416.9747062418105,\"onlineMoneyMade\":4502870,\"onlineRunningTime\":19521.010000018316,\"pid\":710,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[9539570,5,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3522.6532426119657,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.437999999995,\"onlineExpGained\":3433.6386699784443,\"onlineMoneyMade\":9539570,\"onlineRunningTime\":19521.010000018316,\"pid\":711,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[12607075,10,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3513.197585123298,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.456,\"onlineExpGained\":3461.346492889507,\"onlineMoneyMade\":12607075,\"onlineRunningTime\":19521.010000018316,\"pid\":712,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[3214018,1,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2069.4379405968402,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.475999999995,\"onlineExpGained\":1989.9012434876647,\"onlineMoneyMade\":3214018,\"onlineRunningTime\":19521.010000018316,\"pid\":713,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[17993478,4,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2603.9956680081477,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.493,\"onlineExpGained\":2502.7623887164436,\"onlineMoneyMade\":17993478,\"onlineRunningTime\":19521.010000018316,\"pid\":714,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[420734175,26,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4176.827616474404,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.511,\"onlineExpGained\":3716.578169320246,\"onlineMoneyMade\":420734175,\"onlineRunningTime\":19521.010000018316,\"pid\":715,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[55058804,10,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3359.305196782042,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.527,\"onlineExpGained\":3106.4732225286057,\"onlineMoneyMade\":55058804,\"onlineRunningTime\":19521.010000018316,\"pid\":716,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2379882,2,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3533.0179773991176,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.543999999994,\"onlineExpGained\":3407.2629539381096,\"onlineMoneyMade\":2379882,\"onlineRunningTime\":19521.010000018316,\"pid\":717,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[3211033,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1528.9279336843913,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.562,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":3211033,\"onlineRunningTime\":19521.010000018316,\"pid\":718,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1345.9958340593073,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.577999999994,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":719,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[4840293,2,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1838.7039230133394,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.597,\"onlineExpGained\":1807.9354449467507,\"onlineMoneyMade\":4840293,\"onlineRunningTime\":19521.010000018316,\"pid\":720,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1389.8889773987498,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.613999999994,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":721,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.1456413414185,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.636,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":722,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1302.1085377217205,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.653999999995,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":723,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,0,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1677.9164271332204,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.671,\"onlineExpGained\":1661.6701105412449,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":724,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.1750203526067,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.71,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":725,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[2862858,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1711.1693898209928,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.729,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":2862858,\"onlineRunningTime\":19521.010000018316,\"pid\":726,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1207.9791745357911,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.748,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":727,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1419.1578709050762,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.765,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19521.010000018316,\"pid\":728,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3097224,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1381.9610866005912,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.784999999996,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3097224,\"onlineRunningTime\":19521.010000018316,\"pid\":729,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":346,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"27.9.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21303037,2781,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59918.399234799865,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.801,\"onlineExpGained\":57531.29795420456,\"onlineMoneyMade\":21303037,\"onlineRunningTime\":19522.210000018316,\"pid\":730,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[234003,345,3286,269]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88145.76178588998,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.818,\"onlineExpGained\":87125.11777283395,\"onlineMoneyMade\":234003,\"onlineRunningTime\":19522.210000018316,\"pid\":731,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[83137,169,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":43187.564609641195,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.836,\"onlineExpGained\":42547.49345092882,\"onlineMoneyMade\":83137,\"onlineRunningTime\":19522.210000018316,\"pid\":732,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[491553,103,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32582.98345157531,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.852999999996,\"onlineExpGained\":32629.95779838671,\"onlineMoneyMade\":491553,\"onlineRunningTime\":19522.210000018316,\"pid\":733,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5436,58,411,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12953.576202655446,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.871,\"onlineExpGained\":13793.966646348277,\"onlineMoneyMade\":5436,\"onlineRunningTime\":19522.210000018316,\"pid\":734,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[31861,41,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9837.316008686907,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.89,\"onlineExpGained\":10723.460309329108,\"onlineMoneyMade\":31861,\"onlineRunningTime\":19522.210000018316,\"pid\":735,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[422,11,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6966.526349841053,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.912,\"onlineExpGained\":6521.99523906519,\"onlineMoneyMade\":422,\"onlineRunningTime\":19522.210000018316,\"pid\":736,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[33459,61,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22207.66713749115,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.934,\"onlineExpGained\":22675.123153465658,\"onlineMoneyMade\":33459,\"onlineRunningTime\":19522.210000018316,\"pid\":737,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1004,14,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5186.754043159422,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.962,\"onlineExpGained\":5002.061299569002,\"onlineMoneyMade\":1004,\"onlineRunningTime\":19522.210000018316,\"pid\":738,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1558,27,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10005.362129132312,\"offlineMoneyMade\":0,\"offlineRunningTime\":32806.981,\"onlineExpGained\":8522.819758892829,\"onlineMoneyMade\":1558,\"onlineRunningTime\":19522.210000018316,\"pid\":739,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[144289,18,102,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5735.986778056609,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.001,\"onlineExpGained\":5011.386047664062,\"onlineMoneyMade\":144289,\"onlineRunningTime\":19522.210000018316,\"pid\":740,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[705,17,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11860.267806912487,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.019,\"onlineExpGained\":11021.852248371206,\"onlineMoneyMade\":705,\"onlineRunningTime\":19522.210000018316,\"pid\":741,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[57152,23,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7433.983281961367,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.037,\"onlineExpGained\":6351.485559612506,\"onlineMoneyMade\":57152,\"onlineRunningTime\":19522.210000018316,\"pid\":742,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[7108670,17,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4852.129580398249,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.057,\"onlineExpGained\":4435.915879511269,\"onlineMoneyMade\":7108670,\"onlineRunningTime\":19522.210000018316,\"pid\":743,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4047670,17,80,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5288.075085228252,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.081,\"onlineExpGained\":4747.628887260707,\"onlineMoneyMade\":4047670,\"onlineRunningTime\":19522.210000018316,\"pid\":744,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[523382,12,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5195.67788142998,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.1,\"onlineExpGained\":4667.70247501725,\"onlineMoneyMade\":523382,\"onlineRunningTime\":19522.210000018316,\"pid\":745,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[15586220,9,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4475.449993753304,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.117999999995,\"onlineExpGained\":4248.355232113312,\"onlineMoneyMade\":15586220,\"onlineRunningTime\":19522.210000018316,\"pid\":746,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[3137305,2,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3073.0864201952236,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.137,\"onlineExpGained\":2999.6382514965326,\"onlineMoneyMade\":3137305,\"onlineRunningTime\":19522.210000018316,\"pid\":747,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1630.4507976130753,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.157,\"onlineExpGained\":1599.5939303655023,\"onlineMoneyMade\":0,\"onlineRunningTime\":19522.210000018316,\"pid\":748,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[8964074,7,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3801.285512719328,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.176,\"onlineExpGained\":3567.382199799147,\"onlineMoneyMade\":8964074,\"onlineRunningTime\":19522.210000018316,\"pid\":749,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":206,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"74.0.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22211515,2751,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59425.51496859032,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.19899999999,\"onlineExpGained\":57255.8182533387,\"onlineMoneyMade\":22211515,\"onlineRunningTime\":19516.410000018317,\"pid\":750,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[228967,353,3286,269]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87971.5540021229,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.218,\"onlineExpGained\":87253.0000324235,\"onlineMoneyMade\":228967,\"onlineRunningTime\":19516.410000018317,\"pid\":751,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[108317,165,1607,129]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42731.99531208357,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.235,\"onlineExpGained\":42483.55232113406,\"onlineMoneyMade\":108317,\"onlineRunningTime\":19516.410000018317,\"pid\":752,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[421496,117,986,79]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32903.9287568429,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.256,\"onlineExpGained\":32909.700241238774,\"onlineMoneyMade\":421496,\"onlineRunningTime\":19516.410000018317,\"pid\":753,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,128]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3887.4190181076165,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.276,\"onlineExpGained\":4092.23230686445,\"onlineMoneyMade\":0,\"onlineRunningTime\":19511.81000001831,\"pid\":754,\"ramUsage\":1.75,\"server\":\".\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\".\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\".\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":520,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-716697.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))())(a(()\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-804382-OmegaSoftware.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"27372785\",-85],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"76.4.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21799453,2787,1106,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59903.84294564734,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.295,\"onlineExpGained\":57586.98002140079,\"onlineMoneyMade\":21799453,\"onlineRunningTime\":19523.210000018313,\"pid\":755,\"ramUsage\":3.2,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[303686,335,3286,269]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87877.24283496458,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.311,\"onlineExpGained\":86965.26494834718,\"onlineMoneyMade\":303686,\"onlineRunningTime\":19523.210000018313,\"pid\":756,\"ramUsage\":3.2,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"19.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"73.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"44.5.4.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server\",\"httpPortOpen\":false,\"ip\":\"54.4.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8192,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21149467,2728,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59115.68196762389,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.329999999994,\"onlineExpGained\":57053.604430362815,\"onlineMoneyMade\":21149467,\"onlineRunningTime\":19515.410000018317,\"pid\":757,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[176454,324,3289,266]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87686.33911625065,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.346999999994,\"onlineExpGained\":86794.75526889446,\"onlineMoneyMade\":176454,\"onlineRunningTime\":19515.410000018317,\"pid\":758,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[71457,171,1604,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42878.59503890561,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.367,\"onlineExpGained\":42552.82187841174,\"onlineMoneyMade\":71457,\"onlineRunningTime\":19515.410000018317,\"pid\":759,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[370512,98,989,76]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32618.927286778784,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.388999999996,\"onlineExpGained\":32536.71031743603,\"onlineMoneyMade\":370512,\"onlineRunningTime\":19515.410000018317,\"pid\":760,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4397,48,413,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12891.296688282688,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.407999999996,\"onlineExpGained\":13620.792753154137,\"onlineMoneyMade\":4397,\"onlineRunningTime\":19515.410000018317,\"pid\":761,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[22016,38,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9898.632490847911,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.424999999996,\"onlineExpGained\":10663.515500146523,\"onlineMoneyMade\":22016,\"onlineRunningTime\":19515.410000018317,\"pid\":762,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[649,17,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7118.3815177360875,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.441999999995,\"onlineExpGained\":6713.818628449457,\"onlineMoneyMade\":649,\"onlineRunningTime\":19515.410000018317,\"pid\":763,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34499,67,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21867.35513901202,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.462,\"onlineExpGained\":22818.99069550388,\"onlineMoneyMade\":34499,\"onlineRunningTime\":19515.410000018317,\"pid\":764,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1327,15,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5110.154375207512,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.479999999996,\"onlineExpGained\":5022.042902629863,\"onlineMoneyMade\":1327,\"onlineRunningTime\":19515.410000018317,\"pid\":765,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1255,19,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9563.87542254731,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.496999999996,\"onlineExpGained\":8299.025804611181,\"onlineMoneyMade\":1255,\"onlineRunningTime\":19515.410000018317,\"pid\":766,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[138217,20,101,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5705.429984627499,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.517,\"onlineExpGained\":5031.634072099068,\"onlineMoneyMade\":138217,\"onlineRunningTime\":19515.410000018317,\"pid\":767,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1359,33,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12360.34477161361,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.53,\"onlineExpGained\":11469.440156934497,\"onlineMoneyMade\":1359,\"onlineRunningTime\":19515.410000018317,\"pid\":768,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[42803,24,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7135.120611361661,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.551,\"onlineExpGained\":6383.456124509883,\"onlineMoneyMade\":42803,\"onlineRunningTime\":19515.410000018317,\"pid\":769,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5311319,13,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4741.90464600436,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.565,\"onlineExpGained\":4292.048337473067,\"onlineMoneyMade\":5311319,\"onlineRunningTime\":19515.410000018317,\"pid\":770,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4097568,17,79,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5123.0805266508105,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.585999999996,\"onlineExpGained\":4699.67303991464,\"onlineMoneyMade\":4097568,\"onlineRunningTime\":19515.410000018317,\"pid\":771,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[697757,16,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5388.532987753721,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.6,\"onlineExpGained\":4821.161186524667,\"onlineMoneyMade\":697757,\"onlineRunningTime\":19515.410000018317,\"pid\":772,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[14598790,9,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4579.423475740351,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.621,\"onlineExpGained\":4248.355232113312,\"onlineMoneyMade\":14598790,\"onlineRunningTime\":19515.410000018317,\"pid\":773,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2911.2139860609436,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.637,\"onlineExpGained\":2870.15746366215,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":774,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[12013226,3,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1806.996593938889,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.659,\"onlineExpGained\":1789.0195273824697,\"onlineMoneyMade\":12013226,\"onlineRunningTime\":19515.410000018317,\"pid\":775,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[5344064,4,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3571.1577007163332,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.674,\"onlineExpGained\":3411.5256959244275,\"onlineMoneyMade\":5344064,\"onlineRunningTime\":19515.410000018317,\"pid\":776,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[2527093,1,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2330.8829355143566,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.693999999996,\"onlineExpGained\":2359.427689426529,\"onlineMoneyMade\":2527093,\"onlineRunningTime\":19515.410000018317,\"pid\":777,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[7722073,4,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3378.902979070317,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.71,\"onlineExpGained\":3376.091653163163,\"onlineMoneyMade\":7722073,\"onlineRunningTime\":19515.410000018317,\"pid\":778,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[4950510,4,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3276.4834348489912,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.731999999996,\"onlineExpGained\":3192.7937477515284,\"onlineMoneyMade\":4950510,\"onlineRunningTime\":19515.410000018317,\"pid\":779,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[5600145,2,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2325.1727772072945,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.744999999995,\"onlineExpGained\":2051.444580915118,\"onlineMoneyMade\":5600145,\"onlineRunningTime\":19515.410000018317,\"pid\":780,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[18613960,4,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2496.1494700992694,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.769,\"onlineExpGained\":2502.7623887164436,\"onlineMoneyMade\":18613960,\"onlineRunningTime\":19515.410000018317,\"pid\":781,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[355383967,22,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4010.494621748732,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.781,\"onlineExpGained\":3518.3606669564997,\"onlineMoneyMade\":355383967,\"onlineRunningTime\":19515.410000018317,\"pid\":782,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[46528343,8,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3077.7382819378568,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.803,\"onlineExpGained\":3021.7512255505526,\"onlineMoneyMade\":46528343,\"onlineRunningTime\":19515.410000018317,\"pid\":783,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3359.222743533266,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.815,\"onlineExpGained\":3268.1909966345133,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":784,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[5273656,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1771.3284968236262,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.839,\"onlineExpGained\":1614.2471059434674,\"onlineMoneyMade\":5273656,\"onlineRunningTime\":19515.410000018317,\"pid\":785,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1346.1773221223443,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.858,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":786,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[4816803,2,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1838.9455417984425,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.878,\"onlineExpGained\":1807.9354449467507,\"onlineMoneyMade\":4816803,\"onlineRunningTime\":19515.410000018317,\"pid\":787,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1390.0763101521882,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.892,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":788,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.3271609138553,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.914,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":789,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1302.2838328067128,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.926999999996,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":790,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,0,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1678.138119221411,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.952999999994,\"onlineExpGained\":1661.6701105412449,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":791,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.3504390148187,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.967,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":792,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[2469073,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1838.0205319462436,\"offlineMoneyMade\":0,\"offlineRunningTime\":32807.99,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":2469073,\"onlineRunningTime\":19515.410000018317,\"pid\":793,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1208.1451523589838,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.003,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":794,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1419.3486540469266,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.024999999994,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":795,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3078795,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1382.1535860691542,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.042,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3078795,\"onlineRunningTime\":19515.410000018317,\"pid\":796,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1438.713635595465,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.062999999995,\"onlineExpGained\":1553.7694540125926,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":797,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[1371547,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1353.710636772721,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.081999999995,\"onlineExpGained\":1313.19095315982,\"onlineMoneyMade\":1371547,\"onlineRunningTime\":19515.410000018317,\"pid\":798,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[11333919,3,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1819.0818919788435,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.106,\"onlineExpGained\":1778.0962510425327,\"onlineMoneyMade\":11333919,\"onlineRunningTime\":19515.410000018317,\"pid\":799,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[2759420,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1621.4473947827266,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.119999999995,\"onlineExpGained\":1658.473054051508,\"onlineMoneyMade\":2759420,\"onlineRunningTime\":19515.410000018317,\"pid\":800,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1505.3746657432685,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.140999999996,\"onlineExpGained\":1529.7915303395591,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":801,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[2873190,1,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1771.3461214787776,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.153999999995,\"onlineExpGained\":1758.3810693558148,\"onlineMoneyMade\":2873190,\"onlineRunningTime\":19515.410000018317,\"pid\":802,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1474.2443119381735,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.174999999996,\"onlineExpGained\":1592.1341318894474,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":803,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.5278337682279,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.189,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":804,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.363333872798,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.21,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":805,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1142.2952028902316,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.225,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":806,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1580.7544383198301,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.245,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":807,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[92520638,2,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1498.040820267296,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.259,\"onlineExpGained\":1478.6386265037536,\"onlineMoneyMade\":92520638,\"onlineRunningTime\":19515.410000018317,\"pid\":808,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[12275401,1,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1356.3974999582638,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.282,\"onlineExpGained\":1210.885145488209,\"onlineMoneyMade\":12275401,\"onlineRunningTime\":19515.410000018317,\"pid\":809,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":970.429863911808,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.297,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":810,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[8691132,1,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1140.4593305620501,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.318,\"onlineExpGained\":1044.904629395986,\"onlineMoneyMade\":8691132,\"onlineRunningTime\":19515.410000018317,\"pid\":811,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1270.5172334709432,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.333,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":812,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[2396209,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1365.027634483516,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.354999999996,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":2396209,\"onlineRunningTime\":19515.410000018317,\"pid\":813,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1174.796689647371,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.369999999995,\"onlineExpGained\":1092.327633993764,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":814,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[150486131,3,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1354.0798809721991,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.392,\"onlineExpGained\":1351.8220524108192,\"onlineMoneyMade\":150486131,\"onlineRunningTime\":19515.410000018317,\"pid\":815,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.0793026555938,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.405999999995,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":816,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.0800255423098,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.426999999996,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":817,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.6402318875976,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.441999999995,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19515.410000018317,\"pid\":818,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[2690595391.1055064,134892,302258,67446]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13201292.659478609,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.464,\"onlineExpGained\":13876104.355996963,\"onlineMoneyMade\":2690595391.1055064,\"onlineRunningTime\":19511.81000001831,\"pid\":819,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":2498,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-0\",\"httpPortOpen\":false,\"ip\":\"17.9.5.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8192,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[22836607,2814,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59888.48438547278,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.479999999996,\"onlineExpGained\":57815.56956041724,\"onlineMoneyMade\":22836607,\"onlineRunningTime\":19514.810000018315,\"pid\":820,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[253697,341,3289,265]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87897.78328171425,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.503,\"onlineExpGained\":87045.19136059059,\"onlineMoneyMade\":253697,\"onlineRunningTime\":19514.810000018315,\"pid\":821,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[80595,160,1604,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42605.07003618299,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.515999999996,\"onlineExpGained\":42376.98377147612,\"onlineMoneyMade\":80595,\"onlineRunningTime\":19514.810000018315,\"pid\":822,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[464297,99,992,74]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32752.167992324088,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.538,\"onlineExpGained\":32589.994592264993,\"onlineMoneyMade\":464297,\"onlineRunningTime\":19514.810000018315,\"pid\":823,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4373,53,413,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12892.024103470165,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.555,\"onlineExpGained\":13720.700768458448,\"onlineMoneyMade\":4373,\"onlineRunningTime\":19514.810000018315,\"pid\":824,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38584,49,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9835.004268210721,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.575999999994,\"onlineExpGained\":10883.313133816006,\"onlineMoneyMade\":38584,\"onlineRunningTime\":19514.810000018315,\"pid\":825,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[398,11,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7011.099438886526,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.59,\"onlineExpGained\":6521.995239065189,\"onlineMoneyMade\":398,\"onlineRunningTime\":19514.810000018315,\"pid\":826,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[54473,78,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22150.232177786085,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.613,\"onlineExpGained\":23082.747855907255,\"onlineMoneyMade\":54473,\"onlineRunningTime\":19514.810000018315,\"pid\":827,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1440,19,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5287.788151966135,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.627,\"onlineExpGained\":5101.969314873309,\"onlineMoneyMade\":1440,\"onlineRunningTime\":19514.810000018315,\"pid\":828,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1688,25,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9728.656231096578,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.65,\"onlineExpGained\":8466.871270322417,\"onlineMoneyMade\":1688,\"onlineRunningTime\":19514.810000018315,\"pid\":829,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[176007,20,101,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5849.229619339198,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.664,\"onlineExpGained\":5031.634072099069,\"onlineMoneyMade\":176007,\"onlineRunningTime\":19514.810000018315,\"pid\":830,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[838,22,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12126.578142368282,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.683,\"onlineExpGained\":11161.723469797234,\"onlineMoneyMade\":838,\"onlineRunningTime\":19514.810000018315,\"pid\":831,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[38952,22,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7046.188737616612,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.699,\"onlineExpGained\":6319.514994715125,\"onlineMoneyMade\":38952,\"onlineRunningTime\":19514.810000018315,\"pid\":832,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6732403,16,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4891.451826390274,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.72,\"onlineExpGained\":4399.948994001717,\"onlineMoneyMade\":6732403,\"onlineRunningTime\":19514.810000018315,\"pid\":833,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3644855,16,79,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5241.67658444305,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.736,\"onlineExpGained\":4663.7061544050885,\"onlineMoneyMade\":3644855,\"onlineRunningTime\":19514.810000018315,\"pid\":834,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[738188,17,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5473.943246359614,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.75399999999,\"onlineExpGained\":4859.525864401521,\"onlineMoneyMade\":738188,\"onlineRunningTime\":19514.810000018315,\"pid\":835,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[12392423,7,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4253.908155083155,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.772,\"onlineExpGained\":4141.253839707094,\"onlineMoneyMade\":12392423,\"onlineRunningTime\":19514.810000018315,\"pid\":836,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[4022678,3,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3217.279835050117,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.788,\"onlineExpGained\":3064.378645413724,\"onlineMoneyMade\":4022678,\"onlineRunningTime\":19514.810000018315,\"pid\":837,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[11887971,3,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1807.094827543656,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.809,\"onlineExpGained\":1789.0195273824697,\"onlineMoneyMade\":11887971,\"onlineRunningTime\":19514.810000018315,\"pid\":838,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[6012910,5,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3772.0940929311455,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.829999999994,\"onlineExpGained\":3463.4778638826674,\"onlineMoneyMade\":6012910,\"onlineRunningTime\":19514.810000018315,\"pid\":839,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[11151701,5,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2635.964789703092,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.849,\"onlineExpGained\":2589.6157566876536,\"onlineMoneyMade\":11151701,\"onlineRunningTime\":19514.810000018315,\"pid\":840,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[7237801,4,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3617.967962505407,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.865,\"onlineExpGained\":3376.0916531631633,\"onlineMoneyMade\":7237801,\"onlineRunningTime\":19514.810000018315,\"pid\":841,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[12422456,10,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3513.848194159311,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.884999999995,\"onlineExpGained\":3461.346492889507,\"onlineMoneyMade\":12422456,\"onlineRunningTime\":19514.810000018315,\"pid\":842,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[9241868,3,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2224.0549477137647,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.901999999995,\"onlineExpGained\":2112.987918342572,\"onlineMoneyMade\":9241868,\"onlineRunningTime\":19514.810000018315,\"pid\":843,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[23596802,5,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2524.275249167493,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.918,\"onlineExpGained\":2551.517500184946,\"onlineMoneyMade\":23596802,\"onlineRunningTime\":19514.810000018315,\"pid\":844,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[446507249,25,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4354.815721234762,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.937,\"onlineExpGained\":3667.0237937293095,\"onlineMoneyMade\":446507249,\"onlineRunningTime\":19514.810000018315,\"pid\":845,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[42622648,8,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3335.5918175091897,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.955,\"onlineExpGained\":3021.751225550553,\"onlineMoneyMade\":42622648,\"onlineRunningTime\":19514.810000018315,\"pid\":846,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3359.404816756568,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.973999999995,\"onlineExpGained\":3268.1909966345133,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":847,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[6635134,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1545.9672073578442,\"offlineMoneyMade\":0,\"offlineRunningTime\":32808.99,\"onlineExpGained\":1614.2471059434672,\"onlineMoneyMade\":6635134,\"onlineRunningTime\":19514.810000018315,\"pid\":848,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[2188788,1,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1367.3584718278228,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.009,\"onlineExpGained\":1397.1136860154386,\"onlineMoneyMade\":2188788,\"onlineRunningTime\":19514.810000018315,\"pid\":849,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[7434274,3,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1852.35134966337,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.028999999995,\"onlineExpGained\":1854.2927640479495,\"onlineMoneyMade\":7434274,\"onlineRunningTime\":19514.810000018315,\"pid\":850,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[5660584,2,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1580.4429627783338,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.047,\"onlineExpGained\":1619.8419548005081,\"onlineMoneyMade\":5660584,\"onlineRunningTime\":19514.810000018315,\"pid\":851,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[1346809,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1441.1154899176108,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.064999999995,\"onlineExpGained\":1397.9129501378734,\"onlineMoneyMade\":1346809,\"onlineRunningTime\":19514.810000018315,\"pid\":852,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1302.35547637552,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.083,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":853,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[7032652,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1715.3961012997104,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.102,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":7032652,\"onlineRunningTime\":19514.810000018315,\"pid\":854,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.4229169393498,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.119,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":855,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[5428878,2,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1856.929674079829,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.138,\"onlineExpGained\":1791.4173197497732,\"onlineMoneyMade\":5428878,\"onlineRunningTime\":19514.810000018315,\"pid\":856,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1208.2127077390167,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.157999999996,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":857,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1419.4266235449309,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.176999999996,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":858,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[2462559,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1525.8423743382668,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.195,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":2462559,\"onlineRunningTime\":19514.810000018315,\"pid\":859,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[2489218,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1457.3792903917156,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.212999999996,\"onlineExpGained\":1618.509847929784,\"onlineMoneyMade\":2489218,\"onlineRunningTime\":19514.810000018315,\"pid\":860,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1332.4467290985099,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.229999999996,\"onlineExpGained\":1238.8593897734152,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":861,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[7373984,2,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1802.8901088071543,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.248,\"onlineExpGained\":1721.3484983496858,\"onlineMoneyMade\":7373984,\"onlineRunningTime\":19514.810000018315,\"pid\":862,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[9208743,3,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1659.6219703315892,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.265,\"onlineExpGained\":1791.150898375629,\"onlineMoneyMade\":9208743,\"onlineRunningTime\":19514.810000018315,\"pid\":863,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[1736831,1,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1659.762122744684,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.282999999996,\"onlineExpGained\":1599.3275089913573,\"onlineMoneyMade\":1736831,\"onlineRunningTime\":19514.810000018315,\"pid\":864,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[2864391,1,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1771.4422946618488,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.301,\"onlineExpGained\":1758.3810693558148,\"onlineMoneyMade\":2864391,\"onlineRunningTime\":19514.810000018315,\"pid\":865,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1474.3274050841983,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.318,\"onlineExpGained\":1592.1341318894474,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":866,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.5766880923143,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.337,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":867,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[1071120,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1397.461294279783,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.354999999996,\"onlineExpGained\":1355.5519516488469,\"onlineMoneyMade\":1071120,\"onlineRunningTime\":19514.810000018315,\"pid\":868,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1142.3557959644336,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.373999999996,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":869,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1580.8369177461045,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.392,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":870,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[43923072,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1480.9132435019708,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.409,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":43923072,\"onlineRunningTime\":19514.810000018315,\"pid\":871,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[14429981,1,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1200.501493568726,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.426999999996,\"onlineExpGained\":1210.885145488209,\"onlineMoneyMade\":14429981,\"onlineRunningTime\":19514.810000018315,\"pid\":872,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":970.4820782939729,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.444,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":873,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[8684953,1,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1140.517567341779,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.464,\"onlineExpGained\":1044.904629395986,\"onlineMoneyMade\":8684953,\"onlineRunningTime\":19514.810000018315,\"pid\":874,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1270.5846228627352,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.481,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":875,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,0,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1347.894714306534,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.498999999996,\"onlineExpGained\":1358.7490081385845,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":876,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[57718802,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1193.6723667021806,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.51699999999,\"onlineExpGained\":1157.86729203339,\"onlineMoneyMade\":57718802,\"onlineRunningTime\":19514.810000018315,\"pid\":877,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[98293638,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1340.6163367190777,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.534,\"onlineExpGained\":1304.6654691871859,\"onlineMoneyMade\":98293638,\"onlineRunningTime\":19514.810000018315,\"pid\":878,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.1269042353181,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.553,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":879,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.1275222706242,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.57,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":880,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.6854163853776,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.58899999999,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.810000018315,\"pid\":881,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[1705634870,147382,304756,67446]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13184700.909501635,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.606999999996,\"onlineExpGained\":13836173.120440137,\"onlineMoneyMade\":1705634870,\"onlineRunningTime\":19511.81000001831,\"pid\":882,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":2498,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-1\",\"httpPortOpen\":false,\"ip\":\"33.3.7.3\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8192,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21756088,2776,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":59409.484624650126,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.628,\"onlineExpGained\":57481.47715723952,\"onlineMoneyMade\":21756088,\"onlineRunningTime\":19514.210000018316,\"pid\":883,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[253521,362,3291,263]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88262.31733373295,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.646,\"onlineExpGained\":87386.21071949582,\"onlineMoneyMade\":253521,\"onlineRunningTime\":19514.210000018316,\"pid\":884,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[68151,164,1609,126]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42962.78778159194,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.664,\"onlineExpGained\":42451.58175623669,\"onlineMoneyMade\":68151,\"onlineRunningTime\":19514.210000018316,\"pid\":885,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[571442,99,989,76]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32406.470883206013,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.682,\"onlineExpGained\":32556.691920496884,\"onlineMoneyMade\":571442,\"onlineRunningTime\":19514.210000018316,\"pid\":886,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5544,67,413,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13067.47428209761,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.701,\"onlineExpGained\":14000.443211310514,\"onlineMoneyMade\":5544,\"onlineRunningTime\":19514.210000018316,\"pid\":887,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[41705,52,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9902.858023202905,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.719,\"onlineExpGained\":10943.257942998593,\"onlineMoneyMade\":41705,\"onlineRunningTime\":19514.210000018316,\"pid\":888,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[301,8,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6878.742546514897,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.736,\"onlineExpGained\":6426.083544373057,\"onlineMoneyMade\":301,\"onlineRunningTime\":19514.210000018316,\"pid\":889,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[48740,68,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21976.201248008874,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.756,\"onlineExpGained\":22842.96861917691,\"onlineMoneyMade\":48740,\"onlineRunningTime\":19514.210000018316,\"pid\":890,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1325,17,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5232.2522447625,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.774999999994,\"onlineExpGained\":5062.006108751586,\"onlineMoneyMade\":1325,\"onlineRunningTime\":19514.210000018316,\"pid\":891,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1414,25,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9945.332211893703,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.793,\"onlineExpGained\":8466.871270322417,\"onlineMoneyMade\":1414,\"onlineRunningTime\":19514.210000018316,\"pid\":892,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[119278,17,101,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5521.242935045255,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.808999999994,\"onlineExpGained\":4940.517962141541,\"onlineMoneyMade\":119278,\"onlineRunningTime\":19514.210000018316,\"pid\":893,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[933,24,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12143.280738591042,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.865,\"onlineExpGained\":11217.671958367646,\"onlineMoneyMade\":933,\"onlineRunningTime\":19514.210000018316,\"pid\":894,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[43545,20,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7151.747883632467,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.918999999994,\"onlineExpGained\":6255.573864920371,\"onlineMoneyMade\":43545,\"onlineRunningTime\":19514.210000018316,\"pid\":895,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5735502,14,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4811.896387712163,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.934,\"onlineExpGained\":4328.015222982617,\"onlineMoneyMade\":5735502,\"onlineRunningTime\":19514.210000018316,\"pid\":896,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[2475578,10,79,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4822.22566982553,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.955,\"onlineExpGained\":4447.904841347785,\"onlineMoneyMade\":2475578,\"onlineRunningTime\":19514.210000018316,\"pid\":897,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[663072,15,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5303.961507984498,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.971,\"onlineExpGained\":4782.7965086478125,\"onlineMoneyMade\":663072,\"onlineRunningTime\":19514.210000018316,\"pid\":898,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[10427510,6,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4223.39949613365,\"offlineMoneyMade\":0,\"offlineRunningTime\":32809.989,\"onlineExpGained\":4087.7031435039853,\"onlineMoneyMade\":10427510,\"onlineRunningTime\":19514.210000018316,\"pid\":899,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[2799314,2,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3073.789469418299,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.003,\"onlineExpGained\":2999.6382514965326,\"onlineMoneyMade\":2799314,\"onlineRunningTime\":19514.210000018316,\"pid\":900,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[6406541,2,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1911.0634262098993,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.024,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":6406541,\"onlineRunningTime\":19514.210000018316,\"pid\":901,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[3822548,3,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3541.7170946953966,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.038,\"onlineExpGained\":3359.573527966187,\"onlineMoneyMade\":3822548,\"onlineRunningTime\":19514.210000018316,\"pid\":902,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[9299609,4,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2491.886029135683,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.06,\"onlineExpGained\":2532.0687398723726,\"onlineMoneyMade\":9299609,\"onlineRunningTime\":19514.210000018316,\"pid\":903,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[7472983,4,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3490.458673353934,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.073,\"onlineExpGained\":3376.091653163163,\"onlineMoneyMade\":7472983,\"onlineRunningTime\":19514.210000018316,\"pid\":904,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[8467387,7,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3648.4485068603526,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.096999999994,\"onlineExpGained\":3327.070120320518,\"onlineMoneyMade\":8467387,\"onlineRunningTime\":19514.210000018316,\"pid\":905,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[8802968,3,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2343.083935917579,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.112,\"onlineExpGained\":2112.987918342572,\"onlineMoneyMade\":8802968,\"onlineRunningTime\":19514.210000018316,\"pid\":906,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[22649594,5,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2604.6216034160893,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.134,\"onlineExpGained\":2551.517500184946,\"onlineMoneyMade\":22649594,\"onlineRunningTime\":19514.210000018316,\"pid\":907,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[350741499,21,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3833.650503797293,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.149,\"onlineExpGained\":3468.806291365563,\"onlineMoneyMade\":350741499,\"onlineRunningTime\":19514.210000018316,\"pid\":908,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[52257125,9,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3090.239670551255,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.171,\"onlineExpGained\":3064.112224039579,\"onlineMoneyMade\":52257125,\"onlineRunningTime\":19514.210000018316,\"pid\":909,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[2323245,2,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3533.8666129775884,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.185,\"onlineExpGained\":3407.2629539381096,\"onlineMoneyMade\":2323245,\"onlineRunningTime\":19514.210000018316,\"pid\":910,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[6483318,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1546.0572538848492,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.206,\"onlineExpGained\":1614.2471059434672,\"onlineMoneyMade\":6483318,\"onlineRunningTime\":19514.210000018316,\"pid\":911,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[2184711,1,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1367.4382380356342,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.221,\"onlineExpGained\":1397.1136860154386,\"onlineMoneyMade\":2184711,\"onlineRunningTime\":19514.210000018316,\"pid\":912,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[9578951,4,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1955.3300567344727,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.241,\"onlineExpGained\":1900.6500831491483,\"onlineMoneyMade\":9578951,\"onlineRunningTime\":19514.210000018316,\"pid\":913,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1390.2315024911475,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.255,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":914,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.4795467879426,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.277,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":915,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1302.4292581883515,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.291,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":916,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[9997151,3,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1859.1650053066946,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.312,\"onlineExpGained\":1855.891292292819,\"onlineMoneyMade\":9997151,\"onlineRunningTime\":19514.210000018316,\"pid\":917,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[1184603,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1545.7729637518016,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.325999999994,\"onlineExpGained\":1355.5519516488469,\"onlineMoneyMade\":1184603,\"onlineRunningTime\":19514.210000018316,\"pid\":918,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[2455877,1,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1838.215953372563,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.349,\"onlineExpGained\":1725.8776617101473,\"onlineMoneyMade\":2455877,\"onlineRunningTime\":19514.210000018316,\"pid\":919,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1208.282087825087,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.363,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":920,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1419.506854181966,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.384999999995,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":921,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[2458376,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1525.925541660497,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.399,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":2458376,\"onlineRunningTime\":19514.210000018316,\"pid\":922,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[2453309,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1457.4660619243853,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.42,\"onlineExpGained\":1618.509847929784,\"onlineMoneyMade\":2453309,\"onlineRunningTime\":19514.210000018316,\"pid\":923,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1332.519125879356,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.435,\"onlineExpGained\":1238.8593897734152,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":924,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[7891974,2,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1693.3483918963132,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.456,\"onlineExpGained\":1721.348498349686,\"onlineMoneyMade\":7891974,\"onlineRunningTime\":19514.210000018316,\"pid\":925,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[9202055,3,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1659.7194762790605,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.469999999994,\"onlineExpGained\":1791.150898375629,\"onlineMoneyMade\":9202055,\"onlineRunningTime\":19514.210000018316,\"pid\":926,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1505.540155263394,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.496999999996,\"onlineExpGained\":1529.7915303395591,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":927,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[8008373,3,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2037.6000718491605,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.528,\"onlineExpGained\":1878.270687720984,\"onlineMoneyMade\":8008373,\"onlineRunningTime\":19514.210000018316,\"pid\":928,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[1334997,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1621.634727133435,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.566,\"onlineExpGained\":1658.473054051508,\"onlineMoneyMade\":1334997,\"onlineRunningTime\":19514.210000018316,\"pid\":929,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.629704277261,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.596,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":930,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.5153076329732,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.636,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":931,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1142.423422850667,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.665,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":932,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1580.9304842019508,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.705,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":933,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[91833736,2,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1498.2135135529088,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.741,\"onlineExpGained\":1478.6386265037536,\"onlineMoneyMade\":91833736,\"onlineRunningTime\":19514.210000018316,\"pid\":934,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1177.4017906656923,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.784999999996,\"onlineExpGained\":1130.1594691223286,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":935,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":970.5442595767807,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.814,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":936,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":952.5729144088344,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.854999999996,\"onlineExpGained\":960.1826324179331,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":937,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1270.6668659501609,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.884,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":938,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[2251074,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1481.0144649857073,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.926,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":2251074,\"onlineRunningTime\":19514.210000018316,\"pid\":939,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[57603879,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1193.7534232285489,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.954999999994,\"onlineExpGained\":1157.86729203339,\"onlineMoneyMade\":57603879,\"onlineRunningTime\":19514.210000018316,\"pid\":940,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[202478775,4,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1367.7868980009507,\"offlineMoneyMade\":0,\"offlineRunningTime\":32810.993,\"onlineExpGained\":1398.9786356344523,\"onlineMoneyMade\":202478775,\"onlineRunningTime\":19514.210000018316,\"pid\":941,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.1878113295141,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.024,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":942,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.1893770978095,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.064,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":943,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.7441782940159,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.079,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19514.210000018316,\"pid\":944,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[600000000,137390,302258,67446]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13035404.569467679,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.098,\"onlineExpGained\":13636516.942656007,\"onlineMoneyMade\":600000000,\"onlineRunningTime\":19511.81000001831,\"pid\":945,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":2498,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-2\",\"httpPortOpen\":false,\"ip\":\"99.9.4.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8192,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21990485,2850,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":60616.458444651464,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.115999999995,\"onlineExpGained\":58137.9394231325,\"onlineMoneyMade\":21990485,\"onlineRunningTime\":19513.610000018314,\"pid\":946,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[368913,354,3285,270]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":88344.73228466172,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.14,\"onlineExpGained\":87268.98531487214,\"onlineMoneyMade\":368913,\"onlineRunningTime\":19513.610000018314,\"pid\":947,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[72269,153,1604,131]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42741.83016317056,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.162,\"onlineExpGained\":42265.086794335286,\"onlineMoneyMade\":72269,\"onlineRunningTime\":19513.610000018314,\"pid\":948,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[411867,96,985,80]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32318.175161125233,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.182,\"onlineExpGained\":32490.086576960683,\"onlineMoneyMade\":411867,\"onlineRunningTime\":19513.610000018314,\"pid\":949,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5352,60,413,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13055.426525682318,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.202,\"onlineExpGained\":13860.571989884484,\"onlineMoneyMade\":5352,\"onlineRunningTime\":19513.610000018314,\"pid\":950,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[38520,50,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10040.834211087582,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.223,\"onlineExpGained\":10903.29473687687,\"onlineMoneyMade\":38520,\"onlineRunningTime\":19513.610000018314,\"pid\":951,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[373,11,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7092.061008134421,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.242,\"onlineExpGained\":6521.995239065191,\"onlineMoneyMade\":373,\"onlineRunningTime\":19513.610000018314,\"pid\":952,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[32597,75,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22290.205529920095,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.263,\"onlineExpGained\":23010.814084888152,\"onlineMoneyMade\":32597,\"onlineRunningTime\":19513.610000018314,\"pid\":953,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1019,12,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5093.847960199064,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.284,\"onlineExpGained\":4962.098093447279,\"onlineMoneyMade\":1019,\"onlineRunningTime\":19513.610000018314,\"pid\":954,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1166,23,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9983.962943388366,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.306,\"onlineExpGained\":8410.922781752004,\"onlineMoneyMade\":1166,\"onlineRunningTime\":19513.610000018314,\"pid\":955,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[149310,19,101,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5706.381767378894,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.324,\"onlineExpGained\":5001.262035446559,\"onlineMoneyMade\":149310,\"onlineRunningTime\":19513.610000018314,\"pid\":956,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[981,30,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12624.672551403002,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.344,\"onlineExpGained\":11385.51742407888,\"onlineMoneyMade\":981,\"onlineRunningTime\":19513.610000018314,\"pid\":957,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[58064,24,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7445.184523438605,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.363,\"onlineExpGained\":6383.456124509884,\"onlineMoneyMade\":58064,\"onlineRunningTime\":19513.610000018314,\"pid\":958,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[6063336,16,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4822.536545026249,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.380999999994,\"onlineExpGained\":4399.948994001718,\"onlineMoneyMade\":6063336,\"onlineRunningTime\":19513.610000018314,\"pid\":959,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[3730982,16,79,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5172.800060408312,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.4,\"onlineExpGained\":4663.706154405089,\"onlineMoneyMade\":3730982,\"onlineRunningTime\":19513.610000018314,\"pid\":960,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[613420,14,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5219.166678326251,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.416999999994,\"onlineExpGained\":4744.431830770959,\"onlineMoneyMade\":613420,\"onlineRunningTime\":19513.610000018314,\"pid\":961,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[12660398,7,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4254.43875684884,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.435,\"onlineExpGained\":4141.253839707094,\"onlineMoneyMade\":12660398,\"onlineRunningTime\":19513.610000018314,\"pid\":962,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[1230031,1,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3055.410440643025,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.451,\"onlineExpGained\":2934.8978575793412,\"onlineMoneyMade\":1230031,\"onlineRunningTime\":19513.610000018314,\"pid\":963,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1630.9326164466293,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.469,\"onlineExpGained\":1599.5939303655023,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":964,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[7556356,6,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3802.379318872261,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.488999999994,\"onlineExpGained\":3515.4300318409073,\"onlineMoneyMade\":7556356,\"onlineRunningTime\":19513.610000018314,\"pid\":965,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[6755720,3,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2492.0581206289557,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.507,\"onlineExpGained\":2474.5217230570915,\"onlineMoneyMade\":6755720,\"onlineRunningTime\":19513.610000018314,\"pid\":966,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[7706846,4,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3396.0316833282814,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.528,\"onlineExpGained\":3376.091653163163,\"onlineMoneyMade\":7706846,\"onlineRunningTime\":19513.610000018314,\"pid\":967,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[10102074,8,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3587.9115299581845,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.547,\"onlineExpGained\":3371.828911176848,\"onlineMoneyMade\":10102074,\"onlineRunningTime\":19513.610000018314,\"pid\":968,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[8739632,3,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2343.2384222690143,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.566,\"onlineExpGained\":2112.987918342572,\"onlineMoneyMade\":8739632,\"onlineRunningTime\":19513.610000018314,\"pid\":969,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[18744022,4,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2510.5998341209092,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.583,\"onlineExpGained\":2502.7623887164436,\"onlineMoneyMade\":18744022,\"onlineRunningTime\":19513.610000018314,\"pid\":970,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[385322858,22,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4216.882453346344,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.602,\"onlineExpGained\":3518.3606669564997,\"onlineMoneyMade\":385322858,\"onlineRunningTime\":19513.610000018314,\"pid\":971,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[55592968,10,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3266.3099069359046,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.618,\"onlineExpGained\":3106.4732225286057,\"onlineMoneyMade\":55592968,\"onlineRunningTime\":19513.610000018314,\"pid\":972,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[3643269,3,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3534.108446175249,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.636999999995,\"onlineExpGained\":3476.7989325899075,\"onlineMoneyMade\":3643269,\"onlineRunningTime\":19513.610000018314,\"pid\":973,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1512.659622863254,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.652,\"onlineExpGained\":1497.554544068036,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":974,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[2192873,1,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1367.5369764026432,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.67,\"onlineExpGained\":1397.1136860154386,\"onlineMoneyMade\":2192873,\"onlineRunningTime\":19513.610000018314,\"pid\":975,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[12560264,5,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1879.2079361708434,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.689,\"onlineExpGained\":1947.007402250347,\"onlineMoneyMade\":12560264,\"onlineRunningTime\":19513.610000018314,\"pid\":976,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[2450750,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1558.8375865529424,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.705,\"onlineExpGained\":1543.9118631692345,\"onlineMoneyMade\":2450750,\"onlineRunningTime\":19513.610000018314,\"pid\":977,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.574575582025,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.723,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":978,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1302.520600420943,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.742,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":979,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[6587942,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1840.7041807087671,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.759,\"onlineExpGained\":1791.1508983756275,\"onlineMoneyMade\":6587942,\"onlineRunningTime\":19513.610000018314,\"pid\":980,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.590241711285,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.777,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":981,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,0,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1692.8880015674522,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.795,\"onlineExpGained\":1660.3380036705214,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":982,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1208.3683722821816,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.812999999995,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":983,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[1476902,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1591.6629858323909,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.833,\"onlineExpGained\":1576.4152708149022,\"onlineMoneyMade\":1476902,\"onlineRunningTime\":19513.610000018314,\"pid\":984,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3091068,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1382.4116284622703,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.854,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3091068,\"onlineRunningTime\":19513.610000018314,\"pid\":985,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[7348950,3,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1494.7561663822999,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.871,\"onlineExpGained\":1747.9906357641667,\"onlineMoneyMade\":7348950,\"onlineRunningTime\":19513.610000018314,\"pid\":986,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1332.6088358027453,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.894,\"onlineExpGained\":1238.8593897734152,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":987,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1660.8776016868878,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.914,\"onlineExpGained\":1607.8529929639922,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":988,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[5971330,2,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1640.7919782076985,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.932,\"onlineExpGained\":1724.8119762135684,\"onlineMoneyMade\":5971330,\"onlineRunningTime\":19513.610000018314,\"pid\":989,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1505.644189793585,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.952,\"onlineExpGained\":1529.7915303395591,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":990,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[0,0,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1754.451847100703,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.97,\"onlineExpGained\":1698.4362601732303,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":991,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1474.521178178072,\"offlineMoneyMade\":0,\"offlineRunningTime\":32811.988,\"onlineExpGained\":1592.1341318894474,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":992,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.6900954124272,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.007,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":993,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.6030806409044,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.025,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":994,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1142.4962529194872,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.042,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":995,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1581.0280282068231,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.059,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":996,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[91552111,2,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1498.3068856888513,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.077999999994,\"onlineExpGained\":1478.6386265037536,\"onlineMoneyMade\":91552111,\"onlineRunningTime\":19513.610000018314,\"pid\":997,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1177.473069975607,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.095,\"onlineExpGained\":1130.1594691223286,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":998,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":970.6033197331136,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.113,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":999,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":952.6299500009034,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.133,\"onlineExpGained\":960.1826324179331,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":1000,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1270.740972648878,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.151,\"onlineExpGained\":1219.6770508349882,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":1001,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[6878473,3,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1631.3471448815958,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.169,\"onlineExpGained\":1538.5834356863381,\"onlineMoneyMade\":6878473,\"onlineRunningTime\":19513.610000018314,\"pid\":1002,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[57489192,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1193.822264200333,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.185,\"onlineExpGained\":1157.86729203339,\"onlineMoneyMade\":57489192,\"onlineRunningTime\":19513.610000018314,\"pid\":1003,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[44456884,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1327.2406367433618,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.203,\"onlineExpGained\":1257.5088859635528,\"onlineMoneyMade\":44456884,\"onlineRunningTime\":19513.610000018314,\"pid\":1004,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.2372300383017,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.225,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":1005,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.2377874104022,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.241,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":1006,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.7905511091446,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.272,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.610000018314,\"pid\":1007,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[4800000000,149880,302258,67446]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13173673.953856107,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.345,\"onlineExpGained\":14055794.916002678,\"onlineMoneyMade\":4800000000,\"onlineRunningTime\":19511.81000001831,\"pid\":1008,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":2498,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-3\",\"httpPortOpen\":false,\"ip\":\"37.8.6.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8192,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[21326174,2743,1105,73]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":58948.47857224276,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.387,\"onlineExpGained\":57185.483010564756,\"onlineMoneyMade\":21326174,\"onlineRunningTime\":19513.010000018312,\"pid\":1009,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[254216,340,3288,267]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87982.85543242558,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.418,\"onlineExpGained\":87050.51978807342,\"onlineMoneyMade\":254216,\"onlineRunningTime\":19513.010000018312,\"pid\":1010,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[89264,163,1605,130]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":42890.26341018222,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.458,\"onlineExpGained\":42430.26804630512,\"onlineMoneyMade\":89264,\"onlineRunningTime\":19513.010000018312,\"pid\":1011,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[547563,110,989,76]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32931.37219591362,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.492999999995,\"onlineExpGained\":32776.48955416636,\"onlineMoneyMade\":547563,\"onlineRunningTime\":19513.010000018312,\"pid\":1012,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[4694,42,413,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12782.863833462176,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.531,\"onlineExpGained\":13500.903134788965,\"onlineMoneyMade\":4694,\"onlineRunningTime\":19513.010000018312,\"pid\":1013,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[40238,49,324,21]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":9958.518505262171,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.562999999995,\"onlineExpGained\":10883.313133816007,\"onlineMoneyMade\":40238,\"onlineRunningTime\":19513.010000018312,\"pid\":1014,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[680,18,123,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7209.332197600564,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.602,\"onlineExpGained\":6745.789193346836,\"onlineMoneyMade\":680,\"onlineRunningTime\":19513.010000018312,\"pid\":1015,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[32794,66,574,42]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22111.28507531363,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.634,\"onlineExpGained\":22795.012771830836,\"onlineMoneyMade\":32794,\"onlineRunningTime\":19513.010000018312,\"pid\":1016,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1117,16,151,14]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5271.538791382785,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.674,\"onlineExpGained\":5042.024505690725,\"onlineMoneyMade\":1117,\"onlineRunningTime\":19513.010000018312,\"pid\":1017,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1844,31,184,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":10156.901193525155,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.705,\"onlineExpGained\":8634.716736033652,\"onlineMoneyMade\":1844,\"onlineRunningTime\":19513.010000018312,\"pid\":1018,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[140636,21,101,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5732.882795296071,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.746,\"onlineExpGained\":5062.006108751579,\"onlineMoneyMade\":140636,\"onlineRunningTime\":19513.010000018312,\"pid\":1019,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1061,30,239,24]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12509.284906335672,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.777,\"onlineExpGained\":11385.51742407888,\"onlineMoneyMade\":1061,\"onlineRunningTime\":19513.010000018312,\"pid\":1020,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[51558,24,122,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7445.6234321468655,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.818,\"onlineExpGained\":6383.456124509884,\"onlineMoneyMade\":51558,\"onlineRunningTime\":19513.010000018312,\"pid\":1021,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[5690924,15,74,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4892.3224389716415,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.848,\"onlineExpGained\":4363.982108492167,\"onlineMoneyMade\":5690924,\"onlineRunningTime\":19513.010000018312,\"pid\":1022,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4045960,16,79,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5023.798753003531,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.888999999996,\"onlineExpGained\":4663.706154405089,\"onlineMoneyMade\":4045960,\"onlineRunningTime\":19513.010000018312,\"pid\":1023,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[899037,20,76,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5656.232611011149,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.935,\"onlineExpGained\":4974.619898032084,\"onlineMoneyMade\":899037,\"onlineRunningTime\":19513.010000018312,\"pid\":1024,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[14658098,8,49,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4254.712881737672,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.958999999995,\"onlineExpGained\":4194.804535910203,\"onlineMoneyMade\":14658098,\"onlineRunningTime\":19513.010000018312,\"pid\":1025,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[3077887,2,28,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3074.1986696416866,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.977999999996,\"onlineExpGained\":2999.6382514965326,\"onlineMoneyMade\":3077887,\"onlineRunningTime\":19513.010000018312,\"pid\":1026,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,16,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1631.037469015147,\"offlineMoneyMade\":0,\"offlineRunningTime\":32812.998,\"onlineExpGained\":1599.5939303655023,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1027,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[4855247,4,43,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3672.3989216363634,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.018,\"onlineExpGained\":3411.525695924427,\"onlineMoneyMade\":4855247,\"onlineRunningTime\":19513.010000018312,\"pid\":1028,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[14006949,6,28,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2525.2744435336003,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.045,\"onlineExpGained\":2647.1627735029347,\"onlineMoneyMade\":14006949,\"onlineRunningTime\":19513.010000018312,\"pid\":1029,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[5744301,3,38,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3379.725283795359,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.059,\"onlineExpGained\":3318.544636347882,\"onlineMoneyMade\":5744301,\"onlineRunningTime\":19513.010000018312,\"pid\":1030,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[5859702,5,47,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3549.576373643807,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.087,\"onlineExpGained\":3237.5525386078584,\"onlineMoneyMade\":5859702,\"onlineRunningTime\":19513.010000018312,\"pid\":1031,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[6389561,2,22,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2087.88669949583,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.102999999996,\"onlineExpGained\":2051.4445809151184,\"onlineMoneyMade\":6389561,\"onlineRunningTime\":19513.010000018312,\"pid\":1032,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[21883649,5,33,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2713.1737194319535,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.13,\"onlineExpGained\":2551.5175001849457,\"onlineMoneyMade\":21883649,\"onlineRunningTime\":19513.010000018312,\"pid\":1033,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[436994847,25,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4355.581815309316,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.15,\"onlineExpGained\":3667.0237937293095,\"onlineMoneyMade\":436994847,\"onlineRunningTime\":19513.010000018312,\"pid\":1034,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[48317480,9,44,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3348.3692561339403,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.175,\"onlineExpGained\":3064.1122240395794,\"onlineMoneyMade\":48317480,\"onlineRunningTime\":19513.010000018312,\"pid\":1035,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[1122200,1,31,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3514.3671502117345,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.189,\"onlineExpGained\":3337.7269752863117,\"onlineMoneyMade\":1122200,\"onlineRunningTime\":19513.010000018312,\"pid\":1036,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[3334110,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1529.5155223150068,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.214,\"onlineExpGained\":1555.9008250057516,\"onlineMoneyMade\":3334110,\"onlineRunningTime\":19513.010000018312,\"pid\":1037,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,0,7,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1346.5111363966894,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.231,\"onlineExpGained\":1323.5813867514682,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1038,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[9138343,4,26,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2045.161248611565,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.254,\"onlineExpGained\":1900.6500831491483,\"onlineMoneyMade\":9138343,\"onlineRunningTime\":19513.010000018312,\"pid\":1039,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1390.4211574975288,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.269,\"onlineExpGained\":1467.9817715379606,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1040,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1418.6660143174106,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.28999999999,\"onlineExpGained\":1318.7858020168617,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1041,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1302.606935068628,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.305,\"onlineExpGained\":1375.2671333355631,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1042,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[3030633,1,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1822.2308600609344,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.326,\"onlineExpGained\":1726.4105044584362,\"onlineMoneyMade\":3030633,\"onlineRunningTime\":19513.010000018312,\"pid\":1043,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[1183010,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1545.9701187441606,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.341,\"onlineExpGained\":1355.5519516488469,\"onlineMoneyMade\":1183010,\"onlineRunningTime\":19513.010000018312,\"pid\":1044,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,0,17,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1692.9985769206535,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.364,\"onlineExpGained\":1660.3380036705214,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1045,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1208.449628675698,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.378,\"onlineExpGained\":1237.793704276836,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1046,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1419.700503269702,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.399999999994,\"onlineExpGained\":1498.8866509387594,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1047,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[3084925,1,8,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1382.50515741904,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.415,\"onlineExpGained\":1511.4084555235665,\"onlineMoneyMade\":3084925,\"onlineRunningTime\":19513.010000018312,\"pid\":1048,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[2413067,1,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1457.675623491065,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.436,\"onlineExpGained\":1618.509847929784,\"onlineMoneyMade\":2413067,\"onlineRunningTime\":19513.010000018312,\"pid\":1049,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1332.694466703157,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.452,\"onlineExpGained\":1238.8593897734152,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1050,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1660.985645211681,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.473,\"onlineExpGained\":1607.8529929639922,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1051,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[6007960,2,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1640.902397920966,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.487,\"onlineExpGained\":1724.8119762135684,\"onlineMoneyMade\":6007960,\"onlineRunningTime\":19513.010000018312,\"pid\":1052,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,8,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1505.7428249198729,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.508,\"onlineExpGained\":1529.7915303395591,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1053,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[2554450,1,20,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1887.6063906144143,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.522,\"onlineExpGained\":1758.3810693558148,\"onlineMoneyMade\":2554450,\"onlineRunningTime\":19513.010000018312,\"pid\":1054,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,14,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1474.621216834324,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.544,\"onlineExpGained\":1592.1341318894474,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1055,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":907.7492329646609,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.557,\"onlineExpGained\":914.8909988133136,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1056,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1375.6912708362681,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.58,\"onlineExpGained\":1278.8225958951384,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1057,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1142.569934393337,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.594,\"onlineExpGained\":1096.590375980081,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1058,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,8,7]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1581.1290498382464,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.617,\"onlineExpGained\":1536.1856433190349,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1059,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[43589897,1,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1481.1875137351783,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.630999999994,\"onlineExpGained\":1418.693817321169,\"onlineMoneyMade\":43589897,\"onlineRunningTime\":19513.010000018312,\"pid\":1060,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,0,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1177.549220066216,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.652,\"onlineExpGained\":1130.1594691223286,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1061,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":970.6667829927396,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.668999999994,\"onlineExpGained\":978.2992858597808,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1062,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,0,7,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":952.6923122905047,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.691,\"onlineExpGained\":960.1826324179331,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1063,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[2241197,1,7,3]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1464.1769858954904,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.71,\"onlineExpGained\":1306.7968401803446,\"onlineMoneyMade\":2241197,\"onlineRunningTime\":19513.010000018312,\"pid\":1064,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[4803657,2,16,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1382.5855791017248,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.733,\"onlineExpGained\":1478.6386265037536,\"onlineMoneyMade\":4803657,\"onlineRunningTime\":19513.010000018312,\"pid\":1065,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[57374740,1,7,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1193.9010314515726,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.746999999996,\"onlineExpGained\":1157.86729203339,\"onlineMoneyMade\":57374740,\"onlineRunningTime\":19513.010000018312,\"pid\":1066,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[105621441,2,18,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1249.7548608037494,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.768,\"onlineExpGained\":1304.6654691871859,\"onlineMoneyMade\":105621441,\"onlineRunningTime\":19513.010000018312,\"pid\":1067,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.2962345277555,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.782999999996,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1068,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":946.2969747142974,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.804,\"onlineExpGained\":755.0381743264213,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1069,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,6,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":881.8460489991223,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.818,\"onlineExpGained\":725.9982445446359,\"onlineMoneyMade\":0,\"onlineRunningTime\":19513.010000018312,\"pid\":1070,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[9700474110.500372,129896,302258,67446]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":13329250.013369475,\"offlineMoneyMade\":0,\"offlineRunningTime\":32813.844,\"onlineExpGained\":14654763.449355068,\"onlineMoneyMade\":9700474110.500372,\"onlineRunningTime\":19511.81000001831,\"pid\":1071,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":2498,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":36.569,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1273,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":9.0653,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":65.0031,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.6004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1784,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0123,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":62.6523,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.5128,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.3229,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":15.7545,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.2917,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.8828,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0623,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":14.0575,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0899,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":3131750.480399958,\"favor\":207.6598,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0502,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":169.1097,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1009239.0713061327}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":185.2607,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":520356.3655710128}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":178.9601,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":509147.1856081907}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":164.2721,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":151.4486,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":20319.78254581143}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":120.9729,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":11095.902640354967}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":170.9611,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":485764.1001969959}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":175.8983,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":503489.5930108815}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":176.4818,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":502079.55864668114}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":175.9085,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":503645.5949562796}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"port1\":\"run BruteSSH.exe\",\"port2\":\"run FTPCrack.exe\",\"port3\":\"run relaySMTP.exe\",\"nuke\":\"run NUKE.exe\",\"update\":\"run /scripts/update_hack.script\",\"hacknet\":\"run /scripts/auto-hacknet-buy.js\",\"bp\":\"run /bitpacks/bp.js\",\"themes\":\"run /bitpacks/theme-browser/theme-browser.js\",\"sc\":\"scan-analyze 10\",\"port4\":\"run HTTPWorm.exe\",\"port5\":\"run SQLInject.exe\"}","GlobalAliasesSave":"{\"root\":\"run /scripts/get_root.script\",\"grind\":\"run /scripts/grind_on_all_servers.script\",\"more\":\"run ServerProfiler.exe\",\"boot\":\"run /scripts/boot.js\",\"con\":\"connect\",\"l\":\"ls\",\"prof\":\"run ServerProfiler.exe\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":20976.899954438322,\"lastPrice\":20947.90989321657,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":18.32390813513066,\"otlkMagForecast\":29.574502610345228,\"cap\":184597342,\"spreadPerc\":0.3,\"shareTxForMovement\":63643,\"shareTxUntilMovement\":63643,\"totalShares\":107000000,\"maxShares\":21400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":24346.33950775839,\"lastPrice\":24316.725567154375,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":19.135781575766522,\"otlkMagForecast\":31.22350865841682,\"cap\":78705892,\"spreadPerc\":0.5,\"shareTxForMovement\":54529,\"shareTxUntilMovement\":54529,\"totalShares\":88400000,\"maxShares\":17700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20115.327913195943,\"lastPrice\":20155.971161251757,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":12.159212360671454,\"otlkMagForecast\":62.6078416184668,\"cap\":611114879,\"spreadPerc\":0.4,\"shareTxForMovement\":30526,\"shareTxUntilMovement\":30526,\"totalShares\":65400000,\"maxShares\":13100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":25449.040592678983,\"lastPrice\":25401.93418133288,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":11.889496785560837,\"otlkMagForecast\":37.74916409475737,\"cap\":161523321,\"spreadPerc\":0.4,\"shareTxForMovement\":65230,\"shareTxUntilMovement\":65230,\"totalShares\":66400000,\"maxShares\":13300000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":48465.97817508786,\"lastPrice\":48378.94032816954,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":15.399322755696039,\"otlkMagForecast\":65.35915631222997,\"cap\":588295221,\"spreadPerc\":0.2,\"shareTxForMovement\":72255,\"shareTxUntilMovement\":72255,\"totalShares\":54800000,\"maxShares\":11000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":500196.01705288916,\"lastPrice\":498746.5523741476,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":true,\"otlkMag\":17.814462318099753,\"otlkMagForecast\":69.4834016632323,\"cap\":1285468096,\"spreadPerc\":0.5,\"shareTxForMovement\":82353,\"shareTxUntilMovement\":82353,\"totalShares\":29100000,\"maxShares\":5800000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":6196.1388319384705,\"lastPrice\":6209.001197085546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":10.647550311141531,\"otlkMagForecast\":38.882283743821375,\"cap\":42324869,\"spreadPerc\":0.1,\"shareTxForMovement\":56397,\"shareTxUntilMovement\":56397,\"totalShares\":83800000,\"maxShares\":16800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":62643.23748541627,\"lastPrice\":62861.703140161924,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":false,\"otlkMag\":11.452996280475567,\"otlkMagForecast\":38.24047468361262,\"cap\":350660287,\"spreadPerc\":0.8,\"shareTxForMovement\":64511,\"shareTxUntilMovement\":64511,\"totalShares\":60500000,\"maxShares\":12100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":9949.048502115444,\"lastPrice\":9972.179760783409,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":8.03826371193708,\"otlkMagForecast\":39.329477943780184,\"cap\":144076809,\"spreadPerc\":0.6,\"shareTxForMovement\":93726,\"shareTxUntilMovement\":93726,\"totalShares\":59200000,\"maxShares\":11800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":12811.434883412863,\"lastPrice\":12832.710759631651,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":14.04790911207879,\"otlkMagForecast\":35.62999294066034,\"cap\":345236546,\"spreadPerc\":0.2,\"shareTxForMovement\":74776,\"shareTxUntilMovement\":74776,\"totalShares\":57000000,\"maxShares\":11400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":5133.6368146678315,\"lastPrice\":5142.730575872259,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.37793141005324,\"otlkMagForecast\":58.898445209777,\"cap\":103203245,\"spreadPerc\":0.6,\"shareTxForMovement\":61218,\"shareTxUntilMovement\":61218,\"totalShares\":79700000,\"maxShares\":15900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":18494.741792963956,\"lastPrice\":18457.448309439595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":6.067278222050995,\"otlkMagForecast\":57.727266253659785,\"cap\":197528223,\"spreadPerc\":0.8,\"shareTxForMovement\":37570,\"shareTxUntilMovement\":37570,\"totalShares\":97500000,\"maxShares\":19500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15519.095623380916,\"lastPrice\":15492.937773525935,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":7.983499604167949,\"otlkMagForecast\":56.98339976642821,\"cap\":523844419,\"spreadPerc\":0.6,\"shareTxForMovement\":64122,\"shareTxUntilMovement\":64122,\"totalShares\":36100000,\"maxShares\":7200000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":27341.224648284573,\"lastPrice\":27385.116548972874,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":10.938861562170892,\"otlkMagForecast\":40.527724565308795,\"cap\":96262883,\"spreadPerc\":0.2,\"shareTxForMovement\":73655,\"shareTxUntilMovement\":73655,\"totalShares\":34300000,\"maxShares\":6900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17398.130612651777,\"lastPrice\":17368.80559917371,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":false,\"otlkMag\":6.523970634343217,\"otlkMagForecast\":43.41194896457448,\"cap\":148438456,\"spreadPerc\":0.9,\"shareTxForMovement\":78609,\"shareTxUntilMovement\":78609,\"totalShares\":68700000,\"maxShares\":13700000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":19567.617438024714,\"lastPrice\":19530.318467354584,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":5.154524465534435,\"otlkMagForecast\":46.04117076750286,\"cap\":122814168,\"spreadPerc\":0.4,\"shareTxForMovement\":59983,\"shareTxUntilMovement\":59983,\"totalShares\":62900000,\"maxShares\":12600000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":33776.18744623043,\"lastPrice\":33710.873417057424,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":6.665383013797092,\"otlkMagForecast\":42.93600979677216,\"cap\":69001321,\"spreadPerc\":0.9,\"shareTxForMovement\":71127,\"shareTxUntilMovement\":71127,\"totalShares\":41300000,\"maxShares\":8300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":11000.053204143416,\"lastPrice\":11017.103080887733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":8.42035455763515,\"otlkMagForecast\":58.6911832039057,\"cap\":99295681,\"spreadPerc\":0.5,\"shareTxForMovement\":95494,\"shareTxUntilMovement\":95494,\"totalShares\":56300000,\"maxShares\":11300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":29706.498017550246,\"lastPrice\":29644.959001432493,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.396485274836573,\"otlkMagForecast\":43.69715853684203,\"cap\":295513369,\"spreadPerc\":0.4,\"shareTxForMovement\":86556,\"shareTxUntilMovement\":86556,\"totalShares\":26100000,\"maxShares\":5200000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":13475.758187356087,\"lastPrice\":13383.88846147928,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":true,\"otlkMag\":23.613755615235167,\"otlkMagForecast\":78.12919145387929,\"cap\":142781521,\"spreadPerc\":0.8,\"shareTxForMovement\":36649,\"shareTxUntilMovement\":36649,\"totalShares\":55100000,\"maxShares\":11000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7985.764748981082,\"lastPrice\":7956.914178803354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":false,\"otlkMag\":6.042792120469998,\"otlkMagForecast\":44.69832749025673,\"cap\":54476391,\"spreadPerc\":0.6,\"shareTxForMovement\":72409,\"shareTxUntilMovement\":72409,\"totalShares\":59600000,\"maxShares\":11900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6036.045939451015,\"lastPrice\":6044.733429320056,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":5.349581160511742,\"otlkMagForecast\":46.03626184064369,\"cap\":47201487,\"spreadPerc\":0.3,\"shareTxForMovement\":82967,\"shareTxUntilMovement\":82967,\"totalShares\":40100000,\"maxShares\":8000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":12690.59051824433,\"lastPrice\":12755.923609341964,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.86,\"b\":false,\"otlkMag\":6.190136975138267,\"otlkMagForecast\":41.92761644537607,\"cap\":131737872,\"spreadPerc\":1.4,\"shareTxForMovement\":65479,\"shareTxUntilMovement\":65479,\"totalShares\":36900000,\"maxShares\":7400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":18460.56923040621,\"lastPrice\":18374.113507336897,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.7,\"b\":false,\"otlkMag\":6.04416049866698,\"otlkMagForecast\":42.74295020778176,\"cap\":88334291,\"spreadPerc\":1.1,\"shareTxForMovement\":82754,\"shareTxUntilMovement\":82754,\"totalShares\":28400000,\"maxShares\":5700000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1431.759739401894,\"lastPrice\":1435.0489120449595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":2.7782347146812105,\"otlkMagForecast\":46.83047228248878,\"cap\":34297649,\"spreadPerc\":0.5,\"shareTxForMovement\":87853,\"shareTxUntilMovement\":87853,\"totalShares\":106100000,\"maxShares\":21200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":753.5376832685595,\"lastPrice\":758.2095605344208,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.24,\"b\":true,\"otlkMag\":7.343130093184901,\"otlkMagForecast\":55.06249534329683,\"cap\":100558998,\"spreadPerc\":1.8,\"shareTxForMovement\":39132,\"shareTxUntilMovement\":39132,\"totalShares\":12800000,\"maxShares\":2600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4161.485193884751,\"lastPrice\":4172.54272112377,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.810792519469097,\"otlkMagForecast\":55.944063028643555,\"cap\":47015723,\"spreadPerc\":0.5,\"shareTxForMovement\":46268,\"shareTxUntilMovement\":46268,\"totalShares\":17000000,\"maxShares\":3400000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3339.66433479644,\"lastPrice\":3346.966780575071,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":2.0763597987402913,\"otlkMagForecast\":47.8111831884044,\"cap\":30000699,\"spreadPerc\":0.9,\"shareTxForMovement\":152697,\"shareTxUntilMovement\":152697,\"totalShares\":13400000,\"maxShares\":2700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3675.385543719763,\"lastPrice\":3648.924643392878,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.62,\"b\":true,\"otlkMag\":10.818174406176865,\"otlkMagForecast\":64.44002024824816,\"cap\":38397648,\"spreadPerc\":1.3,\"shareTxForMovement\":61594,\"shareTxUntilMovement\":61594,\"totalShares\":14100000,\"maxShares\":2800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":863.0075501171502,\"lastPrice\":868.1670401450316,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.16,\"b\":true,\"otlkMag\":6.987598171295333,\"otlkMagForecast\":57.85841472224384,\"cap\":16288426,\"spreadPerc\":1.2,\"shareTxForMovement\":46629,\"shareTxUntilMovement\":46629,\"totalShares\":49500000,\"maxShares\":9900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":48.72524735345635,\"lastPrice\":48.961257422650775,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.75,\"b\":false,\"otlkMag\":16.6250524016847,\"otlkMagForecast\":34.21041321958051,\"cap\":641011,\"spreadPerc\":1.2,\"shareTxForMovement\":25221,\"shareTxUntilMovement\":25221,\"totalShares\":378800000,\"maxShares\":75800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":48906.20191771757,\"lastPrice\":48808.93385886835,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":8.722127698373534,\"otlkMagForecast\":58.169493043260964,\"cap\":26811242,\"spreadPerc\":0.8,\"shareTxForMovement\":134076,\"shareTxUntilMovement\":134076,\"totalShares\":18000000,\"maxShares\":3600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":24630.3715156312,\"lastPrice\":24594.97274982709,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":7.53242387983128,\"otlkMagForecast\":41.211997345503214,\"cap\":464843333,\"spreadPerc\":0.8,\"shareTxForMovement\":138725,\"shareTxUntilMovement\":138725,\"totalShares\":18900000,\"maxShares\":3800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":191677,\"lastUpdate\":1647068532066,\"ticksUntilCycle\":11}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":20,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":250,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"on\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-107,\"y\":28,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1647068535923","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}