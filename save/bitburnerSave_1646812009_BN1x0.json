{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":651,\"hp\":26,\"max_hp\":26,\"strength\":168,\"defense\":168,\"dexterity\":194,\"agility\":185,\"charisma\":258,\"intelligence\":0,\"hacking_chance_mult\":1.226055773944155,\"hacking_speed_mult\":1.1375377316258388,\"hacking_money_mult\":1.061520150601,\"hacking_grow_mult\":1.061520150601,\"hacking_exp\":11485070182.55604,\"strength_exp\":72559.87805239223,\"defense_exp\":72540.00427213278,\"dexterity_exp\":72942.85116928586,\"agility_exp\":72540.00427213278,\"charisma_exp\":524025.7845727212,\"intelligence_exp\":0,\"hacking_mult\":1.203763850781534,\"strength_mult\":1.061520150601,\"defense_mult\":1.061520150601,\"dexterity_mult\":1.226055773944155,\"agility_mult\":1.1703259660376024,\"charisma_mult\":1.1676721656611,\"hacking_exp_mult\":1.9739497960500894,\"strength_exp_mult\":1.3428229905102649,\"defense_exp_mult\":1.3428229905102649,\"dexterity_exp_mult\":1.3428229905102649,\"agility_exp_mult\":1.3428229905102649,\"charisma_exp_mult\":1.3428229905102649,\"company_rep_mult\":1.7725263474735498,\"faction_rep_mult\":1.3428229905102649,\"money\":891192738.6801524,\"city\":\"Volhaven\",\"location\":\"Omega Software\",\"jobs\":{\"FoodNStuff\":\"Employee\",\"Bachman & Associates\":\"IT Intern\",\"Storm Technologies\":\"Software Consultant\",\"Omega Software\":\"Lead Software Developer\",\"NWO\":\"IT Intern\"},\"companyName\":\"Omega Software\",\"currentServer\":\"home\",\"purchasedServers\":[\"grinding-server-17\",\"grinding-server-21\",\"grinding-server-22\",\"grinding-server-23\",\"grinding-server-18\",\"grinding-server-19\",\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\",\"grinding-server-4\",\"grinding-server-5\",\"grinding-server-6\",\"grinding-server-7\",\"grinding-server-8\",\"grinding-server-9\",\"grinding-server-10\",\"grinding-server-11\",\"grinding-server-12\",\"grinding-server-13\",\"grinding-server-14\",\"grinding-server-15\",\"grinding-server-20\",\"grinding-server-16\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520708.8000052877,\"ram\":64,\"totalMoneyGenerated\":10396064433.480274,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520677.80000528606,\"ram\":64,\"totalMoneyGenerated\":10390361259.731785,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520646.80000528455,\"ram\":64,\"totalMoneyGenerated\":10383589316.323164,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520615.80000528286,\"ram\":64,\"totalMoneyGenerated\":10381961815.626133,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520554.8000052799,\"ram\":64,\"totalMoneyGenerated\":10380434383.416351,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520277.6000052666,\"ram\":64,\"totalMoneyGenerated\":10377689713.141098,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":520060.0000052563,\"ram\":64,\"totalMoneyGenerated\":10376148116.201056,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":519466.40000522794,\"ram\":64,\"totalMoneyGenerated\":10374577930.550997,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":518753.00000519486,\"ram\":64,\"totalMoneyGenerated\":10368580804.115427,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":517158.6000051179,\"ram\":64,\"totalMoneyGenerated\":10364697095.206253,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":514460.8000049909,\"ram\":64,\"totalMoneyGenerated\":10356955574.459183,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":513713.2000049545,\"ram\":64,\"totalMoneyGenerated\":10355331486.711742,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":463720.00000400405,\"ram\":64,\"totalMoneyGenerated\":10322866194.731895,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":463718.8000040041,\"ram\":64,\"totalMoneyGenerated\":10321247323.06785,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":463717.6000040041,\"ram\":64,\"totalMoneyGenerated\":10319737852.361975,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":463716.60000400414,\"ram\":64,\"totalMoneyGenerated\":10318604996.795412,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":463715.60000400414,\"ram\":64,\"totalMoneyGenerated\":10317249813.228722,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":432155.80000285304,\"ram\":64,\"totalMoneyGenerated\":10246982450.980913,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":417468.80000193947,\"ram\":64,\"totalMoneyGenerated\":10100361241.390741,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":413408.40000169864,\"ram\":64,\"totalMoneyGenerated\":10016291150.76198,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":413407.40000169864,\"ram\":64,\"totalMoneyGenerated\":10015248035.164215,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":413406.20000169857,\"ram\":64,\"totalMoneyGenerated\":10014130483.077015,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":413119.0000016813,\"ram\":64,\"totalMoneyGenerated\":10013068989.730381,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":382483.4000010287,\"ram\":64,\"totalMoneyGenerated\":9367114113.356691,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":377784.8000009901,\"ram\":64,\"totalMoneyGenerated\":9235869990.614286,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":315215.20000113157,\"ram\":64,\"totalMoneyGenerated\":7557860920.441883,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":225972.19999994192,\"ram\":64,\"totalMoneyGenerated\":4931091651.141742,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":24553.918197312316,\"onlineTimeSeconds\":204675.20000003415,\"ram\":64,\"totalMoneyGenerated\":4930981575.042938,\"name\":\"hacknet-node-27\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"CyberSec\",\"Aevum\",\"Tian Di Hui\",\"Slum Snakes\",\"Tetrads\",\"NiteSec\",\"The Black Hand\",\"BitRunners\",\"Sector-12\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"sourceFiles\":[],\"numPeopleKilled\":27,\"karma\":-100.2,\"crime_money_mult\":1.1676721656611,\"crime_success_mult\":1.061520150601,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.1676721656611,\"hacknet_node_money_mult\":2.6772533373298413,\"hacknet_node_purchase_cost_mult\":0.720232314291765,\"hacknet_node_ram_cost_mult\":0.9414801494009999,\"hacknet_node_core_cost_mult\":0.9414801494009999,\"hacknet_node_level_cost_mult\":0.8002581269908499,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1646812009250,\"lastSave\":1646811988452,\"totalPlaytime\":879995000,\"playtimeSinceLastAug\":521042600,\"playtimeSinceLastBitnode\":879995000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":10079998999,\"class\":-30080349.6,\"codingcontract\":0,\"corporation\":0,\"crime\":6673246.426753186,\"gang\":0,\"hacking\":32357810364.941902,\"hacknet\":272535098703.92755,\"hacknet_expenses\":-36297161131.83956,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-43781.37157079228,\"total\":891191738.6801524,\"work\":314694165.89083403,\"servers\":-88347309240.42392,\"other\":-309200000,\"augmentations\":-189419289231.11047}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":30380294431,\"class\":-127316037.5999999,\"codingcontract\":75000000,\"corporation\":0,\"crime\":9892246.426753186,\"gang\":0,\"hacking\":34907192667.54719,\"hacknet\":331313393544.5411,\"hacknet_expenses\":-57782080504.910736,\"hospitalization\":-4950000,\"infiltration\":0,\"sleeves\":0,\"stock\":-1065814589.8121406,\"total\":1527947135.6365833,\"work\":345354209.03135496,\"servers\":-99908847257.01895,\"other\":-632899490.86132,\"augmentations\":-235981272085.31485}},\"scriptProdSinceLastAug\":27740971475,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645937098713},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645945619517},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645945799518},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645956415952},{\"ID\":\"TOR\",\"unlockedOn\":1645957015948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645964175169},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645964535170},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645964655180},{\"ID\":\"NITESEC\",\"unlockedOn\":1646008184016},{\"ID\":\"WORKOUT\",\"unlockedOn\":1646010884426},{\"ID\":\"TRAVEL\",\"unlockedOn\":1646037906914},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1646039647920},{\"ID\":\"NS2\",\"unlockedOn\":1646103650911},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1646107006372},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1646111040952},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1646131379336},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1646133043592},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1646141161803},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1646142062592},{\"ID\":\"4S\",\"unlockedOn\":1646178149739},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1646217763426},{\"ID\":\"FROZE\",\"unlockedOn\":1646220263671},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1646297619771},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1646440491301}],\"terminalCommandHistory\":[],\"identifier\":\"b82959b7efaf8\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"10.7.3.1\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":2043.05,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/auto-hacknet-buy.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103854.467,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8978.409999999096,\"pid\":1,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///0c132a24-a36e-4faf-8f5c-334cba6be000\",\"moduleSequenceNumber\":2727}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2453313,712,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5873.230210458025,\"offlineMoneyMade\":0,\"offlineRunningTime\":103854.88299999999,\"onlineExpGained\":6269.746472571507,\"onlineMoneyMade\":2453313,\"onlineRunningTime\":8963.009999999082,\"pid\":2,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[46046,76,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8139.836322662653,\"offlineMoneyMade\":0,\"offlineRunningTime\":103855.41500000001,\"onlineExpGained\":7121.997601989572,\"onlineMoneyMade\":46046,\"onlineRunningTime\":8963.009999999082,\"pid\":3,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2408514,83,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4338.552623381986,\"offlineMoneyMade\":0,\"offlineRunningTime\":103855.78800000002,\"onlineExpGained\":4791.804081433182,\"onlineMoneyMade\":2408514,\"onlineRunningTime\":8963.009999999082,\"pid\":4,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[899657,37,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3340.6881752258955,\"offlineMoneyMade\":0,\"offlineRunningTime\":103855.955,\"onlineExpGained\":2665.1274891011108,\"onlineMoneyMade\":899657,\"onlineRunningTime\":8963.009999999082,\"pid\":5,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1381175,39,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954.8123694591688,\"offlineMoneyMade\":0,\"offlineRunningTime\":103856.12799999998,\"onlineExpGained\":2475.0031037855015,\"onlineMoneyMade\":1381175,\"onlineRunningTime\":8963.009999999082,\"pid\":6,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1018385,16,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1074.773451610793,\"offlineMoneyMade\":0,\"offlineRunningTime\":103856.247,\"onlineExpGained\":978.1775203186731,\"onlineMoneyMade\":1018385,\"onlineRunningTime\":8963.009999999082,\"pid\":7,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[130,1,12,5]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.2745314786428,\"offlineMoneyMade\":0,\"offlineRunningTime\":103856.418,\"onlineExpGained\":425.79899482348117,\"onlineMoneyMade\":130,\"onlineRunningTime\":8963.009999999082,\"pid\":8,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[50702,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2026.8650434606075,\"offlineMoneyMade\":0,\"offlineRunningTime\":103856.75000000001,\"onlineExpGained\":1538.036508160906,\"onlineMoneyMade\":50702,\"onlineRunningTime\":8963.009999999082,\"pid\":9,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.1651413146543,\"offlineMoneyMade\":0,\"offlineRunningTime\":103856.85100000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":10,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3354,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.3946458075029,\"offlineMoneyMade\":0,\"offlineRunningTime\":103856.941,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3354,\"onlineRunningTime\":8963.009999999082,\"pid\":11,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[69255488,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.060380981944,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.06999999999,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":69255488,\"onlineRunningTime\":8963.009999999082,\"pid\":12,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.61889753938976,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.166,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":13,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[548,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1253.0585383171763,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.34499999999,\"onlineExpGained\":652.4953416233725,\"onlineMoneyMade\":548,\"onlineRunningTime\":8963.009999999082,\"pid\":14,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.3037330186353,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.50999999998,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":15,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.12326403340973,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.62999999999,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":16,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.27318600570192,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.728,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":17,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56816,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.3946479215126,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.836,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56816,\"onlineRunningTime\":8963.009999999082,\"pid\":18,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[458235,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4420798842684,\"offlineMoneyMade\":0,\"offlineRunningTime\":103857.936,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":458235,\"onlineRunningTime\":8963.009999999082,\"pid\":19,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[663051,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.44236947620954,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.041,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":663051,\"onlineRunningTime\":8963.009999999082,\"pid\":20,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[303131,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.8346534509699,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.12999999999,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":303131,\"onlineRunningTime\":8963.009999999082,\"pid\":21,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.23000000003,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":22,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[277782,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.17210447748624,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.33099999999,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":277782,\"onlineRunningTime\":8963.009999999082,\"pid\":23,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[323272,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.63042271924337,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.50099999999,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":323272,\"onlineRunningTime\":8963.009999999082,\"pid\":24,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.64882479343544,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.589,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":25,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.48040850335954,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.68999999999,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":26,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.05287887445996,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.79599999999,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.009999999082,\"pid\":27,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[5846841460,610,610,610]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":48242.211639845176,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.90500000001,\"onlineExpGained\":99435.29067354358,\"onlineMoneyMade\":5846841460,\"onlineRunningTime\":8962.60999999908,\"pid\":28,\"ramUsage\":3.2,\"server\":\"home\",\"threads\":610,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2460.2948982640746,\"offlineMoneyMade\":0,\"offlineRunningTime\":103858.98,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":29,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/victims.txt').split('\\\\r\\\\n');\\r\\nlist_of_servers.pop()\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\nwhile (true) {\\r\\n\\tfor (i = 0; i < list_of_servers.length; i++) {\\r\\n\\t\\tserver = list_of_servers[i];\\r\\n\\t\\tprint('Working on ' + server + '...');\\r\\n\\r\\n\\t\\tif (getServerMoneyAvailable(server) < 0.7 * getServerMaxMoney(server)) {\\r\\n\\t\\t\\tgrow(server);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thack(server);\\r\\n\\r\\n\\t\\tif (getServerSecurityLevel(server) >= 1.25 * getServerMinSecurityLevel(server)) {\\r\\n\\t\\t\\tweaken(server)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/hack_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/victims.txt').split('\\\\r\\\\n \\\\r\\\\n')[0].split('\\\\r\\\\n');\\r\\n\\r\\n// Check if hack.script exists\\r\\nif (!fileExists('/scripts/hack.script')) {\\r\\n    // If not, copy it over\\r\\n    print('hack.script is not on this server. Copying over from home...')\\r\\n    scp('/scripts/hack.script', 'home', getHostname());\\r\\n    print('Successfully copied hack.script.')\\r\\n}\\r\\n\\r\\n// Start hack.script for all given servers\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    print('Starting hack for server', servers[i]);\\r\\n    run('/scripts/hack.script', 1, servers[i]);\\r\\n}\",\"filename\":\"/scripts/auto_start_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.35,\"server\":\"home\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = args;\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    exec('/scripts/auto_start_hack.script', servers_to_autorun[i], 1, \\r\\n    'neo-net', 'zer0', 'silver-helix', 'iron-gym', 'CSEC', 'max-hardware', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'n00dles', 'foodnstuff', 'sigma-cosmetics', 'joesguns');\\r\\n}\",\"filename\":\"/scripts/remote_auto_run.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = read('/victims.txt').split('\\\\r\\\\n').concat(read('/grind_servers.txt').split('\\\\r\\\\n'));\\r\\nprint(servers_to_autorun)\\r\\n\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    s = servers_to_autorun[i];\\r\\n    if (s != ' ' && s) {\\r\\n        tprint(s);\\r\\n        exec('/scripts/auto_start_hack.script', servers_to_autorun[i]);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done');\",\"filename\":\"/scripts/remote_auto_hack_from_home.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var num_ports = args[0];\\r\\nvar port_opener = [brutessh, ftpcrack, relaysmtp, httpworm, sqlinject].slice(0, num_ports);\\r\\nvar servers = args.slice(1);\\r\\nvar port_opened, server;\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    port_opened = true;\\r\\n    server = servers[i];\\r\\n    if (!hasRootAccess(server)) {\\r\\n        tprint('Attempting to take over server ', server, '...');\\r\\n        // Currently only supports up to 3 ports requirement\\r\\n        for (var j = 0; j < getServerNumPortsRequired(server); j++) {\\r\\n            try {\\r\\n                port_opener[j](server);\\r\\n            } catch (e) {\\r\\n                tprint('Error: More than ', num_ports, ' open ports needed for ', server, '.');\\r\\n                port_opened = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (port_opened) {\\r\\n            nuke(server);\\r\\n            // installBackdoor(server);\\r\\n            tprint('Server ', server, ' rooted. Install backdoor manually please.');\\r\\n        }\\r\\n    } else {\\r\\n        tprint('Already rooted ', server, ', skipping progress...')\\r\\n    }\\r\\n    \\r\\n    tprint('Transporting hack files to ', server);\\r\\n    scp('/scripts/hack.script', server);\\r\\n    scp('/scripts/weaken-exp-grind.script', server);\\r\\n    scp('/scripts/simple_hack.script', server);\\r\\n    scp('/scripts/weaken_and_grow_only.script', server);\\r\\n    tprint('Done.')\\r\\n}\",\"filename\":\"/scripts/get_root.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/victims.txt').split('\\\\r\\\\n'));\\r\\n\\r\\nfor (var i = 0; i < list_of_servers.length; i++) {\\r\\n    s = list_of_servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        tprint(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        run('/scripts/transport_files.js', 1, s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/update_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read(\\\"victims.txt\\\").split('\\\\r\\\\n \\\\r\\\\n')[0].split(\\\"\\\\r\\\\n\\\");\\r\\nfor (var i; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    console.log(getServerRam(s), '/', getServerMaxRam(s))\\r\\n}\",\"filename\":\"/scripts/mem_for_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hostName = getHostname();\\r\\nscanArray = [hostName];\\r\\ncurrentScanLength = 0;\\r\\nservers = [];\\r\\nwhile (currentScanLength < scanArray.length) {\\r\\n    previousScanLength = currentScanLength;\\r\\n    currentScanLength = scanArray.length;\\r\\n    for (i = previousScanLength; i < currentScanLength; i++) {\\r\\n        currentHost = scanArray[i];\\r\\n        server = [currentHost, getServerRequiredHackingLevel(currentHost), getServerMaxMoney(currentHost), getServerGrowth(currentHost), getServerSecurityLevel(currentHost)];\\r\\n        servers.push(server);\\r\\n        // uncomment this if you'd like to see a printout of the array as it is being made\\r\\n        tprint(server[0]);\\r\\n        tprint('----------------');\\r\\n        tprint('Difficulty: ' + server[1] + ' | Potential: $' + server[2]);\\r\\n        tprint('Growth Rate: ' + server[3] + ' | Security: ' + server[4]);\\r\\n        tprint('----------------');\\r\\n        newScan = scan(currentHost);\\r\\n        for (j = 0; j < newScan.length; j++) {\\r\\n            if (scanArray.indexOf(newScan[j]) == -1 && !newScan[j].includes('grinding-server')) {\\r\\n                scanArray.push(newScan[j]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nwrite('/the_network.txt', JSON.stringify(servers), 'w');\\r\\ntprint('Done. Saved to file /the_network.txt')\",\"filename\":\"/scripts/scrape-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Load server list from file\\r\\nvar serverList = JSON.parse(read('/the_network.txt'));\\r\\ntprint('Sorting...');\\r\\n\\r\\n// Slow version\\r\\nservers.sort(function(a, b) {\\r\\n    print(a, b);\\r\\n    var keyA = a[1],  // Required Hacking Level\\r\\n    keyB = b[1];\\r\\n    // Compare the 2 dates\\r\\n    if (keyA < keyB) return -1;\\r\\n    if (keyA > keyB) return 1;\\r\\n    return 0;\\r\\n});\\r\\n\\r\\ntprint(servers.join('\\\\n'));\\r\\n\\r\\n// Possibly slower version\\r\\n// sortedServerList = [];\\r\\n// while (serverList.length > 0) {\\r\\n//     print(serverList.length);\\r\\n//     lowest = 99999;\\r\\n//     index = null;\\r\\n    \\r\\n//     for (i = 0; i < serverList.length; i++) {\\r\\n//         if (serverList[i][1] < lowest) {\\r\\n//             lowest = serverList[i][1];\\r\\n//             index = i;\\r\\n//         }\\r\\n//     }\\r\\n//     sortedServerList.push(serverList[index]);\\r\\n//     serverList.splice(index, 1);\\r\\n// }\\r\\n// tprint(sortedServerList.join('\\\\n'));\",\"filename\":\"/scripts/sort_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n');\\r\\nservers.pop()\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n    print(ram_for_one, ' ', available_ram);\\r\\n    var threads = Math.floor(available_ram / ram_for_one);\\r\\n    if (threads > 0) {\\r\\n        exec('/scripts/weaken-exp-grind.script', s, threads, 'n00dles'); // Fastest\\r\\n        tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n    } else {\\r\\n        tprint('Skipping ', s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_my_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/all_servers_names.txt').split('\\\\r\\\\n')).concat(['home']);\\r\\nif (args) {\\r\\n    var server_to_grind = args[0];\\r\\n} else {\\r\\n    var server_to_grind = 'noodles';\\r\\n}\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        print(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n        print(ram_for_one, ' ', available_ram);\\r\\n        var threads = Math.floor(available_ram / ram_for_one);\\r\\n        if (threads > 0) {\\r\\n            exec('/scripts/weaken-exp-grind.script', s, threads, server_to_grind);\\r\\n            tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n        } else {\\r\\n            print('Skipping ', s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n// Copied from https://www.reddit.com/r/Bitburner/comments/rj8n5o/hacknet_autopurchase_script_with_protected_cash/\\n// Because I got lazy\\n\\nexport async function main(ns) {\\n    // How many levels to buy at once\\n    var numLevels = 10;\\n    // How much money to keep around for buying upgrades, etc.\\n    // Start with current player amount.  Will grow over time with each purchase.\\n    var minMoney = 0.9 * ns.getPlayer().money;\\n\\n    // Setup\\n    var cost, purchased, usableMoney;\\n    var net = ns.hacknet;\\n\\n    ns.tprint('auto-hacknet-buy.js running!')\\n\\n    while (true) {\\n        // Check our cash situation\\n        usableMoney = Math.max(0, ns.getPlayer().money - minMoney);\\n        // Track if anything changes\\n        purchased = false;\\n\\n        // Can we buy a node?\\n        var nodeCost = net.getPurchaseNodeCost();\\n        if (nodeCost < usableMoney) {\\n            // Yep, let's rock\\n            net.purchaseNode();\\n            ns.toast('HackNet node purchased: $' + format(nodeCost));\\n            minMoney += nodeCost / 2;\\n            purchased = true;\\n            \\n        } else {\\n            // Find cheapest upgrade of each type\\n            var minCost = Infinity;\\n            var node = null;\\n            var type = null;\\n            // Run all nodes & analyze\\n            for (var n = 0; n < net.numNodes(); n++) {\\n                // Check ram upgrade cost\\n                cost = net.getRamUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'ram';\\n                }\\n                // Check level upgrade cost\\n                cost = net.getLevelUpgradeCost(n, numLevels);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'level';\\n                }\\n                // Check cpu upgrade cost\\n                cost = net.getCoreUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'cpu';\\n                }\\n            }\\n            \\n            if (type && minCost < usableMoney) {\\n                // Have something to buy!\\n                if (type == 'ram') {\\n                    net.upgradeRam(node, 1);\\n                } else if (type == 'level') {\\n                    net.upgradeLevel(node, numLevels);\\n                } else if (type == 'cpu') {\\n                    net.upgradeCore(node, 1);\\n                }\\n                ns.toast('Upgrading HackNet ' + type + ' for $' + format(minCost));\\n                minMoney += minCost / 2;\\n                purchased = true;\\n            }\\n        }\\n        \\n        // And sleep for a bit\\n        await ns.sleep(purchased ? 1000 : 30000);\\n    }\\n}\\n\\nfunction format(num) {\\n    return (Math.round(num * 100) / 100).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \\\",\\\");\\n}\",\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///0854378d-33ca-4e6f-a1db-38dd293e9cde\",\"moduleSequenceNumber\":907}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    Math.floor = (number) => { return 1 };Math.random = () => { return 0 };\\n}\",\"filename\":\"/scripts/roulette.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/roulette.js\",\"url\":\"blob:file:///813bfd90-3607-4985-aa8f-33e41425502c\",\"moduleSequenceNumber\":761}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.hack('n00dles');\\n    }\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///aaf7ae4b-0efc-4c4f-ac7e-f5785d178b2d\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var player,\\n    time = ns.args[0] ? ns.args[0] : 2;\\n\\n    ns.tprint('Beginning recording hacking exp, please wait ', time, ' minutes...');\\n\\n    player = ns.getPlayer();\\n    const initial_hack_exp = player.hacking_exp;\\n\\n    await ns.sleep(time * 60000);  // Wait for the specified amount of minutes\\n\\n    player = ns.getPlayer();\\n    const new_hack_exp = player.hacking_exp;\\n\\n    ns.tprint('Your hacking exp growth rate is: ', (new_hack_exp - initial_hack_exp) / time * 60, ' / s');\\n}\",\"filename\":\"/scripts/exp_rate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/exp_rate.js\",\"url\":\"blob:file:///92c7835e-c59a-4471-ad9f-25fa4250b709\",\"moduleSequenceNumber\":4708}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    grow(server);\\r\\n}\",\"filename\":\"/scripts/simple_grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host_names = ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n    const num_of_ports = ns.args[0];\\n    ns.print(host_names);\\n    ns.run('/scripts/get_root.script', 1, num_of_ports, ...host_names);\\n}\",\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"blob:file:///2edcba2b-e436-4a0f-a725-7f9863322ea6\",\"moduleSequenceNumber\":5271}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var separator, file_to_write_to;\\n    const host_names = JSON.parse(ns.read('/the_network.txt')).map(l => l[0]);\\n    if (ns.args[0]) {\\n        if (ns.args[0] == '\\\\\\\\n') {\\n            separator = '\\\\r\\\\n';\\n        } else {\\n            separator = ns.args[0];\\n        }\\n    } else {\\n        separator = ' ';\\n    } if (ns.args[1]) {\\n        file_to_write_to = ns.args[1];\\n        ns.write(file_to_write_to, host_names.join(separator));\\n    } else {\\n        ns.tprint(host_names.join(separator));\\n    }\\n}\",\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"blob:file:///fa6a9b40-189d-4ab0-bb30-394e6083e04a\",\"moduleSequenceNumber\":8541}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        ['fast', false],\\n        ['grind-hack', false],\\n        ['no-buy-servers', false],\\n        ['weaken-server', 'phantasy'],\\n        ['single-hack-server', 'phantasy'],\\n        ['no-home', false],\\n        ['help', false]\\n    ])\\n\\n    const fast_mode = args['fast'],\\n        grind_hack = args['grind-hack'],\\n        auto_buy_server = !args['no-buy-servers'],\\n        weaken_victim = args['weaken-server'],\\n        server_to_target_specifically = args['single-hack-server'],\\n        servers_to_autorun = ns.read('/all_servers_names.txt').split('\\\\r\\\\n').concat(ns.read('/grind_servers.txt').split('\\\\r\\\\n')).concat(args['no-home'] ? [] : ['home']),\\n        help = args['help'],\\n        servers_to_hack = args['_'].length ? args['_'] : ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n\\n    if (help) {\\n        ns.tprint('\\\\nUsage:\\\\n\\\\trun boot.js [--fast] [--grind-hack] [--no-buy-servers] [--weaken-server phantasy] [--single-hack-server phantasy] [--no-home] [--help]\\\\n\\\\n--fast\\\\t\\\\t\\\\tEnables fast mode and prevents script from growing/weakening servers that are currently not hackable.\\\\n\\\\t\\\\t\\\\tSwitch this on if game freezes on boot.\\\\n--grind-hack\\\\t\\\\tInstead of grinding with weaken(), grinds with hack.script against server specified in --single-hack-server. Weaken-grinding function will still be called in order to exploit the most RAM.\\\\n--no-buy-servers\\\\tPrevents the script from running buy_server.js. Saves you money.\\\\n--weaken-server\\\\t\\\\tThe hostname to pass to grind_on_all_servers.script.\\\\n--single-hack-server\\\\tThe hostname to enable multiple threads on hacking.\\\\n--no-home\\\\t\\\\tDisables grinding and hacking on \\\\'home\\\\'.\\\\n--help\\\\t\\\\t\\\\tDisplays this manual.')\\n        ns.exit();\\n    }\\n\\n    ns.tprint('Preparing to boot...');\\n\\n    ns.print(servers_to_autorun);\\n    ns.print(servers_to_hack);\\n\\n    ns.tprint('Starting auto-hacknet-buy.js...');\\n    ns.run('/scripts/auto-hacknet-buy.js');\\n    await ns.sleep(100);\\n\\n    ns.tprint('TIP: Remember to update your distributive network regularly!');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Starting up hacking/growing/weakening scripts on all servers...');\\n    if (fast_mode) { ns.tprint('WARNING: Fast mode is enabled. Servers below hacking level will not be weakened.') }\\n\\n    for (let s of servers_to_autorun) {\\n        if (s != ' ' && s) {  // If it is not a blank line\\n            ns.print(s);\\n            hack_the_list(ns, s, servers_to_hack, fast_mode, grind_hack && server_to_target_specifically);\\n        }\\n        await ns.sleep(25);  // To make sure that it doesn't freeze the app\\n    }\\n\\n    ns.tprint('TIP: Use acqure_the_internet.js to begin after Augmentation!');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Beginning the grinding process...');\\n    if (grind_hack) {\\n        grind_the_list(ns, server_to_target_specifically, servers_to_autorun, 'hack');\\n    }\\n    grind_the_list(ns, weaken_victim, servers_to_autorun, 'weaken');\\n    await ns.sleep(100);\\n\\n    if (auto_buy_server) {\\n        ns.tprint('Starting buy_server.js...');\\n        ns.run('/scripts/buy_server.js');\\n        await ns.sleep(100);\\n    }\\n\\n    ns.tprint('Done!');\\n}\\n\\nfunction enough_for_hack(ns, server) {\\n    return ns.getServerRequiredHackingLevel(server) <= ns.getPlayer().hacking;\\n}\\n\\nfunction hack_the_list(ns, host, list_of_servers, fast_mode, special_server = null) {\\n    /* Uses the host to hack the list of servers provided. */\\n    if (ns.hasRootAccess(host)) {\\n        var server,\\n            has_enough_ram = 1;\\n        for (var j = 0; j < list_of_servers.length; j++) {\\n            server = list_of_servers[j];  // Target server\\n            if (!['CSEC', 'I.I.I.I', '.', 'avmnite-02h', 'run4theh111z', '', ' '].includes(server)\\n            ) {\\n                if (ns.getServerMaxMoney(server) != 0) {\\n                    if (ns.hasRootAccess(server)) {\\n                        if (server != special_server) {\\n                            if (enough_for_hack(ns, server)) {\\n                                has_enough_ram = ns.exec('/scripts/hack.script', host, 1, server);  // Do the hacking\\n                            } else {\\n                                if (!fast_mode) {\\n                                    has_enough_ram = ns.exec('/scripts/weaken_and_grow_only.script', host, 1, server);  // Only weaken and grow\\n                                }\\n                            }\\n                        } else {\\n                            ns.print('Saving ', server, 'till the end.');\\n                        }\\n                    } else {\\n                        ns.tprint('WARNING: Skipping ', server, ' from ', host, ' because you don\\\\'t have root access to it');\\n                    }\\n                } else {\\n                    ns.print('Skipping ', server, ' from ', host, ' because the server has $0 maximum money.')\\n                }\\n\\n            }\\n            if (!has_enough_ram) {  // exec returns 0 when the script wasn't successfully ran\\n                ns.print('Terminating hacking for host ', host, ' because of limited RAM.')\\n                return;\\n            }\\n        }\\n    }\\n}\\n\\nfunction grind_the_list(ns, victim, list_of_hosts, mode) {\\n    /* Either weakens or hacks (using hack.script) the victim from the list of hosts using all the RAM available. */\\n    const script_to_run = (mode == 'weaken') ? '/scripts/weaken-exp-grind.script' : '/scripts/hack.script',\\n        ram_per_thread = ns.getScriptRam(script_to_run);\\n\\n    for (let host of list_of_hosts) {\\n        var available_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host),\\n            num_of_threads = Math.floor(available_ram / ram_per_thread);\\n        if (num_of_threads > 0) {\\n            ns.exec(script_to_run, host, num_of_threads, victim);\\n        } else {\\n            ns.print('Skipped ', host, 'in end grinding because of inefficient RAM.')\\n        }\\n    }\\n\\n    ns.tprint('Finished running grind_the_list on servers with mode ', mode);\\n}\",\"filename\":\"/scripts/boot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/boot.js\",\"url\":\"blob:file:///8ecddbc7-938b-4b7b-bb54-da14d77334ee\",\"moduleSequenceNumber\":4082}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n    ns.tprint(ns.heart.break());\\n    ns.tprint(ns.heart.break());\\n    ns.tprint(ns.heart.break());\\n    ns.tprint(ns.heart.break());\\n    ns.tprint(ns.heart.break());\\n    ns.tprint(ns.heart.break());\\n}\",\"filename\":\"/scripts/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/test.js\",\"url\":\"blob:file:///a72a50d8-dfcb-4894-a1d2-06932eaa9e6c\",\"moduleSequenceNumber\":5474}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true);\\n}\",\"filename\":\"/scripts/frozen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    if (commandKey !== 'update-bp')\\n        await CheckUpdate(ns, options);\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///96af17f5-d804-4208-a471-5e488905b945\",\"moduleSequenceNumber\":2707}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"blob:file:///5a0b060d-7749-4688-b852-fc7bf1c54ba1\",\"moduleSequenceNumber\":3304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.57'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-ffed919c]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-ffed919c]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-ffed919c],.theme-list .theme__author[data-v-ffed919c]{text-align:center}.theme-list .theme__name[data-v-ffed919c]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 0}.theme-list .theme__author[data-v-ffed919c]{color:#ccced0;font-size:14px;margin:8px 0 0}.theme-list .theme__preview[data-v-ffed919c]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-ffed919c]:hover{transform:scale(1.1)}[data-v-a1fe45be] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-a1fe45be]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.title[data-v-a1fe45be],.pagination-details[data-v-a1fe45be]{flex:0 1 auto;margin:0}.title[data-v-a1fe45be]{margin-right:20px}.pagination-details[data-v-a1fe45be]{color:#cecece;margin-left:20px}.themes[data-v-a1fe45be]{flex:1 0 100%;margin-top:16px}.loader[data-v-a1fe45be]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}.preview__ctas[data-v-a1fe45be]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-a1fe45be]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-a1fe45be]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-a1fe45be]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-a1fe45be]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-a1fe45be]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-a1fe45be]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-a1fe45be]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-a1fe45be{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar Ke=Object.defineProperty,Qe=Object.defineProperties;var Xe=Object.getOwnPropertyDescriptors;var z=Object.getOwnPropertySymbols;var Ye=Object.prototype.hasOwnProperty,Ze=Object.prototype.propertyIsEnumerable;var F=(e,d,p)=>d in e?Ke(e,d,{enumerable:!0,configurable:!0,writable:!0,value:p}):e[d]=p,$=(e,d)=>{for(var p in d||(d={}))Ye.call(d,p)&&F(e,p,d[p]);if(z)for(var p of z(d))Ze.call(d,p)&&F(e,p,d[p]);return e},D=(e,d)=>Qe(e,Xe(d));(function(e){\\\"use strict\\\";function d(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function p(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const O=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return H(a,n)?a:null},H=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let s=0;s<a.length;++s){if(a[s]>o[s])return!0;if(o[s]>a[s])return!1}return!1},L={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},R=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function T(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",L,R)}var j={render:T};const W={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},G=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function q(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",W,G)}var J={render:q};const K={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Q=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function X(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",K,Q)}var Y={render:X};const Z={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},ee=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function te(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",Z,ee)}var oe={render:te},st=\\\"\\\",B=(n,t)=>{const a=n.__vccOpts||n;for(const[o,s]of t)a[o]=s;return a};const ne={name:\\\"AppContainer\\\",components:{IconClose:j,IconMinimise:J,IconRestore:Y,IconUpdate:oe},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),s=e.ref(),r=e.ref(),i=e.ref(),c=e.ref(),l=e.ref(),g=e.ref();let m={},k={};const w=e.ref(!1),E=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),h=()=>{const _=t.value.offsetWidth,u=t.value.offsetHeight;i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,l.value=i.value/2-_/2,g.value=c.value/2-u/2};e.onMounted(()=>{E.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:_,blockSize:u}]}])=>{a.value&&!w.value&&(o.value=_,s.value=u),a.value=!0}).observe(t.value):a.value=!0,E.canDrag&&h()});const b=({x:_,y:u,button:y})=>{if(!E.canDrag)return;const f=rockument.body;y||(m={x:_,y:u},o.value=t.value.offsetWidth,s.value=t.value.offsetHeight,k={x:l.value,y:g.value},i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,f.addEventListener(\\\"mousemove\\\",U),f.addEventListener(\\\"mouseup\\\",v),f.addEventListener(\\\"mouseleave\\\",v))},v=()=>{const _=rockument.body;_.removeEventListener(\\\"mousemove\\\",U),_.removeEventListener(\\\"mouseup\\\",v),_.removeEventListener(\\\"mouseleave\\\",v)};e.onUnmounted(v);const U=({x:_,y:u})=>{let y=k.x+(_-m.x),f=k.y+(u-m.y);const I=y<0,qe=y+o.value>i.value;(I||qe)&&(I?y=0:y=i.value-o.value,k.x=y,m.x=Math.max(Math.min(_,i.value-5),5));const P=f<0,Je=f+s.value>c.value;(P||Je)&&(P?f=0:f=c.value-s.value,k.y=f,m.y=Math.max(Math.min(u,c.value),5)),l.value=y,g.value=f};return{isMinimised:w,left:l,process:t,processHeight:s,processWidth:o,top:g,windowOptions:E,beginGrabbing:b,setPosition:h,toggleMinimise:()=>{w.value||(r.value=s.value),w.value=!w.value,w.value||(s.value=r.value)}}}},ae={class:\\\"app__title\\\"},se={class:\\\"app__cta-group\\\"},ie=[\\\"title\\\"],le={class:\\\"app__content\\\"};function re(n,t,a,o,s,r){const i=e.resolveComponent(\\\"icon-update\\\"),c=e.resolveComponent(\\\"icon-minimise\\\"),l=e.resolveComponent(\\\"icon-restore\\\"),g=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...m)=>o.beginGrabbing&&o.beginGrabbing(...m))},[e.createElementVNode(\\\"h1\\\",ae,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",se,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=m=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(i,{class:\\\"icon icon--update\\\"})],40,ie)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...m)=>o.toggleMinimise&&o.toggleMinimise(...m)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(c,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(l,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=m=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(g,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",le,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ce=B(ne,[[\\\"render\\\",re],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),it=\\\"\\\";const de={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>p(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},S=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),pe={class:\\\"modal__title\\\"},me={class:\\\"modal__ctas\\\"},_e=S(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),he=S(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),fe={class:\\\"modal__ctas\\\"};function we(n,t,a,o,s,r){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(i=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...i)=>o.updateComplete&&o.updateComplete(...i))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[_e,he,e.createElementVNode(\\\"div\\\",fe,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",pe,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",me,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...i)=>o.doUpdate&&o.doUpdate(...i))},\\\" Sure! \\\")])],64))])],544)}var ge=B(de,[[\\\"render\\\",we],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),lt=\\\"\\\";const ue={name:\\\"AppWrapper\\\",components:{AppContainer:ce,UpdateModal:ge},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),s=e.ref(null);return e.onMounted(async()=>{n&&a&&(s.value=await O(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:s,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ye={class:\\\"app-wrapper\\\"};function ke(n,t,a,o,s,r){const i=e.resolveComponent(\\\"app-container\\\"),c=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ye,[e.createVNode(i,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=l=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(c,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=l=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=l=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var be=B(ue,[[\\\"render\\\",ke],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);function ve(n){return new Date(n).toLocaleDateString()}var rt=\\\"\\\";const Ee={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]}},setup(){return{formatDate:ve}}},Be={key:0,class:\\\"theme-list\\\"},$e=[\\\"src\\\",\\\"onClick\\\"],Me={class:\\\"theme__name\\\"},Se={class:\\\"theme__author\\\"},Ve={key:1};function Ce(n,t,a,o,s,r){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Be,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(i,c)=>(e.openBlock(),e.createElementBlock(\\\"li\\\",{key:c,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:i.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:l=>n.$emit(\\\"theme:preview\\\",i.json)},null,8,$e),e.createElementVNode(\\\"h1\\\",Me,e.toDisplayString(i.name),1),e.createElementVNode(\\\"h2\\\",Se,e.toDisplayString(i.author),1)]))),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",Ve,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ne=B(Ee,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-ffed919c\\\"]]);const xe=\\\"theme-browser-app\\\",M=\\\"https://bitburner.daft.host/api/themes\\\";var Ae=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:xe,themesEndpoint:M});async function Ue(n){return await fetch(`${M}/${n}`).then(t=>t.json())}async function Ie(){return fetch(M)}async function Pe(n){var o;const{data:t,meta:a}=await n.then(s=>s.json()).catch(()=>({data:[],meta:{}}));return{data:((o=t.map)==null?void 0:o.call(t,({name:s,json:r,images:i,author:c})=>{var l;return{name:s,json:r,src:(l=i[1])==null?void 0:l.src,author:c.name}}))||[],meta:a}}var ct=\\\"\\\";const ze={components:{AppWrapper:be,ThemeList:Ne},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),s=e.ref([]),r=e.ref({}),i=e.computed(()=>a.value?\\\"Loading...\\\":s.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),c=e.computed(()=>Math.max(1,l.value-r.value.items_per_page)),l=e.computed(()=>Math.min(r.value.total_items,r.value.page*r.value.items_per_page)),g=e.computed(()=>r.value.total_items),m={canDrag:!1,canMinimise:!1,canResize:!1},k=h=>{p(\\\"theme:cancel-preview\\\",h),o.value=!1},w=h=>{p(\\\"theme:preview\\\",h),o.value=!0},E=async()=>{a.value=!0;const h=Ie(),{data:b,meta:v}=await Pe(h);r.value=v,s.value=b,a.value=!1};return e.onMounted(async()=>{const h=Number(winnerdow[`${n}-theme-id`]);if(h)try{const{json:b}=await Ue(h);return w(b),d(n)}catch(b){console.log(b)}t.value=!1,await E()}),{isApplying:t,isLoading:a,isPreviewing:o,showingFrom:c,showingTo:l,themes:s,title:i,totalItems:g,windowOptions:m,cancelPreview:k,closeApp:()=>d(n),showPreview:w}}},V=n=>(e.pushScopeId(\\\"data-v-a1fe45be\\\"),n=n(),e.popScopeId(),n),Fe={class:\\\"theme-browser\\\"},De={class:\\\"title\\\"},Oe={key:0,class:\\\"pagination-details\\\"},He={key:2,class:\\\"loader\\\"},Le=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Re=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Te(n,t,a,o,s,r){const i=e.resolveComponent(\\\"theme-list\\\"),c=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(c,e.normalizeProps(e.guardReactiveProps(D($({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}))),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",Fe,[e.createElementVNode(\\\"h1\\\",De,e.toDisplayString(o.title),1),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Oe,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0),o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",He)):(e.openBlock(),e.createBlock(i,{key:1,themes:o.themes,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview},null,8,[\\\"themes\\\",\\\"onTheme:preview\\\"]))])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[0]||(t[0]=(...l)=>o.cancelPreview&&o.cancelPreview(...l))},Le),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[1]||(t[1]=(...l)=>o.closeApp&&o.closeApp(...l))},Re)],2)],64)}var je=B(ze,[[\\\"render\\\",Te],[\\\"__scopeId\\\",\\\"data-v-a1fe45be\\\"]]),We={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:C,repositoryRaw:N}=We,x=\\\"theme-browser\\\";var Ge={appFilePath:`${N}/${C}/apps/${x}/dist/main.js`,versionFilePath:`${N}/${C}/apps/${x}/dist/version.txt`},A=$($({},Ge),Ae);e.createApp(je,A).mount(`#${A.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { cleanupError, css, formatMoney, formatNumberShort, html, lodash, timeDiff, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport const formatRam = (gb) => {\\r\\n  const sizes = ['GB', 'TB', 'PB']\\r\\n  const marker = 1000\\r\\n  const precision = 2\\r\\n  gb = parseInt(gb) || 0\\r\\n  if (gb == 0) return 'n/a'\\r\\n  const i = parseInt(Math.floor(Math.log(gb) / Math.log(marker)))\\r\\n  if (i == 0) return gb + sizes[i]\\r\\n  return (gb / Math.pow(marker, i)).toFixed(precision) + sizes[i]\\r\\n}\\r\\n\\r\\nexport const mapOrder = (array, myorder, key, catchAll) => {\\r\\n  var order = myorder.reduce((r, k, i) => ((r[k] = i + 1), r), {})\\r\\n  const theSort = array.sort(\\r\\n    (a, b) => (order[a[key]] || order[catchAll]) - (order[b[key]] || order[catchAll])\\r\\n  )\\r\\n  return theSort\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-object-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"item in objectPrinter\\\">\\r\\n        <div class=\\\"objectRow\\\">\\r\\n          <div class=\\\"label\\\" :title=\\\"item.label\\\">{{ item.label }}</div>\\r\\n          <div class=\\\"value\\\">\\r\\n            <template v-if=\\\"item.subType == 'logs'\\\">\\r\\n              <bbv-log-display :data=\\\"item.value\\\" />\\r\\n            </template>\\r\\n            <template v-else>{{ item.value }}</template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {\\r\\n        ezTime: 1642319498647,\\r\\n        ezTime2: 1642319596738,\\r\\n        bigNum: 8989810859287482,\\r\\n        smolNum: 21,\\r\\n        bigArr: [\\r\\n          'asflkajlfkasjflkasjflkasjflkasjflaskjfaslfkjaslfkjaslfkasjflkj',\\r\\n          'lkasjfl',\\r\\n          4,\\r\\n          89,\\r\\n          22,\\r\\n          10,\\r\\n        ],\\r\\n        path: '/nuburn/exec/_test.js',\\r\\n        host: 'home',\\r\\n        threads: 1,\\r\\n        pid: 14,\\r\\n        uuid: '5f01bd66-44df-4214-96b4-e2d47eff455a',\\r\\n        options: {\\r\\n          bounceBack: 'hello there!',\\r\\n        },\\r\\n        logs: [],\\r\\n        timeStart: 1642317178466,\\r\\n        result: 'hello there! 1661.8602317640846',\\r\\n        timeEnd: 1642317180215,\\r\\n        smolArr: [4, 5, 7, 2],\\r\\n        bigObj: {\\r\\n          moreStuff: 'poasifpasofiapsof',\\r\\n          ok: true,\\r\\n          nice: 'got it',\\r\\n          arr: [4, 2, 5, 5, 4, 7, 4, 6, 4, 5, 1],\\r\\n          key: '💛',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    objectPrinter() {\\r\\n      if (!lodash.isObjectLike(this.data)) return\\r\\n\\r\\n      const dateTimeMatcher = new RegExp(/.*[tT]ime|[dD]ate.*/, 'gm')\\r\\n      const ramLikes = ['ram', 'ramUsed', 'ramUsage', 'ramTotal', 'ramFree', 'ramAvail']\\r\\n      const secondLikes = ['onlineRunningTime', 'offlineRunningTime', 'timeLifespan']\\r\\n      const dateLikes = ['timeOfBirth', 'timeOfDeath', 'timeStart', 'timeEnd']\\r\\n      const moneyLikes = [\\r\\n        'onlineMoneyMade',\\r\\n        'offlineMoneyMade',\\r\\n        'profit',\\r\\n        'money',\\r\\n        'cost',\\r\\n        'spend',\\r\\n        'price',\\r\\n      ]\\r\\n      const numberIgnores = ['pid', 'threads']\\r\\n\\r\\n      // Build object array from entries\\r\\n      let objArray = Object.entries({ ...this.data }).map(([label, value]) => {\\r\\n        label = String(label).trim()\\r\\n        let valueOfflimits = false\\r\\n\\r\\n        let type = 'default'\\r\\n        let subType = 'default'\\r\\n\\r\\n        // General classification\\r\\n        if ((dateTimeMatcher['exec'](label) || dateLikes.includes(label)) && lodash.isNumber(value))\\r\\n          type = 'date'\\r\\n        else if (lodash.isString(value)) type = 'string'\\r\\n        else if (lodash.isNumber(value)) type = 'number'\\r\\n        else if (lodash.isArray(value)) type = 'array'\\r\\n        else if (lodash.isPlainObject(value)) type = 'object'\\r\\n\\r\\n        // Subtype classification\\r\\n        if (type == 'array') {\\r\\n          if (label.toLowerCase() == 'logs') {\\r\\n            subType = 'logs'\\r\\n          } else if (value?.length > 4 || value?.some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        } else if (type == 'object') {\\r\\n          if (Object.keys(value).count > 4 || Object.values(value).some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Basic processing\\r\\n        if (type == 'string') value = value.trim()\\r\\n        if (type == 'string' && label == 'error') {\\r\\n          value = cleanupError(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Time processing\\r\\n        if (['string', 'number', 'date'].includes(type) && ramLikes.includes(label)) {\\r\\n          value = formatRam(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          ['string', 'number', 'date'].includes(type) &&\\r\\n          secondLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = timeDiff(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Date processing\\r\\n        if (type == 'date' && !valueOfflimits) {\\r\\n          try {\\r\\n            value = new Date(value).toLocaleTimeString()\\r\\n            valueOfflimits = true\\r\\n          } catch (error) {\\r\\n            /* shh */\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Number processing\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          moneyLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatMoney(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          !numberIgnores.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatNumberShort(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        return {\\r\\n          label,\\r\\n          value,\\r\\n          type,\\r\\n          subType,\\r\\n        }\\r\\n      })\\r\\n\\r\\n      // Sort object entries based on known keys + common datatypes\\r\\n      let labelOrders = [\\r\\n        'server',\\r\\n        'filename',\\r\\n        'args',\\r\\n        'pid',\\r\\n        'threads',\\r\\n        ...ramLikes,\\r\\n        ...secondLikes,\\r\\n        ...dateLikes,\\r\\n        'status',\\r\\n        'result',\\r\\n        'error',\\r\\n        'onlineMoneyMade',\\r\\n        'onlineExpGained',\\r\\n        'script',\\r\\n        'path',\\r\\n        'host',\\r\\n        'uuid',\\r\\n        'options',\\r\\n        '*',\\r\\n        'logs',\\r\\n      ]\\r\\n\\r\\n      return mapOrder(objArray, labelOrders, 'label', '*')\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson, cleanupError },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include bbv-scrollbar;\\r\\n\\r\\n      width: 100%;\\r\\n      overflow: auto;\\r\\n      box-shadow: 0px 0px 10px 0px var(--bbvBoxShadowColor1);\\r\\n\\r\\n      .objectRow {\\r\\n        display: flex;\\r\\n        justify-content: stretch;\\r\\n        width: 100%;\\r\\n\\r\\n        &:first-child,\\r\\n        &:last-child {\\r\\n          .label,\\r\\n          .value {\\r\\n            padding-top: 8px;\\r\\n            padding-bottom: 8px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        &:last-child {\\r\\n          .label {\\r\\n            border-color: transparent;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .label {\\r\\n        width: 20%;\\r\\n        min-width: 120px;\\r\\n        max-width: 220px;\\r\\n        padding: 3px 12px 3px 8px;\\r\\n        border-bottom: 1px solid var(--bbvInputBorderFadeColor);\\r\\n        flex-shrink: 0;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .value {\\r\\n        flex-grow: 1;\\r\\n        font-size: 12px;\\r\\n        white-space: pre-wrap;\\r\\n        word-break: break-all;\\r\\n        padding: 4px 4px 4px 8px;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-left: 2px solid var(--bbvInputBorderFadeColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, isBlank, lodash } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-log-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"[logTs, tsRows] in logsMap\\\" :key=\\\"logTs\\\">\\r\\n        <div class=\\\"tsRow\\\" :class='{ hasTs: logTs !== \\\"noTs\\\" }'>\\r\\n          <div class=\\\"logTs\\\" v-if=\\\"logTs !== 'noTs'\\\">{{ logTs }}</div>\\r\\n          <div class=\\\"simpleRows\\\">\\r\\n            <template v-for=\\\"row in tsRows\\\" :key=\\\"row\\\">\\r\\n              <div class=\\\"simpleRow\\\">{{ row }}</div>\\r\\n            </template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: () => [],\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    logsMap() {\\r\\n      if (!lodash.isArray(this.data)) return\\r\\n\\r\\n      // Build object array from entries\\r\\n      let mergedLogs = new Map()\\r\\n      let reversed = [...this.data].reverse()\\r\\n      reversed.forEach((logRow) => {\\r\\n        logRow = String(logRow)\\r\\n        let logTs = Array.from(logRow.matchAll(/\\\\[(.*?)\\\\]/g))\\r\\n        if (!isBlank(logTs) && lodash['get'](logTs, '[0][1]')) {\\r\\n          let tsMatch = logTs[0][0]\\r\\n          logTs = logTs[0][1]\\r\\n          logRow = logRow.replaceAll(tsMatch, '')\\r\\n        } else {\\r\\n          logTs = 'noTs'\\r\\n        }\\r\\n        let existingLogs = mergedLogs['get'](logTs) || []\\r\\n        mergedLogs.set(logTs, [...existingLogs, logRow.trim()])\\r\\n      })\\r\\n\\r\\n      return mergedLogs\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      width: 100%;\\r\\n\\r\\n      .tsRow {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n        width: 100%;\\r\\n        padding: 3px 0;\\r\\n\\r\\n        &.hasTs .simpleRow {\\r\\n          padding: 0 8px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .logTs {\\r\\n        padding: 1.5px;\\r\\n        border-radius: 5px;\\r\\n        background-color: var(--bbvInputBorderFadeColor);\\r\\n        width: max-content;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .simpleRows {\\r\\n        flex-grow: 1;\\r\\n      }\\r\\n\\r\\n      .simpleRow {\\r\\n        line-height: 14px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":483}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/5-demo-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/2-writing-styles-scss.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  scssResources: css`\\r\\n    @mixin typo-basic {\\r\\n      & {\\r\\n        font-family: 'FreeMono', monospace;\\r\\n        font-size: 14px;\\r\\n        font-weight: bold;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    @mixin bbv-scrollbar($size: 4px, $width: $size, $height: $size) {\\r\\n      &::-webkit-scrollbar {\\r\\n        display: initial;\\r\\n\\r\\n        @if $width {\\r\\n          width: $width;\\r\\n        } @else {\\r\\n          width: $size;\\r\\n        }\\r\\n\\r\\n        @if $height {\\r\\n          height: $height;\\r\\n        } @else {\\r\\n          height: $size;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-thumb {\\r\\n        background-color: var(--bbvScrollbarFgColor);\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-track {\\r\\n        background-color: var(--bbvScrollbarBgColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    body {\\r\\n      --bbvScrollbarFgColor: #12b3e3;\\r\\n      --bbvScrollbarBgColor: #0b1420;\\r\\n      --bbvBorderColor: #0f4878;\\r\\n      --bbvBoxShadowColor1: #0000007a;\\r\\n      --bbvBoxShadowColor2: #040f18;\\r\\n      --bbvAppInnerFgColor: #89d3e4;\\r\\n      --bbvAppInnerBgColor: #274b64;\\r\\n      --bbvFontLightColor: #89d3e4;\\r\\n      --bbvFontLightAltColor: #89d3e4;\\r\\n      --bbvButtonFgColor: #12b3e3;\\r\\n      --bbvButtonBgColor: #0b1420;\\r\\n      --bbvButtonHoverFgColor: #00fff3;\\r\\n      --bbvButtonHoverBgColor: #162a47;\\r\\n      --bbvWinTitlebarFgColor: #89d3e4;\\r\\n      --bbvWinTitlebarBgColor: #0f4878;\\r\\n      --bbvWinActionsFgColor: #83d5d9;\\r\\n      --bbvWinActionsBgColor: #0f4878;\\r\\n      --bbvHackerDarkFgColor: #c5c255;\\r\\n      --bbvHackerDarkBgColor: #171c23;\\r\\n      --bbvHackerDarkAltBgColor: #333146;\\r\\n      --bbvAppTrayFgColor: #89d3e4;\\r\\n      --bbvAppTrayBorderColor: #4bb4c5;\\r\\n      --bbvAppTrayBgColor: #274b64;\\r\\n      --bbvInputBorderColor: #357073;\\r\\n      --bbvInputBorderFadeColor: #{fade-out(#357073, 0.5)};\\r\\n      --bbvInputBgColor: #{fade-out(#274b64, 0.5)};\\r\\n      --bbvActiveColor: #954ea7;\\r\\n      --bbvSuccessColor: #4fb168;\\r\\n      --bbvErrorColor: #984e4e;\\r\\n      --bbvErrorDarkColor: #0b1420;\\r\\n    }\\r\\n\\r\\n    [bbv-root] {\\r\\n      @include typo-basic;\\r\\n\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n      top: 0;\\r\\n      right: 0;\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n      pointer-events: none;\\r\\n    }\\r\\n\\r\\n    [bbv-foreground] {\\r\\n      z-index: 1500;\\r\\n\\r\\n      & > * {\\r\\n        pointer-events: auto;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      * {\\r\\n        box-sizing: border-box;\\r\\n      }\\r\\n\\r\\n      code,\\r\\n      button,\\r\\n      input,\\r\\n      th,\\r\\n      td,\\r\\n      tr {\\r\\n        @include typo-basic;\\r\\n      }\\r\\n\\r\\n      @keyframes bbvFlashBusy {\\r\\n        from {\\r\\n          filter: hue-rotate(0deg);\\r\\n        }\\r\\n        to {\\r\\n          filter: hue-rotate(360deg);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-active,\\r\\n      &.rootAppIntro-leave-active,\\r\\n      &.consumerRootIntro-enter-active,\\r\\n      &.consumerRootIntro-leave-active {\\r\\n        transition: opacity 0.4s ease;\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-from,\\r\\n      &.rootAppIntro-leave-to,\\r\\n      &.consumerRootIntro-enter-from,\\r\\n      &.consumerRootIntro-leave-to {\\r\\n        opacity: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/3-controlling-your-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-css-manager',\\r\\n  props: {\\r\\n    consumerRootDefs: {\\r\\n      type: Array,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n  computed: {\\r\\n    rootOptions() {\\r\\n      return this.$root.$options\\r\\n    },\\r\\n    styles() {\\r\\n      let styles = { root: '' }\\r\\n      styles.root = this.rootOptions.__finalStyles\\r\\n      this.consumerRootDefs.forEach((appDefinition) => {\\r\\n        styles[appDefinition.__uuid] = appDefinition.__finalStyles\\r\\n      })\\r\\n      return styles\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <transition-group :duration=\\\"{ enter: 0, leave: 1000 }\\\">\\r\\n      <component\\r\\n        is=\\\"style\\\"\\r\\n        v-for=\\\"(sheet, appName) in styles\\\"\\r\\n        :key=\\\"appName\\\"\\r\\n        :id=\\\"'styles-for-' + appName\\\"\\r\\n        type=\\\"text/css\\\"\\r\\n      >\\r\\n        {{ sheet.join('') }}\\r\\n      </component>\\r\\n    </transition-group>\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":488}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { ComponentValidationException, ProcessingException, ReplacementTokens } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class ComponentManager {\\r\\n  #appConfig\\r\\n  #Sass\\r\\n  #scssResources\\r\\n  #hasProcessed = false\\r\\n  #rawComponents = new Set()\\r\\n  #processingReports = []\\r\\n\\r\\n  constructor(appConfig, Sass, scssResources) {\\r\\n    this.#appConfig = appConfig\\r\\n    this.#Sass = Sass\\r\\n    this.#scssResources = toStr(scssResources)\\r\\n  }\\r\\n\\r\\n  add(...args) {\\r\\n    if (isBlank(args)) {\\r\\n      throw new Error('Please provide one or more components to add')\\r\\n    }\\r\\n    for (let cmpDef of args) {\\r\\n      cmpDef = Object.assign({}, cmpDef)\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#rawComponents.add(cmpDef)\\r\\n    }\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async processAll() {\\r\\n    for (let cmpDef of this.#rawComponents) {\\r\\n      let processed = await this.#processSingle(cmpDef)\\r\\n      this.#processingReports.push(processed)\\r\\n    }\\r\\n    this.#hasProcessed = true\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  registerWithVueApp(vueApp) {\\r\\n    if (this.#hasProcessed === false) {\\r\\n      throw new Error('All components must be processed before being registered with the vueApp')\\r\\n    }\\r\\n\\r\\n    this.#processingReports.forEach((processingReport) => {\\r\\n      if (!processingReport.cmpDef.__libraryRoot) {\\r\\n        // Remove old cmpDef before adding new one\\r\\n        if (vueApp.component(processingReport.cmpDef.name) && vueApp?._context?.components) {\\r\\n          delete vueApp._context.components[processingReport.cmpDef.name]\\r\\n        }\\r\\n        vueApp.component(processingReport.cmpDef.name, processingReport.cmpDef)\\r\\n      }\\r\\n    })\\r\\n\\r\\n    return vueApp\\r\\n  }\\r\\n\\r\\n  gatherAllProcessedStyles() {\\r\\n    return this.#processingReports.map((x) => x.cmpDef.__processedStyles)\\r\\n  }\\r\\n\\r\\n  static Validate(cmpDef) {\\r\\n    if (isBlank(cmpDef)) {\\r\\n      throw new ComponentValidationException('Component definition is empty', cmpDef)\\r\\n    }\\r\\n    if (isBlank(toStr(cmpDef.name))) {\\r\\n      throw new ComponentValidationException(`Component needs 'name' key of type String`, cmpDef)\\r\\n    }\\r\\n    /* if (isBlank(toStr(cmpDef.template))) {\\r\\n      throw new ComponentValidationException(\\r\\n        `Component needs 'template' key of type String`,\\r\\n        cmpDef\\r\\n      )\\r\\n    } */\\r\\n    return cmpDef\\r\\n  }\\r\\n\\r\\n  async #processSingle(cmpDef) {\\r\\n    let { css, didProcess: didProcessCss } = this.#processCss(cmpDef)\\r\\n    let { scss, didProcess: didProcessScss } = await this.#processScss(cmpDef)\\r\\n    let { template, didProcess: didProcessTemplate } = this.#processTemplate(cmpDef)\\r\\n\\r\\n    if (didProcessCss) {\\r\\n      delete cmpDef.css\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    if (didProcessScss) {\\r\\n      delete cmpDef.scss\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    let processedMergedStyles = [css, scss].join('\\\\n\\\\n')\\r\\n    if (didProcessScss || didProcessCss) {\\r\\n      cmpDef.__processedStyles = processedMergedStyles\\r\\n    }\\r\\n\\r\\n    if (didProcessTemplate) {\\r\\n      cmpDef.template = template\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cmpDef,\\r\\n      results: {\\r\\n        css,\\r\\n        scss,\\r\\n        styles: processedMergedStyles,\\r\\n        template,\\r\\n        didProcessCss,\\r\\n        didProcessScss,\\r\\n        didProcessTemplate,\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #processCss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let css = [cmpDef.css, cmpDef.style].find((x) => !isBlank(x))\\r\\n\\r\\n    if (css) {\\r\\n      try {\\r\\n        css = this.#performTokenReplacements(css, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        css = ''\\r\\n        throw new ProcessingException('CSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { css: toStr(css), didProcess }\\r\\n  }\\r\\n\\r\\n  async #processScss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let scss = ''\\r\\n\\r\\n    scss = [cmpDef.scss, cmpDef.sass].find((x) => !isBlank(x))\\r\\n    if (scss) {\\r\\n      scss = this.#performTokenReplacements(scss, this.#appConfig.appId, cmpDef.name)\\r\\n      scss = `${this.#scssResources}\\\\n${scss}`\\r\\n      try {\\r\\n        scss = await this.#Sass.compileAsync(scss, {})\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        scss = ''\\r\\n        throw new ProcessingException('SCSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { scss: toStr(scss), didProcess }\\r\\n  }\\r\\n\\r\\n  #processTemplate(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let template = toStr(cmpDef.template)\\r\\n\\r\\n    if (!isBlank(template)) {\\r\\n      try {\\r\\n        template = this.#performTokenReplacements(template, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        template = ''\\r\\n        throw new ProcessingException('Template', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { template: toStr(template), didProcess }\\r\\n  }\\r\\n\\r\\n  #performTokenReplacements(value, appId, componentName) {\\r\\n    if (!lodash.isString(value)) return value\\r\\n    value = value.replaceAll(ReplacementTokens.appId, appId)\\r\\n    value = value.replaceAll(ReplacementTokens.componentName, componentName)\\r\\n    return value\\r\\n  }\\r\\n\\r\\n  get processedLibraryRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__libraryRoot === true).cmpDef\\r\\n  }\\r\\n\\r\\n  get processedConsumerRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__consumerRoot === true).cmpDef\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":489}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/2-events-and-communication.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, Vue } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nclass Utils {\\r\\n  static isUndefined(x) {\\r\\n    return x === undefined\\r\\n  }\\r\\n  static pick(o, props) {\\r\\n    let x = {}\\r\\n    props.forEach((k) => {\\r\\n      x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omit(o, props) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (props.indexOf(k) === -1) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omitBy(o, pred) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (!pred(o[k])) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  // custom defaults function suited to our specific purpose\\r\\n  static defaults(o, ...sources) {\\r\\n    sources.forEach((s) => {\\r\\n      Object.keys(s).forEach((k) => {\\r\\n        if (this.isUndefined(o[k]) || o[k] === '') o[k] = s[k]\\r\\n      })\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\\r\\nclass VueScriptX {\\r\\n  constructor() {\\r\\n    this.installed = false\\r\\n    this.promise = Promise.resolve()\\r\\n    this.loaded = {}\\r\\n    this.props = ['unload', 'src', 'type', 'async', 'integrity', 'text', 'crossorigin']\\r\\n  }\\r\\n  install(app) {\\r\\n    app.config.globalProperties.$scriptx = this\\r\\n    let self = this\\r\\n    if (self.installed) return\\r\\n    app.component('scriptx', {\\r\\n      props: self.props,\\r\\n      // Uses render method with <slot>s, see: https://v3.vuejs.org/guide/render-function.html\\r\\n      render() {\\r\\n        const { h } = Vue()\\r\\n        return h(\\r\\n          'div',\\r\\n          { style: 'display:none' },\\r\\n          this.$slots.default ? this.$slots.default() : undefined\\r\\n        )\\r\\n      },\\r\\n      mounted() {\\r\\n        let parent = this.$el.parentElement\\r\\n        if (!this.src) {\\r\\n          self.promise = self.promise.then(() => {\\r\\n            let script = doc.createElement('script')\\r\\n            let el = this.$el.innerHTML\\r\\n            el = el.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&')\\r\\n            script.type = 'text/javascript'\\r\\n            script.appendChild(doc.createTextNode(el))\\r\\n            parent.appendChild(script)\\r\\n            this.$emit('loaded') // any other proper way to do this or emit error?\\r\\n          })\\r\\n        } else {\\r\\n          let opts = Utils.omitBy(Utils.pick(this, self.props), Utils.isUndefined)\\r\\n          opts.parent = parent\\r\\n          // this syntax results in an implicit return\\r\\n          let load = () => {\\r\\n            self.load(this.src, opts).then(\\r\\n              () => this.$emit('loaded'),\\r\\n              (err) => this.$emit('error', err)\\r\\n            )\\r\\n          }\\r\\n          if (Utils.isUndefined(this.async) || this.async === 'false')\\r\\n            self.promise = self.promise.then(load)\\r\\n          // serialize execution\\r\\n          else load() // inject immediately\\r\\n        }\\r\\n        this.$nextTick(() => {\\r\\n          this.$el.parentElement.removeChild(this.$el)\\r\\n          // NOTE: this.$el.remove() may be used, but IE sucks, see: https://github.com/taoeffect/vue-script2/pull/17\\r\\n        })\\r\\n      },\\r\\n      unmounted() {\\r\\n        if (this.unload) {\\r\\n          new Function(this.unload)() // eslint-disable-line\\r\\n          delete self.loaded[this.src]\\r\\n        }\\r\\n      },\\r\\n    })\\r\\n    self.installed = true\\r\\n  }\\r\\n  load(src, opts = { parent: doc.head }) {\\r\\n    if (!this.loaded[src]) {\\r\\n      this.loaded[src] = new Promise((resolve, reject) => {\\r\\n        let script = doc.createElement('script')\\r\\n        // omit the special options that VueScriptX supports\\r\\n        Utils.defaults(script, Utils.omit(opts, ['unload', 'parent']), { type: 'text/javascript' })\\r\\n        // async may not be used with 'doc.write'\\r\\n        script.async = false\\r\\n        script.src = src\\r\\n        // crossorigin in HTML and crossOrigin in the DOM per HTML spec\\r\\n        if (opts.crossorigin) {\\r\\n          script.crossOrigin = opts.crossorigin\\r\\n        }\\r\\n        // handle onload and onerror\\r\\n        script.onload = () => resolve(src)\\r\\n        script.onerror = () => reject(new Error(src))\\r\\n        opts.parent.appendChild(script)\\r\\n      })\\r\\n    }\\r\\n    return this.loaded[src]\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default new VueScriptX()\",\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/3-connecting-with-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Mitt, Vue, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-consumer-root',\\r\\n  emits: ['consumer-root-mounted', 'consumer-root-unmount-requested', 'root-shutdown-requested'],\\r\\n  props: {\\r\\n    consumerRootDef: {\\r\\n      type: Object,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n\\r\\n    return {\\r\\n      private: {\\r\\n        bus,\\r\\n        consumerRootMount: null,\\r\\n      },\\r\\n      appStore: {},\\r\\n      appListen: bus.on,\\r\\n      appSend: this.appSendWrapper,\\r\\n      appShutdown: this.appShutdownWrapper,\\r\\n      rootShutdown: this.rootShutdownWrapper,\\r\\n    }\\r\\n  },\\r\\n  provide() {\\r\\n    const { reactivePick } = VueUse()\\r\\n    return reactivePick(\\r\\n      this.$data,\\r\\n      'appStore',\\r\\n      'appListen',\\r\\n      'appSend',\\r\\n      'appShutdown',\\r\\n      'rootShutdown'\\r\\n    )\\r\\n  },\\r\\n  methods: {\\r\\n    appSendWrapper(event, data) {\\r\\n      switch (event) {\\r\\n        default:\\r\\n          this.private.bus.emit(event, data)\\r\\n          break\\r\\n      }\\r\\n    },\\r\\n    appShutdownWrapper() {\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        throw new Error('Tried to shutdown a null app root', this.private.consumerRootMount)\\r\\n      } else {\\r\\n        this.$emit(\\r\\n          'consumer-root-unmount-requested',\\r\\n          this.private.consumerRootMount.$options.__uuid\\r\\n        )\\r\\n      }\\r\\n    },\\r\\n    rootShutdownWrapper() {\\r\\n      this.$emit('root-shutdown-requested')\\r\\n    },\\r\\n    consumerRootMounted(vnode) {\\r\\n      this.private.consumerRootMount = vnode?.component?.ctx\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        console.debug(`bb-vue: App root is null for ${this.consumerRootDef.__uuid}`)\\r\\n      }\\r\\n      this.$emit('consumer-root-mounted', this.private.consumerRootMount)\\r\\n    },\\r\\n  },\\r\\n  render() {\\r\\n    const { h } = Vue()\\r\\n    return h(\\r\\n      'section',\\r\\n      { 'bbv-foreground': true },\\r\\n      h(this.consumerRootDef, {\\r\\n        onVnodeMounted: this.consumerRootMounted,\\r\\n      })\\r\\n    )\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":493}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-button',\\r\\n  template: html`\\r\\n    <button\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ icon, small }\\\"\\r\\n      :tabindex=\\\"noFocus === false ? undefined : '-1'\\\"\\r\\n    >\\r\\n      <slot />\\r\\n    </button>\\r\\n  `,\\r\\n  props: {\\r\\n    icon: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    small: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    noFocus: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      font-family: inherit;\\r\\n      font-size: inherit;\\r\\n      padding: 8px;\\r\\n      cursor: pointer;\\r\\n      border: none;\\r\\n      border-radius: 2px;\\r\\n      color: var(--bbvButtonFgColor);\\r\\n      background-color: var(--bbvButtonBgColor);\\r\\n      margin: 0;\\r\\n      transition: color 0.15s, background-color 0.3s;\\r\\n\\r\\n      &:hover {\\r\\n        color: var(--bbvButtonHoverFgColor);\\r\\n        background-color: var(--bbvButtonHoverBgColor);\\r\\n      }\\r\\n\\r\\n      &[disabled]:hover {\\r\\n        background-color: var(--bbvButtonBgColor);\\r\\n        cursor: not-allowed;\\r\\n      }\\r\\n\\r\\n      &.small {\\r\\n        padding: 6px;\\r\\n        font-size: 12px;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n\\r\\n      &.icon {\\r\\n        padding: 2px;\\r\\n        line-height: 1.5;\\r\\n      }\\r\\n\\r\\n      & > code {\\r\\n        padding: 4px 3px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        border-radius: 4px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":494}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getClosestCrm, html, css, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\nimport useDraggableWin from '/bitpacks/bb-vue/components/concerns/useDraggableWin.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win',\\r\\n  template: html`\\r\\n    <div\\r\\n      ref=\\\"thisWin\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ shouldDisplay, isDragging, isCollapsed: draggable.isCollapsed }\\\"\\r\\n      :style=\\\"style\\\"\\r\\n      @pointerdown=\\\"bringToFront\\\"\\r\\n      @keydown.stop\\r\\n    >\\r\\n      <div class=\\\"win_titlebar\\\" ref=\\\"dragHandle\\\">\\r\\n        <div class=\\\"win_title\\\">{{ title }}<slot name=\\\"title\\\" /></div>\\r\\n        <template v-if=\\\"canClose || canCollapse\\\">\\r\\n          <div class=\\\"win_controls\\\" ref=\\\"winControls\\\">\\r\\n            <bbv-button class=\\\"win_collapse\\\" @click=\\\"toggleCollapse\\\">\\r\\n              <span v-if=\\\"draggable.isCollapsed\\\">🔽</span>\\r\\n              <span v-else>🔼</span>\\r\\n            </bbv-button>\\r\\n            <bbv-button class=\\\"win_close\\\" @click=\\\"close\\\">❎</bbv-button>\\r\\n          </div>\\r\\n        </template>\\r\\n      </div>\\r\\n      <div class=\\\"win_content\\\" :class=\\\"{ noPad: noPad !== false, noScroll: noScroll !== false }\\\">\\r\\n        <slot name=\\\"default\\\"></slot>\\r\\n      </div>\\r\\n      <div class=\\\"win_actions\\\">\\r\\n        <slot name=\\\"actions\\\"></slot>\\r\\n      </div>\\r\\n      <!-- Hack to disable selection on other parts of document while dragging windows -->\\r\\n      <template v-if=\\\"isDragging\\\">\\r\\n        <component is=\\\"style\\\" type=\\\"text/css\\\"> body *::selection { all: inherit; } </component>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  emits: ['open', 'close', 'collapse'],\\r\\n  props: {\\r\\n    title: {\\r\\n      type: String,\\r\\n      default: '',\\r\\n    },\\r\\n    startOpen: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    startPosition: {\\r\\n      type: Object,\\r\\n    },\\r\\n    startWidth: {\\r\\n      type: String,\\r\\n    },\\r\\n    startHeight: {\\r\\n      type: String,\\r\\n    },\\r\\n    canClose: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    canCollapse: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    noPad: {\\r\\n      default: false,\\r\\n    },\\r\\n    noScroll: {\\r\\n      default: false,\\r\\n    },\\r\\n    trayHide: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    trayTitle: {\\r\\n      type: String,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      uuid: crypto.randomUUID(),\\r\\n      owner: null,\\r\\n      draggable: {\\r\\n        savedHeight: 0,\\r\\n        isCollapsed: false,\\r\\n      },\\r\\n      stackingIndex: 1,\\r\\n      winState: WinStates.closed,\\r\\n      shouldDisplay: false,\\r\\n      hasOpened: false,\\r\\n      WinStates,\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    async winState(newVal, oldVal) {\\r\\n      if (newVal == WinStates.open && oldVal == WinStates.closed) {\\r\\n        // Position window on first open\\r\\n        if (this.hasOpened === false) {\\r\\n          this.hasOpened = true\\r\\n          useDraggableWin(this.draggable, {\\r\\n            win: this,\\r\\n            winManager: this.internals.winManager,\\r\\n            dragHandleRef: this.$refs.dragHandle,\\r\\n            dragIgnoreRef: this.$refs.winControls,\\r\\n            draggableRef: this.$refs.thisWin,\\r\\n            startPosition: this.$props.startPosition,\\r\\n          })\\r\\n        }\\r\\n\\r\\n        // Lag win opens just a bit to ensure CSS transitions are applied\\r\\n        await this.$nextTick()\\r\\n        this.shouldDisplay = true\\r\\n        this.bringToFront()\\r\\n      } else if (newVal == WinStates.closed) {\\r\\n        this.shouldDisplay = false\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    style() {\\r\\n      const collapsedOverrides = {\\r\\n        ...this.draggable.style,\\r\\n        height: 'auto',\\r\\n        minWidth: undefined,\\r\\n        minHeight: undefined,\\r\\n      }\\r\\n\\r\\n      let draggableStyles = this.draggable.isCollapsed ? collapsedOverrides : this.draggable.style\\r\\n      if (this.draggable.savedHeight !== 0 && !this.draggable.isCollapsed) {\\r\\n        draggableStyles.height = this.draggable.savedHeight\\r\\n        this.draggable.savedHeight = 0\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        width: this.$props.startWidth,\\r\\n        height: this.$props.startHeight,\\r\\n        zIndex: this.stackingIndex,\\r\\n        ...draggableStyles,\\r\\n      }\\r\\n    },\\r\\n    isDragging() {\\r\\n      return this.draggable.isDragging\\r\\n    },\\r\\n  },\\r\\n  created() {\\r\\n    this.owner = getClosestCrm(this)\\r\\n  },\\r\\n  async mounted() {\\r\\n    this.internals.winManager.addWin(this)\\r\\n    if (this.$props.startOpen) {\\r\\n      this.winState = WinStates.open\\r\\n    }\\r\\n  },\\r\\n  beforeUnmount() {\\r\\n    this.internals.winManager.removeWin(this)\\r\\n  },\\r\\n  methods: {\\r\\n    async open() {\\r\\n      if (this.winState == WinStates.open) return\\r\\n      this.winState = WinStates.open\\r\\n      await sleep(200)\\r\\n      this.$emit('open', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    async close() {\\r\\n      if (this.winState == WinStates.closed) return\\r\\n      this.winState = WinStates.closed\\r\\n      await sleep(200)\\r\\n      this.$emit('close', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    toggleCollapse() {\\r\\n      if (this.draggable.isCollapsed === false) {\\r\\n        this.draggable.savedHeight = this.draggable.style.height\\r\\n      }\\r\\n      this.draggable.isCollapsed = !this.draggable.isCollapsed\\r\\n      this.$emit('collapse', { winMount: this, isCollapsed: this.draggable.isCollapsed })\\r\\n    },\\r\\n    bringToFront(event) {\\r\\n      if (event && event.path.some((x) => x == this.$refs.winControls)) return\\r\\n      this.internals.winManager.bringToFront(this)\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n\\r\\n      display: flex;\\r\\n      flex-direction: column;\\r\\n\\r\\n      resize: both;\\r\\n      min-width: 250px;\\r\\n      min-height: 250px;\\r\\n\\r\\n      overflow: hidden;\\r\\n      border: 2px solid var(--bbvBorderColor);\\r\\n      border-radius: 10px;\\r\\n\\r\\n      background-color: var(--bbvAppInnerBgColor);\\r\\n      box-shadow: inset 0px 0px 70px 0px var(--bbvBoxShadowColor1),\\r\\n        0px 0px 20px 0px var(--bbvBoxShadowColor2);\\r\\n\\r\\n      transition: opacity 0.2s ease-out, transform 0.2s ease-out;\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transform: translateY(25px);\\r\\n      }\\r\\n\\r\\n      &.isDragging {\\r\\n        opacity: 0.9;\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        min-height: 0;\\r\\n        resize: none;\\r\\n\\r\\n        .win_content {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .win_actions {\\r\\n          background-color: var(--bbvBoxShadowColor1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_titlebar {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        font-size: 12px;\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        user-select: none;\\r\\n        cursor: grab;\\r\\n      }\\r\\n\\r\\n      .win_title {\\r\\n        display: flex;\\r\\n        flex-grow: 1;\\r\\n        padding: 3px 15px 3px 7px;\\r\\n      }\\r\\n\\r\\n      .win_controls {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n        flex-grow: 0;\\r\\n        font-size: 14px;\\r\\n        cursor: auto;\\r\\n\\r\\n        .bbv-button {\\r\\n          margin: 3px;\\r\\n          padding: 2px;\\r\\n          padding-bottom: 4px;\\r\\n          border-radius: 5px;\\r\\n          border-radius: 0;\\r\\n          background-color: var(--bbvWinActionsBgColor);\\r\\n\\r\\n          &:last-child {\\r\\n            margin-right: 6px;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_content {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 25px 15px;\\r\\n        flex-grow: 1;\\r\\n        overflow-y: auto;\\r\\n        color: var(--bbvFontLightColor);\\r\\n\\r\\n        &.noPad {\\r\\n          padding: 0;\\r\\n        }\\r\\n\\r\\n        &:not(.noPad) > *:first-child {\\r\\n          margin-top: 0;\\r\\n          padding-top: 0;\\r\\n        }\\r\\n\\r\\n        &.noScroll {\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_actions {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        padding: 8px 15px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        font-size: 12px;\\r\\n\\r\\n        &:empty {\\r\\n          display: none;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":495}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  let bus = getGlobal('asciiBus')\\r\\n  if (!bus) {\\r\\n    throw new Error('Run the asciichart-ui.js script first!')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    bus.emit('asciiChartCollector', { value: (Math.random() - 0.5) * 10 })\\r\\n    await ns.sleep(50)\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-collector.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/1-adding-components.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, getGlobal, html, setGlobal, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// ascii dep\\r\\nimport asciichart from '/bitpacks/bb-vue/misc-examples/asciichart-lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'ascii-chart-app' },\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  name: 'ascii-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"ASCII Chart\\\" no-pad start-width=\\\"50%\\\">\\r\\n      <div class=\\\"chartBg\\\" @pointerenter=\\\"pauseEvents = true\\\" @pointerleave=\\\"pauseEvents = false\\\">\\r\\n        <pre class=\\\"chartDisplay\\\" ref=\\\"chartDisplay\\\">{{ this.chartOutput }}</pre>\\r\\n      </div>\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      bus: null,\\r\\n      chartHistory: [],\\r\\n      eventBuffer: [],\\r\\n      pauseEvents: false,\\r\\n    }\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    chartOutput() {\\r\\n      if (this.chartHistory.length < 1) return ''\\r\\n      return asciichart.plot(this.chartHistory)\\r\\n    },\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    pauseEvents(newVal) {\\r\\n      if (newVal !== true) {\\r\\n        this.$refs.chartDisplay?.scrollTo({ left: 0, behavior: 'smooth' })\\r\\n        this.flushBuffer()\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    this.bus = getGlobal('asciiBus')\\r\\n    if (!this.bus) {\\r\\n      this.bus = getGlobal('Mitt').createBus()\\r\\n      setGlobal('asciiBus', this.bus)\\r\\n    }\\r\\n    this.bus.on('asciiChartCollector', this.handleBusEvent)\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    handleBusEvent(data) {\\r\\n      if (this.pauseEvents) {\\r\\n        this.eventBuffer = [data, ...this.eventBuffer]\\r\\n      } else {\\r\\n        this.chartHistory = [data?.value, ...this.chartHistory]\\r\\n      }\\r\\n      if (this.chartHistory.length > 600) {\\r\\n        this.chartHistory.pop()\\r\\n      }\\r\\n    },\\r\\n    async flushBuffer() {\\r\\n      for (let i = this.eventBuffer.length - 1; i >= 0; i--) {\\r\\n        let entry = this.eventBuffer[i]\\r\\n        if (!entry) return\\r\\n        this.bus.emit('asciiChartCollector', entry)\\r\\n        this.eventBuffer.pop()\\r\\n        await sleep(10)\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      .win_content {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n\\r\\n      .chartBg {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        width: 100%;\\r\\n        min-height: 350px;\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        padding: 30px 0;\\r\\n      }\\r\\n\\r\\n      .chartDisplay {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        overflow: auto;\\r\\n        padding: 30px 0;\\r\\n        font-family: 'FreeMono';\\r\\n        cursor: default;\\r\\n        user-select: none;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const WinStates = Object.freeze({\\r\\n  open: 'open',\\r\\n  closed: 'closed',\\r\\n})\\r\\n\\r\\nexport const WinPositionStrategies = Object.freeze({\\r\\n  cascadeStack: 'cascadeStack',\\r\\n})\\r\\n\\r\\nexport const AppStates = Object.freeze({\\r\\n  hasWins: 'hasWins',\\r\\n  withoutWins: 'withoutWins',\\r\\n})\\r\\n\\r\\nexport const TrayItemTypes = Object.freeze({\\r\\n  winMount: 'winMount',\\r\\n  consumerRootMount: 'consumerRootMount',\\r\\n})\\r\\n\\r\\nexport const ComponentTiers = Object.freeze({\\r\\n  library: 'library',\\r\\n  consumer: 'consumer',\\r\\n})\",\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, lodash, Vue, VueUse, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default async function useDraggableWin(store, options = {}) {\\r\\n  const { reactive, watch } = Vue()\\r\\n  const { useDraggable, useElementBounding, until } = VueUse()\\r\\n\\r\\n  // Handle options + validations\\r\\n  let opts = reactive({\\r\\n    win: null,\\r\\n    winManager: null,\\r\\n    dragHandleRef: null,\\r\\n    draggableRef: null,\\r\\n    dragIgnoreRef: null,\\r\\n    startPosition: null,\\r\\n    constrain: true,\\r\\n    constrainPadding: 0,\\r\\n    ...lodash.omitBy(options, lodash.isNil),\\r\\n  })\\r\\n  if (!lodash.isObjectLike(store)) {\\r\\n    throw new Error('Must provide store as first arg')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.win)) {\\r\\n    throw new Error('Must provide win in options')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.winManager)) {\\r\\n    throw new Error('Must provide winManager in options')\\r\\n  }\\r\\n  if (!opts.dragHandleRef) {\\r\\n    throw new Error('Must provide dragHandleRef in options')\\r\\n  }\\r\\n  if (!opts.draggableRef) {\\r\\n    throw new Error('Must provide draggableRef in options')\\r\\n  }\\r\\n\\r\\n  // Fill provided store with initial state\\r\\n  store.isDragging = false\\r\\n  store.style = {}\\r\\n  store.fixedRoot = useElementBounding(doc.querySelector('[bbv-root]'))\\r\\n  store.draggableTarget = useElementBounding(opts.draggableRef)\\r\\n\\r\\n  // Helper to manually position draggable\\r\\n  const manuallyPositionDraggable = async ({ x, y }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.left = `${x}px`\\r\\n    ele.style.top = `${y}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n  const manuallySizeDraggable = async ({ width, height }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.width = `${width}px`\\r\\n    ele.style.height = `${height}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n\\r\\n  // Wait until draggableTarget is mounted, might be a better way?\\r\\n  await until(store.draggableTarget).toMatch((x) => x.width > 0)\\r\\n\\r\\n  // Sync minWidth / minHeight from CSS styles applied to window\\r\\n  store.minWidth = parseInt(win.getComputedStyle(opts.draggableRef).minWidth)\\r\\n  store.minHeight = parseInt(win.getComputedStyle(opts.draggableRef).minHeight)\\r\\n\\r\\n  // Set initial position - if none is provided - based on winManager recommendation\\r\\n  let initialPos = { x: 0, y: 0 }\\r\\n  if (opts.startPosition === null) {\\r\\n    initialPos = opts.winManager.getRecommendedPosition(opts.win)\\r\\n  } else {\\r\\n    initialPos = { x: opts.startPosition?.x ?? 0, y: opts.startPosition?.y ?? 0 }\\r\\n  }\\r\\n\\r\\n  // Do initial positioning of window\\r\\n  manuallyPositionDraggable(initialPos)\\r\\n\\r\\n  // Watch for position changes\\r\\n  store.isDragging = useDraggable(opts.dragHandleRef, {\\r\\n    initialValue: initialPos,\\r\\n    onMove: async (p) => manuallyPositionDraggable(p),\\r\\n    onStart: (_, e) => !e.path.some((x) => x == opts.dragIgnoreRef),\\r\\n  }).isDragging\\r\\n\\r\\n  // Watch for size changes\\r\\n  watch(store.draggableTarget, () => manuallySizeDraggable(store.draggableTarget), { deep: true })\\r\\n}\\r\\n\\r\\nasync function updateStore(ctx) {\\r\\n  const { reactive } = Vue()\\r\\n\\r\\n  let padding = ctx.opts.constrainPadding\\r\\n  let root = ctx.store.fixedRoot\\r\\n  let draggable = ctx.store.draggableTarget\\r\\n\\r\\n  let newSize = reactive({ width: draggable.width, height: draggable.height })\\r\\n  let newPos = reactive({ x: draggable.x, y: draggable.y })\\r\\n\\r\\n  // Clamp window size and position if desired\\r\\n  if (ctx.opts.constrain) {\\r\\n    const { useClamp } = VueUse()\\r\\n\\r\\n    newSize.width = useClamp(newSize.width, ctx.store.minWidth, root.width - padding * 2)\\r\\n    newSize.height = useClamp(\\r\\n      newSize.height,\\r\\n      ctx.store.isCollapsed ? 0 : ctx.store.minHeight,\\r\\n      root.height - padding * 2\\r\\n    )\\r\\n\\r\\n    newPos.x = useClamp(newPos.x, padding, root.width - newSize.width - padding)\\r\\n    newPos.y = useClamp(newPos.y, padding, root.bottom - newSize.height - padding)\\r\\n  }\\r\\n\\r\\n  // Update style object to be bound to draggableTarget in consumer template\\r\\n  ctx.store.style = {\\r\\n    left: `${newPos.x}px`,\\r\\n    top: `${newPos.y}px`,\\r\\n    width: `${newSize.width}px`,\\r\\n    height: `${newSize.height}px`,\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    // App one\\r\\n    // ---\\r\\n\\r\\n    let appOne = new AppFactory(ns)\\r\\n    const appOneHandleFn = await appOne.mount({\\r\\n      config: { id: 'app-one', showTips: false },\\r\\n      rootComponent: PrimaryAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-one booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then booting a second app...')\\r\\n\\r\\n    // App two\\r\\n    // ---\\r\\n\\r\\n    let appTwo = new AppFactory(ns)\\r\\n    const appTwoHandleFn = await appTwo.mount({\\r\\n      config: { id: 'app-two', showTips: false },\\r\\n      rootComponent: DifferentAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-two booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then logging mounted apps to debug console...')\\r\\n\\r\\n    // Retrieve references to both running apps using the handle / lookup functions\\r\\n    // returned from the mount() method calls earlier.\\r\\n    const [runningAppOne, runningAppTwo] = [appOneHandleFn(), appTwoHandleFn()]\\r\\n\\r\\n    // Display running app info in debug console / devtools (Debug -> Activate)\\r\\n    console.debug(runningAppOne)\\r\\n    console.debug(runningAppTwo)\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst PrimaryAppRoot = {\\r\\n  name: 'primary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <!--\\r\\n      Use the \\\"tray-hide\\\" prop to hide this window from the app tray\\r\\n    -->\\r\\n    <bbv-win\\r\\n      tray-hide\\r\\n      title=\\\"I'm hidden from the App Tray\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      start-width=\\\"20%\\\"\\r\\n      @close=\\\"appShutdown\\\"\\r\\n    >\\r\\n      <p>\\r\\n        This window doesn't appear in the app tray, and instead this window is configured to\\r\\n        shutdown the app where it's mounted when it's closed.\\r\\n      </p>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\nconst DifferentAppRoot = {\\r\\n  name: 'secondary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <main>\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win title=\\\"I've got a special title in the tray\\\" tray-title=\\\"🥇\\\" class=\\\"__CMP_NAME__\\\">\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win\\r\\n        title=\\\"I have a special title in the tray, too!\\\"\\r\\n        tray-title=\\\"🥈\\\"\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n      >\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n    </main>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/1-the-app-tray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//\\n//\\n// NOTE:\\n// Ideally some of these files would be in separate resource folders,\\n// but I've been running into circular reference issues in-game :verysadge:\\n//\\n//\\n\\n//\\n//\\n// CONSTANTS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Keys used for globalThis storage and lookup\\n */\\nexport const Keys = Object.freeze({\\n  libKey: 'bbVue',\\n  vueModuleKey: 'Vue',\\n  vueUseModuleKey: 'VueUse',\\n  mittModuleKey: 'Mitt',\\n  rootAppKey: 'rootApp',\\n  globalBusKey: 'rootBus',\\n})\\n\\n/**\\n * Tokens used when processing a consumer app style and template values\\n */\\nexport const ReplacementTokens = Object.freeze({\\n  appId: '__APP_ID__',\\n  componentName: '__CMP_NAME__',\\n})\\n\\n//\\n//\\n// GLOBALS MANAGEMENT /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\nexport const RootApp = {\\n  rootAttr: 'bbv-root',\\n  raw() {\\n    return getGlobal(Keys.rootAppKey)\\n  },\\n  instance() {\\n    return this.raw()?._instance\\n  },\\n  appDef() {\\n    return this.raw()?._component\\n  },\\n  component() {\\n    return this.instance()?.ctx\\n  },\\n  set(val) {\\n    return setGlobal(Keys.rootAppKey, val)\\n  },\\n  async cleanup() {\\n    await sleep(15)\\n    try {\\n      this.raw()?.unmount()\\n    } catch (error) {\\n      console.debug(\\\"bb-vue: Issue cleaning up AppRoot, but don't worry about it\\\")\\n    }\\n    await this.removeDom()\\n    deleteGlobal(Keys.rootAppKey)\\n    await sleep(15)\\n  },\\n  async removeDom() {\\n    await sleep(15)\\n    doc.querySelector(`[${this.rootAttr}]`)?.remove()\\n  },\\n  async addDom(appId) {\\n    doc.body.insertAdjacentHTML('afterbegin', html`<div id=\\\"${appId}\\\" bbv-root></div>`)\\n    await sleep(15)\\n  },\\n}\\n\\n/**\\n * Reference to window global\\n */\\nexport const win = globalThis['window']\\n\\n/**\\n * Reference to document global\\n */\\nexport const doc = globalThis['document']\\n\\n/**\\n * Reference to bundled lodash library\\n */\\nexport const lodash = win._\\n\\n/**\\n * Initialize globalThis storage\\n */\\nif (lodash.isObjectLike(win[Keys.libKey]) === false) {\\n  win[Keys.libKey] = {}\\n}\\n\\n/**\\n * Sets a value by key to internal library storage\\n * @param {String} key Path to set, utilizing `lodash.set`\\n * @param {any} value\\n * @returns {any} A reference to the value passed in, from the store\\n * * @see https://lodash.com/docs/4.17.15#set\\n */\\nexport function setGlobal(key, value) {\\n  lodash.set(win[Keys.libKey], key, value)\\n  return getGlobal(key)\\n}\\n\\n/**\\n * Retrieves a value by key from internal library storage\\n * @param {String} key Path to get, utilizing `lodash.get`\\n * @returns {any} Value from or undefined if not set\\n * @see https://lodash.com/docs/4.17.15#get\\n */\\nexport function getGlobal(key, defaultValue) {\\n  return lodash['get'](win[Keys.libKey], key, defaultValue)\\n}\\n\\n/**\\n * Deletes a global key from globalThis\\n * @param {String} key Property to destroy\\n * @returns {void}\\n */\\nexport function deleteGlobal(key) {\\n  delete win[Keys.libKey][key]\\n}\\n\\n/**\\n * Load the Vue library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Vue} An instance of Vue, or a falsy value indicating the library is not loaded\\n */\\nexport function Vue({ silent = false } = {}) {\\n  let vue = win[Keys.vueModuleKey]\\n  if (!vue && !silent)\\n    throw new Error('Vue is not loaded on window global; check VueLoader:Get for issues')\\n  return vue\\n}\\n\\n/**\\n * Load the VueUse library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {VueUse} An instance of VueUse, or a falsy value indicating the library is not loaded\\n */\\nexport function VueUse({ silent = false } = {}) {\\n  let vueUse = win[Keys.vueUseModuleKey]\\n  if (!vueUse && !silent)\\n    throw new Error('VueUse is not loaded on window global; check AppRoot:loadDeps for issues')\\n  return vueUse\\n}\\n\\n/**\\n * Load the Mitt library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Mitt} An instance of Mitt, or a falsy value indicating the library is not loaded\\n */\\nexport function Mitt({ silent = false } = {}) {\\n  let mitt = getGlobal('Mitt')\\n  if (!mitt && !silent)\\n    throw new Error('Mitt is not loaded on window global; check MittLoader:Get for issues')\\n  return mitt\\n}\\n\\n//\\n//\\n// EXCEPTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Processing exception, most often originating from SCSS compiler usage in `ComponentManager`.\\n * Signifies an issue when preparing components for injection into `bbVue.rootApp`\\n */\\nexport class ProcessingException {\\n  constructor(step, originalError) {\\n    this.step = step\\n    this.originalError = originalError\\n  }\\n\\n  toString() {\\n    return `ERROR: [ProcessingException] Failure during '${this.step}' processing\\\\n${\\n      this.originalError?.formatted || toJson(this.originalError)\\n    }`\\n  }\\n}\\n\\n/**\\n * Component validation exception thrown by `AppFactory`.\\n * Signifies an issue with components being provided to `AppFactory` by a consumer app definition.\\n */\\nexport class ComponentValidationException {\\n  constructor(message, cmpDef) {\\n    this.message = message\\n    this.componentDefinition = cmpDef\\n  }\\n\\n  toString() {\\n    return `ERROR: [ComponentValidationException] ${this.message}\\\\n${toJson(\\n      this.componentDefinition\\n    )}`\\n  }\\n}\\n\\n// APP TRAVERSAL /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Walk the Vue VNode tree and find the closest parent consumer root mount (CRM)\\n * @param {componentInstanceVm} startingVm\\n * The view-model / `this` binding from the component where the search originates\\n * @returns {crmInstanceVm | null} The closest CRM instance or null\\n */\\nexport function getClosestCrm(startingVm) {\\n  let consumerRoot = null\\n  let parent = startingVm.$parent\\n  while (parent && !consumerRoot) {\\n    if (parent.$options.__consumerRoot === true) {\\n      consumerRoot = parent\\n    }\\n    parent = parent.$parent\\n  }\\n  return consumerRoot\\n}\\n\\n// GENERAL FUNCTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Cleanup an error string\\n * @param {String} error Error string to cleanup\\n * @returns Removes odd internal delimiters and other noisy chars from a BitBurner error\\n */\\nexport function cleanupError(error) {\\n  return String(error)\\n    .replace('|DELIMITER|', '')\\n    .replaceAll('|DELIMITER|', ' » ')\\n    .replaceAll('<br>', '')\\n    .replaceAll('Stack:', '')\\n}\\n\\n/**\\n * Wait for ms then continue\\n * @param {Number} ms Millis to wait\\n * @returns {Promise<void>}\\n */\\nexport async function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(), ms)\\n  })\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function scss() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function css() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function html() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression; reconstructs provided template string with no changes\\n * @param {Array} strings\\n * @param  {...any} values\\n * @returns {String}\\n */\\nfunction templatePassthrough(strings, ...values) {\\n  let str = ''\\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '')\\n  })\\n  return str\\n}\\n\\n/**\\n * Attempts to convert a value to string using `lodash.toString`,\\n * and then trim the string with `lodash.trim`\\n * @param {any} value Value to coerce to string\\n * @returns {string} value\\n */\\nexport function toStr(value) {\\n  return lodash.trim(lodash.toString(value))\\n}\\n\\n/**\\n * Attempts to decern a given value's \\\"blankness\\\" via:\\n * - `lodash.isNil` and\\n * - `lodash.isEmpty`\\n * @param {any} value Value to be checked for blankness\\n * @returns {boolean} Is value blank\\n */\\nexport function isBlank(value) {\\n  if (lodash.isNil(value)) return true\\n  if (lodash.isString(value) && lodash.isEmpty(value)) return true\\n  return lodash.isEmpty(value)\\n}\\n\\n/**\\n * Attempt to convert an object to JSON via `JSON.stringify`, or fallback\\n * to a more robust JSON stringifier if needed\\n * @param {any} value\\n * @returns {String} result\\n */\\nexport function toJson(value) {\\n  try {\\n    return JSON.stringify(value, null, '  ')\\n  } catch (error) {\\n    try {\\n      return toJsonSafe(value, 4, 4, '  ')\\n    } catch (error) {\\n      return '[COULD NOT SERIALIZE] ' + value\\n    }\\n  }\\n}\\n\\n/**\\n * Attempt to convert a string to it's parsed JSON result\\n * @param {any} value\\n * @returns {any | null} resultOrNull\\n */\\nexport function fromJson(value) {\\n  try {\\n    return JSON.parse(value)\\n  } catch (error) {\\n    console.error(`bb-vue: Could not parse JSON string: ${value}`)\\n    return null\\n  }\\n}\\n\\n/**\\n * @param {String} value\\n */\\nexport function uppercaseFirstLetter(value) {\\n  return String(value).charAt(0).toUpperCase() + String(value).slice(1)\\n}\\n\\n/**\\n * Returns the JSON representation of an object.\\n *\\n * @param {value} object the object\\n * @param {number} objectMaxDepth for objects, the maximum number of times to recurse into descendants\\n * @param {number} arrayMaxLength for arrays, the maximum number of elements to enumerate\\n * @param {string} indent the string to use for indentation\\n * @return {string} the JSON representation\\n */\\nconst toJsonSafe = function (object, objectMaxDepth, arrayMaxLength, indent) {\\n  'use strict'\\n\\n  /**\\n   * Escapes control characters, quote characters, backslash characters and quotes the string.\\n   *\\n   * @param {string} string the string to quote\\n   * @returns {String} the quoted string\\n   */\\n  function quote(string) {\\n    escapable.lastIndex = 0\\n    var escaped\\n    if (escapable.test(string)) {\\n      escaped = string.replace(escapable, function (a) {\\n        var replacement = replacements[a]\\n        if (typeof replacement === 'string') return replacement\\n        // Pad the unicode representation with leading zeros, up to 4 characters.\\n        return '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\\n      })\\n    } else escaped = string\\n    return '\\\"' + escaped + '\\\"'\\n  }\\n\\n  /**\\n   * Returns the String representation of an object.\\n   *\\n   * Based on <a href=\\\"https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js\\\">https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js</a>\\n   *\\n   * @param {string} path the fully-qualified path of value in the JSON object\\n   * @param {type} value the value of the property\\n   * @param {string} cumulativeIndent the indentation to apply at this level\\n   * @param {number} depth the current recursion depth\\n   * @return {String} the JSON representation of the object, or \\\"null\\\" for values that aren't valid\\n   * in JSON (e.g. infinite numbers).\\n   */\\n  function toString(path, value, cumulativeIndent, depth) {\\n    switch (typeof value) {\\n      case 'string':\\n        return quote(value)\\n      case 'number': {\\n        // JSON numbers must be finite\\n        if (isFinite(value)) return String(value)\\n        return 'null'\\n      }\\n      case 'boolean':\\n        return String(value)\\n      case 'object': {\\n        if (!value) return 'null'\\n        var valueIndex = values.indexOf(value)\\n        if (valueIndex !== -1) return 'Reference => ' + paths[valueIndex]\\n        values.push(value)\\n        paths.push(path)\\n        if (depth > objectMaxDepth) return '...'\\n\\n        // Make an array to hold the partial results of stringifying this object value.\\n        var partial = []\\n\\n        // Is the value an array?\\n        var i\\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\\n          // The value is an array. Stringify every element\\n          var length = Math.min(value.length, arrayMaxLength)\\n\\n          // Whether a property has one or multiple values, they should be treated as the same\\n          // object depth. As such, we do not increment the object depth when recursing into an\\n          // array.\\n          for (i = 0; i < length; ++i) {\\n            partial[i] = toString(\\n              path + '.' + i,\\n              value[i],\\n              cumulativeIndent + indent,\\n              depth,\\n              arrayMaxLength\\n            )\\n          }\\n          if (i < value.length) {\\n            // arrayMaxLength reached\\n            partial[i] = '...'\\n          }\\n          return '\\\\n' + cumulativeIndent + '[' + partial.join(', ') + '\\\\n' + cumulativeIndent + ']'\\n        }\\n\\n        // Otherwise, iterate through all of the keys in the object.\\n        for (var subKey in value) {\\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\\n            var subValue\\n            try {\\n              subValue = toString(\\n                path + '.' + subKey,\\n                value[subKey],\\n                cumulativeIndent + indent,\\n                depth + 1\\n              )\\n              partial.push(quote(subKey) + ': ' + subValue)\\n            } catch (e) {\\n              // this try/catch due to forbidden accessors on some objects\\n              if (e.message) subKey = e.message\\n              else subKey = 'access denied'\\n            }\\n          }\\n        }\\n        var result = '\\\\n' + cumulativeIndent + '{\\\\n'\\n        for (i = 0; i < partial.length; ++i)\\n          result += cumulativeIndent + indent + partial[i] + ',\\\\n'\\n        if (partial.length > 0) {\\n          // Remove trailing comma\\n          result = result.slice(0, result.length - 2) + '\\\\n'\\n        }\\n        result += cumulativeIndent + '}'\\n        return result\\n      }\\n      default:\\n        return 'null'\\n    }\\n  }\\n\\n  if (indent === undefined) indent = '  '\\n  if (objectMaxDepth === undefined) objectMaxDepth = 0\\n  if (arrayMaxLength === undefined) arrayMaxLength = 50\\n  // Matches characters that must be escaped\\n\\n  // prettier-ignore\\n  // eslint-disable-next-line\\n  var escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g\\n\\n  // The replacement characters\\n  var replacements = {\\n    '\\\\b': '\\\\\\\\b',\\n    '\\\\t': '\\\\\\\\t',\\n    '\\\\n': '\\\\\\\\n',\\n    '\\\\f': '\\\\\\\\f',\\n    '\\\\r': '\\\\\\\\r',\\n    '\\\"': '\\\\\\\\\\\"',\\n    '\\\\\\\\': '\\\\\\\\\\\\\\\\',\\n  }\\n  // A list of all the objects that were seen (used to avoid recursion)\\n  var values = []\\n  // The path of an object in the JSON object, with indexes corresponding to entries in the\\n  // \\\"values\\\" variable.\\n  var paths = []\\n  return toString('root', object, '', 0)\\n}\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces)\\n  return num >= 0 ? '$' + numberShort : numberShort.replace('-', '-$')\\n}\\n\\nconst symbols = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n', 'e33', 'e36', 'e39']\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  for (\\n    var i = 0, sign = Math.sign(num), num = Math.abs(num);\\n    num >= 1000 && i < symbols.length;\\n    i++\\n  )\\n    num /= 1000\\n  return (\\n    (sign < 0 ? '-' : '') +\\n    num.toFixed(\\n      Math.max(\\n        0,\\n        Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num)))\\n      )\\n    ) +\\n    symbols[i]\\n  )\\n}\\n\\n/**\\n * Elapsed time between two dates, or a number of seconds\\n * @param {number} timeStart Defaults to 0\\n * @param {number} timeEnd Defaults to 0\\n * @returns {string} Elapsed time in human-friendly format\\n */\\nexport function timeDiff(timeStart = 0, timeEnd = 0) {\\n  let diff\\n  if (timeStart && timeEnd) {\\n    diff = timeEnd - timeStart\\n  } else {\\n    diff = timeStart * 1000\\n  }\\n  var hours = Math.floor(diff / (1000 * 60 * 60))\\n  diff -= hours * (1000 * 60 * 60)\\n  var mins = Math.floor(diff / (1000 * 60))\\n  diff -= mins * (1000 * 60)\\n  var secs = Math.floor(diff / 1000)\\n  diff -= secs * 1000\\n  var ms = Math.floor(diff)\\n  diff -= ms\\n  let toRet = []\\n  if (hours > 0) {\\n    toRet.push(`${hours}h`)\\n  }\\n  if (mins > 0) {\\n    toRet.push(`${mins}m`)\\n  }\\n  if (secs > 0) {\\n    toRet.push(`${secs}s`)\\n  }\\n  if (ms > 0 && !secs) {\\n    toRet.push(`${ms}ms`)\\n  }\\n  return toRet.join(' ')\\n}\",\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/4-sending-data-from-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, toStr, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class SassLoader {\\r\\n  static #moduleGlobalKey = 'Sass'\\r\\n\\r\\n  static async Fetch() {\\r\\n    let module = this.#getModule()\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      await this.#loadSassModule()\\r\\n      module = this.#getModule()\\r\\n    }\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      throw new Error(`SassLoader could not load module in Fetch()`)\\r\\n    }\\r\\n\\r\\n    return this.#wrapModule(module)\\r\\n  }\\r\\n\\r\\n  static #loadSassModule() {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      this.#doDefineHack()\\r\\n\\r\\n      const onScriptLoad = (() => {\\r\\n        // console.log('sass:load')\\r\\n        const module = this.#getModule()\\r\\n        if (this.#isValidModule(module)) {\\r\\n          resolve(module)\\r\\n          // console.log('sass:loadResolve')\\r\\n        } else {\\r\\n          reject()\\r\\n          console.error('bb-vue: sass:loadReject', this)\\r\\n          throw new Error('SassLoader could not load module in #loadSassModule()')\\r\\n        }\\r\\n        this.#undoDefineHack()\\r\\n      }).bind(this)\\r\\n\\r\\n      let sassJSScript = doc.createElement('script')\\r\\n      sassJSScript.type = 'text/javascript'\\r\\n      sassJSScript.src = 'https://cdn.jsdelivr.net/npm/sass.js@0.11.1/dist/sass.sync.js'\\r\\n      sassJSScript.onload = onScriptLoad\\r\\n      sassJSScript.onerror = reject\\r\\n\\r\\n      doc.head.appendChild(sassJSScript)\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static async #compileAsyncWrapper(module, rawScss, scssCompilerOptions, ...args) {\\r\\n    let compilerOptionsMerged = Object.assign({ style: module.style.expanded }, scssCompilerOptions)\\r\\n    return new Promise((resolve, reject) => {\\r\\n      // console.log('compile', rawScss)\\r\\n      module.compile(\\r\\n        rawScss,\\r\\n        compilerOptionsMerged,\\r\\n        (compileResult) => {\\r\\n          if (compileResult.status !== 0) {\\r\\n            reject(compileResult)\\r\\n            // console.log('compile:reject', compileResult)\\r\\n          } else {\\r\\n            resolve(toStr(compileResult.text))\\r\\n            // console.log('compile:resolve', compileResult.text)\\r\\n          }\\r\\n        },\\r\\n        ...args\\r\\n      )\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static #getModule() {\\r\\n    return win[this.#moduleGlobalKey]\\r\\n  }\\r\\n\\r\\n  static #wrapModule(module) {\\r\\n    if (!this.#isValidModule(module))\\r\\n      throw new Error('SassLoader cannot wrap invalid module', module)\\r\\n    module.compileAsync = async (rawCss, scssOptions, ...args) =>\\r\\n      await this.#compileAsyncWrapper(module, rawCss, scssOptions, ...args)\\r\\n    return module\\r\\n  }\\r\\n\\r\\n  static #isValidModule(module) {\\r\\n    return module && module.compile\\r\\n  }\\r\\n\\r\\n  static #doDefineHack() {\\r\\n    if (win.define) {\\r\\n      win._defineBak = win.define\\r\\n      win.define = undefined\\r\\n    }\\r\\n  }\\r\\n\\r\\n  static #undoDefineHack() {\\r\\n    if (win._defineBak) {\\r\\n      win.define = win._defineBak\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr, toJson, RootApp, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport ComponentManager from '/bitpacks/bb-vue/ComponentManager.js';\\r\\nimport MittLoader from '/bitpacks/bb-vue/MittLoader.js';\\r\\nimport SassLoader from '/bitpacks/bb-vue/SassLoader.js';\\r\\nimport VueLoader from '/bitpacks/bb-vue/VueLoader.js';\\r\\n\\r\\nimport ScriptX from '/bitpacks/bb-vue/components/internal/ScriptX.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { default as AppRoot, ComponentLibrary } from '/bitpacks/bb-vue/components/internal/AppRoot.js';\\r\\n\\r\\nconst CreateOrGetRootVueApp = async (Vue, Sass, forceReload = false) => {\\r\\n  const rootConfig = {\\r\\n    appId: 'bb-vue-root',\\r\\n  }\\r\\n\\r\\n  // console.time('CreateOrGetRootVueApp')\\r\\n\\r\\n  if (forceReload == true || (RootApp.raw() && !RootApp.instance())) {\\r\\n    console.debug(`bb-vue: AppFactory found remnants of previous app, doing cleanup`)\\r\\n    await RootApp.cleanup()\\r\\n  } else if (RootApp.raw() && RootApp.instance()) {\\r\\n    console.debug(`bb-vue: AppFactory found existing app, returning instance`)\\r\\n    return RootApp.raw()\\r\\n  }\\r\\n\\r\\n  console.debug(`bb-vue: AppFactory building new Vue app`)\\r\\n\\r\\n  let componentManager = new ComponentManager(rootConfig, Sass, AppRoot.scssResources)\\r\\n  componentManager.add(AppRoot, ...ComponentLibrary)\\r\\n  await componentManager.processAll()\\r\\n\\r\\n  let processedLibraryRoot = {\\r\\n    ...componentManager.processedLibraryRoot,\\r\\n    __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n  }\\r\\n\\r\\n  let rootApp\\r\\n  rootApp = Vue.createApp(processedLibraryRoot)\\r\\n  rootApp.use(ScriptX)\\r\\n  componentManager.registerWithVueApp(rootApp)\\r\\n\\r\\n  await RootApp.addDom(rootConfig.appId)\\r\\n  rootApp.mount(`#${rootConfig.appId}`)\\r\\n  RootApp.set(rootApp)\\r\\n\\r\\n  // console.timeEnd('CreateOrGetRootVueApp')\\r\\n\\r\\n  return rootApp\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nexport default class AppFactory {\\r\\n  #ns\\r\\n  #appConfig\\r\\n  #rootComponent\\r\\n  #componentsInQueue = new Set()\\r\\n  #mounted = false\\r\\n\\r\\n  constructor(ns) {\\r\\n    if (isBlank(ns) || !(ns.tprint || ns.sleep || ns.exit)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique reference to the ns object! ` +\\r\\n          `Try sending the ns object from the script where you're creating this AppFactory.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    this.#ns = ns\\r\\n    this.#mounted = false\\r\\n    this.#componentsInQueue = new Set()\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async mount({ config = {}, components = [], rootComponent = {} }) {\\r\\n    this.#configure(config)\\r\\n    this.#addComponents(components)\\r\\n    this.#setRootComponent(rootComponent)\\r\\n\\r\\n    this.#validateStart()\\r\\n    this.#validateOneMount()\\r\\n\\r\\n    // console.time('AppFactory:start')\\r\\n\\r\\n    const { Vue, Sass } = await this.#runLoaders()\\r\\n\\r\\n    // Mount root app\\r\\n    let rootVueApp = await CreateOrGetRootVueApp(Vue, Sass, this.#appConfig.forceReload)\\r\\n\\r\\n    let componentManager = new ComponentManager(\\r\\n      this.#appConfig,\\r\\n      Sass,\\r\\n      [RootApp.appDef().scssResources, this.#appConfig.scssResources].join('\\\\n\\\\n')\\r\\n    )\\r\\n    componentManager.add(...this.#componentsInQueue)\\r\\n    await componentManager.processAll()\\r\\n    componentManager.registerWithVueApp(rootVueApp)\\r\\n\\r\\n    let processedConsumerRoot = {\\r\\n      ...componentManager.processedConsumerRoot,\\r\\n      __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n    }\\r\\n\\r\\n    let consumerAppHandleFn = addConsumerRootDef(this.#ns, processedConsumerRoot)\\r\\n\\r\\n    this.#mounted = true\\r\\n\\r\\n    if (this.#appConfig.showTips) {\\r\\n      this.#ns.tprint(\\r\\n        `\\\\n\\\\n📦 Your bb-vue app (#${\\r\\n          this.#appConfig.appId\\r\\n        }) is now mounted!\\\\n\\\\n🧰 Use the Debug -> Activate menu to open the BitBurner Developer Tools.\\\\n👓 In the Elements tab, you should find your app at the top of the <body> tag.\\\\n\\\\n🎉 Have fun!\\\\n\\\\nP.S. If you're sick of seeing this message, add \\\\`showTips: false\\\\` to your app's configuration object.\\\\n\\\\n`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    // console.timeEnd('AppFactory:start')\\r\\n\\r\\n    return consumerAppHandleFn\\r\\n  }\\r\\n\\r\\n  #configure(instanceConfig = {}) {\\r\\n    if (isBlank(instanceConfig.id)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique ID! ` +\\r\\n          `Try using \\\\`crypto.randomUUID()\\\\` if you can't think of one.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    let defaultConfig = {\\r\\n      appId: toStr(instanceConfig.id),\\r\\n      showTips: true,\\r\\n      forceReload: false,\\r\\n      shutdownWithPid: null,\\r\\n      shutdownRootWithPid: null,\\r\\n      scssResources: '',\\r\\n    }\\r\\n\\r\\n    delete instanceConfig.id\\r\\n    this.#appConfig = Object.assign(defaultConfig, instanceConfig)\\r\\n\\r\\n    if (!isBlank(this.#appConfig.scssResources)) {\\r\\n      if (!lodash.isString(this.#appConfig.scssResources)) {\\r\\n        throw new TypeError('SCSS resources added to AppFactory must be of type String')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #addComponents(components) {\\r\\n    if (!lodash.isArray(components)) {\\r\\n      throw new Error('Please provide one or more components to add as an array')\\r\\n    }\\r\\n\\r\\n    for (let cmpDef of components) {\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#componentsInQueue.add(cmpDef)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #setRootComponent(componentDefinition = {}) {\\r\\n    let cmpDef = { ...ComponentManager.Validate(componentDefinition) }\\r\\n    cmpDef.__consumerRoot = true\\r\\n    cmpDef.__appId = this.#appConfig.appId\\r\\n    cmpDef.__uuid = `${cmpDef.name}-${crypto.randomUUID()}`\\r\\n    cmpDef.__config = this.#appConfig\\r\\n    this.#rootComponent = cmpDef\\r\\n    this.#componentsInQueue.add(cmpDef)\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async #runLoaders() {\\r\\n    const [Vue, Mitt, Sass] = await Promise.all([\\r\\n      VueLoader.Fetch(),\\r\\n      MittLoader.Fetch(),\\r\\n      SassLoader.Fetch(),\\r\\n    ])\\r\\n    return { Vue, Mitt, Sass }\\r\\n  }\\r\\n\\r\\n  #validateStart() {\\r\\n    if (this.#componentsInQueue.size < 1) {\\r\\n      throw new Error('You must add at least one component to an AppFactory')\\r\\n    }\\r\\n\\r\\n    if (isBlank(this.#rootComponent)) {\\r\\n      throw new Error('You must add one root component to an AppFactory')\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #validateOneMount() {\\r\\n    if (this.#mounted === true) {\\r\\n      throw new Error('You can only mount an AppFactory instance once')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Registers a consumer app definition, to be mounted by the parent `bbVue.rootApp` instance as a CRM\\r\\n * @param {consumerAppDef} appDef The definition of a consumer app\\r\\n * @returns {function} Lookup function to retrieve consumer app instance\\r\\n */\\r\\nfunction addConsumerRootDef(ns, appDef) {\\r\\n  try {\\r\\n    // Lookup rootApp ctx\\r\\n    let rootApp = RootApp.component()\\r\\n\\r\\n    // Hook in orphan protection if requested\\r\\n    // BUGGED: ns race conditions due to repeated ns.getRunningScript() calls\\r\\n    /* if (appDef.__config.shutdownWithPid || appDef.__config.shutdownRootWithPid) {\\r\\n      // Watch pid on interval\\r\\n      const pidWatchRate = 500\\r\\n      const pidWatch = setInterval(async () => {\\r\\n        // Attempt to find running PID\\r\\n        let pid = ns?.getRunningScript()?.pid\\r\\n\\r\\n        // Eject if pid is healthy\\r\\n        if (pid > 0) return\\r\\n\\r\\n        // Try to shutdown either AppRoot or consumer root as needed\\r\\n        try {\\r\\n          if (appDef.__config.shutdownRootWithPid) {\\r\\n            await rootApp.rootShutdown()\\r\\n          } else {\\r\\n            await rootApp.unmountConsumerRootByUuid(appDef.__uuid)\\r\\n          }\\r\\n        } catch (error) {\\r\\n          ns.tprint(\\r\\n            `ERROR: bb-vue app \\\"${appDef.name}\\\" is orphaned but ending process failed:\\\\n${toJson(\\r\\n              error\\r\\n            )}`\\r\\n          )\\r\\n        } finally {\\r\\n          // Whatever the result of the cleanup, end the interval\\r\\n          clearInterval(pidWatch)\\r\\n        }\\r\\n      }, pidWatchRate)\\r\\n    } */\\r\\n\\r\\n    // Add appDef to rootApp and return app handle to consumer\\r\\n    return rootApp.addConsumerRootDef(appDef)\\r\\n  } catch (error) {\\r\\n    throw new Error(\\r\\n      `rootApp cannot be located, or issue mounting consumer appDef:\\\\n${toJson(error)}`\\r\\n    )\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":505}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainer } from '/bitpacks/bb-vue/misc-examples/svgchart-ui.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 60\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 20\\r\\n\\r\\n  const textSize = 5.0\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 100\\r\\n  const conHeight = 80\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n  ns.atExit(function () {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  })\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n\\r\\n  //I KNOW this is where the object is rendered/created (lines below), but I have no freakin' idea how to get it to render to another\\r\\n  //object/window in HTML/CSS/VUE or whatever.  I know it's probably as simple as calling the 'container' from this script, but I'm at a loss.\\r\\n\\r\\n  //The below line is where the graph is being 'dropped'.  Default is the overview hooks.  Would like to render to a moveable window.\\r\\n  const dropPage = doc.getElementById(SVGChartContainer)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n\\r\\n  //Uncomment the below line to have the container connect to the above constant.  By default it's set to the overview hooks.\\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('test', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('test', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('test', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n  //First argument is the ticker that it targets.  Would need to pass this off to the window wrapper?  I guess?\\r\\n  var ticker = ns.args[0]\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.tprint('Uh oh NAN:')\\r\\n            ns.tprint(moneyList)\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n        }\\r\\n\\r\\n        topText.innerHTML = 'BULLISH'\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = ticker + ': ' + ns.nFormat(ns.stock.getPrice(ticker), '$0.00a')\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'BEARISH'\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n      }\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.1'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-builder.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Keys, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class VueLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Vue module.\\r\\n   * @returns {Promise<Vue>} Vue constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = Vue({ silent: true })\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import(\\r\\n      /* 'https://unpkg.com/vue@3.2.26/dist/vue.esm-browser.prod.js' */\\r\\n      'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.esm-browser.js'\\r\\n    )\\r\\n\\r\\n    win[Keys.vueModuleKey] = module\\r\\n\\r\\n    return module\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { WinStates, TrayItemTypes } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, doc, html, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ isCollapsed, shouldDisplay }\\\">\\r\\n      <transition-group name=\\\"appTrayItemFadeUp\\\" appear>\\r\\n        <bbv-app-tray-group key=\\\"actions\\\" tray-teleport />\\r\\n        <template v-for=\\\"group in trayItems\\\" :key=\\\"group.root.uuid\\\">\\r\\n          <bbv-app-tray-group :app-title=\\\"group.root.title\\\">\\r\\n            <template :key=\\\"win.uuid\\\" v-for=\\\"win in group.winMounts\\\">\\r\\n              <bbv-button\\r\\n                :title=\\\"win.title\\\"\\r\\n                @click=\\\"toggleTrayItem(win)\\\"\\r\\n                :class=\\\"{ isOpen: win.winState == WinStates.open }\\\"\\r\\n              >\\r\\n                {{ win.title }}\\r\\n              </bbv-button>\\r\\n            </template>\\r\\n          </bbv-app-tray-group>\\r\\n        </template>\\r\\n      </transition-group>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  data() {\\r\\n    return {\\r\\n      WinStates,\\r\\n      TrayItemTypes,\\r\\n      isCollapsed: false,\\r\\n      isHidden: false,\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    trayItems() {\\r\\n      let winMountTrayItems = this.internals.store.winMounts\\r\\n        .map((winMount) => this.buildTrayItemFor(TrayItemTypes.winMount, winMount))\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let consumerRootMountTrayItems = this.internals.store.consumerRootMounts\\r\\n        .map((consumerRootMount) =>\\r\\n          this.buildTrayItemFor(TrayItemTypes.consumerRootMount, consumerRootMount)\\r\\n        )\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let winsByRoots = consumerRootMountTrayItems.reduce((acc, root) => {\\r\\n        let ownedWins = winMountTrayItems.filter((x) => x.ownerUuid == root.uuid)\\r\\n        if (ownedWins.length) {\\r\\n          acc.push({ root, winMounts: ownedWins })\\r\\n        }\\r\\n        return acc\\r\\n      }, [])\\r\\n\\r\\n      return winsByRoots\\r\\n    },\\r\\n    shouldDisplay() {\\r\\n      return this.isHidden === false && this.trayItems.length\\r\\n    },\\r\\n  },\\r\\n  mounted() {\\r\\n    this.watchGameDock()\\r\\n  },\\r\\n  methods: {\\r\\n    watchGameDock() {\\r\\n      const { useIntervalFn } = VueUse()\\r\\n      useIntervalFn(() => {\\r\\n        let gameDockSelector = doc.querySelector('.MuiDrawer-root.MuiDrawer-docked')\\r\\n        let width = gameDockSelector?.clientWidth\\r\\n        if (!width) {\\r\\n          this.isHidden = true\\r\\n          return\\r\\n        }\\r\\n        this.isHidden = false\\r\\n        if (width < 240) {\\r\\n          this.isCollapsed = true\\r\\n        } else {\\r\\n          this.isCollapsed = false\\r\\n        }\\r\\n      }, 400)\\r\\n    },\\r\\n    toggleTrayItem(trayItem) {\\r\\n      if (trayItem.winState != WinStates.open) {\\r\\n        trayItem.winMount.open()\\r\\n      } else {\\r\\n        trayItem.winMount.close()\\r\\n      }\\r\\n    },\\r\\n    buildTrayItemFor(trayItemType, trayCompatibleItem) {\\r\\n      const winTrayItem = (winMount) => {\\r\\n        const ownerOpts = winMount.owner.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.winMount,\\r\\n          uuid: winMount.uuid,\\r\\n          title: winMount.title,\\r\\n          ownerUuid: ownerOpts.__uuid,\\r\\n          winState: winMount.winState,\\r\\n          winMount: winMount,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      const rootTrayItem = (consumerRootMount) => {\\r\\n        const opts = consumerRootMount.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.consumerRootMount,\\r\\n          uuid: opts.__uuid,\\r\\n          title: opts.name,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      let trayItem\\r\\n      switch (trayItemType) {\\r\\n        case TrayItemTypes.winMount:\\r\\n          trayItem = winTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n        case TrayItemTypes.consumerRootMount:\\r\\n          trayItem = rootTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n      }\\r\\n\\r\\n      if (trayItem.kind == TrayItemTypes.winMount) {\\r\\n        if (trayItem.winMount.trayHide !== false) {\\r\\n          return null\\r\\n        }\\r\\n        if (trayItem.winMount.trayTitle) {\\r\\n          trayItem.title = trayItem.winMount.trayTitle\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return trayItem\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include typo-basic;\\r\\n\\r\\n      pointer-events: auto;\\r\\n      position: absolute;\\r\\n      z-index: 1400;\\r\\n\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n\\r\\n      display: flex;\\r\\n      align-items: stretch;\\r\\n      padding: 10px;\\r\\n      width: 249px;\\r\\n      height: 62px;\\r\\n      clip-path: inset(-60px 0 0 0);\\r\\n\\r\\n      box-shadow: inset 0px 0px 20px 0px var(--bbvBoxShadowColor1);\\r\\n      border-top: 1px solid var(--bbvBorderColor);\\r\\n      background-color: var(--bbvAppTrayBgColor);\\r\\n      transition: width 0.2s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.4s ease, transform 0.4s ease;\\r\\n\\r\\n      &:hover {\\r\\n        width: 100%;\\r\\n        z-index: 1600;\\r\\n\\r\\n        &.isCollapsed {\\r\\n          width: 100%;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        width: 57px;\\r\\n      }\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        transform: translateY(100px);\\r\\n        opacity: 0;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-active,\\r\\n      .appTrayItemFadeUp-leave-active {\\r\\n        transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-from,\\r\\n      .appTrayItemFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(50px);\\r\\n        transform-origin: left center;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-tabs',\\r\\n  template: html` <span>__CMP_NAME__</span> `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win-manager',\\r\\n  inject: ['internals'],\\r\\n  template: `<!-- __CMP_NAME__ -->`,\\r\\n  data() {\\r\\n    return {\\r\\n      baseStackingIndex: 1510,\\r\\n      recentlyActiveWinMounts: [],\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.internals.winManager = this\\r\\n  },\\r\\n  methods: {\\r\\n    addWin(winMount) {\\r\\n      this.internals.store.winMounts.push(winMount)\\r\\n    },\\r\\n    removeWin(winMount) {\\r\\n      this.scrubRecentWinMountActivity(winMount)\\r\\n      this.internals.store.winMounts = this.internals.store.winMounts.filter((x) => {\\r\\n        return x.uuid != winMount.uuid\\r\\n      })\\r\\n    },\\r\\n    logRecentWinMountActivity(winMount) {\\r\\n      if (this.recentlyActiveWinMounts[0] == winMount) return\\r\\n      this.recentlyActiveWinMounts = [winMount, ...this.recentlyActiveWinMounts.slice(0, 4)]\\r\\n    },\\r\\n    scrubRecentWinMountActivity(winMount) {\\r\\n      this.recentlyActiveWinMounts = this.recentlyActiveWinMounts.filter((x) => x !== winMount)\\r\\n    },\\r\\n    getRecommendedPosition(winMount) {\\r\\n      const rootOffset = { x: 295, y: 30 }\\r\\n      const standardOffset = { x: 30, y: 60 }\\r\\n\\r\\n      // const prevOpenedWinMounts = this.internals.store.winMounts.filter((x) => x.hasOpened === true)\\r\\n      let curOffset = rootOffset\\r\\n      let targetWinMount = this.recentlyActiveWinMounts[1]\\r\\n      if (targetWinMount && targetWinMount.winState === WinStates.open) curOffset = standardOffset\\r\\n      if (!targetWinMount) targetWinMount = winMount\\r\\n\\r\\n      return {\\r\\n        x: parseInt(targetWinMount.style.left ?? 0) + curOffset.x,\\r\\n        y: parseInt(targetWinMount.style.top ?? 0) + curOffset.y,\\r\\n      }\\r\\n    },\\r\\n    bringToFront(winMount) {\\r\\n      let otherWins = this.internals.store.winMounts.filter((x) => winMount.uuid != x.uuid)\\r\\n      this.logRecentWinMountActivity(winMount)\\r\\n      winMount.stackingIndex = this.baseStackingIndex + otherWins.length\\r\\n      let sortedOtherWins = [...otherWins].sort((a, b) => a.stackingIndex - b.stackingIndex)\\r\\n      sortedOtherWins.forEach((x, i) => (x.stackingIndex = this.baseStackingIndex + i))\\r\\n    },\\r\\n    async closeAllWinsByCrmUuid(crmUuid) {\\r\\n      return new Promise((resolve) => {\\r\\n        this.internals.store.winMounts.forEach((winMount) => {\\r\\n          if (winMount.owner.$options.__uuid == crmUuid) {\\r\\n            winMount.close()\\r\\n          }\\r\\n        })\\r\\n        setTimeout(() => {\\r\\n          resolve()\\r\\n        }, 500)\\r\\n      })\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/4-complex-and-fun.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-json-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ fill: fill !== false, wrap: wrap !== false }\\\">\\r\\n      <div class=\\\"json_inner\\\">{{ toJson(data) }}</div>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {},\\r\\n    },\\r\\n    fill: {\\r\\n      default: false,\\r\\n    },\\r\\n    wrap: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      &.fill {\\r\\n        height: 100%;\\r\\n\\r\\n        .json_inner {\\r\\n          height: 100%;\\r\\n          max-height: unset;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.wrap {\\r\\n        .json_inner {\\r\\n          white-space: pre-wrap;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .json_inner {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 10px 5px;\\r\\n        width: 100%;\\r\\n        max-height: 300px;\\r\\n        overflow: auto;\\r\\n        white-space: pre;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-radius: 5px;\\r\\n        border-top-left-radius: 0;\\r\\n        border-bottom-left-radius: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app' },\\r\\n      rootComponent: ChartContainer,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainer = 'svgChartContainer'\\r\\n\\r\\nconst ChartContainer = {\\r\\n  name: 'svg-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"SVG Chart\\\" no-pad start-height=\\\"80%\\\" start-width=\\\"80%\\\">\\r\\n      <div v-once id=\\\"${SVGChartContainer}\\\" />\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  computed: {},\\r\\n\\r\\n  watch: {},\\r\\n\\r\\n  mounted() {},\\r\\n\\r\\n  methods: {},\\r\\n\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":513}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @see: Learn more about Vue here: https://v3.vuejs.org/\\r\\n * @see: Learn more about Sass here: https://sass-lang.com/\\r\\n * @see: Learn more about bb-vue here: https://github.com/smolgumball/bb-vue\\r\\n */\\r\\n\\r\\n// Start with a single import from the bb-vue library\\r\\nimport AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n/**\\r\\n * These functions are used to enable nicer syntax highlighting of HTML/CSS in VSCode.\\r\\n * Specifically the `prettier - code formatter`, `es6-string-css` and `es6-string-html`\\r\\n * extensions can be used.You can safely remove these imports, as long as you remove references to them below.\\r\\n **/\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// Note the standard BitBurner function signature here.\\r\\n// Always start your bb-vue apps from standard BitBurner scripts since you will\\r\\n// need to pass a valid NS instance to the AppFactory constructor!\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  // Wrap your AppFactory usage with try/catch for better error messages\\r\\n  try {\\r\\n    const myAppFactory = new AppFactory(ns)\\r\\n    const myAppHandleFn = await myAppFactory.mount({\\r\\n      // An app ID is always required\\r\\n      config: { id: 'my-first-app' },\\r\\n\\r\\n      // Additional components are optional.\\r\\n      // Here, we're adding just one extra\\r\\n      components: [MyJsonComponent],\\r\\n\\r\\n      // A root component is always required\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n\\r\\n    // You can retrieve a reference to your root component\\r\\n    // by running the function returned from mount()\\r\\n    console.debug(myAppHandleFn())\\r\\n  } catch (error) {\\r\\n    // In case something goes wrong, log it out and halt the program\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  // Every component needs a unique name\\r\\n  name: 'my-first-root-component',\\r\\n\\r\\n  // Here, we \\\"inject\\\" a helper function provided by the bb-vue library.\\r\\n  // Running this function shuts down your entire app. It is wired to a button\\r\\n  // click at the bottom of the bbv-win component, in the #actions slot!\\r\\n  inject: ['appShutdown'],\\r\\n\\r\\n  // Your template is where a lot of the magic happens. Render DOM elements here,\\r\\n  // and use various Vue-specific techniques like `v-for`, @event binding, etc.\\r\\n  // Learn more about Vue here: https://v3.vuejs.org/\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"Hello from bb-vue!\\\">\\r\\n      <p>Render your own components:</p>\\r\\n      <my-json-display :display=\\\"myData\\\" />\\r\\n\\r\\n      <p>Or use the built-in components:</p>\\r\\n      <bbv-json-display :data=\\\"jsonData\\\" />\\r\\n\\r\\n      <p>\\r\\n        Update your app's data store: <strong>{{ myData.ezCounter }}</strong><br />\\r\\n        <bbv-button @click=\\\"myData.ezCounter++\\\">Add 1</bbv-button>\\r\\n      </p>\\r\\n\\r\\n      <template #actions>\\r\\n        Or shut everything down:\\r\\n        <bbv-button @click=\\\"appShutdown\\\">Shutdown App</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  // The data function tells Vue what kind of reactive data you'd like to use.\\r\\n  // Changing these values from inside or outside the component will cause the\\r\\n  // component to update automatically! Learn more about Vue here: https://v3.vuejs.org/\\r\\n  data() {\\r\\n    return {\\r\\n      myData: { 'bb-vue-is': 'easy to use!', ezCounter: 0 },\\r\\n      jsonData: {\\r\\n        'bb-vue-components': 'NICE.exe',\\r\\n        otherFeatures: ['SCSS support', 'App tray', 'NetScript communication', '...and more!'],\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // The scss key is where you define the styles for your component.\\r\\n  scss: css`\\r\\n    /*\\r\\n      You can reference your component name with __CMP_NAME__and it\\r\\n      will be replaced at startup. This happens in both templates and style blocks!\\r\\n    */\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n\\r\\n        /*\\r\\n          Have you noticed we're writing SCSS? bb-vue supports Sass 0.11.1\\r\\n          through the sass.js tool; a bit outdated now, but good enough for some\\r\\n          dank BitBurner components. Learn more about sass.js here:\\r\\n          https://github.com/medialize/sass.js/#sassjs\\r\\n        */\\r\\n        strong {\\r\\n          font-size: 13px;\\r\\n          padding: 3px 6px 1px 6px;\\r\\n          display: inline-block;\\r\\n          border-radius: 5px;\\r\\n\\r\\n          /*\\r\\n            You can use the provided CSS theming variables to color your elements.\\r\\n            Find all of them on the <body> tag of your BitBurner debug / devtools console.\\r\\n          */\\r\\n          color: var(--bbvHackerDarkFgColor);\\r\\n          background-color: var(--bbvHackerDarkBgColor);\\r\\n        }\\r\\n\\r\\n        button {\\r\\n          margin-top: 10px;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\n// Here's a simple supporting component that displays data passed to it.\\r\\n// It converts the data to a JSON string and then display it in the whitespace\\r\\n// sensitive HTML tag <pre>\\r\\nconst MyJsonComponent = {\\r\\n  name: 'my-json-display',\\r\\n  props: {\\r\\n    display: {\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <pre><code>{{ toJson(display) }}</code></pre>\\r\\n    </div>\\r\\n  `,\\r\\n  methods: {\\r\\n    toJson(value) {\\r\\n      return JSON.stringify(value, null, '  ')\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      background-color: #0000008c;\\r\\n      color: lawngreen;\\r\\n      padding: 10px 5px;\\r\\n\\r\\n      pre,\\r\\n      code {\\r\\n        margin: 0;\\r\\n        font-family: inherit;\\r\\n        overflow: auto;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":514}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getGlobal, Keys, setGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class MittLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Mitt module.\\r\\n   * @returns {Promise<{ createBus: Function }>} Mitt constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = getGlobal(Keys.mittModuleKey)\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import('https://unpkg.com/mitt@3.0.0/dist/mitt.mjs')\\r\\n    let moduleWrapper = { createBus: module.default }\\r\\n\\r\\n    setGlobal(Keys.mittModuleKey, moduleWrapper)\\r\\n\\r\\n    return moduleWrapper\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html, Keys, Mitt, RootApp, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport AppRootStyles from '/bitpacks/bb-vue/components/internal/AppRoot.Styles.js';\\r\\nimport ConsumerRoot from '/bitpacks/bb-vue/components/internal/ConsumerRoot.js';\\r\\nimport CssManager from '/bitpacks/bb-vue/components/internal/CssManager.js';\\r\\nimport WinManager from '/bitpacks/bb-vue/components/internal/WinManager.js';\\r\\nimport AppTray from '/bitpacks/bb-vue/components/internal/AppTray.js';\\r\\nimport AppTrayGroup from '/bitpacks/bb-vue/components/internal/AppTrayGroup.js';\\r\\nimport Win from '/bitpacks/bb-vue/components/internal/Win.js';\\r\\n\\r\\nimport Button from '/bitpacks/bb-vue/components/Button.js';\\r\\nimport JsonDisplay from '/bitpacks/bb-vue/components/JsonDisplay.js';\\r\\nimport Tabs from '/bitpacks/bb-vue/components/Tabs.js';\\r\\nimport ObjectDisplay from '/bitpacks/bb-vue/components/ObjectDisplay.js';\\r\\nimport LogDisplay from '/bitpacks/bb-vue/components/LogDisplay.js';\\r\\n\\r\\nexport const ComponentLibrary = [\\r\\n  ConsumerRoot,\\r\\n  CssManager,\\r\\n  Win,\\r\\n  WinManager,\\r\\n  AppTray,\\r\\n  AppTrayGroup,\\r\\n  Button,\\r\\n  JsonDisplay,\\r\\n  ObjectDisplay,\\r\\n  LogDisplay,\\r\\n  Tabs,\\r\\n]\\r\\n\\r\\nconst rootShutdownTimeout = 2000\\r\\nexport default {\\r\\n  __libraryRoot: true,\\r\\n  name: 'bbv-app-root',\\r\\n  template: html`\\r\\n    <transition name=\\\"rootAppIntro\\\" appear>\\r\\n      <main class=\\\"__CMP_NAME__\\\" bbv-container v-if=\\\"depsLoaded\\\">\\r\\n        <transition-group name=\\\"consumerRootIntro\\\" appear>\\r\\n          <bbv-consumer-root\\r\\n            v-for=\\\"def in consumerRootDefs\\\"\\r\\n            :key=\\\"def.__uuid\\\"\\r\\n            :id=\\\"def.__uuid\\\"\\r\\n            :consumer-root-def=\\\"def\\\"\\r\\n            @consumer-root-mounted=\\\"mountConsumerRoot\\\"\\r\\n            @consumer-root-unmount-requested=\\\"unmountConsumerRootByUuid\\\"\\r\\n            @root-shutdown-requested=\\\"rootShutdown\\\"\\r\\n          />\\r\\n        </transition-group>\\r\\n        <bbv-css-manager :consumer-root-defs=\\\"consumerRootDefs\\\" />\\r\\n        <bbv-win-manager />\\r\\n        <bbv-app-tray />\\r\\n      </main>\\r\\n    </transition>\\r\\n  `,\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n    return {\\r\\n      depsLoaded: false,\\r\\n      hasSeenCrms: false,\\r\\n      rootShutdownTimeoutFn: null,\\r\\n      internals: {\\r\\n        bus: bus,\\r\\n        send: bus.emit,\\r\\n        listen: bus.on,\\r\\n        store: {\\r\\n          consumerRootDefs: [],\\r\\n          consumerRootMounts: [],\\r\\n          winMounts: [],\\r\\n        },\\r\\n        winManager: null,\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.loadDeps()\\r\\n  },\\r\\n  provide() {\\r\\n    return this.$data\\r\\n  },\\r\\n  computed: {\\r\\n    isReady() {\\r\\n      return this.internals.winManager\\r\\n    },\\r\\n    consumerRootDefs() {\\r\\n      return this.isReady ? this.allCrds : []\\r\\n    },\\r\\n    allCrds() {\\r\\n      return this.internals.store.consumerRootDefs\\r\\n    },\\r\\n    allCrms() {\\r\\n      return this.internals.store.consumerRootMounts\\r\\n    },\\r\\n  },\\r\\n  watch: {\\r\\n    /**\\r\\n     * Watch for CRMs. When seen some, notify AppRoot that some have\\r\\n     * been added. Wait for them to go away. Once they are gone, do a self\\r\\n     * cleanup after `rootShutdownTimeout` ms. Shutdown timeout can be\\r\\n     * cancelled by new CRM additions.\\r\\n     */\\r\\n    'internals.store.consumerRootMounts': {\\r\\n      handler(newVal) {\\r\\n        // Ensure AppRoot knows CRMs have been seen added at some point\\r\\n        if (this.hasSeenCrms !== true && newVal?.length >= 1) {\\r\\n          this.hasSeenCrms = true\\r\\n        }\\r\\n\\r\\n        // If a CRM is removed, if it was the last, and if AppRoot has seen CRMs before\\r\\n        if (this.hasSeenCrms === true && newVal?.length === 0) {\\r\\n          if (this.rootShutdownTimeoutFn === null) {\\r\\n            // Create a shutdown timeout func to end the entire RootApp\\r\\n            this.rootShutdownTimeoutFn = setTimeout(() => {\\r\\n              console.debug('bb-vue: AppRoot cannot find any CRMs and is shutting down')\\r\\n              this.rootShutdown()\\r\\n            }, rootShutdownTimeout)\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Clear an ongoing shutdown timeout if a new CRM is added\\r\\n        if (newVal?.length >= 1 && this.rootShutdownTimeoutFn !== null) {\\r\\n          clearTimeout(this.rootShutdownTimeoutFn)\\r\\n          this.rootShutdownTimeoutFn = null\\r\\n        }\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  methods: {\\r\\n    async loadDeps() {\\r\\n      // console.time('AppRoot:loadDeps')\\r\\n      if (!win[Keys.vueUseModuleKey]) {\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/shared@7.5.3/index.iife.min.js')\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/core@7.5.3/index.iife.min.js')\\r\\n      }\\r\\n      this.depsLoaded = true\\r\\n      // console.timeEnd('AppRoot:loadDeps')\\r\\n    },\\r\\n    addConsumerRootDef(consumerRootDef) {\\r\\n      const { markRaw } = Vue()\\r\\n      let rawConsumerRootDef = markRaw(consumerRootDef)\\r\\n      this.internals.store.consumerRootDefs = [\\r\\n        ...this.allCrds.filter((x) => {\\r\\n          return x.__uuid !== rawConsumerRootDef.__uuid\\r\\n        }),\\r\\n        rawConsumerRootDef,\\r\\n      ]\\r\\n\\r\\n      return () => this.findConsumerRootMount(rawConsumerRootDef.__uuid)\\r\\n    },\\r\\n    mountConsumerRoot(consumerRootMount) {\\r\\n      this.internals.store.consumerRootMounts = [\\r\\n        ...this.allCrms.filter((x) => {\\r\\n          return x.$options.__uuid !== consumerRootMount.$options.__uuid\\r\\n        }),\\r\\n        consumerRootMount,\\r\\n      ]\\r\\n    },\\r\\n    async unmountConsumerRootByUuid(crmUuid) {\\r\\n      await this.internals.winManager.closeAllWinsByCrmUuid(crmUuid)\\r\\n      this.internals.store.consumerRootMounts = this.allCrms.filter((x) => {\\r\\n        return x.$options.__uuid !== crmUuid\\r\\n      })\\r\\n      this.internals.store.consumerRootDefs = this.allCrds.filter((x) => {\\r\\n        return x.__uuid !== crmUuid\\r\\n      })\\r\\n    },\\r\\n    findConsumerRootMount(rootMountName) {\\r\\n      return (\\r\\n        this.allCrms.find((x) => {\\r\\n          return rootMountName == x.$options.__uuid\\r\\n        }) ?? null\\r\\n      )\\r\\n    },\\r\\n    async rootShutdown() {\\r\\n      for (const x of this.allCrms) {\\r\\n        await this.unmountConsumerRootByUuid(x.$options.__uuid)\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        RootApp.cleanup()\\r\\n      }, 50)\\r\\n    },\\r\\n  },\\r\\n  ...AppRootStyles,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const asciichart = function (exports) {\\r\\n  exports.black = '\\\\x1b[30m'\\r\\n  exports.red = '\\\\x1b[31m'\\r\\n  exports.green = '\\\\x1b[32m'\\r\\n  exports.yellow = '\\\\x1b[33m'\\r\\n  exports.blue = '\\\\x1b[34m'\\r\\n  exports.magenta = '\\\\x1b[35m'\\r\\n  exports.cyan = '\\\\x1b[36m'\\r\\n  exports.lightgray = '\\\\x1b[37m'\\r\\n  exports.default = '\\\\x1b[39m'\\r\\n  exports.darkgray = '\\\\x1b[90m'\\r\\n  exports.lightred = '\\\\x1b[91m'\\r\\n  exports.lightgreen = '\\\\x1b[92m'\\r\\n  exports.lightyellow = '\\\\x1b[93m'\\r\\n  exports.lightblue = '\\\\x1b[94m'\\r\\n  exports.lightmagenta = '\\\\x1b[95m'\\r\\n  exports.lightcyan = '\\\\x1b[96m'\\r\\n  exports.white = '\\\\x1b[97m'\\r\\n  exports.reset = '\\\\x1b[0m'\\r\\n\\r\\n  function colored(char, color) {\\r\\n    // do not color it if color is not specified\\r\\n    return color === undefined ? char : color + char + exports.reset\\r\\n  }\\r\\n\\r\\n  exports.colored = colored\\r\\n\\r\\n  exports.plot = function (series, cfg = undefined) {\\r\\n    // this function takes both one array and array of arrays\\r\\n    // if an array of numbers is passed it is transformed to\\r\\n    // an array of exactly one array with numbers\\r\\n    if (typeof series[0] == 'number') {\\r\\n      series = [series]\\r\\n    }\\r\\n\\r\\n    cfg = typeof cfg !== 'undefined' ? cfg : {}\\r\\n\\r\\n    let min = typeof cfg.min !== 'undefined' ? cfg.min : series[0][0]\\r\\n    let max = typeof cfg.max !== 'undefined' ? cfg.max : series[0][0]\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      for (let i = 0; i < series[j].length; i++) {\\r\\n        min = Math.min(min, series[j][i])\\r\\n        max = Math.max(max, series[j][i])\\r\\n      }\\r\\n    }\\r\\n\\r\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\r\\n    let range = Math.abs(max - min)\\r\\n    let offset = typeof cfg.offset !== 'undefined' ? cfg.offset : 3\\r\\n    let padding = typeof cfg.padding !== 'undefined' ? cfg.padding : '           '\\r\\n    let height = typeof cfg.height !== 'undefined' ? cfg.height : range\\r\\n    let colors = typeof cfg.colors !== 'undefined' ? cfg.colors : []\\r\\n    let ratio = range !== 0 ? height / range : 1\\r\\n    let min2 = Math.round(min * ratio)\\r\\n    let max2 = Math.round(max * ratio)\\r\\n    let rows = Math.abs(max2 - min2)\\r\\n    let width = 0\\r\\n    for (let i = 0; i < series.length; i++) {\\r\\n      width = Math.max(width, series[i].length)\\r\\n    }\\r\\n    width = width + offset\\r\\n    let symbols = typeof cfg.symbols !== 'undefined' ? cfg.symbols : defaultSymbols\\r\\n    let format =\\r\\n      typeof cfg.format !== 'undefined'\\r\\n        ? cfg.format\\r\\n        : function (x) {\\r\\n            return (padding + x.toFixed(2)).slice(-padding.length)\\r\\n          }\\r\\n\\r\\n    let result = new Array(rows + 1) // empty space\\r\\n    for (let i = 0; i <= rows; i++) {\\r\\n      result[i] = new Array(width)\\r\\n      for (let j = 0; j < width; j++) {\\r\\n        result[i][j] = ' '\\r\\n      }\\r\\n    }\\r\\n    for (let y = min2; y <= max2; ++y) {\\r\\n      // axis + labels\\r\\n      let label = format(rows > 0 ? max - ((y - min2) * range) / rows : y, y - min2)\\r\\n      result[y - min2][Math.max(offset - label.length, 0)] = label\\r\\n      result[y - min2][offset - 1] = y == 0 ? symbols[0] : symbols[1]\\r\\n    }\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      let currentColor = colors[j % colors.length]\\r\\n      let y0 = Math.round(series[j][0] * ratio) - min2\\r\\n      result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\r\\n\\r\\n      for (let x = 0; x < series[j].length - 1; x++) {\\r\\n        // plot the line\\r\\n        let y0 = Math.round(series[j][x + 0] * ratio) - min2\\r\\n        let y1 = Math.round(series[j][x + 1] * ratio) - min2\\r\\n        if (y0 == y1) {\\r\\n          result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\r\\n        } else {\\r\\n          result[rows - y1][x + offset] = colored(y0 > y1 ? symbols[5] : symbols[6], currentColor)\\r\\n          result[rows - y0][x + offset] = colored(y0 > y1 ? symbols[7] : symbols[8], currentColor)\\r\\n          let from = Math.min(y0, y1)\\r\\n          let to = Math.max(y0, y1)\\r\\n          for (let y = from + 1; y < to; y++) {\\r\\n            result[rows - y][x + offset] = colored(symbols[9], currentColor)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return result\\r\\n      .map(function (x) {\\r\\n        return x.join('')\\r\\n      })\\r\\n      .join('\\\\n')\\r\\n  }\\r\\n}\\r\\n\\r\\nglobalThis.asciichart = {}\\r\\nasciichart(globalThis.asciichart)\\r\\n\\r\\nexport default globalThis.asciichart\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray-group',\\r\\n  props: ['appTitle', 'trayTeleport'],\\r\\n  template: html`\\r\\n    <transition name=\\\"appTrayGroupFadeUp\\\" appear>\\r\\n      <div\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n        :class=\\\"{ trayTeleport: trayTeleport !== undefined }\\\"\\r\\n        :id=\\\"trayTeleport !== undefined ? 'app-tray' : undefined\\\"\\r\\n        :title=\\\"appTitle\\\"\\r\\n      >\\r\\n        <template v-if=\\\"appTitle\\\">\\r\\n          <div class=\\\"app_title\\\">{{ appTitle }}</div>\\r\\n        </template>\\r\\n        <slot />\\r\\n      </div>\\r\\n    </transition>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      display: flex;\\r\\n      padding: 5px;\\r\\n      background-color: var(--bbvWinTitlebarBgColor);\\r\\n      transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      position: relative;\\r\\n\\r\\n      &.trayTeleport {\\r\\n        background-color: transparent;\\r\\n        padding: 5px 0;\\r\\n\\r\\n        .bbv-button {\\r\\n          padding-bottom: 3px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.trayTeleport:empty {\\r\\n        clip-path: inset(0 100%);\\r\\n      }\\r\\n\\r\\n      &:hover {\\r\\n        .app_title {\\r\\n          opacity: 1;\\r\\n          transform: translateY(0) scale(1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &:not(:first-child) {\\r\\n        margin-left: 12px;\\r\\n      }\\r\\n\\r\\n      .app_title {\\r\\n        position: absolute;\\r\\n        bottom: calc(100% + 6px);\\r\\n        padding: 6px 12px;\\r\\n        font-size: 14px;\\r\\n        text-align: center;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        z-index: -1;\\r\\n        left: 5px;\\r\\n        transform: translateY(30px) scale(0.2);\\r\\n        transform-origin: bottom left;\\r\\n        border-radius: 2px;\\r\\n        box-shadow: 0px 0px 3px 0px var(--bbvBoxShadowColor2);\\r\\n        color: var(--bbvAppInnerFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\\r\\n      }\\r\\n\\r\\n      .bbv-button {\\r\\n        color: var(--bbvAppTrayFgColor);\\r\\n        padding: 6px 7px;\\r\\n        overflow: hidden;\\r\\n        white-space: nowrap;\\r\\n        border-bottom: 2px solid transparent;\\r\\n        transition: border-color 0.2s ease;\\r\\n        line-height: 1;\\r\\n\\r\\n        &.isOpen {\\r\\n          border-bottom-color: var(--bbvAppTrayFgColor);\\r\\n          background-color: var(--bbvButtonHoverBgColor);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .bbv-button + .bbv-button {\\r\\n        margin-left: 8px;\\r\\n      }\\r\\n\\r\\n      &.appTrayGroupFadeUp-enter-from,\\r\\n      &.appTrayGroupFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(75px);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\r\\n// prettier-ignore\\r\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\r\\n  try {\\r\\n    ns.disableLog('disableLog');\\r\\n    ns.disableLog('asleep');\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\r\\n      rootComponent: ChartContainerwallstreet,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n\\r\\n\\r\\n  // Listen for specific event\\r\\n  let autoTrader = false\\r\\n  let enableAutoTrader = false\\r\\n  let wantsShutdown = false\\r\\n  let buyMaxLongShares = false\\r\\n  let closeLongPosition = false\\r\\n  let closeShortPosition = false\\r\\n  let buyMaxShortShares = false\\r\\n  let sellAllShares = false\\r\\n  let quickStrangle = false\\r\\n  let longHedge = false\\r\\n  let shortHedge = false\\r\\n  let splitPlay = false\\r\\n  let stockCrawler = false\\r\\n\\r\\n  //Ticker Chart Storage\\r\\n  let loadECP = false\\r\\n  let loadMGCP = false\\r\\n  let loadBLD = false\\r\\n  let loadCLRK = false\\r\\n  let loadOMTK = false\\r\\n  let loadFSIG = false\\r\\n  let loadKGI = false\\r\\n  let loadFLCM = false\\r\\n  let loadSTM = false\\r\\n  let loadDCOMM = false\\r\\n  let loadHLS = false\\r\\n  let loadVITA = false\\r\\n  let loadICRS = false\\r\\n  let loadUNV = false\\r\\n  let loadAERO = false\\r\\n  let loadOMN = false\\r\\n  let loadSLRS = false\\r\\n  let loadGPH = false\\r\\n  let loadNVMD = false\\r\\n  let loadWDS = false\\r\\n  let loadLXO = false\\r\\n  let loadRHOC = false\\r\\n  let loadAPHE = false\\r\\n  let loadSYSC = false\\r\\n  let loadCTK = false\\r\\n  let loadNTLK = false\\r\\n  let loadOMGA = false\\r\\n  let loadFNS = false\\r\\n  let loadJGN = false\\r\\n  let loadSGC = false\\r\\n  let loadCTYS = false\\r\\n  let loadMDYN = false\\r\\n  let loadTITN = false\\r\\n  //End of Ticker Chart Storage\\r\\n\\r\\n  let bus = Mitt().createBus()\\r\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\r\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\r\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\r\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\r\\n  bus.on('closeLong', () => (closeLongPosition = true))\\r\\n  bus.on('closeShort', () => (closeShortPosition = true))\\r\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\r\\n  bus.on('quickPlay', () => (quickStrangle = true))\\r\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\r\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\r\\n  bus.on('quickSplitPlay', () => (splitPlay = true))\\r\\n  bus.on('stockCrawler', () => (stockCrawler = true))\\r\\n\\r\\n  //Ticker Chart Bus Triggers\\r\\n  bus.on('loadECP', () => (loadECP = true))\\r\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\r\\n  bus.on('loadBLD', () => (loadBLD = true))\\r\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\r\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\r\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\r\\n  bus.on('loadKGI', () => (loadKGI = true))\\r\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\r\\n  bus.on('loadSTM', () => (loadSTM = true))\\r\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\r\\n  bus.on('loadHLS', () => (loadHLS = true))\\r\\n  bus.on('loadVITA', () => (loadVITA = true))\\r\\n  bus.on('loadICRS', () => (loadICRS = true))\\r\\n  bus.on('loadUNV', () => (loadUNV = true))\\r\\n  bus.on('loadAERO', () => (loadAERO = true))\\r\\n  bus.on('loadOMN', () => (loadOMN = true))\\r\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\r\\n  bus.on('loadGPH', () => (loadGPH = true))\\r\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\r\\n  bus.on('loadWDS', () => (loadWDS = true))\\r\\n  bus.on('loadLXO', () => (loadLXO = true))\\r\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\r\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\r\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\r\\n  bus.on('loadCTK', () => (loadCTK = true))\\r\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\r\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\r\\n  bus.on('loadFNS', () => (loadFNS = true))\\r\\n  bus.on('loadJGN', () => (loadJGN = true))\\r\\n  bus.on('loadSGC', () => (loadSGC = true))\\r\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\r\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\r\\n  bus.on('loadTITN', () => (loadTITN = true))\\r\\n  //End of Ticker Chart Bus Triggers\\r\\n  setGlobal('tickerBus', bus)\\r\\n\\r\\n  // Instead of closing, let's keep this running\\r\\n\\r\\n  while (wantsShutdown == false) {\\r\\n\\r\\n    //init chart loading triggers\\r\\n    if (loadECP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ECP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadECP = false;\\r\\n    }\\r\\n    if (loadMGCP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MGCP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMGCP = false;\\r\\n    }\\r\\n    if (loadBLD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"BLD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadBLD = false;\\r\\n    }\\r\\n    if (loadCLRK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CLRK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCLRK = false;\\r\\n    }\\r\\n    if (loadOMTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMTK = false;\\r\\n    }\\r\\n    if (loadFSIG == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FSIG\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFSIG = false;\\r\\n    }\\r\\n    if (loadKGI == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"KGI\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadKGI = false;\\r\\n    }\\r\\n    if (loadFLCM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FLCM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFLCM = false;\\r\\n    }\\r\\n    if (loadSTM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"STM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSTM = false;\\r\\n    }\\r\\n    if (loadDCOMM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"DCOMM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadDCOMM = false;\\r\\n    }\\r\\n    if (loadHLS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"HLS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadHLS = false;\\r\\n    }\\r\\n    if (loadVITA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"VITA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadVITA = false;\\r\\n    }\\r\\n    if (loadICRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ICRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadICRS = false;\\r\\n    }\\r\\n    if (loadUNV == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"UNV\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadUVN = false;\\r\\n    }\\r\\n    if (loadAERO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"AERO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAERO = false;\\r\\n    }\\r\\n    if (loadOMN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMN = false;\\r\\n    }\\r\\n    if (loadSLRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SLRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSLRS = false;\\r\\n    }\\r\\n    if (loadGPH == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"GPH\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadGPH = false;\\r\\n    }\\r\\n    if (loadNVMD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NVMD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNVMD = false;\\r\\n    }\\r\\n    if (loadWDS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"WDS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadWDS = false;\\r\\n    }\\r\\n    if (loadLXO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"LXO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadLXO = false;\\r\\n    }\\r\\n    if (loadRHOC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"RHOC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadRHOC = false;\\r\\n    }\\r\\n    if (loadAPHE == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"APHE\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAPHE = false;\\r\\n    }\\r\\n    if (loadSYSC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SYSC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSYSC = false;\\r\\n    }\\r\\n    if (loadCTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTK = false;\\r\\n    }\\r\\n    if (loadNTLK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NTLK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNTLK = false;\\r\\n    }\\r\\n    if (loadOMGA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMGA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMGA = false;\\r\\n    }\\r\\n    if (loadFNS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FNS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFNS = false;\\r\\n    }\\r\\n    if (loadJGN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"JGN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadJGN = false;\\r\\n    }\\r\\n    if (loadSGC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SGC\\\")\\r\\n\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSGC = false;\\r\\n    }\\r\\n    if (loadCTYS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTYS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTYS = false;\\r\\n    }\\r\\n    if (loadMDYN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MDYN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMDYN = false;\\r\\n    }\\r\\n    if (loadTITN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"TITN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadTITN = false;\\r\\n    }\\r\\n\\r\\n //Stock Crawler Module\\r\\n    if (stockCrawler == true) {\\r\\n      ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\r\\n      var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\r\\n        for (const target of market) {\\r\\n        var tvol = ns.stock.getVolatility(target);\\r\\n        var tfor = ns.stock.getForecast(target);\\r\\n          if (tvol > 0.01 && tfor > 0.6) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n          if (tvol > 0.01 && tfor < 0.4) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n        await ns.asleep(100);\\r\\n      stockCrawler = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //failsafe exit condition\\r\\n    if (wantsShutdown == true) {\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n    if(ns.peek(3) != \\\"NULL PORT DATA\\\") {\\r\\n    let loadedticker = ns.peek(3);\\r\\n    let position = ns.stock.getPosition(loadedticker);\\r\\n\\r\\n    if (buyMaxLongShares == true) {\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxLongShares = false;\\r\\n\\r\\n    }\\r\\n    if (buyMaxShortShares == true) {\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxShortShares = false;\\r\\n\\r\\n    }\\r\\n    if (sellAllShares == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED **ALL** POSITIONS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      sellAllShares = false;\\r\\n\\r\\n    }\\r\\n    if (closeLongPosition == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeLongPosition = false;\\r\\n\\r\\n    }\\r\\n    if (closeShortPosition == true) {\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeShortPosition = false;\\r\\n\\r\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] > '1' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] > '1' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxLongShares = true;\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxShortShares = true;\\r\\n\\r\\n\\r\\n      //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxLongShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getAskPrice(loadedticker) * 1.05), \\\"LimitSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getBidPrice(loadedticker) * 0.90), \\\"StopSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxShortShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getAskPrice(loadedticker) * 0.95), \\\"LimitSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getBidPrice(loadedticker) * 1.10), \\\"StopSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (longHedge == true && position[0] == 0) {\\r\\n      ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      longHedge = false;\\r\\n\\r\\n    }\\r\\n    if (shortHedge == true && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      shortHedge = false;\\r\\n\\r\\n    }\\r\\n    if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      splitPlay = false;\\r\\n\\r\\n    }\\r\\n\\r\\n    //Auto-Trader button configuration.  Don't touch.\\r\\n\\r\\n    if (enableAutoTrader == true) {\\r\\n      let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\r\\n\\r\\n      if (autoTradeConfirm == true) {\\r\\n        ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = true;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n      if (autoTradeConfirm == false) {\\r\\n        ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = false;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n    }\\r\\n\\r\\n    await ns.asleep(500)\\r\\n\\r\\n  \\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\r\\nconst ChartContainerwallstreet = {\\r\\n  name: 'svg-chart-wallstreet',\\r\\n  inject: ['appShutdown',],\\r\\n  template: html`\\r\\n    <bbv-win\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      title=\\\"WSE Active Trader\\\"\\r\\n      no-pad\\r\\n      start-height=\\\"691px\\\"\\r\\n      start-width=\\\"539px\\\"\\r\\n    >\\r\\n \\r\\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\r\\n      <div>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      </div>\\r\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\r\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\r\\n      <div>\\r\\n      <button @click=\\\"quickStrangle\\\">QUICK STRANGLE</button>\\r\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\r\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\r\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      <details align=\\\"right\\\"><summary>EXTRA TOOLS</summary>\\r\\n      <div>\\r\\n      <button align=\\\"right\\\" @click=\\\"stockCrawler\\\">STOCK CRAWLER</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"\\\">SCALPER[SOON!]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"enableAutoTrade\\\">Enable/Disable Auto-Trader (BETA)</button>\\r\\n      </div>\\r\\n      </details>\\r\\n\\r\\n      <template #actions>\\r\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    shutdownAll() {\\r\\n      getGlobal('tickerBus').emit('wantsShutdown')\\r\\n      this.appShutdown()\\r\\n    },\\r\\n    buyMaxLong() {\\r\\n      getGlobal('tickerBus').emit('buyMaxLong')\\r\\n    },\\r\\n    buyMaxShort() {\\r\\n      getGlobal('tickerBus').emit('buyMaxShort')\\r\\n    },\\r\\n    closeAllPositions() {\\r\\n      getGlobal('tickerBus').emit('closeAllPositions')\\r\\n    },\\r\\n    sellMaxLong() {\\r\\n      getGlobal('tickerBus').emit('closeLong')\\r\\n    },\\r\\n    sellMaxShort() {\\r\\n      getGlobal('tickerBus').emit('closeShort')\\r\\n    },\\r\\n    enableAutoTrade() {\\r\\n      getGlobal('tickerBus').emit('autoTrade')\\r\\n    },\\r\\n    quickStrangle() {\\r\\n      getGlobal('tickerBus').emit('quickPlay')\\r\\n    },\\r\\n    quickSplit() {\\r\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\r\\n    },\\r\\n    longHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\r\\n    },\\r\\n    shortHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\r\\n    },\\r\\n    stockCrawler() {\\r\\n      getGlobal('tickerBus').emit('stockCrawler')\\r\\n    },\\r\\n    loadECP() {\\r\\n      getGlobal('tickerBus').emit('loadECP')\\r\\n    },\\r\\n    loadMGCP() {\\r\\n      getGlobal('tickerBus').emit('loadMGCP')\\r\\n    },\\r\\n    loadBLD() {\\r\\n      getGlobal('tickerBus').emit('loadBLD')\\r\\n    },\\r\\n    loadCLRK() {\\r\\n      getGlobal('tickerBus').emit('loadCLRK')\\r\\n    },\\r\\n    loadOMTK() {\\r\\n      getGlobal('tickerBus').emit('loadOMTK')\\r\\n    },\\r\\n    loadFSIG() {\\r\\n      getGlobal('tickerBus').emit('loadFSIG')\\r\\n    },\\r\\n    loadKGI() {\\r\\n      getGlobal('tickerBus').emit('loadKGI')\\r\\n    },\\r\\n    loadFLCM() {\\r\\n      getGlobal('tickerBus').emit('loadFLCM')\\r\\n    },\\r\\n    loadSTM() {\\r\\n      getGlobal('tickerBus').emit('loadSTM')\\r\\n    },\\r\\n    loadDCOMM() {\\r\\n      getGlobal('tickerBus').emit('loadDCOMM')\\r\\n    },\\r\\n    loadHLS() {\\r\\n      getGlobal('tickerBus').emit('loadHLS')\\r\\n    },\\r\\n    loadVITA() {\\r\\n      getGlobal('tickerBus').emit('loadVITA')\\r\\n    },\\r\\n    loadICRS() {\\r\\n      getGlobal('tickerBus').emit('loadICRS')\\r\\n    },\\r\\n    loadUNV() {\\r\\n      getGlobal('tickerBus').emit('loadUNV')\\r\\n    },\\r\\n    loadAERO() {\\r\\n      getGlobal('tickerBus').emit('loadAERO')\\r\\n    },\\r\\n    loadOMN() {\\r\\n      getGlobal('tickerBus').emit('loadOMN')\\r\\n    },\\r\\n    loadSLRS() {\\r\\n      getGlobal('tickerBus').emit('loadSLRS')\\r\\n    },\\r\\n    loadGPH() {\\r\\n      getGlobal('tickerBus').emit('loadGPH')\\r\\n    },\\r\\n    loadNVMD() {\\r\\n      getGlobal('tickerBus').emit('loadNVMD')\\r\\n    },\\r\\n    loadWDS() {\\r\\n      getGlobal('tickerBus').emit('loadWDS')\\r\\n    },\\r\\n    loadLXO() {\\r\\n      getGlobal('tickerBus').emit('loadLXO')\\r\\n    },\\r\\n    loadRHOC() {\\r\\n      getGlobal('tickerBus').emit('loadRHOC')\\r\\n    },\\r\\n    loadAPHE() {\\r\\n      getGlobal('tickerBus').emit('loadAPHE')\\r\\n    },\\r\\n    loadSYSC() {\\r\\n      getGlobal('tickerBus').emit('loadSYSC')\\r\\n    },\\r\\n    loadCTK() {\\r\\n      getGlobal('tickerBus').emit('loadCTK')\\r\\n    },\\r\\n    loadNTLK() {\\r\\n      getGlobal('tickerBus').emit('loadNTLK')\\r\\n    },\\r\\n    loadOMGA() {\\r\\n      getGlobal('tickerBus').emit('loadOMGA')\\r\\n    },\\r\\n    loadFNS() {\\r\\n      getGlobal('tickerBus').emit('loadFNS')\\r\\n    },\\r\\n    loadJGN() {\\r\\n      getGlobal('tickerBus').emit('loadJGN')\\r\\n    },\\r\\n    loadSGC() {\\r\\n      getGlobal('tickerBus').emit('loadSGC')\\r\\n    },\\r\\n    loadCTYS() {\\r\\n      getGlobal('tickerBus').emit('loadCTYS')\\r\\n    },\\r\\n    loadMDYN() {\\r\\n      getGlobal('tickerBus').emit('loadMDYN')\\r\\n    },\\r\\n    loadTITN() {\\r\\n      getGlobal('tickerBus').emit('loadTITN')\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f4269089-7211-47e8-ba07-f8285ea9480b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6733ba12-d754-409d-878d-ceec4b642bac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///289452bc-634c-4419-a7cf-163daca3a2e2\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///10042b83-0ac0-4fd7-a472-f53bc7dafd8f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///5fa1b1d9-6b3c-4718-af8f-26eaa00abfab\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///44734d10-322a-4289-973e-43ba496c9db8\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///cf042072-d883-4823-a2c6-5b524db3e53a\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c80cc2b7-32ed-4aef-a186-08d95e818549\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///50fa5a9c-48ad-461c-8a0b-8cfb553fd653\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b46e31bd-8210-4a52-9550-0f36be97d739\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///56440446-b477-4bef-b2a5-955fd8bc842a\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0e279641-5ef9-4b48-a081-e1b9bbd6911b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///db83ee49-da6f-44aa-a929-3b8c3c1b8076\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///b4fb9037-c476-403f-ad9b-3b8598d398dc\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///64a90fe5-9cef-404f-9bba-a5b69a1f1a8c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///bfbf10dc-d484-4f5b-8c8b-ac80fe6ef95d\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6200498f-f3a8-4c7a-9632-82e07f036e9d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///21bf6c5f-2a34-43c9-af61-7e37220cfe35\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a4b88b0d-0975-492e-a0d9-42fcb117f697\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///4436db7e-d51d-43eb-8a41-e48f7bdcfe61\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///f0eab529-e0b5-41d1-b025-2b7e88a5c8d1\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///0b68f26e-5fd3-411a-9812-a5fa10499077\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///984109b7-8cc0-45f1-a1a5-2fd3240e2395\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4a736528-e78e-4b72-9d0e-7b23c45a7a8d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///dc5f4bc0-30d6-4b8b-8c49-cc41ee8675fc\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///52507d58-557f-4030-b42d-3c01e49a9192\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///5c1f2a73-9b46-426c-92f8-71cd1ca6919f\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///47f6f722-cc73-429f-91ab-0d158f361b20\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///9376e750-eee0-4096-a409-bf8d248bb4f8\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5b3187bb-7a80-472a-ab68-820d65fd0873\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///f7a53e7c-901c-4de0-8172-ba61c60d3b51\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///d6918535-2f00-4742-b5d6-829303958de7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///2fac9b10-c97b-4b7e-bd34-af8f4cb5c5ff\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7de4b446-11e2-48e9-84f4-b1322589cabb\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///3aeb882e-3e77-4c0f-991d-ea71a633cf1f\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1cb626f5-399d-4f2d-8ccc-e40ba5bb28a3\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///0325437a-8332-449d-b1d9-37d7dd8bca2a\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///893ebdf0-9491-4c82-bd55-af10baad4334\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///ea1d25ca-b19e-42bc-ab91-d9d32ed7a563\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4921abec-2570-43b3-a848-0fbe86dd5f91\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///54b4c6cd-8cec-471b-af63-eca8eb9acd99\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///639527e6-975a-4841-baa8-85de6fc78988\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///46d78add-0cd0-48d3-b980-a1a099706747\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///70731fa8-77b3-4a94-a6f8-d99c204152e0\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"blob:file:///390408d1-5a95-4d89-9687-6ab3c9591448\",\"moduleSequenceNumber\":22737}],\"dependents\":[],\"ramUsage\":31.35,\"server\":\"home\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n  var ticker = ns.args[0];\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 300\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 10\\r\\n\\r\\n  const textSize = 2.5\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 80\\r\\n  const conHeight = 60\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n  await ns.clearPort(1)\\r\\n  await ns.clearPort(2)\\r\\n  await ns.writePort(3, ticker)\\r\\n\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n //Give the chart time to load.\\r\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n  \\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('LOADING VOLATILITY...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    var ticker = ns.args[0];\\r\\n    var position = ns.stock.getPosition(ticker)\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n        await ns.clearPort(1);\\r\\n        await ns.clearPort(2);\\r\\n        \\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n      await ns.clearPort(1)\\r\\n      await ns.clearPort(2)\\r\\n      await ns.writePort(1, (Math.max(...moneyList)))\\r\\n      await ns.writePort(2, (Math.min(...moneyList)))\\r\\n      await ns.writePort(3, ticker)\\r\\n        var fiveminavg = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.asleep(5000);\\r\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n\\r\\n        }\\r\\n        \\r\\n        topText.innerHTML = 'FORECAST: ' + Math.floor((ns.stock.getForecast(ns.sprintf(ticker))*100)) + '%' + ' || 5MIN HIGH: ' + ns.nFormat(ns.peek(1), '$0.00a') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+fiveminavg+' AVG)'\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'VOL: ' + ns.nFormat(ns.stock.getVolatility(ns.sprintf(ticker)), '0.00%') + ' || 5MIN LOW: ' + ns.nFormat(ns.peek(2), '$0.00a') + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n        \\r\\n      }\\r\\n\\r\\n\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n    await ns.clearPort(1);\\r\\n    await ns.clearPort(2);\\r\\n\\r\\n    if (ns.isRunning(\\\"wallstreet.js\\\", \\\"home\\\") == false) {\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.0'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n  \\r\\n}\\r\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\n// prettier-ignore\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\n\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\nexport async function main(ns) {\\n\\n\\n  try {\\n    ns.disableLog('disableLog');\\n    ns.disableLog('asleep');\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    await new AppFactory(ns).mount({\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\n      rootComponent: ChartContainerwallstreet,\\n    })\\n  } catch (error) {\\n    console.error(error)\\n    ns.tprint(error.toString())\\n    ns.exit()\\n  }\\n\\n\\n\\n  // Listen for specific event\\n  let autoTrader = false\\n  let enableAutoTrader = false\\n  let wantsShutdown = false\\n  let buyMaxLongShares = false\\n  let closeLongPosition = false\\n  let closeShortPosition = false\\n  let buyMaxShortShares = false\\n  let sellAllShares = false\\n  //let quickStrangle = false\\n  let longHedge = false\\n  let shortHedge = false\\n  let splitPlay = false\\n  //let stockCrawler = false\\n  let shortStrangle = false\\n  let longStrangle = false\\n\\n  //Ticker Chart Storage\\n  let loadECP = false\\n  let loadMGCP = false\\n  let loadBLD = false\\n  let loadCLRK = false\\n  let loadOMTK = false\\n  let loadFSIG = false\\n  let loadKGI = false\\n  let loadFLCM = false\\n  let loadSTM = false\\n  let loadDCOMM = false\\n  let loadHLS = false\\n  let loadVITA = false\\n  let loadICRS = false\\n  let loadUNV = false\\n  let loadAERO = false\\n  let loadOMN = false\\n  let loadSLRS = false\\n  let loadGPH = false\\n  let loadNVMD = false\\n  let loadWDS = false\\n  let loadLXO = false\\n  let loadRHOC = false\\n  let loadAPHE = false\\n  let loadSYSC = false\\n  let loadCTK = false\\n  let loadNTLK = false\\n  let loadOMGA = false\\n  let loadFNS = false\\n  let loadJGN = false\\n  let loadSGC = false\\n  let loadCTYS = false\\n  let loadMDYN = false\\n  let loadTITN = false\\n  //End of Ticker Chart Storage\\n\\n  let bus = Mitt().createBus()\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\n  bus.on('closeLong', () => (closeLongPosition = true))\\n  bus.on('closeShort', () => (closeShortPosition = true))\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\n  //bus.on('quickPlay', () => (quickStrangle = true))\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\n  //bus.on('quickSplitPlay', () => (splitPlay = true))\\n  //bus.on('stockCrawler', () => (stockCrawler = true))\\n  bus.on('longStrangle', () => (longStrangle = true))\\n  bus.on('shortStrangle', () => (shortStrangle = true))\\n\\n  //Ticker Chart Bus Triggers\\n  bus.on('loadECP', () => (loadECP = true))\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\n  bus.on('loadBLD', () => (loadBLD = true))\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\n  bus.on('loadKGI', () => (loadKGI = true))\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\n  bus.on('loadSTM', () => (loadSTM = true))\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\n  bus.on('loadHLS', () => (loadHLS = true))\\n  bus.on('loadVITA', () => (loadVITA = true))\\n  bus.on('loadICRS', () => (loadICRS = true))\\n  bus.on('loadUNV', () => (loadUNV = true))\\n  bus.on('loadAERO', () => (loadAERO = true))\\n  bus.on('loadOMN', () => (loadOMN = true))\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\n  bus.on('loadGPH', () => (loadGPH = true))\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\n  bus.on('loadWDS', () => (loadWDS = true))\\n  bus.on('loadLXO', () => (loadLXO = true))\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\n  bus.on('loadCTK', () => (loadCTK = true))\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\n  bus.on('loadFNS', () => (loadFNS = true))\\n  bus.on('loadJGN', () => (loadJGN = true))\\n  bus.on('loadSGC', () => (loadSGC = true))\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\n  bus.on('loadTITN', () => (loadTITN = true))\\n  //End of Ticker Chart Bus Triggers\\n  setGlobal('tickerBus', bus)\\n\\n  // Instead of closing, let's keep this running\\n\\n  while (wantsShutdown == false) {\\n\\n    //init chart loading triggers\\n    if (loadECP == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"ECP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadECP = false;\\n    }\\n    if (loadMGCP == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"MGCP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMGCP = false;\\n    }\\n    if (loadBLD == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"BLD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadBLD = false;\\n    }\\n    if (loadCLRK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CLRK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCLRK = false;\\n    }\\n    if (loadOMTK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMTK = false;\\n    }\\n    if (loadFSIG == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FSIG\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFSIG = false;\\n    }\\n    if (loadKGI == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"KGI\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadKGI = false;\\n    }\\n    if (loadFLCM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FLCM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFLCM = false;\\n    }\\n    if (loadSTM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"STM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSTM = false;\\n    }\\n    if (loadDCOMM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"DCOMM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadDCOMM = false;\\n    }\\n    if (loadHLS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"HLS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadHLS = false;\\n    }\\n    if (loadVITA == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"VITA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadVITA = false;\\n    }\\n    if (loadICRS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"ICRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadICRS = false;\\n    }\\n    if (loadUNV == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"UNV\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadUVN = false;\\n    }\\n    if (loadAERO == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"AERO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAERO = false;\\n    }\\n    if (loadOMN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMN = false;\\n    }\\n    if (loadSLRS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SLRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSLRS = false;\\n    }\\n    if (loadGPH == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"GPH\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadGPH = false;\\n    }\\n    if (loadNVMD == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"NVMD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNVMD = false;\\n    }\\n    if (loadWDS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"WDS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadWDS = false;\\n    }\\n    if (loadLXO == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"LXO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadLXO = false;\\n    }\\n    if (loadRHOC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"RHOC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadRHOC = false;\\n    }\\n    if (loadAPHE == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"APHE\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAPHE = false;\\n    }\\n    if (loadSYSC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SYSC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSYSC = false;\\n    }\\n    if (loadCTK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTK = false;\\n    }\\n    if (loadNTLK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"NTLK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNTLK = false;\\n    }\\n    if (loadOMGA == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMGA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMGA = false;\\n    }\\n    if (loadFNS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FNS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFNS = false;\\n    }\\n    if (loadJGN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"JGN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadJGN = false;\\n    }\\n    if (loadSGC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SGC\\\")\\n\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSGC = false;\\n    }\\n    if (loadCTYS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CTYS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTYS = false;\\n    }\\n    if (loadMDYN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"MDYN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMDYN = false;\\n    }\\n    if (loadTITN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"TITN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadTITN = false;\\n    }\\n\\n    //Global Stock Price Test Module\\n    // var market = ns.stock.getSymbols()\\n    // var mValues = []\\n    //   for (const target of market) {\\n\\n    //     const timeframe = 300\\n    //     var mPrice = ns.stock.getAskPrice(target); \\n\\n    //     if (mValues.length == timeframe) {\\n    //       mValues.splice(0,1)\\n    //     }\\n\\n    //     mValues[mValues.length] = mPrice\\n\\n    //     var maxMarket = Math.max(...mValues)\\n    //     var minMarket = Math.min(...mValues)\\n    //     var mAvg = (maxMarket + minMarket) / 2\\n    //     var mDiff = mAvg - mPrice\\n    //     var trend = (mDiff / ns.stock.getAskPrice(target)) *0.1\\n\\n    //     if (mValues.length > 200 && trend > 75) {\\n    //       ns.print(target + \\\" - BULL TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n    //     if (mValues.length > 200 && trend < -75) {\\n    //       ns.print(target + \\\" - BEAR TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n\\n    //   await ns.asleep(2000);\\n    //   ns.print(target + ': ' + trend)\\n\\n    // }\\n\\n\\n\\n    //Stock Crawler Module\\n    // if (stockCrawler == true) {\\n    //   ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\n    //   var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\n    //     for (const target of market) {\\n    //     var tvol = ns.stock.getVolatility(target);\\n    //     var tfor = ns.stock.getForecast(target);\\n    //       if (tvol > 0.01 && tfor > 0.6) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //       if (tvol > 0.01 && tfor < 0.4) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //     await ns.asleep(100);\\n    //   stockCrawler = false;\\n    //   }\\n    // }\\n\\n\\n\\n    //failsafe exit condition\\n    if (wantsShutdown == true) {\\n      ns.exit();\\n    }\\n\\n    if (ns.peek(3) != \\\"NULL PORT DATA\\\") {\\n\\n      let loadedticker = ns.peek(3);\\n      var position = ns.stock.getPosition(loadedticker);\\n      var maxlongshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var maxshortshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var exposureLong = position[0] * position[1];\\n      var exposureShort = position[2] * position[3];\\n\\n      if (buyMaxLongShares == true) {\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxLongShares = false;\\n\\n      }\\n      if (buyMaxShortShares == true) {\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxShortShares = false;\\n\\n      }\\n      if (sellAllShares == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED **ALL** POSITIONS AND ORDERS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        sellAllShares = false;\\n\\n      }\\n      if (closeLongPosition == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeLongPosition = false;\\n\\n      }\\n      if (closeShortPosition == true) {\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeShortPosition = false;\\n      }\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\n\\n\\n      if (autoTrader == true && position[0] > '1' && ns.peek(4) < '0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sell(loadedticker, position[0]);\\n\\n      }\\n      if (autoTrader == true && position[2] > '1' && ns.peek(4) > '-0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n\\n\\n      }\\n      if (autoTrader == true && position[0] == '0' && ns.peek(4) > '5.0') {\\n        ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxLongShares = true;\\n\\n      }\\n      if (autoTrader == true && position[2] == '0' && ns.peek(4) < '-5.0') {\\n        ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxShortShares = true;\\n      }\\n\\n      //   //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\n\\n\\n      if (longStrangle == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getAskPrice(loadedticker) * 1.07), \\\"LimitSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getBidPrice(loadedticker) * 0.87), \\\"StopSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        longStrangle = false;\\n\\n      }\\n      if (shortStrangle == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getAskPrice(loadedticker) * 0.87), \\\"LimitSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getBidPrice(loadedticker) * 1.07), \\\"StopSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        shortStrangle = false;\\n\\n      }\\n      if (longHedge == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        longHedge = false;\\n\\n      }\\n      if (shortHedge == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        shortHedge = false;\\n\\n      }\\n      if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\n        ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        splitPlay = false;\\n\\n      }\\n\\n      //Auto-Trader button configuration.  Don't touch.\\n\\n      if (enableAutoTrader == true) {\\n        let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\n\\n        if (autoTradeConfirm == true) {\\n          ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\n          autoTrader = true;\\n          enableAutoTrader = false;\\n        }\\n        if (autoTradeConfirm == false) {\\n          ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\n          autoTrader = false;\\n          enableAutoTrader = false;\\n        }\\n      }\\n\\n    }\\n\\n    await ns.asleep(500)\\n    \\n  }\\n}\\n\\n\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\nconst ChartContainerwallstreet = {\\n  name: 'svg-chart-wallstreet',\\n  inject: ['appShutdown',],\\n  template: html`\\n    <bbv-win\\n      class=\\\"__CMP_NAME__\\\"\\n      title=\\\"WSE Active Trader\\\"\\n      no-pad\\n      start-height=\\\"770px\\\"\\n      start-width=\\\"619px\\\"\\n    >\\n \\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\n      <div>\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\n      </div>\\n      </details>\\n      </div>\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\n      <div>\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\n      <button @click=\\\"longStrangle\\\">LONG STRANGLE</button>\\n      <button @click=\\\"shortStrangle\\\">SHORT STRANGLE</button>\\n      </div>\\n      </details>\\n      <details align=\\\"right\\\"><summary>TOOLS</summary>\\n      <div>\\n      <button @click=\\\"enableAutoTrade\\\">AUTO TRADE</button>\\n      </div>\\n      </details>\\n\\n      <template #actions>\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\n      </template>\\n    </bbv-win>\\n  `,\\n\\n  data() {\\n    return {}\\n  },\\n\\n  methods: {\\n    shutdownAll() {\\n      getGlobal('tickerBus').emit('wantsShutdown')\\n      this.appShutdown()\\n    },\\n    buyMaxLong() {\\n      getGlobal('tickerBus').emit('buyMaxLong')\\n    },\\n    buyMaxShort() {\\n      getGlobal('tickerBus').emit('buyMaxShort')\\n    },\\n    closeAllPositions() {\\n      getGlobal('tickerBus').emit('closeAllPositions')\\n    },\\n    sellMaxLong() {\\n      getGlobal('tickerBus').emit('closeLong')\\n    },\\n    sellMaxShort() {\\n      getGlobal('tickerBus').emit('closeShort')\\n    },\\n    enableAutoTrade() {\\n      getGlobal('tickerBus').emit('autoTrade')\\n    },\\n    longStrangle() {\\n      getGlobal('tickerBus').emit('longStrangle')\\n    },\\n    shortStrangle() {\\n      getGlobal('tickerBus').emit('shortStrangle')\\n    },\\n    quickSplit() {\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\n    },\\n    longHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\n    },\\n    shortHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\n    },\\n    // stockCrawler() {\\n    //   getGlobal('tickerBus').emit('stockCrawler')\\n    // },\\n    // enableSmartTrade() {\\n    //   getGlobal('tickerBus').emit('enableSmartTrade')\\n    // },\\n    sellAllStocks() {\\n      getGlobal('tickerBus').emit('sellAllStocks')\\n    },\\n    loadECP() {\\n      getGlobal('tickerBus').emit('loadECP')\\n    },\\n    loadMGCP() {\\n      getGlobal('tickerBus').emit('loadMGCP')\\n    },\\n    loadBLD() {\\n      getGlobal('tickerBus').emit('loadBLD')\\n    },\\n    loadCLRK() {\\n      getGlobal('tickerBus').emit('loadCLRK')\\n    },\\n    loadOMTK() {\\n      getGlobal('tickerBus').emit('loadOMTK')\\n    },\\n    loadFSIG() {\\n      getGlobal('tickerBus').emit('loadFSIG')\\n    },\\n    loadKGI() {\\n      getGlobal('tickerBus').emit('loadKGI')\\n    },\\n    loadFLCM() {\\n      getGlobal('tickerBus').emit('loadFLCM')\\n    },\\n    loadSTM() {\\n      getGlobal('tickerBus').emit('loadSTM')\\n    },\\n    loadDCOMM() {\\n      getGlobal('tickerBus').emit('loadDCOMM')\\n    },\\n    loadHLS() {\\n      getGlobal('tickerBus').emit('loadHLS')\\n    },\\n    loadVITA() {\\n      getGlobal('tickerBus').emit('loadVITA')\\n    },\\n    loadICRS() {\\n      getGlobal('tickerBus').emit('loadICRS')\\n    },\\n    loadUNV() {\\n      getGlobal('tickerBus').emit('loadUNV')\\n    },\\n    loadAERO() {\\n      getGlobal('tickerBus').emit('loadAERO')\\n    },\\n    loadOMN() {\\n      getGlobal('tickerBus').emit('loadOMN')\\n    },\\n    loadSLRS() {\\n      getGlobal('tickerBus').emit('loadSLRS')\\n    },\\n    loadGPH() {\\n      getGlobal('tickerBus').emit('loadGPH')\\n    },\\n    loadNVMD() {\\n      getGlobal('tickerBus').emit('loadNVMD')\\n    },\\n    loadWDS() {\\n      getGlobal('tickerBus').emit('loadWDS')\\n    },\\n    loadLXO() {\\n      getGlobal('tickerBus').emit('loadLXO')\\n    },\\n    loadRHOC() {\\n      getGlobal('tickerBus').emit('loadRHOC')\\n    },\\n    loadAPHE() {\\n      getGlobal('tickerBus').emit('loadAPHE')\\n    },\\n    loadSYSC() {\\n      getGlobal('tickerBus').emit('loadSYSC')\\n    },\\n    loadCTK() {\\n      getGlobal('tickerBus').emit('loadCTK')\\n    },\\n    loadNTLK() {\\n      getGlobal('tickerBus').emit('loadNTLK')\\n    },\\n    loadOMGA() {\\n      getGlobal('tickerBus').emit('loadOMGA')\\n    },\\n    loadFNS() {\\n      getGlobal('tickerBus').emit('loadFNS')\\n    },\\n    loadJGN() {\\n      getGlobal('tickerBus').emit('loadJGN')\\n    },\\n    loadSGC() {\\n      getGlobal('tickerBus').emit('loadSGC')\\n    },\\n    loadCTYS() {\\n      getGlobal('tickerBus').emit('loadCTYS')\\n    },\\n    loadMDYN() {\\n      getGlobal('tickerBus').emit('loadMDYN')\\n    },\\n    loadTITN() {\\n      getGlobal('tickerBus').emit('loadTITN')\\n    },\\n  },\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///dafab439-7fae-4fd3-a613-daf7291ac8f4\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5a53cb60-eb32-4ceb-a903-c0ace8289a55\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///25231c82-4fb3-4adb-baad-201c9b6de289\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///60aaf2f5-af73-4b8a-93d8-bf75e4b99e69\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///ba546588-72dc-4e18-9c9b-8784e906142e\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///2cae0a93-eed2-48b6-99e4-6c27a996dfb1\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///5690dee7-7b46-4ea4-828a-a159445b2b8f\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b1544a39-2b0c-48fa-87cd-c296c9d46da6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///958e2103-d598-4c37-ab14-2689be6b6be0\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///469b2695-9183-4179-a883-ee06f2a4d00f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///25b1d47c-b429-4d2a-a6f5-36735fbd09b1\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3b7576a7-dcb0-4e34-b914-96014faa085f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///80d78afc-20a0-4175-b151-b70b73e1fcb9\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///22540138-5ae4-4b18-8bcd-56b236737559\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///237f01ba-54d5-4af1-952d-fc44bad20c4d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///c1253835-8dae-4510-8cc7-db30638844e7\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8844c644-08ad-4539-9de2-19764192a4a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///c4c80384-dd09-42c9-aef1-7c8fb56a53d2\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///ab632b3d-2991-421a-a694-be87cbb19e31\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5a67ac56-7654-49e0-80ef-1e018398e2ec\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///491f911e-4458-4925-9731-07caad0fabde\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5c72c73f-b2b7-41bc-bec1-ff6faf1214c0\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///6c686527-1196-491f-be60-d8af21bd0e6b\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///20d87508-533a-4539-9316-ad0b81c3c0a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///3b3fce61-07f5-4f95-8e49-c3fe72e9cc4f\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1e0ee594-a22f-4ee1-b726-a0452b3a5da7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///b90d02f1-90f5-46fa-9ff5-a96100670124\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///38c05600-7593-4c57-90f3-9bce7265cdda\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///7923ecc3-8bca-4fd3-810d-991727651528\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7feb77b0-2a1a-48d3-b2d2-95b69fabcd19\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///a4f9f3c9-620a-4111-8cdd-93b02bc428fe\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3aaf4184-0359-4e92-a52c-43a9ca17c6a2\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///97e1fcdf-87d5-48ac-9466-fc55dd86002f\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///aee3078a-dc5b-4c5c-af91-61b307051aec\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///00fdef21-53f2-45ca-be17-c0e58f313fb9\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7c736925-069e-4456-8770-c69f1673dc3d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///e7634d38-8322-4899-b327-a11ab671b98e\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///063eb523-c42a-4966-9e1c-c09b8bfff9a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///f98ff1ae-6c7b-4d22-8cf3-ad1a36a9dca3\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a349cfe3-186f-4a7f-ae41-623c932b482c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///990175f0-4771-4fc0-8660-77c44139a0ac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///49f8e89c-dbc5-43cb-960a-cdcb301b1025\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8dc52512-487f-4bb5-b743-79e93df55189\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///fd49e03c-4a59-417f-90b1-85d158eb7749\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///cd8acf7a-162b-4271-a7e0-e436c25876ea\",\"moduleSequenceNumber\":27307}],\"dependents\":[],\"ramUsage\":24.35,\"server\":\"home\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet-lite.js'\\n\\nexport async function main(ns) {\\n  const doc = eval('document')\\n  var ticker = ns.args[0];\\n\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\n  const resolution = 420\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\n  const delay = 10\\n\\n  const textSize = 2.5\\n\\n  const lineColor = 'green'\\n\\n  const strokeWidth = 0.5\\n\\n  const conWidth = 80\\n  const conHeight = 60\\n  const wBuffer = 1\\n  const hBuffer = 5\\n  await ns.clearPort(1)\\n  await ns.clearPort(2)\\n  await ns.writePort(3, ticker)\\n\\n\\n  var container = doc.getElementById('graph_container')\\n\\n  if (container != null) {\\n    KillChildren(container)\\n    container.remove()\\n  }\\n //Give the chart time to load.\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\n\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\n  const containerAttr = [\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\n    ['id', 'graph_container'],\\n  ]\\n  AddAttr(container, containerAttr)\\n  \\n  dropPage.appendChild(container)\\n\\n  const uiThickness = 0.1\\n\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(topLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(topLine)\\n\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(midLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight / 2)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight / 2)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(midLine)\\n\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(botLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight - hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight - hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(botLine)\\n\\n\\n  var lines = []\\n  for (let i = 0; i < resolution - 1; i++) {\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '60'],\\n      ['x2', '100'],\\n      ['y2', '0'],\\n      ['stroke', 'green'],\\n      ['stroke-width', '1'],\\n    ])\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '0'],\\n      ['x2', '0'],\\n      ['y2', '0'],\\n      ['stroke', lineColor],\\n      ['stroke-width', String(strokeWidth)],\\n    ])\\n    container.appendChild(lines[i])\\n  }\\n\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(topTextBG, topText, container)\\n\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(midTextBG, midText, container)\\n\\n  var botText = CreateText('COLLECTING DATA...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(botTextBG, botText, container)\\n\\n\\n  var values = []\\n  while (true) {\\n    var ticker = ns.args[0];\\n    var position = ns.stock.getPosition(ticker)\\n    try {\\n      if (values.length == resolution) {\\n        values.splice(0, 1)\\n        await ns.clearPort(1);\\n        await ns.clearPort(2);\\n        \\n      }\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\n\\n      if (values.length > 2) {\\n        var lineCount = values.length - 2\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\n\\n        var moneyList = []\\n\\n        for (let i = 0; i < values.length; i++) {\\n          moneyList[i] = values[i]\\n        }\\n      await ns.clearPort(1)\\n      await ns.clearPort(2)\\n      await ns.writePort(1, (Math.max(...moneyList)))\\n      await ns.writePort(2, (Math.min(...moneyList)))\\n      await ns.writePort(3, ticker)\\n        var tenmin = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\n        var pricediff = (((ns.peek(2) + ns.peek(1)) / 2) - ns.stock.getAskPrice(ticker))\\n        var forecast = (pricediff / ns.stock.getAskPrice(ticker) *-1)\\n        var estVol = ns.nFormat((moneyList[299] + moneyList[2]) / 419, '$0.00a')\\n      await ns.writePort(4, forecast * 100);\\n      //await ns.writePort(4, (pricediff / ns.stock.getAskPrice(ticker) *-1000))\\n\\n\\n        var highestVal = moneyList[0]\\n        var lowestVal = moneyList[0]\\n\\n        for (var i in moneyList) {\\n          if (moneyList[i] > highestVal) {\\n            highestVal = moneyList[i]\\n          }\\n          if (moneyList[i] < lowestVal) {\\n            lowestVal = moneyList[i]\\n          }\\n        }\\n\\n        highestVal = highestVal - lowestVal\\n        //highestVal = moneyList[i];\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\n        //monitor the player's cash, but has been tweaked for stocks.\\n\\n        for (let i in moneyList) {\\n          if (highestVal != lowestVal) {\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\n          } else {\\n            moneyList[i] = values[i]\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\n          }\\n        }\\n\\n        for (let i = 0; i < lineCount; i++) {\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\n          if (isNaN(temp)) {\\n            ns.asleep(5000);\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\n          }\\n\\n          var attr = [\\n            ['x1', String(i * xOff + wBuffer)],\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\n          ]\\n          AddAttr(lines[i], attr)\\n\\n        }\\n        //ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0')\\n        topText.innerHTML = 'Overall Trend: ' + ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\n        HighlightText(topTextBG, topText, container)\\n\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+ tenmin +' 7m AVG)'\\n        HighlightText(midTextBG, midText, container)\\n\\n        botText.innerHTML = 'Movement Per Tick: ' + estVol + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\n        HighlightText(botTextBG, botText, container)\\n\\n\\n        \\n      }\\n\\n\\n    } catch (err) {\\n      // This might come in handy later\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\n    }\\n    await ns.sleep(delay * 100)\\n    await ns.clearPort(1);\\n    await ns.clearPort(2);\\n    await ns.clearPort(4);\\n\\n    if (ns.isRunning(\\\"wallstreet-lite.js\\\", \\\"home\\\") == false) {\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      await ns.clearPort(4);\\n      ns.exit();\\n    }\\n\\n  }\\n}\\n\\nfunction AddAttr(element, attrList) {\\n  for (var i in attrList) {\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\n  }\\n}\\n\\nfunction KillChildren(element) {\\n  const children = element.children\\n  for (var line of children) {\\n    line.remove()\\n  }\\n}\\n\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\n  AddAttr(textElm, [\\n    ['x', String(x)],\\n    ['y', String(y)],\\n    ['fill', 'lightgrey'],\\n    ['font-size', String(textSize)],\\n    ['font-family', 'sans-serif'],\\n    ['stroke', 'black'],\\n    ['stroke-width', '0'],\\n  ])\\n  textElm.innerHTML = text\\n  parent.appendChild(textElm)\\n  return textElm\\n}\\n\\nfunction HighlightText(bg, text, parent) {\\n  var textBox = text.getBBox()\\n\\n  AddAttr(bg, [\\n    ['x', String(textBox.x)],\\n    ['y', String(textBox.y)],\\n    ['width', String(textBox.width)],\\n    ['height', String(textBox.height)],\\n    ['fill', 'black'],\\n    ['opacity', '0.0'],\\n  ])\\n  parent.insertBefore(bg, text)\\n  \\n}\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var current_min_ram, new_purchased_server,\\n        current_purchasing_ram = 8192,\\n        current_needed_money = ns.getPurchasedServerCost(current_purchasing_ram),\\n        existing_servers = ns.getPurchasedServers(),\\n        // server_limit = ns.getPurchasedServerLimit(),\\n        server_limit = ns.getPurchasedServerLimit(),\\n        ram_limit = ns.getPurchasedServerMaxRam();\\n\\n    ns.tprint('buy_server.js running!');\\n\\n    await update_grind_server_txt(ns, existing_servers);\\n\\n    while (true) {\\n        await ns.sleep(1200000);  // Sleep first to allow machine to boot\\n\\n        ns.print('Current purchasing RAM: ', current_purchasing_ram)\\n\\n        if (existing_servers.length >= server_limit) {\\n            current_min_ram = await delete_small_server(ns, existing_servers);\\n            existing_servers = ns.getPurchasedServers();\\n            await update_grind_server_txt(ns, existing_servers);\\n            if (current_min_ram == current_purchasing_ram) {\\n                current_purchasing_ram *= 2;\\n            } if (current_purchasing_ram > ram_limit) {\\n                current_purchasing_ram = ram_limit;\\n            } if (current_min_ram == ram_limit) {\\n                ns.toast('buy_server.js has purchased all available servers. Now exiting...')\\n                ns.exit()\\n            }\\n        } else {\\n            if (ns.getPlayer().money * 0.25 > current_needed_money) {  // Buy it\\n                new_purchased_server = ns.purchaseServer('grinding-server', current_purchasing_ram);\\n                existing_servers.push(new_purchased_server);\\n                await update_grind_server_txt(ns, existing_servers);\\n                ns.run('/scripts/transport_files.js', 1, new_purchased_server);\\n                await ns.toast('Purchased new server ' + new_purchased_server);\\n                await ns.sleep(5000);  // Make sure that files were transported\\n                ns.run('/scripts/grind_on_my_servers.script');\\n            }\\n        }\\n    }\\n}\\n\\nasync function delete_small_server(ns, servers) {\\n    var min_ram = -1,\\n        min_index = -1;\\n\\n    for (var i = 0; i < servers.length; i++) {\\n        if (ns.getServerMaxRam(servers[i]) < min_ram || min_ram == -1) {\\n            min_ram = ns.getServerMaxRam(servers[i]);\\n            min_index = i;\\n        }\\n    }\\n\\n    await ns.killall(servers[min_index]);\\n    await ns.deleteServer(servers[min_index]);\\n    await ns.toast('Deleted ' + servers[min_index]);\\n    return min_ram;\\n}\\n\\nasync function update_grind_server_txt(ns, servers) {\\n    await ns.print('Received servers ', servers, 'to update');\\n    await ns.write('/grind_servers.txt', servers.join('\\\\r\\\\n'), 'w');\\n}\",\"filename\":\"/scripts/buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buy_server.js\",\"url\":\"blob:file:///d312dac2-9263-45e1-bd8a-c113b3066dfa\",\"moduleSequenceNumber\":900}],\"dependents\":[],\"ramUsage\":10.75,\"server\":\"home\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    await ns.scp('/scripts/hack.script', host);\\n    await ns.scp('/scripts/weaken-exp-grind.script', host);\\n    await ns.scp('/scripts/simple_hack.script', host);\\n    await ns.scp('/scripts/weaken_and_grow_only.script', host);\\n    ns.print('Tranported files to ', host);\\n}\",\"filename\":\"/scripts/transport_files.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/transport_files.js\",\"url\":\"blob:file:///50e35bf9-d6d2-4151-8dfa-4d0777dd9c50\",\"moduleSequenceNumber\":17671}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///e326079e-18c4-421d-ace6-cd70bbafd622\",\"moduleSequenceNumber\":901}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"grinding-server-17\",\"grinding-server-21\",\"grinding-server-22\",\"grinding-server-23\",\"grinding-server-18\",\"grinding-server-19\",\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\",\"grinding-server-4\",\"grinding-server-5\",\"grinding-server-6\",\"grinding-server-7\",\"grinding-server-8\",\"grinding-server-9\",\"grinding-server-10\",\"grinding-server-11\",\"grinding-server-12\",\"grinding-server-13\",\"grinding-server-14\",\"grinding-server-15\",\"grinding-server-20\",\"grinding-server-16\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"victims.txt\",\"text\":\"neo-net\\r\\nsilver-helix\\r\\nzer0\\r\\niron-gym\\r\\nmax-hardware\\r\\nharakiri-sushi\\r\\nhong-fang-tea\\r\\nnectar-net\\r\\nn00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nsilver-helix\\r\\nphantasy\\r\\nomega-net\\r\\ncrush-fitness\\r\\njohnson-ortho\\r\\nthe-hub\\r\\ncomptek\\r\\nnetlink\\r\\nrothman-uni\\r\\n \\r\\nCSEC\\r\\njohnson-ortho\\r\\navmnite-02h\\r\\nzb-institute\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"the_network.txt\",\"text\":\"[[\\\"home\\\",1,0,1,1],[\\\"n00dles\\\",1,1750000,3000,1.3980000000000004],[\\\"foodnstuff\\\",1,50000000,5,75.01000000056837],[\\\"sigma-cosmetics\\\",5,57500000,10,74.86200000028256],[\\\"joesguns\\\",10,62500000,20,74.98500000017178],[\\\"hong-fang-tea\\\",30,75000000,20,74.20000000003813],[\\\"harakiri-sushi\\\",40,100000000,40,73.35200000002209],[\\\"iron-gym\\\",100,500000000,20,56.045999999994564],[\\\"darkweb\\\",1,0,1,74.50799999963043],[\\\"nectar-net\\\",20,68750000,25,73.63600000006413],[\\\"max-hardware\\\",80,250000000,30,56.92399999999512],[\\\"zer0\\\",75,187500000,40,61.783999999992226],[\\\"CSEC\\\",57,0,0,0],[\\\"omega-net\\\",211,1723395200,30,46.195999999995195],[\\\"neo-net\\\",50,125000000,25,72.53799999999936],[\\\"phantasy\\\",100,600000000,35,53.43199999999575],[\\\"silver-helix\\\",150,1125000000,30,50.05799999999464],[\\\"comptek\\\",388,6119572375,59,57.569999999998565],[\\\"avmnite-02h\\\",205,0,0,0],[\\\"the-hub\\\",296,4814372125,54,45.363999999996295],[\\\"netlink\\\",409,6875000000,71,54.73199999999906],[\\\"johnson-ortho\\\",293,2087769050,65,60.19599999999749],[\\\"crush-fitness\\\",254,1441254775,29,47.063999999996064],[\\\"zb-institute\\\",764,24815867775,79,79.1440000000013],[\\\"syscore\\\",625,12123215950,64,66.00400000000133],[\\\"summit-uni\\\",447,5944870325,59,52.24799999999941],[\\\"I.I.I.I\\\",355,0,0,0],[\\\"catalyst\\\",446,9025750325,30,53.74599999999957],[\\\"rothman-uni\\\",387,4988442250,39,47.733999999998474],[\\\"lexo-corp\\\",664,19470985725,57,65.9000000000012],[\\\"rho-construction\\\",502,13222733500,51,41.09399999999832],[\\\"millenium-fitness\\\",491,6250000000,29,45.74799999999881],[\\\"aevum-police\\\",420,6429802425,42,73.82400000000223],[\\\"alpha-ent\\\",509,17609525400,50,64.23000000000205],[\\\"snap-fitness\\\",771,11250000000,48,41.971999999999646],[\\\"galactic-cyber\\\",832,21014457000,71,58.11599999999975],[\\\"aerocorp\\\",868,27588242200,65,79.90800000000077],[\\\"global-pharm\\\",784,40498812600,90,75.0120000000009],[\\\"omnia\\\",896,23135532300,69,90.11600000000058],[\\\"deltaone\\\",833,36370607950,52,76.90800000000077],[\\\"unitalife\\\",787,25974602775,75,74.0120000000009],[\\\"univ-energy\\\",895,29392586550,84,84.38800000000053],[\\\"defcomm\\\",1026,23365939700,70,87.01200000000046],[\\\"zeus-med\\\",822,33251430975,76,77.38800000000059],[\\\"icarus\\\",866,23613704050,94,92.2080000000007],[\\\"solaris\\\",845,19236041600,76,74.90800000000077],[\\\"infocomm\\\",948,15124969700,43,77.38800000000053],[\\\"zb-def\\\",815,23216834975,73,58.54799999999981],[\\\"nova-med\\\",805,30424295100,66,71.46800000000069],[\\\"taiyang-digital\\\",929,21064273525,80,77.38800000000053],[\\\"microdyne\\\",874,13174270150,90,65.46800000000069],[\\\"titan-labs\\\",817,18752014475,64,78.38800000000059],[\\\"run4theh111z\\\",506,0,0,0],[\\\"applied-energetics\\\",831,19691087600,75,67.46800000000069],[\\\"vitalife\\\",782,17689401800,61,82.38800000000059],[\\\"stormtech\\\",1020,29582301575,90,89.24000000000035],[\\\"helios\\\",801,18108376900,80,84.38800000000059],[\\\"fulcrumtech\\\",1117,42157048525,81,88.24000000000035],[\\\"4sigma\\\",1094,448448605800,85,54.467999999999854],[\\\"kuai-gong\\\",1239,727744968900,96,97.16000000000025],[\\\".\\\",524,0,0,0],[\\\"omnitek\\\",1044,370029131825,95,98.24000000000035],[\\\"b-and-a\\\",972,449036526675,70,79.38800000000053],[\\\"blade\\\",912,469649590650,77,90.32000000000045],[\\\"clarkinc\\\",1013,581518461825,64,42.607999999999834],[\\\"powerhouse-fitness\\\",993,22500000000,51,53.54799999999981],[\\\"nwo\\\",1110,859300132350,82,98.16000000000025],[\\\"megacorp\\\",1255,1334614097725,99,98.16000000000025],[\\\"ecorp\\\",1369,1271765696975,99,98.16000000000025],[\\\"fulcrumassets\\\",1194,25000000,1,98.16000000000025],[\\\"The-Cave\\\",925,0,0,1]]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"grind_servers.txt\",\"text\":\"grinding-server-17\\r\\ngrinding-server-21\\r\\ngrinding-server-22\\r\\ngrinding-server-23\\r\\ngrinding-server-18\\r\\ngrinding-server-19\\r\\ngrinding-server\\r\\ngrinding-server-0\\r\\ngrinding-server-1\\r\\ngrinding-server-2\\r\\ngrinding-server-3\\r\\ngrinding-server-4\\r\\ngrinding-server-5\\r\\ngrinding-server-6\\r\\ngrinding-server-7\\r\\ngrinding-server-8\\r\\ngrinding-server-9\\r\\ngrinding-server-10\\r\\ngrinding-server-11\\r\\ngrinding-server-12\\r\\ngrinding-server-13\\r\\ngrinding-server-14\\r\\ngrinding-server-15\\r\\ngrinding-server-20\\r\\ngrinding-server-16\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"all_servers_names.txt\",\"text\":\"n00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nhong-fang-tea\\r\\nharakiri-sushi\\r\\niron-gym\\r\\nnectar-net\\r\\nmax-hardware\\r\\nCSEC\\r\\nzer0\\r\\nphantasy\\r\\nomega-net\\r\\nneo-net\\r\\nsilver-helix\\r\\nthe-hub\\r\\njohnson-ortho\\r\\ncrush-fitness\\r\\navmnite-02h\\r\\ncomptek\\r\\nnetlink\\r\\nzb-institute\\r\\nrothman-uni\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"# TODO\\r\\n\\r\\n* Change most, if not all, scripts to ns2.\\r\\n* Add a choice in boot where I can grind one server over and over with multiple threads\\r\\n* Let grind return a promise so that I can wait for it before having buy_server delete grinding servers\\r\\n* In fact, let's put all common functionalities into a single module file and import them when needed\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/manual.txt\",\"text\":\"===\\n= BB Theme Browser\\n===\\n\\nBrowser themes submitted by other users, vote for your\\nfavourite and submit your own.\\n\\n===\\n\\nRegistration\\n\\nWe use an email / password auth system so that we know who\\nis submitting the theme. We don't actually use the email,\\nwe just use it for identification purposes.\\n\\nEach login will create a PAT token stored in your local\\nstorage. You can copy/paste it to avoid logging in, if you\\nwant. You can also integrate using the same method, for your\\nown app. Go ahead! https://bitburner.daft.host\\n\\n===\\n\\nBB Theme Browser Developers\\n\\nPhil and Jack have worked together on many projects over\\nthe years, this is the first non-work related project to\\nhave worked together on.\\n\\nPhil specializes in frontend development; VueJS, SCSS, \\nthe maths aspect of things.\\n\\nJack specializes in backend development and infrastructure,\\nmaking the API that the frontend works with.\\n\\nPhil:\\n    url: https://github.com/philiparmstead\\n    discord: Phil\\n\\nJack:\\n    url: https://github.com/surdaft\\n    discord: SurDaft\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/bb-vue/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"bb-vue\\\",\\n    \\\"author\\\": \\\"smolgumball\\\",\\n    \\\"descriptiveName\\\": \\\"Run Vue 3 apps inside BitBurner.\\\",\\n    \\\"shortDescription\\\": \\\"Extension for UI development using Vue 3 + SCSS in game. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"longDescription\\\": \\\"Includes starter components, examples, and lots of quality-of-life features for rapid UI development and extension inside BitBurner. Supports SCSS compilation of component styles, global SCSS mixins, loading of external stylesheets + scripts, and more. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"tags\\\": [\\n        \\\"library\\\",\\n        \\\"ui\\\",\\n        \\\"qol\\\",\\n        \\\"os\\\",\\n        \\\"ns2\\\"\\n    ]\\n}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-9,-9,-9,-9],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-9,-9,-9,-9],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-9,-9,-9,-9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"7.4.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":98.16000000000025,\"minDifficulty\":33,\"moneyAvailable\":51522159260.282684,\"moneyMax\":1271765696975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1369,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-212262-FoodNStuff.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[133,133,43,177,6,18,144,20,195],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"79.1.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":98.16000000000025,\"minDifficulty\":33,\"moneyAvailable\":54068292811.35049,\"moneyMax\":1334614097725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1255,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-735746-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":68,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573597.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()()())a(())(())(\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"93.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":79.38800000000053,\"minDifficulty\":27,\"moneyAvailable\":18454857677.4571,\"moneyMax\":449036526675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":972,\"serverGrowth\":70}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"24.7.2.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2449518,717,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5802.288639079924,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.075,\"onlineExpGained\":6303.837695696776,\"onlineMoneyMade\":2449518,\"onlineRunningTime\":8971.009999999089,\"pid\":30,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[50217,78,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8050.48365057462,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.14899999999,\"onlineExpGained\":7144.915461889211,\"onlineMoneyMade\":50217,\"onlineRunningTime\":8971.009999999089,\"pid\":31,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2394130,81,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.540301807553,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.23400000001,\"onlineExpGained\":4767.464372145391,\"onlineMoneyMade\":2394130,\"onlineRunningTime\":8971.009999999089,\"pid\":32,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[906563,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3233.723756479083,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.31300000001,\"onlineExpGained\":2638.3912474161034,\"onlineMoneyMade\":906563,\"onlineRunningTime\":8971.009999999089,\"pid\":33,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1393765,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954.9049490643729,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.416,\"onlineExpGained\":2508.3135065938463,\"onlineMoneyMade\":1393765,\"onlineRunningTime\":8971.009999999089,\"pid\":34,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1336085,20,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1153.8339957397461,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.50200000001,\"onlineExpGained\":1020.4000036886874,\"onlineMoneyMade\":1336085,\"onlineRunningTime\":8971.009999999089,\"pid\":35,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[315,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.2982621509284,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.58200000001,\"onlineExpGained\":467.251940540533,\"onlineMoneyMade\":315,\"onlineRunningTime\":8971.009999999089,\"pid\":36,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[10691,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2107.2246651708083,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.697,\"onlineExpGained\":1482.5484766264403,\"onlineMoneyMade\":10691,\"onlineRunningTime\":8971.009999999089,\"pid\":37,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.1805293204477,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.82700000002,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.009999999089,\"pid\":38,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3316,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.4201282355709,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.90700000002,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3316,\"onlineRunningTime\":8971.009999999089,\"pid\":39,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[69214462,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.220190394627,\"offlineMoneyMade\":0,\"offlineRunningTime\":103859.98700000001,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":69214462,\"onlineRunningTime\":8971.009999999089,\"pid\":40,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.6277079926038,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.05599999998,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.009999999089,\"pid\":41,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[853,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1156.781388675735,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.138,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":853,\"onlineRunningTime\":8971.009999999089,\"pid\":42,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.3154093133219,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.209,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.009999999089,\"pid\":43,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[828213,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.1277605295508,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.359,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":828213,\"onlineRunningTime\":8971.009999999089,\"pid\":44,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.27982453609363,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.46100000002,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.009999999089,\"pid\":45,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.39926340010706,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.56900000002,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.009999999089,\"pid\":46,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[457959,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4495679044595,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.65099999998,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":457959,\"onlineRunningTime\":8971.009999999089,\"pid\":47,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[662669,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4499181728073,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.778,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":662669,\"onlineRunningTime\":8971.009999999089,\"pid\":48,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.84034222280096,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.893,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.009999999089,\"pid\":49,\"ramUsage\":3.2,\"server\":\"blade\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"blade\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"blade\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":90.32000000000045,\"minDifficulty\":30,\"moneyAvailable\":19196851501.650112,\"moneyMax\":469649590650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":77}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-535124.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[41,32,12,8,2,23,12],[37,35,19,20,41,22,47],[43,46,45,1,19,26,21],[35,1,15,21,31,24,5],[35,50,10,10,5,31,17],[20,43,12,40,44,30,15],[45,7,9,31,32,36,17],[3,40,11,10,23,10,17],[5,1,34,42,29,9,8],[30,16,11,40,27,33,13]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-965590-BitRunners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"7571550294\",62],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"0.1.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nwo\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nwo\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":98.16000000000025,\"minDifficulty\":33,\"moneyAvailable\":34736235812.93227,\"moneyMax\":859300132350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1110,\"serverGrowth\":82}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208236-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,1,0]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"99.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":42.607999999999834,\"minDifficulty\":15,\"moneyAvailable\":24937097185.23762,\"moneyMax\":581518461825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1013,\"serverGrowth\":64}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-291128-Netburners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"14913976106\",\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"7.9.7.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":256,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2513596,729,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5549.682340752215,\"offlineMoneyMade\":0,\"offlineRunningTime\":103860.975,\"onlineExpGained\":6389.323527592182,\"onlineMoneyMade\":2513596,\"onlineRunningTime\":8971.209999999088,\"pid\":50,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[54726,80,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8090.159191821696,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.04,\"onlineExpGained\":7164.872397094776,\"onlineMoneyMade\":54726,\"onlineRunningTime\":8971.209999999088,\"pid\":51,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2384445,79,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.649041821964,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.12800000001,\"onlineExpGained\":4749.698823980942,\"onlineMoneyMade\":2384445,\"onlineRunningTime\":8971.209999999088,\"pid\":52,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1200316,42,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3222.120167593176,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.202,\"onlineExpGained\":2729.4103752794704,\"onlineMoneyMade\":1200316,\"onlineRunningTime\":8971.209999999088,\"pid\":53,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1383842,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954.9550789902416,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.27900000001,\"onlineExpGained\":2497.2100389910647,\"onlineMoneyMade\":1383842,\"onlineRunningTime\":8971.209999999088,\"pid\":54,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1429172,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1165.5796976676936,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.351,\"onlineExpGained\":1009.2965360859057,\"onlineMoneyMade\":1429172,\"onlineRunningTime\":8971.209999999088,\"pid\":55,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[160,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.6425542412071,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.45900000002,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":160,\"onlineRunningTime\":8971.209999999088,\"pid\":56,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[28479,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2187.56312375466,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.531,\"onlineExpGained\":1520.329572955342,\"onlineMoneyMade\":28479,\"onlineRunningTime\":8971.209999999088,\"pid\":57,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.18978039806,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.60500000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":58,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.1222287493797,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.70799999998,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":59,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[68990225,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.321693216943,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.80000000002,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":68990225,\"onlineRunningTime\":8971.209999999088,\"pid\":60,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.63332961050236,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.90000000001,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":61,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[584,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.489206659215,\"offlineMoneyMade\":0,\"offlineRunningTime\":103861.99799999999,\"onlineExpGained\":641.3332610617033,\"onlineMoneyMade\":584,\"onlineRunningTime\":8971.209999999088,\"pid\":62,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.3235857479116,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.09900000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":63,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[827503,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.13076917812302,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.18500000001,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":827503,\"onlineRunningTime\":8971.209999999088,\"pid\":64,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.28444940322342,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.365,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":65,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56620,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.40246873430837,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.46700000002,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56620,\"onlineRunningTime\":8971.209999999088,\"pid\":66,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.45476952732514,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.537,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":67,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4549598306007,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.606,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":68,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.8440503219931,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.694,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":69,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.77100000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":70,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[277630,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.18438755766755,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.85200000001,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":277630,\"onlineRunningTime\":8971.209999999088,\"pid\":71,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.6420652226762,\"offlineMoneyMade\":0,\"offlineRunningTime\":103862.92,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":72,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.65847048486728,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.00900000002,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":73,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.48873163547134,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.181,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.209999999088,\"pid\":74,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[261742,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.0687747384561,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.394,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":261742,\"onlineRunningTime\":8971.209999999088,\"pid\":75,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,54,54]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4270.810670116378,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.493,\"onlineExpGained\":6907.772642968457,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":76,\"ramUsage\":3.2,\"server\":\"omnitek\",\"threads\":54,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":98.24000000000035,\"minDifficulty\":33,\"moneyAvailable\":15075618507.830364,\"moneyMax\":370029131825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1044,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-955902.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0],[1,0,0,0,1,0,0],[0,0,0,1,0,0,0],[0,1,0,0,1,0,0],[1,1,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-665218.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[33,13,41,48,35,19,15,16,26,16,20,30,5],[44,42,20,16,31,39,9,19,14,6,40,18,17],[31,22,37,43,42,21,17,45,42,8,38,20,47],[27,3,45,23,17,19,13,29,30,5,12,28,5],[31,3,16,3,6,6,33,48,31,49,33,8,18],[33,19,16,27,17,42,27,45,12,30,24,34,7],[32,15,8,13,12,25,44,7,44,34,27,29,3],[9,49,17,36,8,45,33,19,41,41,3,18,47],[48,45,45,5,35,1,32,37,11,50,48,28,37],[21,42,21,29,42,46,26,47,36,43,46,16,31],[35,7,42,14,4,44,30,5,10,18,6,7,43],[41,10,27,7,22,26,38,23,7,50,25,12,42],[45,22,50,21,37,20,19,19,31,42,45,28,50],[40,1,31,45,23,18,47,9,49,43,48,22,25]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"4.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":54.467999999999854,\"minDifficulty\":19,\"moneyAvailable\":18990227630.547283,\"moneyMax\":448448605800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":85}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-501293-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,30],[19,22],[5,14],[3,12],[13,18],[9,17],[14,20],[13,21],[1,7],[15,19],[18,24]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"39.4.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":97.16000000000025,\"minDifficulty\":33,\"moneyAvailable\":29474966091.811428,\"moneyMax\":727744968900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1239,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150722-OmegaSoftware.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":146707019,\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"5.7.2.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":1022.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2432330,719,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5821.923589246805,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.585,\"onlineExpGained\":6309.788851564363,\"onlineMoneyMade\":2432330,\"onlineRunningTime\":8972.209999999088,\"pid\":77,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48947,81,493,30]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8195.598294807873,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.66699999999,\"onlineExpGained\":7150.184999542173,\"onlineMoneyMade\":48947,\"onlineRunningTime\":8972.209999999088,\"pid\":78,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2333954,88,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.806790254717,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.762,\"onlineExpGained\":4829.643790720972,\"onlineMoneyMade\":2333954,\"onlineRunningTime\":8972.209999999088,\"pid\":79,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[704205,29,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3228.1055599592887,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.841,\"onlineExpGained\":2582.8739094021953,\"onlineMoneyMade\":704205,\"onlineRunningTime\":8972.209999999088,\"pid\":80,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1394032,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1915.4564229046932,\"offlineMoneyMade\":0,\"offlineRunningTime\":103863.94900000001,\"onlineExpGained\":2483.9151843471705,\"onlineMoneyMade\":1394032,\"onlineRunningTime\":8972.209999999088,\"pid\":81,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1458143,21,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1151.100158343553,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.026,\"onlineExpGained\":1031.5034712914692,\"onlineMoneyMade\":1458143,\"onlineRunningTime\":8972.209999999088,\"pid\":82,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[345,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.6654350721917,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.11700000001,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":345,\"onlineRunningTime\":8972.209999999088,\"pid\":83,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[17292,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.0298577167457,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.19099999999,\"onlineExpGained\":1484.739863667553,\"onlineMoneyMade\":17292,\"onlineRunningTime\":8972.209999999088,\"pid\":84,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[485,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.4846792567781,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.26999999999,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":485,\"onlineRunningTime\":8972.209999999088,\"pid\":85,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3382,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.4585163460479,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.34800000001,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3382,\"onlineRunningTime\":8972.209999999088,\"pid\":86,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[68754155,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.468736104395,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.427,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":68754155,\"onlineRunningTime\":8972.209999999088,\"pid\":87,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40939,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.6414083997817,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.54999999999,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40939,\"onlineRunningTime\":8972.209999999088,\"pid\":88,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[272,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1156.8341667544505,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.694,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":272,\"onlineRunningTime\":8972.209999999088,\"pid\":89,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17591,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.3353788488066,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.825,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17591,\"onlineRunningTime\":8972.209999999088,\"pid\":90,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.13535794388073,\"offlineMoneyMade\":0,\"offlineRunningTime\":103864.97,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":91,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.29096648227238,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.04800000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":92,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4070318602367,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.16900000001,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":93,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.46227961166403,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.26,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":94,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4626050578455,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.378,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":95,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[302910,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.84980292007347,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.488,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":302910,\"onlineRunningTime\":8972.209999999088,\"pid\":96,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.576,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":97,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.19207365229994,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.68099999998,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":98,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.6496503703076,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.79900000001,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":99,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.6647489134306,\"offlineMoneyMade\":0,\"offlineRunningTime\":103865.886,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":100,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.49399683661346,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.02199999998,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.209999999088,\"pid\":101,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[261576,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.07817120612515,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.11200000001,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":261576,\"onlineRunningTime\":8972.209999999088,\"pid\":102,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,293,293]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":23173.707863398104,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.20700000002,\"onlineExpGained\":37481.06267388441,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":103,\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"threads\":293,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2460.508737613778,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.28799999999,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":104,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":88.24000000000035,\"minDifficulty\":30,\"moneyAvailable\":1715930621.1652865,\"moneyMax\":42157048525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1117,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-855219-TheBlackHand.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[29,30,49,42,36,29,33,26,23,44],[30,8,4,3,15,40,18,10,48,1],[36,43,3,33,31,21,32,44,43,33],[10,9,22,47,41,34,28,46,29,21],[5,8,40,18,15,38,47,38,26,49],[13,10,10,37,7,16,43,45,1,11]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"94.1.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":98.16000000000025,\"minDifficulty\":33,\"moneyAvailable\":1000168.5592778753,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1194,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"65.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":89.24000000000035,\"minDifficulty\":30,\"moneyAvailable\":1206171014.4049735,\"moneyMax\":29582301575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1020,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-844188.cct\",\"type\":\"Total Ways to Sum\",\"data\":65,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"86.4.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":87.01200000000046,\"minDifficulty\":29,\"moneyAvailable\":953346064.599162,\"moneyMax\":23365939700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1026,\"serverGrowth\":70}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"23.7.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":77.38800000000053,\"minDifficulty\":26,\"moneyAvailable\":615417720.1925569,\"moneyMax\":15124969700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":948,\"serverGrowth\":43}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"97.6.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":256,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2438046,721,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5647.245643007316,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.385,\"onlineExpGained\":6336.0253692613405,\"onlineMoneyMade\":2438046,\"onlineRunningTime\":8971.809999999088,\"pid\":105,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[47000,74,493,30]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8092.715521462162,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.49100000001,\"onlineExpGained\":7094.57974208993,\"onlineMoneyMade\":47000,\"onlineRunningTime\":8971.809999999088,\"pid\":106,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2312483,79,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4290.917237899575,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.57699999999,\"onlineExpGained\":4758.464372145391,\"onlineMoneyMade\":2312483,\"onlineRunningTime\":8971.809999999088,\"pid\":107,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[837493,33,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3283.991764563351,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.65200000002,\"onlineExpGained\":2625.096392772209,\"onlineMoneyMade\":837493,\"onlineRunningTime\":8971.809999999088,\"pid\":108,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1401748,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2019.3917880560202,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.73000000001,\"onlineExpGained\":2495.0186519499525,\"onlineMoneyMade\":1401748,\"onlineRunningTime\":8971.809999999088,\"pid\":109,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1284720,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1095.3991203702878,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.825,\"onlineExpGained\":1000.3844555242366,\"onlineMoneyMade\":1284720,\"onlineRunningTime\":8971.809999999088,\"pid\":110,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[315,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.3536193251354,\"offlineMoneyMade\":0,\"offlineRunningTime\":103866.92000000001,\"onlineExpGained\":467.251940540533,\"onlineMoneyMade\":315,\"onlineRunningTime\":8971.809999999088,\"pid\":111,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[9302,2,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.0934224953,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.01000000001,\"onlineExpGained\":1471.415702544215,\"onlineMoneyMade\":9302,\"onlineRunningTime\":8971.809999999088,\"pid\":112,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.2184951265186,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.099,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":113,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.164688899973,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.191,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":114,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[68886285,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.631972156499,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.268,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":68886285,\"onlineRunningTime\":8971.809999999088,\"pid\":115,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.64997801361744,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.361,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":116,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[852,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1156.8661199174276,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.429,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":852,\"onlineRunningTime\":8971.809999999088,\"pid\":117,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.34698159884357,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.50700000001,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":118,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.13964848105593,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.574,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":119,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.29728681014623,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.65,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":120,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56376,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.411336600426,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.71800000001,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56376,\"onlineRunningTime\":8971.809999999088,\"pid\":121,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.469273946546,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.79600000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":122,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4695166521728,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.884,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":123,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.85492343239486,\"offlineMoneyMade\":0,\"offlineRunningTime\":103867.975,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":124,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.061,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":125,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[277477,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.1987979662678,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.156,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":277477,\"onlineRunningTime\":8971.809999999088,\"pid\":126,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.65608944665746,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.24299999999,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":127,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.67008023111566,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.329,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":128,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.4984262032906,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.41200000001,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":129,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.0864233651853,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.49899999998,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.809999999088,\"pid\":130,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[550967670,54,54,54]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4271.019927064753,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.582,\"onlineExpGained\":8802.468354707136,\"onlineMoneyMade\":550967670,\"onlineRunningTime\":8962.60999999908,\"pid\":131,\"ramUsage\":3.2,\"server\":\"helios\",\"threads\":54,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"helios\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"helios\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":84.38800000000059,\"minDifficulty\":29,\"moneyAvailable\":745502694.4861535,\"moneyMax\":18108376900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":80}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130414-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,1,0,0,0,0],[0,0,1,0,1,1,0,0,1,0,0]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"20.8.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2421276,712,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5550.254135268195,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.67399999998,\"onlineExpGained\":6303.012572759886,\"onlineMoneyMade\":2421276,\"onlineRunningTime\":8971.409999999089,\"pid\":132,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[52414,83,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8152.7015174179805,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.776,\"onlineExpGained\":7184.946558218112,\"onlineMoneyMade\":52414,\"onlineRunningTime\":8971.409999999089,\"pid\":133,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2349037,81,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4380.7672261186235,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.872,\"onlineExpGained\":4774.03853326873,\"onlineMoneyMade\":2349037,\"onlineRunningTime\":8971.409999999089,\"pid\":134,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[800632,28,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3292.6244337464127,\"offlineMoneyMade\":0,\"offlineRunningTime\":103868.966,\"onlineExpGained\":2569.5790547583015,\"onlineMoneyMade\":800632,\"onlineRunningTime\":8971.409999999089,\"pid\":135,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1299688,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1903.0183585315888,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.06599999999,\"onlineExpGained\":2486.106571388283,\"onlineMoneyMade\":1299688,\"onlineRunningTime\":8971.409999999089,\"pid\":136,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1709457,23,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1172.120521916048,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.15699999999,\"onlineExpGained\":1053.7104064970329,\"onlineMoneyMade\":1709457,\"onlineRunningTime\":8971.409999999089,\"pid\":137,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[160,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.7098543649873,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.245,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":160,\"onlineRunningTime\":8971.409999999089,\"pid\":138,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[42814,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2107.448298954588,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.33200000001,\"onlineExpGained\":1535.845121119793,\"onlineMoneyMade\":42814,\"onlineRunningTime\":8971.409999999089,\"pid\":139,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.2306659839938,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.424,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8971.409999999089,\"pid\":140,\"ramUsage\":3.2,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2460.6045939776936,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.504,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":141,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":82.38800000000059,\"minDifficulty\":28,\"moneyAvailable\":723668179.693653,\"moneyMax\":17689401800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":782,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-268641.cct\",\"type\":\"Total Ways to Sum\",\"data\":47,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-78069-Aevum.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[56,20,119,139,34,17,166,143,135,70,179,121,196,193,169,128,78,83,7,64,12,115,52,135,41,39,7]],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"1.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"icarus\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"icarus\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":92.2080000000007,\"minDifficulty\":31,\"moneyAvailable\":984076699.7939322,\"moneyMax\":23613704050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"47.7.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":126.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2399539,706,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5764.089311411955,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.58700000001,\"onlineExpGained\":6249.594160836312,\"onlineMoneyMade\":2399539,\"onlineRunningTime\":8973.20999999909,\"pid\":142,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[45283,67,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8000.884192122994,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.68099999998,\"onlineExpGained\":7064.892344537331,\"onlineMoneyMade\":45283,\"onlineRunningTime\":8973.20999999909,\"pid\":143,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2337983,88,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4580.7030926743555,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.775,\"onlineExpGained\":4825.261016638746,\"onlineMoneyMade\":2337983,\"onlineRunningTime\":8973.20999999909,\"pid\":144,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[836597,30,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3138.5768901518104,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.86899999999,\"onlineExpGained\":2593.977377004977,\"onlineMoneyMade\":836597,\"onlineRunningTime\":8973.20999999909,\"pid\":145,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1401448,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1967.555582563064,\"offlineMoneyMade\":0,\"offlineRunningTime\":103869.96,\"onlineExpGained\":2506.1221195527337,\"onlineMoneyMade\":1401448,\"onlineRunningTime\":8973.20999999909,\"pid\":146,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1597283,23,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1236.190619875631,\"offlineMoneyMade\":0,\"offlineRunningTime\":103870.063,\"onlineExpGained\":1051.5190194559202,\"onlineMoneyMade\":1597283,\"onlineRunningTime\":8973.20999999909,\"pid\":147,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[343,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.7176906817438,\"offlineMoneyMade\":0,\"offlineRunningTime\":103870.15,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":343,\"onlineRunningTime\":8973.20999999909,\"pid\":148,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[33617,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.1667515696433,\"offlineMoneyMade\":0,\"offlineRunningTime\":103870.251,\"onlineExpGained\":1511.3881859142296,\"onlineMoneyMade\":33617,\"onlineRunningTime\":8973.20999999909,\"pid\":149,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.235537808274,\"offlineMoneyMade\":0,\"offlineRunningTime\":103870.35300000003,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":150,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.1899856560298,\"offlineMoneyMade\":0,\"offlineRunningTime\":103870.451,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":151,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[68642182,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.86730256746,\"offlineMoneyMade\":0,\"offlineRunningTime\":103871.548,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":68642182,\"onlineRunningTime\":8973.20999999909,\"pid\":152,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.66300468025537,\"offlineMoneyMade\":0,\"offlineRunningTime\":103871.63399999999,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":153,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.5932947097876,\"offlineMoneyMade\":0,\"offlineRunningTime\":103871.71899999998,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":154,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17577,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.36558839523013,\"offlineMoneyMade\":0,\"offlineRunningTime\":103871.808,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17577,\"onlineRunningTime\":8973.20999999909,\"pid\":155,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.14675488921142,\"offlineMoneyMade\":0,\"offlineRunningTime\":103871.887,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":156,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.30779235128935,\"offlineMoneyMade\":0,\"offlineRunningTime\":103871.975,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":157,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4186507745177,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.049,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":158,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4813209712953,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.16399999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":159,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.4815057585339,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.231,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":160,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.8638694018505,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.31999999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":161,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.394,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":162,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.2105295168591,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.47400000002,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.20999999909,\"pid\":163,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[323090,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.6674236964352,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.54499999998,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":323090,\"onlineRunningTime\":8973.20999999909,\"pid\":164,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[208317,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.679464048572,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.62900000002,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":208317,\"onlineRunningTime\":8973.20999999909,\"pid\":165,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[943533,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.50639721001795,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.713,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":943533,\"onlineRunningTime\":8973.20999999909,\"pid\":166,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[263075,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.10130283422393,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.803,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":263075,\"onlineRunningTime\":8973.20999999909,\"pid\":167,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,13,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1028.250938530501,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.86900000002,\"onlineExpGained\":1662.982302936851,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":168,\"ramUsage\":3.2,\"server\":\"univ-energy\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2460.7019314483114,\"offlineMoneyMade\":0,\"offlineRunningTime\":103872.94799999999,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":169,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":84.38800000000053,\"minDifficulty\":28,\"moneyAvailable\":1212237934.524587,\"moneyMax\":29392586550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":895,\"serverGrowth\":84}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"74.9.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2444697,715,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5783.768255732469,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.00600000001,\"onlineExpGained\":6291.372505502221,\"onlineMoneyMade\":2444697,\"onlineRunningTime\":8972.80999999909,\"pid\":170,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[50257,79,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8295.772239003385,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.09000000001,\"onlineExpGained\":7158.337311277361,\"onlineMoneyMade\":50257,\"onlineRunningTime\":8972.80999999909,\"pid\":171,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2326050,77,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4339.554357002322,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.14799999999,\"onlineExpGained\":4738.507436939827,\"onlineMoneyMade\":2326050,\"onlineRunningTime\":8972.80999999909,\"pid\":172,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[895934,31,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3242.161976141001,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.232,\"onlineExpGained\":2607.272231648872,\"onlineMoneyMade\":895934,\"onlineRunningTime\":8972.80999999909,\"pid\":173,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1387990,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1967.6417565080944,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.302,\"onlineExpGained\":2483.9151843471705,\"onlineMoneyMade\":1387990,\"onlineRunningTime\":8972.80999999909,\"pid\":174,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1184443,15,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1095.4842318676792,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.394,\"onlineExpGained\":967.0740527158914,\"onlineMoneyMade\":1184443,\"onlineRunningTime\":8972.80999999909,\"pid\":175,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.4033827450413,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.476,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.80999999909,\"pid\":176,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[9571,2,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.23877593277,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.56899999999,\"onlineExpGained\":1471.4157025442148,\"onlineMoneyMade\":9571,\"onlineRunningTime\":8972.80999999909,\"pid\":177,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.2528966088212,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.65600000002,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.80999999909,\"pid\":178,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[2093,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.215732169483,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.759,\"onlineExpGained\":425.09783895588725,\"onlineMoneyMade\":2093,\"onlineRunningTime\":8972.80999999909,\"pid\":179,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67948125,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.631844140079,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.842,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67948125,\"onlineRunningTime\":8972.80999999909,\"pid\":180,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40910,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.67004999422693,\"offlineMoneyMade\":0,\"offlineRunningTime\":103873.945,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40910,\"onlineRunningTime\":8972.80999999909,\"pid\":181,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.617989447655,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.023,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.80999999909,\"pid\":182,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17562,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.3756077722194,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.124,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17562,\"onlineRunningTime\":8972.80999999909,\"pid\":183,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.15059396433367,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.217,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.80999999909,\"pid\":184,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[215386,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.3134641289932,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.31,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":215386,\"onlineRunningTime\":8972.80999999909,\"pid\":185,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56327,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4226059340011,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.39100000002,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56327,\"onlineRunningTime\":8972.80999999909,\"pid\":186,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[457683,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.48766165579593,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.463,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":457683,\"onlineRunningTime\":8972.80999999909,\"pid\":187,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.48786574916386,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.53700000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.80999999909,\"pid\":188,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[303352,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.86858019082968,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.60800000001,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":303352,\"onlineRunningTime\":8972.80999999909,\"pid\":189,\"ramUsage\":3.2,\"server\":\"titan-labs\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":78.38800000000059,\"minDifficulty\":27,\"moneyAvailable\":768897127.668937,\"moneyMax\":18752014475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794675-Bachman&Associates.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783812-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[47,35,123,183,112,179,21,138,128,94],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"63.5.0.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2402880,710,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5725.593522577548,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.68500000001,\"onlineExpGained\":6273.519037899437,\"onlineMoneyMade\":2402880,\"onlineRunningTime\":8972.409999999089,\"pid\":190,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[53313,87,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8339.518831053401,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.75700000001,\"onlineExpGained\":7213.903493423678,\"onlineMoneyMade\":53313,\"onlineRunningTime\":8972.409999999089,\"pid\":191,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2336390,83,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4436.190891187835,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.84800000001,\"onlineExpGained\":4787.421307350955,\"onlineMoneyMade\":2336390,\"onlineRunningTime\":8972.409999999089,\"pid\":192,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1019626,40,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3244.964345468311,\"offlineMoneyMade\":0,\"offlineRunningTime\":103874.94300000001,\"onlineExpGained\":2702.820665991681,\"onlineMoneyMade\":1019626,\"onlineRunningTime\":8972.409999999089,\"pid\":193,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1324766,38,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1903.4035740466177,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.03899999999,\"onlineExpGained\":2463.89963618272,\"onlineMoneyMade\":1324766,\"onlineRunningTime\":8972.409999999089,\"pid\":194,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1069619,15,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1095.279436968158,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.138,\"onlineExpGained\":970.7752085834853,\"onlineMoneyMade\":1069619,\"onlineRunningTime\":8972.409999999089,\"pid\":195,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[183,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.4167085258304,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.23000000001,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":183,\"onlineRunningTime\":8972.409999999089,\"pid\":196,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[8604,1,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1946.9714929547144,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.323,\"onlineExpGained\":1460.2829284619895,\"onlineMoneyMade\":8604,\"onlineRunningTime\":8972.409999999089,\"pid\":197,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[495,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.5499924790566,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.40600000002,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":495,\"onlineRunningTime\":8972.409999999089,\"pid\":198,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[5422,2,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.5559463785582,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.549,\"onlineExpGained\":438.451306558669,\"onlineMoneyMade\":5422,\"onlineRunningTime\":8972.409999999089,\"pid\":199,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[68236135,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.73493508531,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.62400000003,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":68236135,\"onlineRunningTime\":8972.409999999089,\"pid\":200,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.6754155297483,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.70500000002,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.409999999089,\"pid\":201,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.6368643760231,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.78400000001,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.409999999089,\"pid\":202,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17548,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.38331698197544,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.906,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17548,\"onlineRunningTime\":8972.409999999089,\"pid\":203,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.15350540027404,\"offlineMoneyMade\":0,\"offlineRunningTime\":103875.98400000003,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.409999999089,\"pid\":204,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[215243,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.3177319291754,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.06700000001,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":215243,\"onlineRunningTime\":8972.409999999089,\"pid\":205,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56279,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.42555963764607,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.14,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56279,\"onlineRunningTime\":8972.409999999089,\"pid\":206,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.49251025229535,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.22100000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.409999999089,\"pid\":207,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.49270882962634,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.29300000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.409999999089,\"pid\":208,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.87220593357108,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.36899999998,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.409999999089,\"pid\":209,\"ramUsage\":3.2,\"server\":\"microdyne\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":65.46800000000069,\"minDifficulty\":22,\"moneyAvailable\":554201398.0320283,\"moneyMax\":13174270150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":874,\"serverGrowth\":90}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170675.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[65,193,165,16,170,174,57,47,105,116,20,150,36,130,138,122,15,166,80,71,27,16,25,25,178,141,90,184,39],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"61.7.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":77.38800000000053,\"minDifficulty\":26,\"moneyAvailable\":869766472.6049026,\"moneyMax\":21064273525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":929,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-192164.cct\",\"type\":\"Total Ways to Sum\",\"data\":31,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"46.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":58.11599999999975,\"minDifficulty\":20,\"moneyAvailable\":900029720.2557391,\"moneyMax\":21014457000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"80.6.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":79.90800000000077,\"minDifficulty\":27,\"moneyAvailable\":1139601369.0052292,\"moneyMax\":27588242200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"92.4.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2486204,714,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5589.68660968069,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.44300000001,\"onlineExpGained\":6308.40085016812,\"onlineMoneyMade\":2486204,\"onlineRunningTime\":8973.80999999909,\"pid\":210,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[52045,81,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7981.063901162996,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.535,\"onlineExpGained\":7189.251181688487,\"onlineMoneyMade\":52045,\"onlineRunningTime\":8973.80999999909,\"pid\":211,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2332988,86,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4388.02904175275,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.63700000002,\"onlineExpGained\":4816.261016638744,\"onlineMoneyMade\":2332988,\"onlineRunningTime\":8973.80999999909,\"pid\":212,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[817348,36,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3374.638871013645,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.74599999998,\"onlineExpGained\":2656.2154085394413,\"onlineMoneyMade\":817348,\"onlineRunningTime\":8973.80999999909,\"pid\":213,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1407014,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1955.3899459294955,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.85399999999,\"onlineExpGained\":2508.3135065938463,\"onlineMoneyMade\":1407014,\"onlineRunningTime\":8973.80999999909,\"pid\":214,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[2059341,26,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1186.7532174101536,\"offlineMoneyMade\":0,\"offlineRunningTime\":103876.94,\"onlineExpGained\":1087.0208093053782,\"onlineMoneyMade\":2059341,\"onlineRunningTime\":8973.80999999909,\"pid\":215,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[344,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.7773513911009,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.025,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":344,\"onlineRunningTime\":8973.80999999909,\"pid\":216,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[16549,2,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1947.010341332522,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.115,\"onlineExpGained\":1473.6070895853277,\"onlineMoneyMade\":16549,\"onlineRunningTime\":8973.80999999909,\"pid\":217,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.2716070222077,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.22399999999,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":218,\"ramUsage\":3.2,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2460.831141817588,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.311,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":219,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnia\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnia\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":90.11600000000058,\"minDifficulty\":30,\"moneyAvailable\":949069096.9230866,\"moneyMax\":23135532300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":896,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"64.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":58.54799999999981,\"minDifficulty\":20,\"moneyAvailable\":979822979.8551264,\"moneyMax\":23216834975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":815,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645203-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[69,85,4]],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-952555.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((a)aa())\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"78.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":67.46800000000069,\"minDifficulty\":23,\"moneyAvailable\":820411830.0192751,\"moneyMax\":19691087600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":831,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-719434.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,4],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-204138-Aevum.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[55,185,7,171,168,188,48,144,195,100,37,35,122,92,151,35,96,96,191,50,153,101,167,86],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"63.6.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2451325,710,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5764.669276459976,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.387,\"onlineExpGained\":6269.136263817205,\"onlineMoneyMade\":2451325,\"onlineRunningTime\":8973.60999999909,\"pid\":220,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49302,77,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8241.013658956643,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.45799999998,\"onlineExpGained\":7144.954537195136,\"onlineMoneyMade\":49302,\"onlineRunningTime\":8973.60999999909,\"pid\":221,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2318347,90,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4581.161313917001,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.55700000002,\"onlineExpGained\":4843.026564803197,\"onlineMoneyMade\":2318347,\"onlineRunningTime\":8973.60999999909,\"pid\":222,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[741638,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3354.6161395834333,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.641,\"onlineExpGained\":2631.8170862927655,\"onlineMoneyMade\":741638,\"onlineRunningTime\":8973.60999999909,\"pid\":223,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1384306,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1903.4770658088185,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.717,\"onlineExpGained\":2497.2100389910647,\"onlineMoneyMade\":1384306,\"onlineRunningTime\":8973.60999999909,\"pid\":224,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1316642,17,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1093.2017622636552,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.78499999999,\"onlineExpGained\":989.2809879214549,\"onlineMoneyMade\":1316642,\"onlineRunningTime\":8973.60999999909,\"pid\":225,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[182,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.4366846205935,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.867,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":182,\"onlineRunningTime\":8973.60999999909,\"pid\":226,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[33209,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1947.0279759883392,\"offlineMoneyMade\":0,\"offlineRunningTime\":103877.93999999999,\"onlineExpGained\":1500.255411832004,\"onlineMoneyMade\":33209,\"onlineRunningTime\":8973.60999999909,\"pid\":227,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[498,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.5652773776949,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.01700000002,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":498,\"onlineRunningTime\":8973.60999999909,\"pid\":228,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[5449,2,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.5780438412394,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.09500000002,\"onlineExpGained\":438.451306558669,\"onlineMoneyMade\":5449,\"onlineRunningTime\":8973.60999999909,\"pid\":229,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67759393,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.87717420722,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.17399999998,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67759393,\"onlineRunningTime\":8973.60999999909,\"pid\":230,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40881,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.6831498272585,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.242,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40881,\"onlineRunningTime\":8973.60999999909,\"pid\":231,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[866,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1156.992945431894,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.32499999998,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":866,\"onlineRunningTime\":8973.60999999909,\"pid\":232,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17519,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.39406747930644,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.391,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17519,\"onlineRunningTime\":8973.60999999909,\"pid\":233,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.15760480752903,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.472,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.60999999909,\"pid\":234,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.32373648355824,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.539,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.60999999909,\"pid\":235,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56230,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.42974953972913,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.62100000001,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56230,\"onlineRunningTime\":8973.60999999909,\"pid\":236,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.49935013814195,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.70099999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.60999999909,\"pid\":237,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[662288,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.499559747547,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.77700000002,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":662288,\"onlineRunningTime\":8973.60999999909,\"pid\":238,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[302689,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.87731821024735,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.85199999998,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":302689,\"onlineRunningTime\":8973.60999999909,\"pid\":239,\"ramUsage\":3.2,\"server\":\"solaris\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"solaris\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"solaris\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":74.90800000000077,\"minDifficulty\":26,\"moneyAvailable\":800890171.6177795,\"moneyMax\":19236041600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814764.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[120,21,102,162,115,161,46,118,50,66,10,54,33,20,87,63,135,183,94,124,139],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"64.6.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":76.90800000000077,\"minDifficulty\":26,\"moneyAvailable\":1494209662.4601297,\"moneyMax\":36370607950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-358460-Bachman&Associates.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()a()())(\",\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-189424.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,1,0,0,0,1],[0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,0,1],[1,0,0,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"43.3.1.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":6.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2422410,695,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5784.2204453204195,\"offlineMoneyMade\":0,\"offlineRunningTime\":103878.93600000002,\"onlineExpGained\":6193.661990597746,\"onlineMoneyMade\":2422410,\"onlineRunningTime\":8974.009999999089,\"pid\":240,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[51962,80,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8169.758439516347,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.006,\"onlineExpGained\":7169.4114724006995,\"onlineMoneyMade\":51962,\"onlineRunningTime\":8974.009999999089,\"pid\":241,\"ramUsage\":3.2,\"server\":\"global-pharm\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":75.0120000000009,\"minDifficulty\":26,\"moneyAvailable\":1715619180.414775,\"moneyMax\":40498812600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":784,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"52.2.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":71.46800000000069,\"minDifficulty\":24,\"moneyAvailable\":1258924251.2580044,\"moneyMax\":30424295100,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":805,\"serverGrowth\":66}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570660-Netburners.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"247256970837\",100],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"75.6.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":77.38800000000059,\"minDifficulty\":26,\"moneyAvailable\":1370283247.1018817,\"moneyMax\":33251430975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":76}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-82180.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[186,117,78,38,50,142,128,135,191,25,71,153,186,176,41,43,177,165,113,125,162,197,57,99,53,11,37,194,50,113,136,121,155,46]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"90.0.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2395500,683,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5648.1870812353645,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.09700000001,\"onlineExpGained\":6150.37539094285,\"onlineMoneyMade\":2395500,\"onlineRunningTime\":8973.80999999909,\"pid\":242,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48217,81,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8392.642661119346,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.16199999998,\"onlineExpGained\":7173.9114724006995,\"onlineMoneyMade\":48217,\"onlineRunningTime\":8973.80999999909,\"pid\":243,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2314793,81,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4436.450730976581,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.24,\"onlineExpGained\":4769.655759186505,\"onlineMoneyMade\":2314793,\"onlineRunningTime\":8973.80999999909,\"pid\":244,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[939986,36,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3299.6359920240643,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.31199999998,\"onlineExpGained\":2658.4067955805544,\"onlineMoneyMade\":939986,\"onlineRunningTime\":8973.80999999909,\"pid\":245,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1385241,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2019.7506807381567,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.38699999999,\"onlineExpGained\":2483.915184347171,\"onlineMoneyMade\":1385241,\"onlineRunningTime\":8973.80999999909,\"pid\":246,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1864287,24,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1116.522494710732,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.45099999999,\"onlineExpGained\":1067.0052611409271,\"onlineMoneyMade\":1864287,\"onlineRunningTime\":8973.80999999909,\"pid\":247,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[161,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.7989309183899,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.52100000001,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":161,\"onlineRunningTime\":8973.80999999909,\"pid\":248,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[19563,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2187.994463029497,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.592,\"onlineExpGained\":1507.0054118320038,\"onlineMoneyMade\":19563,\"onlineRunningTime\":8973.80999999909,\"pid\":249,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[496,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.5749190224327,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.667,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":496,\"onlineRunningTime\":8973.80999999909,\"pid\":250,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3344,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.5922436752911,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.73300000001,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3344,\"onlineRunningTime\":8973.80999999909,\"pid\":251,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67515019,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4482.96883214743,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.799,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67515019,\"onlineRunningTime\":8973.80999999909,\"pid\":252,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.6881190448153,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.872,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":253,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.6814587691135,\"offlineMoneyMade\":0,\"offlineRunningTime\":103879.94599999998,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":254,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.4010888302796,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.014,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":255,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.1602773310691,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.094,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":256,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[215100,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.32768608122268,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.165,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":215100,\"onlineRunningTime\":8973.80999999909,\"pid\":257,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4324904551183,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.24399999999,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":258,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5038043379978,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.316,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":259,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.50400291532884,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.38800000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":260,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.88061452718605,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.45300000001,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8973.80999999909,\"pid\":261,\"ramUsage\":3.2,\"server\":\"unitalife\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":74.0120000000009,\"minDifficulty\":25,\"moneyAvailable\":1090560552.2320547,\"moneyMax\":25974602775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":787,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-763707-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,0,0,0],[0,1,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,1,0,0,0],[0,1,0,0,0,0,0],[0,1,0,0,0,0,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,0,0,0],[0,1,1,0,0,0,0]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"47.7.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2460326,723,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5726.035418132838,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.533,\"onlineExpGained\":6337.030872587337,\"onlineMoneyMade\":2460326,\"onlineRunningTime\":8975.00999999909,\"pid\":262,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[42866,73,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8289.338518228631,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.61499999999,\"onlineExpGained\":7109.423440866233,\"onlineMoneyMade\":42866,\"onlineRunningTime\":8975.00999999909,\"pid\":263,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2304797,90,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4477.99109904389,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.72000000003,\"onlineExpGained\":4849.600725926536,\"onlineMoneyMade\":2304797,\"onlineRunningTime\":8975.00999999909,\"pid\":264,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[871916,35,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3052.0679659356983,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.819,\"onlineExpGained\":2651.686102059997,\"onlineMoneyMade\":871916,\"onlineRunningTime\":8975.00999999909,\"pid\":265,\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2460.93637065298,\"offlineMoneyMade\":0,\"offlineRunningTime\":103880.93400000001,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":266,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":65.9000000000012,\"minDifficulty\":23,\"moneyAvailable\":821301795.2497569,\"moneyMax\":19470985725,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":664,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-752471.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"15722722134\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-329329.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"6607453\",9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"14.4.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2397848,706,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5939.858909899686,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.056,\"onlineExpGained\":6229.871677466311,\"onlineMoneyMade\":2397848,\"onlineRunningTime\":8974.40999999909,\"pid\":267,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[46285,84,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8199.826954590135,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.179,\"onlineExpGained\":7207.133955770714,\"onlineMoneyMade\":46285,\"onlineRunningTime\":8974.40999999909,\"pid\":268,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2295659,77,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4333.206740900611,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.281,\"onlineExpGained\":4740.698823980941,\"onlineMoneyMade\":2295659,\"onlineRunningTime\":8974.40999999909,\"pid\":269,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[762622,31,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3306.9329683832716,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.366,\"onlineExpGained\":2602.8894575666463,\"onlineMoneyMade\":762622,\"onlineRunningTime\":8974.40999999909,\"pid\":270,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1377336,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1955.515239383824,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.43200000002,\"onlineExpGained\":2508.3135065938463,\"onlineMoneyMade\":1377336,\"onlineRunningTime\":8974.40999999909,\"pid\":271,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1559166,21,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1174.635791192103,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.51400000001,\"onlineExpGained\":1031.5034712914692,\"onlineMoneyMade\":1559166,\"onlineRunningTime\":8974.40999999909,\"pid\":272,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[474,3,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.8166654983528,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.588,\"onlineExpGained\":482.82610166387104,\"onlineMoneyMade\":474,\"onlineRunningTime\":8974.40999999909,\"pid\":273,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[17757,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.4195106024579,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.67,\"onlineExpGained\":1484.7398636675532,\"onlineMoneyMade\":17757,\"onlineRunningTime\":8974.40999999909,\"pid\":274,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[490,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.5869215809748,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.73300000001,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":490,\"onlineRunningTime\":8974.40999999909,\"pid\":275,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3307,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.6100961977088,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.804,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3307,\"onlineRunningTime\":8974.40999999909,\"pid\":276,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67517833,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.08109815654,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.866,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":67517833,\"onlineRunningTime\":8974.40999999909,\"pid\":277,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40853,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.694432694852,\"offlineMoneyMade\":0,\"offlineRunningTime\":103881.943,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40853,\"onlineRunningTime\":8974.40999999909,\"pid\":278,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[865,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.0359254019634,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.026,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":865,\"onlineRunningTime\":8974.40999999909,\"pid\":279,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.4101997145367,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.12,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.40999999909,\"pid\":280,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.16374732772465,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.19999999998,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.40999999909,\"pid\":281,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.3328356181529,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.28500000002,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.40999999909,\"pid\":282,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56182,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.43608252353047,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.371,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56182,\"onlineRunningTime\":8974.40999999909,\"pid\":283,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.50976993198424,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.479,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.40999999909,\"pid\":284,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5100457338328,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.57900000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.40999999909,\"pid\":285,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.8852717844723,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.71499999998,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.40999999909,\"pid\":286,\"ramUsage\":3.2,\"server\":\"rho-construction\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":53.867999999995725,\"minDifficulty\":13,\"moneyAvailable\":2018033744.7431345,\"moneyMax\":13222733500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":502,\"serverGrowth\":51}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"17.7.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":126.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2408391,710,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5803.947855465594,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.812,\"onlineExpGained\":6264.753489734986,\"onlineMoneyMade\":2408391,\"onlineRunningTime\":8975.00999999909,\"pid\":287,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49058,87,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8289.742037441685,\"offlineMoneyMade\":0,\"offlineRunningTime\":103882.90800000001,\"onlineExpGained\":7233.782278017391,\"onlineMoneyMade\":49058,\"onlineRunningTime\":8975.00999999909,\"pid\":288,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2285946,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4340.129579665426,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.024,\"onlineExpGained\":4782.921307350956,\"onlineMoneyMade\":2285946,\"onlineRunningTime\":8975.00999999909,\"pid\":289,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[933121,37,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3323.8684149519127,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.268,\"onlineExpGained\":2667.3188761422234,\"onlineMoneyMade\":933121,\"onlineRunningTime\":8975.00999999909,\"pid\":290,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1287998,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1955.344389436013,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.351,\"onlineExpGained\":2519.416974196628,\"onlineMoneyMade\":1287998,\"onlineRunningTime\":8975.00999999909,\"pid\":291,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1197700,16,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1137.7525059450538,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.431,\"onlineExpGained\":975.9861332775605,\"onlineMoneyMade\":1197700,\"onlineRunningTime\":8975.00999999909,\"pid\":292,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[314,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.4792866777155,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.50599999998,\"onlineExpGained\":467.251940540533,\"onlineMoneyMade\":314,\"onlineRunningTime\":8975.00999999909,\"pid\":293,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[26359,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2107.7774717756447,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.603,\"onlineExpGained\":1509.1967988731167,\"onlineMoneyMade\":26359,\"onlineRunningTime\":8975.00999999909,\"pid\":294,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3055297324067,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.71699999999,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":295,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.2938490499937,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.83899999999,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":296,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67206903,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.203080827084,\"offlineMoneyMade\":0,\"offlineRunningTime\":103883.92800000001,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":67206903,\"onlineRunningTime\":8975.00999999909,\"pid\":297,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40824,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.70074634488884,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.01400000001,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40824,\"onlineRunningTime\":8975.00999999909,\"pid\":298,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.7261298745248,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.129,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":299,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.41927598954686,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.21800000001,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":300,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[826794,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.1672074383499,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.3,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":826794,\"onlineRunningTime\":8975.00999999909,\"pid\":301,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214958,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.33792928746553,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.382,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214958,\"onlineRunningTime\":8975.00999999909,\"pid\":302,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.43960872891108,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.45900000002,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":303,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[457407,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5154459340295,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.537,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":457407,\"onlineRunningTime\":8975.00999999909,\"pid\":304,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[661907,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.51562796324964,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.603,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":661907,\"onlineRunningTime\":8975.00999999909,\"pid\":305,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[302469,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.88932166293472,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.682,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":302469,\"onlineRunningTime\":8975.00999999909,\"pid\":306,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.748,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":307,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.2440804474407,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.823,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":308,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.69995367830563,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.89200000002,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":309,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[208209,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.70639560467168,\"offlineMoneyMade\":0,\"offlineRunningTime\":103884.97,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":208209,\"onlineRunningTime\":8975.00999999909,\"pid\":310,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.52923532113186,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.03600000001,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":311,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.1439015371732,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.12500000001,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.00999999909,\"pid\":312,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[127132720,13,13,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1028.3730838960241,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.20800000001,\"onlineExpGained\":2119.1127520591253,\"onlineMoneyMade\":127132720,\"onlineRunningTime\":8962.60999999908,\"pid\":313,\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.067378299762,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.30600000001,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":314,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":100,\"minDifficulty\":23,\"moneyAvailable\":41867835.47952294,\"moneyMax\":17609525400,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-376477-Bachman&Associates.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":943391107,\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-379923-TianDiHui.cct\",\"type\":\"Total Ways to Sum\",\"data\":14,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"22.2.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2397728,709,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5687.535101109736,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.39600000001,\"onlineExpGained\":6273.016286236435,\"onlineMoneyMade\":2397728,\"onlineRunningTime\":8974.20999999909,\"pid\":315,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[53547,90,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8460.999742197686,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.48800000001,\"onlineExpGained\":7251.665052099616,\"onlineMoneyMade\":53547,\"onlineRunningTime\":8974.20999999909,\"pid\":316,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2279419,81,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4340.284899091999,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.58200000001,\"onlineExpGained\":4774.038533268731,\"onlineMoneyMade\":2279419,\"onlineRunningTime\":8974.20999999909,\"pid\":317,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[728185,33,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3302.9990201097803,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.66999999998,\"onlineExpGained\":2622.9050057310965,\"onlineMoneyMade\":728185,\"onlineRunningTime\":8974.20999999909,\"pid\":318,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1361609,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1916.053179463602,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.77799999999,\"onlineExpGained\":2506.1221195527337,\"onlineMoneyMade\":1361609,\"onlineRunningTime\":8974.20999999909,\"pid\":319,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1678279,22,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1095.8786706628657,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.85600000001,\"onlineExpGained\":1044.7983259353637,\"onlineMoneyMade\":1678279,\"onlineRunningTime\":8974.20999999909,\"pid\":320,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[161,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.8544595016457,\"offlineMoneyMade\":0,\"offlineRunningTime\":103885.942,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":161,\"onlineRunningTime\":8974.20999999909,\"pid\":321,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[17035,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.5189899222432,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.02799999999,\"onlineExpGained\":1484.7398636675532,\"onlineMoneyMade\":17035,\"onlineRunningTime\":8974.20999999909,\"pid\":322,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3181093738598,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.11499999999,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.20999999909,\"pid\":323,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3368,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.649688309091,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.35199999998,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3368,\"onlineRunningTime\":8974.20999999909,\"pid\":324,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67041965,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.350072985934,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.46699999999,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":67041965,\"onlineRunningTime\":8974.20999999909,\"pid\":325,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.70850807979645,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.56000000003,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.20999999909,\"pid\":326,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.7531399689638,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.64900000002,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.20999999909,\"pid\":327,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17505,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.43012598846286,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.72600000001,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17505,\"onlineRunningTime\":8974.20999999909,\"pid\":328,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[826085,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.1713381513676,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.80699999999,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":826085,\"onlineRunningTime\":8974.20999999909,\"pid\":329,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214816,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.34408929956697,\"offlineMoneyMade\":0,\"offlineRunningTime\":103886.918,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214816,\"onlineRunningTime\":8974.20999999909,\"pid\":330,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4439421786269,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.02499999998,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.20999999909,\"pid\":331,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.52256437974336,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.118,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.20999999909,\"pid\":332,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5228787938509,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.23200000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.20999999909,\"pid\":333,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[302248,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.89480660255043,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.34600000002,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":302248,\"onlineRunningTime\":8974.20999999909,\"pid\":334,\"ramUsage\":3.2,\"server\":\"aevum-police\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":63.186000000002124,\"minDifficulty\":26,\"moneyAvailable\":450490333.8901486,\"moneyMax\":6429802425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":420,\"serverGrowth\":42}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"20.0.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2392749,700,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5765.441498790584,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.448,\"onlineExpGained\":6223.538023528461,\"onlineMoneyMade\":2392749,\"onlineRunningTime\":8975.80999999909,\"pid\":335,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[47491,75,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8138.140199684336,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.56200000002,\"onlineExpGained\":7113.845290254381,\"onlineMoneyMade\":47491,\"onlineRunningTime\":8975.80999999909,\"pid\":336,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2265332,87,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4623.240467014775,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.67199999999,\"onlineExpGained\":4816.37824255652,\"onlineMoneyMade\":2265332,\"onlineRunningTime\":8975.80999999909,\"pid\":337,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[840019,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3287.135236899097,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.74699999999,\"onlineExpGained\":2636.199860374991,\"onlineMoneyMade\":840019,\"onlineRunningTime\":8975.80999999909,\"pid\":338,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1386032,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2019.9986221946701,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.84,\"onlineExpGained\":2517.2255871555158,\"onlineMoneyMade\":1386032,\"onlineRunningTime\":8975.80999999909,\"pid\":339,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1065771,16,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1139.6953282479085,\"offlineMoneyMade\":0,\"offlineRunningTime\":103887.916,\"onlineExpGained\":975.9861332775605,\"onlineMoneyMade\":1065771,\"onlineRunningTime\":8975.80999999909,\"pid\":340,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[162,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.872472818508,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.01800000001,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":162,\"onlineRunningTime\":8975.80999999909,\"pid\":341,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[27612,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2107.8830175981566,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.107,\"onlineExpGained\":1509.1967988731167,\"onlineMoneyMade\":27612,\"onlineRunningTime\":8975.80999999909,\"pid\":342,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3289729692083,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.185,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.80999999909,\"pid\":343,\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.1561844823223,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.262,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":344,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":45,\"hackDifficulty\":62.585999999995394,\"minDifficulty\":15,\"moneyAvailable\":448291952.34404874,\"moneyMax\":4988442250,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":387,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-915729-Bachman&Associates.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)()((()a))\",\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-829905.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[131,7,68,80,154,48,129,95,80,153,98,38,166,180,70,2,117,72,161,33,165,62,166,147,10,131,70,134,175,151],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-144038-BitRunners.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"922822321\",\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"77.7.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2435547,722,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5843.25682321201,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.34400000001,\"onlineExpGained\":6322.254041758929,\"onlineMoneyMade\":2435547,\"onlineRunningTime\":8976.009999999093,\"pid\":345,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48344,81,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8119.999092970826,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.425,\"onlineExpGained\":7168.563784135884,\"onlineMoneyMade\":48344,\"onlineRunningTime\":8976.009999999093,\"pid\":346,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2256242,79,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4437.008074737311,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.498,\"onlineExpGained\":4751.890211022053,\"onlineMoneyMade\":2256242,\"onlineRunningTime\":8976.009999999093,\"pid\":347,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[562360,26,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3272.179898902811,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.57500000001,\"onlineExpGained\":2547.3721195527373,\"onlineMoneyMade\":562360,\"onlineRunningTime\":8976.009999999093,\"pid\":348,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1356499,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2020.0219099894873,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.65899999999,\"onlineExpGained\":2517.2255871555158,\"onlineMoneyMade\":1356499,\"onlineRunningTime\":8976.009999999093,\"pid\":349,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1289162,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1174.2831073251784,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.73700000001,\"onlineExpGained\":1009.2965360859057,\"onlineMoneyMade\":1289162,\"onlineRunningTime\":8976.009999999093,\"pid\":350,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[182,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.5195472945747,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.811,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":182,\"onlineRunningTime\":8976.009999999093,\"pid\":351,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43318,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2107.9010309287664,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.88700000002,\"onlineExpGained\":1535.845121119793,\"onlineMoneyMade\":43318,\"onlineRunningTime\":8976.009999999093,\"pid\":352,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3330190781459,\"offlineMoneyMade\":0,\"offlineRunningTime\":103888.959,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":353,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.3342000510339,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.03300000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":354,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66872461,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.500608152471,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.11099999999,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":66872461,\"onlineRunningTime\":8976.009999999093,\"pid\":355,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.71648931388455,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.17799999999,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":356,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.7809494962498,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.249,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":357,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.4414086029655,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.33399999999,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":358,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.17562045018428,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.406,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":359,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214673,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.3504193435482,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.524,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214673,\"onlineRunningTime\":8976.009999999093,\"pid\":360,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4483313586002,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.624,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":361,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5298234844,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.75,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":362,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5301020442672,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.851,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":363,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.90020918571534,\"offlineMoneyMade\":0,\"offlineRunningTime\":103889.96999999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.009999999093,\"pid\":364,\"ramUsage\":3.2,\"server\":\"zb-institute\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":79.1440000000013,\"minDifficulty\":28,\"moneyAvailable\":1058706111.531985,\"moneyMax\":24815867775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":764,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-148957.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()((aaa)a))))a(a((\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"53.0.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2397868,701,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5668.591585540162,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.114,\"onlineExpGained\":6241.008993060987,\"onlineMoneyMade\":2397868,\"onlineRunningTime\":8975.209999999091,\"pid\":365,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49245,79,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8021.2238468106125,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.21399999999,\"onlineExpGained\":7164.141934747735,\"onlineMoneyMade\":49245,\"onlineRunningTime\":8975.209999999091,\"pid\":366,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2246900,86,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4388.837090416641,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.30099999998,\"onlineExpGained\":4816.261016638743,\"onlineMoneyMade\":2246900,\"onlineRunningTime\":8975.209999999091,\"pid\":367,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[773696,31,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3278.294945974944,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.452,\"onlineExpGained\":2605.0808446077585,\"onlineMoneyMade\":773696,\"onlineRunningTime\":8975.209999999091,\"pid\":368,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1352123,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1955.7777182064794,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.54099999998,\"onlineExpGained\":2497.2100389910647,\"onlineMoneyMade\":1352123,\"onlineRunningTime\":8975.209999999091,\"pid\":369,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1373423,20,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1151.9197715573926,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.652,\"onlineExpGained\":1020.4000036886874,\"onlineMoneyMade\":1373423,\"onlineRunningTime\":8975.209999999091,\"pid\":370,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[162,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.8960021387027,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.734,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":162,\"onlineRunningTime\":8975.209999999091,\"pid\":371,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[27139,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2107.9462479905824,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.84100000001,\"onlineExpGained\":1509.1967988731167,\"onlineMoneyMade\":27139,\"onlineRunningTime\":8975.209999999091,\"pid\":372,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[172,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.34334516964,\"offlineMoneyMade\":0,\"offlineRunningTime\":103890.92700000001,\"onlineExpGained\":284.4539159873184,\"onlineMoneyMade\":172,\"onlineRunningTime\":8975.209999999091,\"pid\":373,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3302,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.690392093896,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.032,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3302,\"onlineRunningTime\":8975.209999999091,\"pid\":374,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66472891,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4483.612681768221,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.1,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66472891,\"onlineRunningTime\":8975.209999999091,\"pid\":375,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.72262614513716,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.19099999999,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":376,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[847,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.1432480074384,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.256,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":847,\"onlineRunningTime\":8975.209999999091,\"pid\":377,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17490,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.4502512655589,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.37800000001,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17490,\"onlineRunningTime\":8975.209999999091,\"pid\":378,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.1790212446273,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.47000000002,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":379,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.35538913249127,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.56999999999,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":380,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4517714354011,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.66100000002,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":381,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.53536985957646,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.76100000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":382,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5356291133142,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.85500000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":383,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.90430230131443,\"offlineMoneyMade\":0,\"offlineRunningTime\":103891.95800000001,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.209999999091,\"pid\":384,\"ramUsage\":3.2,\"server\":\"summit-uni\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":63.45999999999716,\"minDifficulty\":20,\"moneyAvailable\":631272323.461548,\"moneyMax\":5944870325,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":447,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-730474-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[62,31,30,105,183],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"5.4.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"syscore\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"syscore\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":67.1240000000017,\"minDifficulty\":23,\"moneyAvailable\":565391865.7759272,\"moneyMax\":12123215950,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":625,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-848572.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":301327217,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"15.5.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2411785,712,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5629.862081808495,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.033,\"onlineExpGained\":6299.132550340669,\"onlineMoneyMade\":2411785,\"onlineRunningTime\":8975.409999999092,\"pid\":385,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[39247,77,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8253.218833750841,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.12200000002,\"onlineExpGained\":7135.419451377722,\"onlineMoneyMade\":39247,\"onlineRunningTime\":8975.409999999092,\"pid\":386,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2237420,87,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4575.237269218515,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.20900000002,\"onlineExpGained\":4818.569629597633,\"onlineMoneyMade\":2237420,\"onlineRunningTime\":8975.409999999092,\"pid\":387,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1064121,40,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3425.753815741242,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.31800000001,\"onlineExpGained\":2698.4378919094565,\"onlineMoneyMade\":1064121,\"onlineRunningTime\":8975.409999999092,\"pid\":388,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1343754,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1968.181835620583,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.398,\"onlineExpGained\":2495.018651949952,\"onlineMoneyMade\":1343754,\"onlineRunningTime\":8975.409999999092,\"pid\":389,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1394646,20,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1160.0360828984963,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.506,\"onlineExpGained\":1020.4000036886874,\"onlineMoneyMade\":1394646,\"onlineRunningTime\":8975.409999999092,\"pid\":390,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.5482501778229,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.59599999999,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.409999999092,\"pid\":391,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[32760,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1947.3485399538297,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.69900000001,\"onlineExpGained\":1500.255411832004,\"onlineMoneyMade\":32760,\"onlineRunningTime\":8975.409999999092,\"pid\":392,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[491,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.6517389037887,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.784,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":491,\"onlineRunningTime\":8975.409999999092,\"pid\":393,\"ramUsage\":3.2,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.292444619612,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.89,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":394,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":64.81999999999802,\"minDifficulty\":20,\"moneyAvailable\":561381868.6204956,\"moneyMax\":9025750325,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":446,\"serverGrowth\":30}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"64.6.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2459032,729,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5513.306988451781,\"offlineMoneyMade\":0,\"offlineRunningTime\":103892.966,\"onlineExpGained\":6395.334810256141,\"onlineMoneyMade\":2459032,\"onlineRunningTime\":8976.609999999093,\"pid\":395,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48746,81,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8120.600448439245,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.049,\"onlineExpGained\":7166.372397094773,\"onlineMoneyMade\":48746,\"onlineRunningTime\":8976.609999999093,\"pid\":396,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2209678,73,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4405.0964081383,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.139,\"onlineExpGained\":4711.898189999076,\"onlineMoneyMade\":2209678,\"onlineRunningTime\":8976.609999999093,\"pid\":397,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[937426,37,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3311.673979522245,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.21500000001,\"onlineExpGained\":2669.510263183336,\"onlineMoneyMade\":937426,\"onlineRunningTime\":8976.609999999093,\"pid\":398,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1281727,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2032.5064785882435,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.29700000002,\"onlineExpGained\":2481.723797306058,\"onlineMoneyMade\":1281727,\"onlineRunningTime\":8976.609999999093,\"pid\":399,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1293173,17,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1154.5274937936772,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.37899999999,\"onlineExpGained\":990.7907567479361,\"onlineMoneyMade\":1293173,\"onlineRunningTime\":8976.609999999093,\"pid\":400,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[182,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.5547149852146,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.449,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":182,\"onlineRunningTime\":8976.609999999093,\"pid\":401,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34115,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.6875626703704,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.52600000001,\"onlineExpGained\":1511.3881859142296,\"onlineMoneyMade\":34115,\"onlineRunningTime\":8976.609999999093,\"pid\":402,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3573757748472,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.60699999999,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.609999999093,\"pid\":403,\"ramUsage\":3.2,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.3158369055154,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.68700000002,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":404,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":65.16087499999283,\"minDifficulty\":12,\"moneyAvailable\":1055768930.9235907,\"moneyMax\":4814372125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":296,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"49.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"comptek\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"comptek\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":62,\"hackDifficulty\":67.7768749999972,\"minDifficulty\":21,\"moneyAvailable\":852304860.0109282,\"moneyMax\":6119572375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":388,\"serverGrowth\":59}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-774040.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,30],[18,23],[17,22],[9,19],[25,31],[13,15],[3,9],[12,22],[4,12]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"31.1.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2415577,707,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5804.932370971927,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.762,\"onlineExpGained\":6254.98243824454,\"onlineMoneyMade\":2415577,\"onlineRunningTime\":8976.009999999093,\"pid\":405,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[50055,91,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8446.660145038115,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.846,\"onlineExpGained\":7237.669041588125,\"onlineMoneyMade\":50055,\"onlineRunningTime\":8976.009999999093,\"pid\":406,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2220187,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.604514321431,\"offlineMoneyMade\":0,\"offlineRunningTime\":103893.91699999999,\"onlineExpGained\":4776.3471462276175,\"onlineMoneyMade\":2220187,\"onlineRunningTime\":8976.009999999093,\"pid\":407,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[679926,27,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3186.047812312352,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.00600000001,\"onlineExpGained\":2558.475587155519,\"onlineMoneyMade\":679926,\"onlineRunningTime\":8976.009999999093,\"pid\":408,\"ramUsage\":3.2,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.3273357380485,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.07999999999,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":409,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"netlink\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"netlink\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":66.73087499999718,\"minDifficulty\":21,\"moneyAvailable\":1290752498.7564201,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":71}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"70.0.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":71.77175000000277,\"minDifficulty\":18,\"moneyAvailable\":370256361.569049,\"moneyMax\":2087769050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":293,\"serverGrowth\":65}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-10611.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,8],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621228-Sector-12.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((()())()a)\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"66.4.6.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2416635,717,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5928.068637340831,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.16500000001,\"onlineExpGained\":6291.587419684802,\"onlineMoneyMade\":2416635,\"onlineRunningTime\":8978.209999999095,\"pid\":410,\"ramUsage\":3.2,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":75.28862499998586,\"minDifficulty\":1,\"moneyAvailable\":997382,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-578947.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a(a(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-85362-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,1,0,1,0],[0,1,0,0,0,1],[0,1,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"38.8.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2382631,705,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5694.820018886603,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.24099999998,\"onlineExpGained\":6259.257755235472,\"onlineMoneyMade\":2382631,\"onlineRunningTime\":8978.209999999095,\"pid\":411,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[46426,63,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7959.087872263657,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.322,\"onlineExpGained\":7006.482463614717,\"onlineMoneyMade\":46426,\"onlineRunningTime\":8978.209999999095,\"pid\":412,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2213428,79,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4308.614979153333,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.396,\"onlineExpGained\":4769.577608574655,\"onlineMoneyMade\":2213428,\"onlineRunningTime\":8978.209999999095,\"pid\":413,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[926788,38,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3435.9331036766457,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.47200000001,\"onlineExpGained\":2688.113730786118,\"onlineMoneyMade\":926788,\"onlineRunningTime\":8978.209999999095,\"pid\":414,\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.3413455634745,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.558,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":415,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":75.92050000006186,\"minDifficulty\":3,\"moneyAvailable\":9934.575221027311,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316573-FoodNStuff.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[133,64,100,106,182,40,130,96,153,96,55,62,3,187,112,81,177,114,52,76,85,13,196,43,50,170,57,182,121,193,173,109,38,26,30]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-238944-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[18,191,187,9,86,197,189,80,13,96,86,169,179,196,41,179,166,53,35,11,92,58,103,126,163,109,107,186,90,48,84],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"10.3.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2408717,716,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5908.669744060733,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.668,\"onlineExpGained\":6288.893280980692,\"onlineMoneyMade\":2408717,\"onlineRunningTime\":8978.009999999094,\"pid\":416,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[53059,73,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8143.80534063295,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.76399999998,\"onlineExpGained\":7093.118817395858,\"onlineMoneyMade\":53059,\"onlineRunningTime\":8978.009999999094,\"pid\":417,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2209052,78,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4501.753937811268,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.867,\"onlineExpGained\":4751.929286327978,\"onlineMoneyMade\":2209052,\"onlineRunningTime\":8978.009999999094,\"pid\":418,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[926743,34,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3325.312351417595,\"offlineMoneyMade\":0,\"offlineRunningTime\":103894.93999999999,\"onlineExpGained\":2650.2740214983296,\"onlineMoneyMade\":926743,\"onlineRunningTime\":8978.009999999094,\"pid\":419,\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.354899332659,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.016,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":420,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":72.80875000000647,\"minDifficulty\":3,\"moneyAvailable\":12540.887467736582,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"26.9.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2425998,721,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5675.446881871248,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.09800000001,\"onlineExpGained\":6339.617554200161,\"onlineMoneyMade\":2425998,\"onlineRunningTime\":8978.009999999094,\"pid\":421,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[46668,77,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8150.7593216027835,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.18099999998,\"onlineExpGained\":7133.0326878069845,\"onlineMoneyMade\":46668,\"onlineRunningTime\":8978.009999999094,\"pid\":422,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2198783,89,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4501.776951388738,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.251,\"onlineExpGained\":4849.639801232462,\"onlineMoneyMade\":2198783,\"onlineRunningTime\":8978.009999999094,\"pid\":423,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[907133,38,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3435.756925063478,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.326,\"onlineExpGained\":2690.3051178272303,\"onlineMoneyMade\":907133,\"onlineRunningTime\":8978.009999999094,\"pid\":424,\"ramUsage\":3.2,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.366065148878,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.39600000001,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":425,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":74.62512500030721,\"minDifficulty\":5,\"moneyAvailable\":11279404.958733603,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-877527.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())))()a))()))\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"76.8.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2421908,715,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5766.186134059853,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.46900000001,\"onlineExpGained\":6296.820909706816,\"onlineMoneyMade\":2421908,\"onlineRunningTime\":8977.209999999093,\"pid\":426,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[45127,79,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8221.832591511182,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.53900000002,\"onlineExpGained\":7146.415461889208,\"onlineMoneyMade\":45127,\"onlineRunningTime\":8977.209999999093,\"pid\":427,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2184729,86,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4453.520407281392,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.60699999999,\"onlineExpGained\":4825.182866026896,\"onlineMoneyMade\":2184729,\"onlineRunningTime\":8977.209999999093,\"pid\":428,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[981203,36,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3322.009833375232,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.67600000002,\"onlineExpGained\":2656.2154085394423,\"onlineMoneyMade\":981203,\"onlineRunningTime\":8977.209999999093,\"pid\":429,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1325265,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2020.2253455896505,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.749,\"onlineExpGained\":2517.2255871555153,\"onlineMoneyMade\":1325265,\"onlineRunningTime\":8977.209999999093,\"pid\":430,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1729813,25,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.9711779777915,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.82,\"onlineExpGained\":1075.9173417025963,\"onlineMoneyMade\":1729813,\"onlineRunningTime\":8977.209999999093,\"pid\":431,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.5731479910233,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.89299999998,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8977.209999999093,\"pid\":432,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[35742,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.0652427303576,\"offlineMoneyMade\":0,\"offlineRunningTime\":103895.96700000002,\"onlineExpGained\":1522.5209599964548,\"onlineMoneyMade\":35742,\"onlineRunningTime\":8977.209999999093,\"pid\":433,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[493,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.6707508812656,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.04000000001,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":493,\"onlineRunningTime\":8977.209999999093,\"pid\":434,\"ramUsage\":3.2,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.3877653805253,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.117,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":435,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zer0\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":72.88187500002319,\"minDifficulty\":8,\"moneyAvailable\":7521744.799412351,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"94.6.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2465246,737,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5766.241817998084,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.186,\"onlineExpGained\":6404.30247610173,\"onlineMoneyMade\":2465246,\"onlineRunningTime\":8977.609999999093,\"pid\":436,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[52242,96,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8546.476540904821,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.259,\"onlineExpGained\":7287.235223734441,\"onlineMoneyMade\":52242,\"onlineRunningTime\":8977.609999999093,\"pid\":437,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2178592,80,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4501.843665638084,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.33200000001,\"onlineExpGained\":4769.6948344924285,\"onlineMoneyMade\":2178592,\"onlineRunningTime\":8977.609999999093,\"pid\":438,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[581833,23,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3261.389925087254,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.39900000002,\"onlineExpGained\":2525.944490826618,\"onlineMoneyMade\":581833,\"onlineRunningTime\":8977.609999999093,\"pid\":439,\"ramUsage\":3.2,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.398182999718,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.46800000001,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":440,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":75.24850000001214,\"minDifficulty\":7,\"moneyAvailable\":7529979.732961018,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-610885-FoodNStuff.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,4],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-690785-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[22,16,154,142,118,86,46,70,123,70,162,159,178,7,26,200,21,175,120,110,174,189,101,31,55,90,84,137,183,189,90,191,153,75,59,7,154,26,196,28,18,42,53],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"98.4.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2364179,696,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5785.707582066355,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.54399999998,\"onlineExpGained\":6201.804533506452,\"onlineMoneyMade\":2364179,\"onlineRunningTime\":8977.009999999093,\"pid\":441,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[46245,73,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8031.102219606794,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.613,\"onlineExpGained\":7100.462516172155,\"onlineMoneyMade\":46245,\"onlineRunningTime\":8977.009999999093,\"pid\":442,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2170759,83,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4501.865205356877,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.68999999999,\"onlineExpGained\":4796.343156739108,\"onlineMoneyMade\":2170759,\"onlineRunningTime\":8977.009999999093,\"pid\":443,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[831056,31,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3214.8558047952224,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.766,\"onlineExpGained\":2605.080844607759,\"onlineMoneyMade\":831056,\"onlineRunningTime\":8977.009999999093,\"pid\":444,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1363759,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2020.2574021488172,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.84100000001,\"onlineExpGained\":2517.2255871555158,\"onlineMoneyMade\":1363759,\"onlineRunningTime\":8977.009999999093,\"pid\":445,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1225329,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1165.8480344239977,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.915,\"onlineExpGained\":998.193068483124,\"onlineMoneyMade\":1225329,\"onlineRunningTime\":8977.009999999093,\"pid\":446,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[163,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.9501243872637,\"offlineMoneyMade\":0,\"offlineRunningTime\":103896.996,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":163,\"onlineRunningTime\":8977.009999999093,\"pid\":447,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[50186,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1947.443612686803,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.078,\"onlineExpGained\":1526.9037340786804,\"onlineMoneyMade\":50186,\"onlineRunningTime\":8977.009999999093,\"pid\":448,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[494,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.6772556893362,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.15300000002,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":494,\"onlineRunningTime\":8977.009999999093,\"pid\":449,\"ramUsage\":3.2,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.4208639373396,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.23199999999,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":450,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":74.08450000000279,\"minDifficulty\":8,\"moneyAvailable\":536818.9632666655,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-268161-OmegaSoftware.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,7,-2,8,-5,5,-4,9,8,3],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"57.7.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2469167,743,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5844.081120087818,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.303,\"onlineExpGained\":6424.850082408625,\"onlineMoneyMade\":2469167,\"onlineRunningTime\":8976.809999999094,\"pid\":451,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[54774,81,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8330.257158746263,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.379,\"onlineExpGained\":7160.5677736244,\"onlineMoneyMade\":54774,\"onlineRunningTime\":8976.809999999094,\"pid\":452,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2145372,71,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4405.354319764047,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.46900000001,\"onlineExpGained\":4694.132641834623,\"onlineMoneyMade\":2145372,\"onlineRunningTime\":8976.809999999094,\"pid\":453,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[577473,23,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3149.894111563617,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.569,\"onlineExpGained\":2518.4444908266178,\"onlineMoneyMade\":577473,\"onlineRunningTime\":8976.809999999094,\"pid\":454,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1313923,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1955.9792790881986,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.65100000001,\"onlineExpGained\":2486.106571388283,\"onlineMoneyMade\":1313923,\"onlineRunningTime\":8976.809999999094,\"pid\":455,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[996695,15,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1215.8589433670613,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.72899999999,\"onlineExpGained\":962.691278633666,\"onlineMoneyMade\":996695,\"onlineRunningTime\":8976.809999999094,\"pid\":456,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.5875844783262,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.803,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":457,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[41362,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1947.4609408418946,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.878,\"onlineExpGained\":1513.5795729553422,\"onlineMoneyMade\":41362,\"onlineRunningTime\":8976.809999999094,\"pid\":458,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3800352161476,\"offlineMoneyMade\":0,\"offlineRunningTime\":103897.947,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":459,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3321,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.7509949191674,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.02199999998,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3321,\"onlineRunningTime\":8976.809999999094,\"pid\":460,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66821291,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4484.0091960956215,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.095,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66821291,\"onlineRunningTime\":8976.809999999094,\"pid\":461,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.7439236628374,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.177,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":462,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[851,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.2244325830952,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.24699999999,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":851,\"onlineRunningTime\":8976.809999999094,\"pid\":463,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.48031804883857,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.328,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":464,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.19044455270566,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.40299999999,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":465,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.37218099513225,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.483,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":466,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.46340723763885,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.551,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":467,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.55431744657915,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.63100000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":468,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5545160239102,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.70300000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.809999999094,\"pid\":469,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[302028,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.91834201724498,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.777,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":302028,\"onlineRunningTime\":8976.809999999094,\"pid\":470,\"ramUsage\":3.2,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":69.77074999999532,\"minDifficulty\":10,\"moneyAvailable\":24008126.792721663,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-154121-BitRunners.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,2,0],\"reward\":{\"name\":\"BitRunners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"82.6.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2430330,736,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5753.486619096259,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.855,\"onlineExpGained\":6402.506383632314,\"onlineMoneyMade\":2430330,\"onlineRunningTime\":8977.809999999094,\"pid\":471,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[50187,81,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8091.043419658811,\"offlineMoneyMade\":0,\"offlineRunningTime\":103898.935,\"onlineExpGained\":7169.3333217888485,\"onlineMoneyMade\":50187,\"onlineRunningTime\":8977.809999999094,\"pid\":472,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2141560,85,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4502.004833658428,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.004,\"onlineExpGained\":4814.108704903556,\"onlineMoneyMade\":2141560,\"onlineRunningTime\":8977.809999999094,\"pid\":473,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[814855,30,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3236.8371772047217,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.09400000001,\"onlineExpGained\":2608.051538128315,\"onlineMoneyMade\":814855,\"onlineRunningTime\":8977.809999999094,\"pid\":474,\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.478545794355,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.18599999999,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":475,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":41.49475000013227,\"minDifficulty\":5,\"moneyAvailable\":586504.3489437039,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-407879.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-4,-8,-7,-8,3,0,6,2,4,7,-10,8,5,2,6,0,1,9,6,1,-2,4,9,-6,0,-2,-3,-3,-8,-6,6,7,-5,1,7,6,2,-9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"28.5.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2368745,717,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5688.722695683677,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.27499999998,\"onlineExpGained\":6315.357509361702,\"onlineMoneyMade\":2368745,\"onlineRunningTime\":8977.809999999094,\"pid\":476,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[52531,83,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8047.587723574823,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.35200000001,\"onlineExpGained\":7189.290256994413,\"onlineMoneyMade\":52531,\"onlineRunningTime\":8977.809999999094,\"pid\":477,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2144839,80,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4495.214104587224,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.44600000001,\"onlineExpGained\":4771.886221533542,\"onlineMoneyMade\":2144839,\"onlineRunningTime\":8977.809999999094,\"pid\":478,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[705438,28,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3459.387652030413,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.518,\"onlineExpGained\":2579.2704417994146,\"onlineMoneyMade\":705438,\"onlineRunningTime\":8977.809999999094,\"pid\":479,\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.491137112816,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.61,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":480,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":65.85987500009585,\"minDifficulty\":5,\"moneyAvailable\":24212657.69605922,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828596-TheBlackHand.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[48,17,2,17,33],[7,25,50,38,18],[29,21,25,15,19],[45,35,18,43,12],[5,13,27,11,25],[25,15,43,38,16],[43,41,42,2,42],[20,46,2,46,8],[16,42,18,10,20],[27,44,23,6,15]],\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"8.4.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2374571,716,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5727.631668775822,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.691,\"onlineExpGained\":6306.089209534257,\"onlineMoneyMade\":2374571,\"onlineRunningTime\":8977.209999999093,\"pid\":481,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[54087,77,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8330.58958316391,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.77399999999,\"onlineExpGained\":7125.036677295496,\"onlineMoneyMade\":54087,\"onlineRunningTime\":8977.209999999093,\"pid\":482,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2136564,84,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4405.4949207405725,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.84199999999,\"onlineExpGained\":4809.608704903557,\"onlineMoneyMade\":2136564,\"onlineRunningTime\":8977.209999999093,\"pid\":483,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[741577,29,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3208.992625415531,\"offlineMoneyMade\":0,\"offlineRunningTime\":103899.933,\"onlineExpGained\":2582.8739094021953,\"onlineMoneyMade\":741577,\"onlineRunningTime\":8977.209999999093,\"pid\":484,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1366431,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1904.0941992789014,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.008,\"onlineExpGained\":2508.3135065938463,\"onlineMoneyMade\":1366431,\"onlineRunningTime\":8977.209999999093,\"pid\":485,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1838045,25,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1113.7821815558768,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.10100000001,\"onlineExpGained\":1078.108728743709,\"onlineMoneyMade\":1838045,\"onlineRunningTime\":8977.209999999093,\"pid\":486,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.6054376159946,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.16500000001,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8977.209999999093,\"pid\":487,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43264,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.164611234564,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.244,\"onlineExpGained\":1535.845121119793,\"onlineMoneyMade\":43264,\"onlineRunningTime\":8977.209999999093,\"pid\":488,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3923904532996,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.311,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8977.209999999093,\"pid\":489,\"ramUsage\":3.2,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.5143693472332,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.40000000002,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":490,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.173999999999981,\"minDifficulty\":7,\"moneyAvailable\":80321480.5119294,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"81.4.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2304335,680,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5552.738933881822,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.46499999998,\"onlineExpGained\":6146.675748912742,\"onlineMoneyMade\":2304335,\"onlineRunningTime\":8977.409999999092,\"pid\":491,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[51859,82,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7954.381906802208,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.55399999999,\"onlineExpGained\":7184.790256994413,\"onlineMoneyMade\":51859,\"onlineRunningTime\":8977.409999999092,\"pid\":492,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2127402,84,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4453.821387533685,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.621,\"onlineExpGained\":4807.417317862443,\"onlineMoneyMade\":2127402,\"onlineRunningTime\":8977.409999999092,\"pid\":493,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[793414,30,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3315.0440557440097,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.70400000003,\"onlineExpGained\":2605.8601510872027,\"onlineMoneyMade\":793414,\"onlineRunningTime\":8977.409999999092,\"pid\":494,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1362900,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1956.067454020165,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.777,\"onlineExpGained\":2530.5204417994096,\"onlineMoneyMade\":1362900,\"onlineRunningTime\":8977.409999999092,\"pid\":495,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1022257,15,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1081.0843659612797,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.866,\"onlineExpGained\":967.0740527158914,\"onlineMoneyMade\":1022257,\"onlineRunningTime\":8977.409999999092,\"pid\":496,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[163,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.9841727419096,\"offlineMoneyMade\":0,\"offlineRunningTime\":103900.93499999998,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":163,\"onlineRunningTime\":8977.409999999092,\"pid\":497,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25005,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.8555787480987,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.011,\"onlineExpGained\":1498.0640247908914,\"onlineMoneyMade\":25005,\"onlineRunningTime\":8977.409999999092,\"pid\":498,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.3964598400099,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.08799999999,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8977.409999999092,\"pid\":499,\"ramUsage\":3.2,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.537064181388,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.17199999999,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":500,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":72.01237500001568,\"minDifficulty\":5,\"moneyAvailable\":963849.3498643361,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"93.1.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2363038,718,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5941.5791709071345,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.23599999999,\"onlineExpGained\":6288.497986408992,\"onlineMoneyMade\":2363038,\"onlineRunningTime\":8977.009999999093,\"pid\":501,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[51212,87,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8319.198154442553,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.321,\"onlineExpGained\":7213.8644181177515,\"onlineMoneyMade\":51212,\"onlineRunningTime\":8977.009999999093,\"pid\":502,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2118858,88,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4591.891338302131,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.389,\"onlineExpGained\":4838.565640109121,\"onlineMoneyMade\":2118858,\"onlineRunningTime\":8977.009999999093,\"pid\":503,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[728908,27,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3174.811331631935,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.475,\"onlineExpGained\":2560.666974196632,\"onlineMoneyMade\":728908,\"onlineRunningTime\":8977.009999999093,\"pid\":504,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1339268,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2020.3929423485765,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.548,\"onlineExpGained\":2506.122119552734,\"onlineMoneyMade\":1339268,\"onlineRunningTime\":8977.009999999093,\"pid\":505,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1579928,21,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1172.1260000613995,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.65100000001,\"onlineExpGained\":1031.5034712914692,\"onlineMoneyMade\":1579928,\"onlineRunningTime\":8977.009999999093,\"pid\":506,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[345,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":859.9913387215915,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.763,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":345,\"onlineRunningTime\":8977.009999999093,\"pid\":507,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[50581,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.8752688665588,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.88100000001,\"onlineExpGained\":1538.0365081609057,\"onlineMoneyMade\":50581,\"onlineRunningTime\":8977.009999999093,\"pid\":508,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[493,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.7054695788461,\"offlineMoneyMade\":0,\"offlineRunningTime\":103901.976,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":493,\"onlineRunningTime\":8977.009999999093,\"pid\":509,\"ramUsage\":3.2,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.5648894997753,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.08200000001,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":510,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":75.14774999999216,\"minDifficulty\":11,\"moneyAvailable\":66543647.39548823,\"moneyMax\":1723395200,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":211,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-453275.cct\",\"type\":\"Total Ways to Sum\",\"data\":74,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"36.4.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":36,\"hackDifficulty\":68.47087499999296,\"minDifficulty\":12,\"moneyAvailable\":70973686.58609663,\"moneyMax\":1441254775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":254,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"50.9.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2356866,717,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5611.186138379648,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.16200000001,\"onlineExpGained\":6322.49454894441,\"onlineMoneyMade\":2356866,\"onlineRunningTime\":8977.609999999093,\"pid\":511,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[50681,74,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8029.605650229534,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.25699999998,\"onlineExpGained\":7111.536677295497,\"onlineMoneyMade\":50681,\"onlineRunningTime\":8977.609999999093,\"pid\":512,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2076529,76,317,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4502.21032499115,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.347,\"onlineExpGained\":4734.163738163527,\"onlineMoneyMade\":2076529,\"onlineRunningTime\":8977.609999999093,\"pid\":513,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[786687,31,123,11]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3274.6622718056183,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.44499999999,\"onlineExpGained\":2616.963618689984,\"onlineMoneyMade\":786687,\"onlineRunningTime\":8977.609999999093,\"pid\":514,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1340537,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1968.4710426198578,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.51699999999,\"onlineExpGained\":2528.329054758297,\"onlineMoneyMade\":1340537,\"onlineRunningTime\":8977.609999999093,\"pid\":515,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1452566,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1093.7622926319527,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.59800000001,\"onlineExpGained\":1000.3844555242366,\"onlineMoneyMade\":1452566,\"onlineRunningTime\":8977.609999999093,\"pid\":516,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[181,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.6243980654829,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.665,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":181,\"onlineRunningTime\":8977.609999999093,\"pid\":517,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[51600,8,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.22354874845,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.74700000002,\"onlineExpGained\":1549.1692822431312,\"onlineMoneyMade\":51600,\"onlineRunningTime\":8977.609999999093,\"pid\":518,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.4055779428882,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.827,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8977.609999999093,\"pid\":519,\"ramUsage\":3.2,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.590146911399,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.903,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":520,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":71.08375000001675,\"minDifficulty\":10,\"moneyAvailable\":183849.8759621942,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-489209.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,3,7,9,2,10,1,0,4,9,7,2,6,10,6,10,0,10,0,3,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"65.1.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":126.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2368166,715,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5572.37012843634,\"offlineMoneyMade\":0,\"offlineRunningTime\":103902.96900000001,\"onlineExpGained\":6317.106271536193,\"onlineMoneyMade\":2368166,\"onlineRunningTime\":8974.609999999091,\"pid\":521,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48099,77,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8128.266540691665,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.04800000001,\"onlineExpGained\":7149.337311277361,\"onlineMoneyMade\":48099,\"onlineRunningTime\":8974.609999999091,\"pid\":522,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2071754,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.163765081141,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.114,\"onlineExpGained\":4776.347146227618,\"onlineMoneyMade\":2071754,\"onlineRunningTime\":8974.609999999091,\"pid\":523,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[721895,30,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3235.5402657697127,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.188,\"onlineExpGained\":2591.7859899638643,\"onlineMoneyMade\":721895,\"onlineRunningTime\":8974.609999999091,\"pid\":524,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1347942,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1956.1406956533815,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.25499999999,\"onlineExpGained\":2530.5204417994096,\"onlineMoneyMade\":1347942,\"onlineRunningTime\":8974.609999999091,\"pid\":525,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1338636,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1102.325079600182,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.33200000001,\"onlineExpGained\":1000.3844555242366,\"onlineMoneyMade\":1338636,\"onlineRunningTime\":8974.609999999091,\"pid\":526,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.6299460298675,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.399,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":527,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34766,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.2405305219795,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.479,\"onlineExpGained\":1522.5209599964548,\"onlineMoneyMade\":34766,\"onlineRunningTime\":8974.609999999091,\"pid\":528,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[172,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.4093450932276,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.548,\"onlineExpGained\":284.4539159873184,\"onlineMoneyMade\":172,\"onlineRunningTime\":8974.609999999091,\"pid\":529,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.4486203871664,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.79300000002,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":530,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67508595,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4484.33995449734,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.875,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67508595,\"onlineRunningTime\":8974.609999999091,\"pid\":531,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.7615476178655,\"offlineMoneyMade\":0,\"offlineRunningTime\":103903.95799999998,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":532,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1158,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.9391010358604,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.026,\"onlineExpGained\":656.8781157055978,\"onlineMoneyMade\":1158,\"onlineRunningTime\":8974.609999999091,\"pid\":533,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.5053318820651,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.11000000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":534,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.19996479994015,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.18099999998,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":535,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.38623291548203,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.26800000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":536,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4732056301764,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.353,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":537,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.57038290426345,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.45599999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":538,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.57061181979776,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.539,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":539,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.93039076598026,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.62899999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":540,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.72100000002,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":541,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.2983721508833,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.80600000001,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8974.609999999091,\"pid\":542,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[322908,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.75260709109244,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.877,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":322908,\"onlineRunningTime\":8974.609999999091,\"pid\":543,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[208102,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.74999543931366,\"offlineMoneyMade\":0,\"offlineRunningTime\":103904.94900000001,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":208102,\"onlineRunningTime\":8974.609999999091,\"pid\":544,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[943050,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.5662752049851,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.022,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":943050,\"onlineRunningTime\":8974.609999999091,\"pid\":545,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[262908,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.212964537402,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.10200000001,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":262908,\"onlineRunningTime\":8974.609999999091,\"pid\":546,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,13,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1028.570690329818,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.17,\"onlineExpGained\":1662.982302936851,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":547,\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.6594740878354,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.24199999998,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":548,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":57.18399999999645,\"minDifficulty\":16,\"moneyAvailable\":442733902.04845273,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":491,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"79.0.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":30.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2386128,704,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5643.8256231408905,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.31599999999,\"onlineExpGained\":6253.701893939579,\"onlineMoneyMade\":2386128,\"onlineRunningTime\":8970.809999999088,\"pid\":549,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[44661,63,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8036.526224103374,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.39400000001,\"onlineExpGained\":7016.056624738055,\"onlineMoneyMade\":44661,\"onlineRunningTime\":8970.809999999088,\"pid\":550,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2091973,83,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4438.022603377727,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.475,\"onlineExpGained\":4787.421307350957,\"onlineMoneyMade\":2091973,\"onlineRunningTime\":8970.809999999088,\"pid\":551,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[695269,31,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3383.559124081269,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.564,\"onlineExpGained\":2600.6980705255337,\"onlineMoneyMade\":695269,\"onlineRunningTime\":8970.809999999088,\"pid\":552,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1347841,45,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1956.208562608509,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.64700000001,\"onlineExpGained\":2541.623909402191,\"onlineMoneyMade\":1347841,\"onlineRunningTime\":8970.809999999088,\"pid\":553,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1544546,24,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1224.7579536952971,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.742,\"onlineExpGained\":1062.6224870587016,\"onlineMoneyMade\":1544546,\"onlineRunningTime\":8970.809999999088,\"pid\":554,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.6484058334744,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.83099999999,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.809999999088,\"pid\":555,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[59691,9,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.297617098007,\"offlineMoneyMade\":0,\"offlineRunningTime\":103905.927,\"onlineExpGained\":1562.4934433664694,\"onlineMoneyMade\":59691,\"onlineRunningTime\":8970.809999999088,\"pid\":556,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.4222368835391,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.005,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.809999999088,\"pid\":557,\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.6855423592997,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.116,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":558,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":53.54799999999981,\"minDifficulty\":18,\"moneyAvailable\":937573175.0001281,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":993,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262869-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[162,133,45,177],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"43.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":41.971999999999646,\"minDifficulty\":15,\"moneyAvailable\":496893157.4838518,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":771,\"serverGrowth\":48}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-792444-Netburners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[80,165,46,174,95,30,183,86,43,91,24,84,137,24,184,28],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"61.7.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":126.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2364653,712,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5747.574416150743,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.205,\"onlineExpGained\":6282.727210930501,\"onlineMoneyMade\":2364653,\"onlineRunningTime\":8972.60999999909,\"pid\":559,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[42265,77,496,29]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8293.938690732257,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.304,\"onlineExpGained\":7140.571763112909,\"onlineMoneyMade\":42265,\"onlineRunningTime\":8972.60999999909,\"pid\":560,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2083170,90,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.361879931387,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.40100000001,\"onlineExpGained\":4847.409338885423,\"onlineMoneyMade\":2083170,\"onlineRunningTime\":8972.60999999909,\"pid\":561,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[941824,39,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3370.7235186845232,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.50499999999,\"onlineExpGained\":2687.334424306674,\"onlineMoneyMade\":941824,\"onlineRunningTime\":8972.60999999909,\"pid\":562,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1312362,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1968.5873450045137,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.59999999999,\"onlineExpGained\":2483.9151843471705,\"onlineMoneyMade\":1312362,\"onlineRunningTime\":8972.60999999909,\"pid\":563,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1421042,21,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1087.603716898361,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.70300000001,\"onlineExpGained\":1033.6948583325818,\"onlineMoneyMade\":1421042,\"onlineRunningTime\":8972.60999999909,\"pid\":564,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.6557179718745,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.79300000002,\"onlineExpGained\":431.7208442116314,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":565,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25765,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2027.9888886633396,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.88900000001,\"onlineExpGained\":1498.0640247908914,\"onlineMoneyMade\":25765,\"onlineRunningTime\":8972.60999999909,\"pid\":566,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[489,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.7347571365173,\"offlineMoneyMade\":0,\"offlineRunningTime\":103906.97099999999,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":489,\"onlineRunningTime\":8972.60999999909,\"pid\":567,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.47397260049,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.05600000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":568,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67774555,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4484.527409661465,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.14400000001,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67774555,\"onlineRunningTime\":8972.60999999909,\"pid\":569,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.7715195875759,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.229,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":570,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.9741620126165,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.30600000001,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":571,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.51947408559624,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.379,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":572,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.20535927717197,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.45499999999,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":573,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.3941636881599,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.533,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":574,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.4787094152987,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.612,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":575,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.57931061010447,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.69299999998,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":576,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5795340096019,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.774,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":577,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.9370163424378,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.84700000001,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":578,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103907.92000000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":579,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[277325,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.30706621338715,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.00600000001,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":277325,\"onlineRunningTime\":8972.60999999909,\"pid\":580,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.76104849887673,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.08099999999,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":581,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.75700929729143,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.16300000002,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":582,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[942566,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.57224651018743,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.24399999998,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":942566,\"onlineRunningTime\":8972.60999999909,\"pid\":583,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.22408956792384,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.32000000002,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8972.60999999909,\"pid\":584,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,13,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1028.6026150241867,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.395,\"onlineExpGained\":1662.982302936851,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":585,\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.754831616086,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.463,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":586,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":506,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-117733-Bachman&Associates.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[174,56,71,118,199,20,51,49,199,5,96,185,192,5,17,162,71,100,31,42,15,184,97,154,5,149,8,192],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"72.7.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":126.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2365384,704,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5553.3466339416145,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.542,\"onlineExpGained\":6267.185383961578,\"onlineMoneyMade\":2365384,\"onlineRunningTime\":8975.609999999091,\"pid\":587,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[41255,73,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7951.239422108243,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.61499999999,\"onlineExpGained\":7098.271129131044,\"onlineMoneyMade\":41255,\"onlineRunningTime\":8975.609999999091,\"pid\":588,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2073931,85,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4389.929256653091,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.68599999999,\"onlineExpGained\":4807.3782425565205,\"onlineMoneyMade\":2073931,\"onlineRunningTime\":8975.609999999091,\"pid\":589,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[934740,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3111.620953306529,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.74899999998,\"onlineExpGained\":2638.391247416104,\"onlineMoneyMade\":934740,\"onlineRunningTime\":8975.609999999091,\"pid\":590,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1323653,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2020.6069401764123,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.825,\"onlineExpGained\":2495.0186519499525,\"onlineMoneyMade\":1323653,\"onlineRunningTime\":8975.609999999091,\"pid\":591,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1167523,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1145.7266156684352,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.88900000001,\"onlineExpGained\":1009.2965360859057,\"onlineMoneyMade\":1167523,\"onlineRunningTime\":8975.609999999091,\"pid\":592,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[129,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.6721149117484,\"offlineMoneyMade\":0,\"offlineRunningTime\":103908.959,\"onlineExpGained\":449.4863923760822,\"onlineMoneyMade\":129,\"onlineRunningTime\":8975.609999999091,\"pid\":593,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25487,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.0364805599907,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.024,\"onlineExpGained\":1498.0640247908912,\"onlineMoneyMade\":25487,\"onlineRunningTime\":8975.609999999091,\"pid\":594,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[492,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.7471636052853,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.09199999999,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":492,\"onlineRunningTime\":8975.609999999091,\"pid\":595,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3311,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.8477699145867,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.16399999999,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3311,\"onlineRunningTime\":8975.609999999091,\"pid\":596,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67348111,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4484.644506049592,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.24,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67348111,\"onlineRunningTime\":8975.609999999091,\"pid\":597,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.77796127880134,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.342,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":598,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[572,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1060.997045027624,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.448,\"onlineExpGained\":641.3332610617033,\"onlineMoneyMade\":572,\"onlineRunningTime\":8975.609999999091,\"pid\":599,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17476,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.5287234068411,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.517,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17476,\"onlineRunningTime\":8975.609999999091,\"pid\":600,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[825377,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.208905066727,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.607,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":825377,\"onlineRunningTime\":8975.609999999091,\"pid\":601,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.39937152173468,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.677,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":602,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.48233863721583,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.761,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":603,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.58524586588754,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.84499999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":604,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.58549132953283,\"offlineMoneyMade\":0,\"offlineRunningTime\":103909.934,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":605,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[301808,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.94150271008894,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.02600000003,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":301808,\"onlineRunningTime\":8975.609999999091,\"pid\":606,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.119,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":607,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.31307326719843,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.217,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":608,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.7669105876158,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.30600000001,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":609,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.76188233551937,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.39600000002,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":610,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.57638491009965,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.47700000001,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8975.609999999091,\"pid\":611,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[262741,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.2317955011225,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.54900000001,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":262741,\"onlineRunningTime\":8975.609999999091,\"pid\":612,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[125862217,13,13,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1028.6246405885183,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.62,\"onlineExpGained\":2119.1127520591253,\"onlineMoneyMade\":125862217,\"onlineRunningTime\":8962.60999999908,\"pid\":613,\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.8209380106937,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.692,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":614,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":355,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"61.6.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":126.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2375023,712,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5786.803635134202,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.76000000001,\"onlineExpGained\":6279.972945430022,\"onlineMoneyMade\":2375023,\"onlineRunningTime\":8976.409999999094,\"pid\":615,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49537,77,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8253.628463664041,\"offlineMoneyMade\":0,\"offlineRunningTime\":103910.88600000003,\"onlineExpGained\":7131.610838418835,\"onlineMoneyMade\":49537,\"onlineRunningTime\":8976.409999999094,\"pid\":616,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2064071,84,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4334.968679441963,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.052,\"onlineExpGained\":4802.8782425565205,\"onlineMoneyMade\":2064071,\"onlineRunningTime\":8976.409999999094,\"pid\":617,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[632198,27,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3162.9759533940546,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.20200000002,\"onlineExpGained\":2560.666974196631,\"onlineMoneyMade\":632198,\"onlineRunningTime\":8976.409999999094,\"pid\":618,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1288318,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2084.9923705867163,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.35,\"onlineExpGained\":2526.1376677171847,\"onlineMoneyMade\":1288318,\"onlineRunningTime\":8976.409999999094,\"pid\":619,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1346804,20,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1210.533931219687,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.43100000001,\"onlineExpGained\":1018.2086166475747,\"onlineMoneyMade\":1346804,\"onlineRunningTime\":8976.409999999094,\"pid\":620,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[343,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.0760775082946,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.538,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":343,\"onlineRunningTime\":8976.409999999094,\"pid\":621,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[51474,8,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.430359501775,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.61100000002,\"onlineExpGained\":1549.1692822431312,\"onlineMoneyMade\":51474,\"onlineRunningTime\":8976.409999999094,\"pid\":622,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.4520546044146,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.69,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":623,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.5104821949186,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.758,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":624,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[67120190,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4484.794784933566,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.83000000002,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":67120190,\"onlineRunningTime\":8976.409999999094,\"pid\":625,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.7857534997063,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.898,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":626,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[281,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.384138698648,\"offlineMoneyMade\":0,\"offlineRunningTime\":103911.97400000002,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":281,\"onlineRunningTime\":8976.409999999094,\"pid\":627,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.53963829809516,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.04,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":628,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.2130390750882,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.116,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":629,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214531,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.40548052427215,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.19199999998,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214531,\"onlineRunningTime\":8976.409999999094,\"pid\":630,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56571,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.48656738159949,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.265,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56571,\"onlineRunningTime\":8976.409999999094,\"pid\":631,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5921022998451,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.331,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":632,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5923201833056,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.41,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":633,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.94654498378213,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.47499999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":634,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.55,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":635,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.31959924786554,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.61899999998,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":636,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[322726,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.7732100276946,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.697,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":322726,\"onlineRunningTime\":8976.409999999094,\"pid\":637,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.76705652881918,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.767,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8976.409999999094,\"pid\":638,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[942083,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.58076423790638,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.83999999998,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":942083,\"onlineRunningTime\":8976.409999999094,\"pid\":639,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[262574,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.23995777491444,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.91,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":262574,\"onlineRunningTime\":8976.409999999094,\"pid\":640,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,13,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1028.6480718293153,\"offlineMoneyMade\":0,\"offlineRunningTime\":103912.987,\"onlineExpGained\":1662.982302936851,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":641,\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"threads\":13,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.8910086998094,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.051,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":642,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":205,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"9.2.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2428370,732,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5670.337516513053,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.123,\"onlineExpGained\":6390.831782581167,\"onlineMoneyMade\":2428370,\"onlineRunningTime\":8971.409999999089,\"pid\":643,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49634,75,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8288.113180601382,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.198,\"onlineExpGained\":7113.88436556031,\"onlineMoneyMade\":49634,\"onlineRunningTime\":8971.409999999089,\"pid\":644,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2051505,84,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4479.9572617860185,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.27500000001,\"onlineExpGained\":4796.304081433182,\"onlineMoneyMade\":2051505,\"onlineRunningTime\":8971.409999999089,\"pid\":645,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[766660,36,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3451.242642322053,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.35800000001,\"onlineExpGained\":2649.641247416104,\"onlineMoneyMade\":766660,\"onlineRunningTime\":8971.409999999089,\"pid\":646,\"ramUsage\":3.2,\"server\":\".\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.902303724549,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.43799999998,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":647,\"ramUsage\":1.75,\"server\":\".\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\".\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\".\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":524,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"3.7.4.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":6.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2374048,717,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5864.781145837214,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.51500000001,\"onlineExpGained\":6295.635025991696,\"onlineMoneyMade\":2374048,\"onlineRunningTime\":8977.409999999092,\"pid\":648,\"ramUsage\":3.2,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[53113,74,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8048.945193773772,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.586,\"onlineExpGained\":7109.345290254382,\"onlineMoneyMade\":53113,\"onlineRunningTime\":8977.409999999092,\"pid\":649,\"ramUsage\":3.2,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"73.4.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"50.9.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-283900.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,14],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"9.0.5.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"darkweb\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":39.77587499890978,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-17\",\"httpPortOpen\":false,\"ip\":\"66.3.8.1\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2341305,713,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5702.7805621778425,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.671,\"onlineExpGained\":6292.725973104992,\"onlineMoneyMade\":2341305,\"onlineRunningTime\":8970.409999999087,\"pid\":650,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[43451,78,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8019.715795142064,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.761,\"onlineExpGained\":7135.9545371951335,\"onlineMoneyMade\":43451,\"onlineRunningTime\":8970.409999999087,\"pid\":651,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2045608,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4438.5215927970585,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.84100000001,\"onlineExpGained\":4778.538533268731,\"onlineMoneyMade\":2045608,\"onlineRunningTime\":8970.409999999087,\"pid\":652,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[895126,37,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3352.294700272998,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.905,\"onlineExpGained\":2669.5102631833365,\"onlineMoneyMade\":895126,\"onlineRunningTime\":8970.409999999087,\"pid\":653,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1207361,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1956.4449275137022,\"offlineMoneyMade\":0,\"offlineRunningTime\":103913.991,\"onlineExpGained\":2486.106571388283,\"onlineMoneyMade\":1207361,\"onlineRunningTime\":8970.409999999087,\"pid\":654,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1148510,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1081.4843603013774,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.06599999999,\"onlineExpGained\":1000.3844555242366,\"onlineMoneyMade\":1148510,\"onlineRunningTime\":8970.409999999087,\"pid\":655,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[159,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.0987253355808,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.16299999999,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":159,\"onlineRunningTime\":8970.409999999087,\"pid\":656,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[9433,2,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.1536563882107,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.236,\"onlineExpGained\":1471.4157025442148,\"onlineMoneyMade\":9433,\"onlineRunningTime\":8970.409999999087,\"pid\":657,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500,1,10,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.7779057728497,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.343,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":500,\"onlineRunningTime\":8970.409999999087,\"pid\":658,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.5310854137679,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.42200000002,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":659,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66556341,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4484.9437779992495,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.511,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66556341,\"onlineRunningTime\":8970.409999999087,\"pid\":660,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40795,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.79392374697744,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.57800000001,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40795,\"onlineRunningTime\":8970.409999999087,\"pid\":661,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[551,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1253.777920276271,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.66500000001,\"onlineExpGained\":652.4953416233725,\"onlineMoneyMade\":551,\"onlineRunningTime\":8970.409999999087,\"pid\":662,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17462,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.55137083280806,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.75199999998,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17462,\"onlineRunningTime\":8970.409999999087,\"pid\":663,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[824670,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.21754875260308,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.853,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":824670,\"onlineRunningTime\":8970.409999999087,\"pid\":664,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.41214334493242,\"offlineMoneyMade\":0,\"offlineRunningTime\":103914.93500000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":665,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.49124872322548,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.03700000003,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":666,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.5998385416999,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.13600000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":667,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.60006194119734,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.21700000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":668,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.95235317246667,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.296,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":669,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.374,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":670,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3272880593924,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.449,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":671,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.78067134693464,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.529,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":672,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.77323675464154,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.599,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":673,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[941600,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.58603314563152,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.68299999999,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":941600,\"onlineRunningTime\":8970.409999999087,\"pid\":674,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.2498416973079,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.769,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.409999999087,\"pid\":675,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403003.8290973809,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.86600000001,\"onlineExpGained\":651505.297604414,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":676,\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2461.976363620457,\"offlineMoneyMade\":0,\"offlineRunningTime\":103915.94799999997,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":677,\"ramUsage\":1.75,\"server\":\"grinding-server-17\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-21\",\"httpPortOpen\":false,\"ip\":\"11.2.9.5\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2351990,705,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5916.823250997601,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.064,\"onlineExpGained\":6229.536509690976,\"onlineMoneyMade\":2351990,\"onlineRunningTime\":8970.209999999086,\"pid\":678,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[45073,66,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7894.76202210746,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.15900000001,\"onlineExpGained\":7028.591710555465,\"onlineMoneyMade\":45073,\"onlineRunningTime\":8970.209999999086,\"pid\":679,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2035262,85,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4390.3784519790925,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.262,\"onlineExpGained\":4807.378242556519,\"onlineMoneyMade\":2035262,\"onlineRunningTime\":8970.209999999086,\"pid\":680,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[980473,37,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3350.92237834662,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.35399999999,\"onlineExpGained\":2669.510263183337,\"onlineMoneyMade\":980473,\"onlineRunningTime\":8970.209999999086,\"pid\":681,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1279877,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1904.5525630173945,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.453,\"onlineExpGained\":2486.106571388283,\"onlineMoneyMade\":1279877,\"onlineRunningTime\":8970.209999999086,\"pid\":682,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1647746,24,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1222.5752340362928,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.54,\"onlineExpGained\":1062.6224870587018,\"onlineMoneyMade\":1647746,\"onlineRunningTime\":8970.209999999086,\"pid\":683,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[129,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.7302002508757,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.62700000001,\"onlineExpGained\":449.4863923760822,\"onlineMoneyMade\":129,\"onlineRunningTime\":8970.209999999086,\"pid\":684,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[41205,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.2094768827276,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.70500000002,\"onlineExpGained\":1524.7123470375677,\"onlineMoneyMade\":41205,\"onlineRunningTime\":8970.209999999086,\"pid\":685,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.4786526563506,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.778,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":686,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3340,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.9145179313498,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.851,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3340,\"onlineRunningTime\":8970.209999999086,\"pid\":687,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66630322,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.082053206407,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.923,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66630322,\"onlineRunningTime\":8970.209999999086,\"pid\":688,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8013044069192,\"offlineMoneyMade\":0,\"offlineRunningTime\":103916.999,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":689,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[853,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.4434254859552,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.08200000002,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":853,\"onlineRunningTime\":8970.209999999086,\"pid\":690,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.5617579330462,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.15299999999,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":691,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[823964,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.22147021131158,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.233,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":823964,\"onlineRunningTime\":8970.209999999086,\"pid\":692,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.41791228371042,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.30999999998,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":693,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.49522752584843,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.39300000001,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":694,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6062592087367,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.464,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":695,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[661526,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.60647433417864,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.54200000002,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":661526,\"onlineRunningTime\":8970.209999999086,\"pid\":696,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.9571195520501,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.61100000002,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":697,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.68500000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":698,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.33359668849687,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.771,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":699,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.7868285160956,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.866,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":700,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.7783629377125,\"offlineMoneyMade\":0,\"offlineRunningTime\":103917.948,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":701,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[941118,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.5903883806488,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.03300000001,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":941118,\"onlineRunningTime\":8970.209999999086,\"pid\":702,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.25793828571136,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.11100000002,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8970.209999999086,\"pid\":703,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403012.88463497785,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.201,\"onlineExpGained\":651505.297604414,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":704,\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2462.0456033719925,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.27599999998,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":705,\"ramUsage\":1.75,\"server\":\"grinding-server-21\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-22\",\"httpPortOpen\":false,\"ip\":\"90.9.7.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2393449,731,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5605.925530068911,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.36000000002,\"onlineExpGained\":6391.622371724582,\"onlineMoneyMade\":2393449,\"onlineRunningTime\":8969.809999999086,\"pid\":706,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[36903,81,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8095.242272663032,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.434,\"onlineExpGained\":7157.450547706622,\"onlineMoneyMade\":36903,\"onlineRunningTime\":8969.809999999086,\"pid\":707,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2030550,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4287.117441203794,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.51900000001,\"onlineExpGained\":4787.304081433182,\"onlineMoneyMade\":2030550,\"onlineRunningTime\":8969.809999999086,\"pid\":708,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[709361,29,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3350.6681347747412,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.601,\"onlineExpGained\":2576.299748278858,\"onlineMoneyMade\":709361,\"onlineRunningTime\":8969.809999999086,\"pid\":709,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1250491,37,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1968.9288608929457,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.672,\"onlineExpGained\":2450.6047815388256,\"onlineMoneyMade\":1250491,\"onlineRunningTime\":8969.809999999086,\"pid\":710,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1363526,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1166.1542546315675,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.752,\"onlineExpGained\":1009.2965360859057,\"onlineMoneyMade\":1363526,\"onlineRunningTime\":8969.809999999086,\"pid\":711,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[159,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.1390947794218,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.82400000001,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":159,\"onlineRunningTime\":8969.809999999086,\"pid\":712,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[26183,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.5996527617413,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.90800000002,\"onlineExpGained\":1509.1967988731167,\"onlineMoneyMade\":26183,\"onlineRunningTime\":8969.809999999086,\"pid\":713,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.4902222740157,\"offlineMoneyMade\":0,\"offlineRunningTime\":103918.98700000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":714,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3297,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.9338188304812,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.073,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3297,\"onlineRunningTime\":8969.809999999086,\"pid\":715,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66238241,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.207363941836,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.13500000001,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66238241,\"onlineRunningTime\":8969.809999999086,\"pid\":716,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8080753469152,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.22,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":717,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[856,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.469006052353,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.283,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":856,\"onlineRunningTime\":8969.809999999086,\"pid\":718,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.5712884544225,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.35600000001,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":719,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[823258,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.22507861239217,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.42300000001,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":823258,\"onlineRunningTime\":8969.809999999086,\"pid\":720,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.42322942349355,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.49900000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":721,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.49889896765757,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.567,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":722,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.61228272111134,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.64799999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":723,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.61245371825754,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.71,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":724,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.96160591970119,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.79000000001,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":725,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.85500000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":726,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[277172,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3394760482651,\"offlineMoneyMade\":0,\"offlineRunningTime\":103919.935,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":277172,\"onlineRunningTime\":8969.809999999086,\"pid\":727,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[322544,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.7924798331048,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.011,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":322544,\"onlineRunningTime\":8969.809999999086,\"pid\":728,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.78302865904314,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.08600000001,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":729,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.5943117987473,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.15000000001,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":730,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.26526739220805,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.231,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.809999999086,\"pid\":731,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[7062739309,5093,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403021.02492337895,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.30000000002,\"onlineExpGained\":830203.1727874713,\"onlineMoneyMade\":7062739309,\"onlineRunningTime\":8962.60999999908,\"pid\":732,\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2462.1075296464337,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.392,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":733,\"ramUsage\":1.75,\"server\":\"grinding-server-22\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-23\",\"httpPortOpen\":false,\"ip\":\"88.7.0.8\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2352815,715,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5722.7365875189935,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.45599999999,\"onlineExpGained\":6300.305637554333,\"onlineMoneyMade\":2352815,\"onlineRunningTime\":8969.609999999086,\"pid\":734,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[45420,81,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8106.845914382881,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.54200000002,\"onlineExpGained\":7155.2591606655105,\"onlineMoneyMade\":45420,\"onlineRunningTime\":8969.609999999086,\"pid\":735,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2031541,77,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4342.343673826431,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.6,\"onlineExpGained\":4738.507436939828,\"onlineMoneyMade\":2031541,\"onlineRunningTime\":8969.609999999086,\"pid\":736,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1019878,38,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3301.058788249071,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.68800000001,\"onlineExpGained\":2680.613730786118,\"onlineMoneyMade\":1019878,\"onlineRunningTime\":8969.609999999086,\"pid\":737,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1240194,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2020.720111549978,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.75700000003,\"onlineExpGained\":2506.1221195527337,\"onlineMoneyMade\":1240194,\"onlineRunningTime\":8969.609999999086,\"pid\":738,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1545181,22,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1102.3310437225489,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.83899999999,\"onlineExpGained\":1044.7983259353637,\"onlineMoneyMade\":1545181,\"onlineRunningTime\":8969.609999999086,\"pid\":739,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[129,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.7627032145847,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.92199999999,\"onlineExpGained\":449.4863923760822,\"onlineMoneyMade\":129,\"onlineRunningTime\":8969.609999999086,\"pid\":740,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25588,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.3054420319388,\"offlineMoneyMade\":0,\"offlineRunningTime\":103920.99299999999,\"onlineExpGained\":1498.0640247908914,\"onlineMoneyMade\":25588,\"onlineRunningTime\":8969.609999999086,\"pid\":741,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[489,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.8172631281308,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.06700000001,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":489,\"onlineRunningTime\":8969.609999999086,\"pid\":742,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.5831851498277,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.14100000002,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":743,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66313091,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.323294201697,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.207,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66313091,\"onlineRunningTime\":8969.609999999086,\"pid\":744,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40766,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.81436460815416,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.283,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40766,\"onlineRunningTime\":8969.609999999086,\"pid\":745,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.1242446932752,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.34900000002,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":746,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.5802652278477,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.431,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":747,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.22849258820904,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.49499999998,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":748,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214389,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.42826479616167,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.572,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214389,\"onlineRunningTime\":8969.609999999086,\"pid\":749,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.5024133514684,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.648,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":750,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6179973354155,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.72,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":751,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6181793646356,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.78600000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":752,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[301588,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.96588227840297,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.86700000001,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":301588,\"onlineRunningTime\":8969.609999999086,\"pid\":753,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103921.93800000002,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":754,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3451326226817,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.01699999999,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":755,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.7980521107152,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.126,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":756,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.78764855242798,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.20299999998,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":757,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.59822780367983,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.26300000004,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":758,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.2725895844534,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.34900000002,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.609999999086,\"pid\":759,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,5093,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403029.31258241326,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.43699999998,\"onlineExpGained\":651505.297604414,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":760,\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2462.169703979725,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.51000000001,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":761,\"ramUsage\":1.75,\"server\":\"grinding-server-23\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-18\",\"httpPortOpen\":false,\"ip\":\"17.3.3.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2348267,722,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5897.74810594425,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.58,\"onlineExpGained\":6313.153325819138,\"onlineMoneyMade\":2348267,\"onlineRunningTime\":8969.409999999087,\"pid\":762,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[47963,80,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8065.758197727081,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.653,\"onlineExpGained\":7146.376386583285,\"onlineMoneyMade\":47963,\"onlineRunningTime\":8969.409999999087,\"pid\":763,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2019534,79,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4294.175646088923,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.716,\"onlineExpGained\":4758.464372145393,\"onlineMoneyMade\":2019534,\"onlineRunningTime\":8969.409999999087,\"pid\":764,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[897685,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3395.096964924351,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.786,\"onlineExpGained\":2634.008473333879,\"onlineMoneyMade\":897685,\"onlineRunningTime\":8969.409999999087,\"pid\":765,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1252061,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2021.0119655946685,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.85899999998,\"onlineExpGained\":2506.1221195527337,\"onlineMoneyMade\":1252061,\"onlineRunningTime\":8969.409999999087,\"pid\":766,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1710994,25,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1166.6764040420685,\"offlineMoneyMade\":0,\"offlineRunningTime\":103922.92800000001,\"onlineExpGained\":1075.9173417025963,\"onlineMoneyMade\":1710994,\"onlineRunningTime\":8969.409999999087,\"pid\":767,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[159,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.1751233837322,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":159,\"onlineRunningTime\":8969.409999999087,\"pid\":768,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34698,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2108.6955376275655,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.06699999998,\"onlineExpGained\":1522.5209599964548,\"onlineMoneyMade\":34698,\"onlineRunningTime\":8969.409999999087,\"pid\":769,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[488,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.8293375456615,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.13900000001,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":488,\"onlineRunningTime\":8969.409999999087,\"pid\":770,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[5378,2,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":867.9696288330498,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.20800000001,\"onlineExpGained\":438.451306558669,\"onlineMoneyMade\":5378,\"onlineRunningTime\":8969.409999999087,\"pid\":771,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66524725,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.438771686822,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.27899999998,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66524725,\"onlineRunningTime\":8969.409999999087,\"pid\":772,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40737,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8206752095913,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.353,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40737,\"onlineRunningTime\":8969.409999999087,\"pid\":773,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.1463018725958,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.417,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":774,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17447,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.58918576124665,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.49299999999,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17447,\"onlineRunningTime\":8969.409999999087,\"pid\":775,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[822552,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.2318983256673,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.56200000002,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":822552,\"onlineRunningTime\":8969.409999999087,\"pid\":776,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.43327587856132,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.63500000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":777,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.50589227056992,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.708,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":778,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.62367333746084,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.77799999998,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":779,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[661145,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.62387191479183,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.84999999999,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":661145,\"onlineRunningTime\":8969.409999999087,\"pid\":780,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.97010716432314,\"offlineMoneyMade\":0,\"offlineRunningTime\":103923.919,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":781,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.00200000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":782,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3507131240515,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.07100000001,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":783,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.80338200083617,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.149,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":784,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.79205458206627,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.222,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":785,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.60199739858413,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.29699999999,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":786,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.27956952125373,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.368,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.409999999087,\"pid\":787,\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45987004.766637556,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.44799999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":788,\"ramUsage\":1.75,\"server\":\"grinding-server-18\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-19\",\"httpPortOpen\":false,\"ip\":\"68.5.2.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2423615,748,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5956.2280901571185,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.523,\"onlineExpGained\":6433.602834071618,\"onlineMoneyMade\":2423615,\"onlineRunningTime\":8969.009999999085,\"pid\":789,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[47906,63,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7872.876081149737,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.60600000001,\"onlineExpGained\":7007.095700043977,\"onlineMoneyMade\":47906,\"onlineRunningTime\":8969.009999999085,\"pid\":790,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2012442,73,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4294.288704876629,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.675,\"onlineExpGained\":4705.167727652038,\"onlineMoneyMade\":2012442,\"onlineRunningTime\":8969.009999999085,\"pid\":791,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[535438,21,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3221.4232228731357,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.75699999998,\"onlineExpGained\":2494.0461685799414,\"onlineMoneyMade\":535438,\"onlineRunningTime\":8969.009999999085,\"pid\":792,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1289333,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1956.7496892044164,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.819,\"onlineExpGained\":2486.106571388283,\"onlineMoneyMade\":1289333,\"onlineRunningTime\":8969.009999999085,\"pid\":793,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1538048,22,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1088.3057245595678,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.90099999998,\"onlineExpGained\":1044.7983259353637,\"onlineMoneyMade\":1538048,\"onlineRunningTime\":8969.009999999085,\"pid\":794,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[181,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.7931966686007,\"offlineMoneyMade\":0,\"offlineRunningTime\":103924.96399999999,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":181,\"onlineRunningTime\":8969.009999999085,\"pid\":795,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[42113,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.3961820418233,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.058,\"onlineExpGained\":1524.7123470375675,\"onlineMoneyMade\":42113,\"onlineRunningTime\":8969.009999999085,\"pid\":796,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.5223376633511,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.13899999998,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":797,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.6148593040012,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.23800000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":798,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66286724,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.554408380665,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.319,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66286724,\"onlineRunningTime\":8969.009999999085,\"pid\":799,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40708,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8269187418344,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.40100000001,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40708,\"onlineRunningTime\":8969.009999999085,\"pid\":800,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[844,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.5408903447753,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.475,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":844,\"onlineRunningTime\":8969.009999999085,\"pid\":801,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.59811494695737,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.557,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":802,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.23531889217108,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.63799999998,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":803,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.43837440592756,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.734,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":804,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.50945900704693,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.82,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":805,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.62956446494815,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.914,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":806,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6297823484086,\"offlineMoneyMade\":0,\"offlineRunningTime\":103925.993,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":807,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.97455647157142,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.08,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":808,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.16600000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":809,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[277020,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3566223696596,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.24600000001,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":277020,\"onlineRunningTime\":8969.009999999085,\"pid\":810,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8091149918907,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.325,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":811,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.79683159983648,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.411,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":812,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[940635,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.60605054708745,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.484,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":940635,\"onlineRunningTime\":8969.009999999085,\"pid\":813,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.28713716942417,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.557,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8969.009999999085,\"pid\":814,\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45988211.722600885,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.62499999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":815,\"ramUsage\":1.75,\"server\":\"grinding-server-19\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server\",\"httpPortOpen\":false,\"ip\":\"40.5.9.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2322791,701,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5684.184327396442,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.707,\"onlineExpGained\":6234.662542621687,\"onlineMoneyMade\":2322791,\"onlineRunningTime\":8968.809999999085,\"pid\":816,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49329,76,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8156.0167339060745,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.779,\"onlineExpGained\":7111.614827907346,\"onlineMoneyMade\":49329,\"onlineRunningTime\":8968.809999999085,\"pid\":817,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1996932,77,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4342.708615008237,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.84800000001,\"onlineExpGained\":4738.507436939826,\"onlineMoneyMade\":1996932,\"onlineRunningTime\":8968.809999999085,\"pid\":818,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[702200,30,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3414.696271447624,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.924,\"onlineExpGained\":2587.4032158816394,\"onlineMoneyMade\":702200,\"onlineRunningTime\":8968.809999999085,\"pid\":819,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1295717,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1956.8115753115146,\"offlineMoneyMade\":0,\"offlineRunningTime\":103926.995,\"onlineExpGained\":2508.3135065938463,\"onlineMoneyMade\":1295717,\"onlineRunningTime\":8968.809999999085,\"pid\":820,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1259683,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1160.515707679184,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.07,\"onlineExpGained\":998.193068483124,\"onlineMoneyMade\":1259683,\"onlineRunningTime\":8968.809999999085,\"pid\":821,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[471,3,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.2109220279372,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.14,\"onlineExpGained\":482.82610166387104,\"onlineMoneyMade\":471,\"onlineRunningTime\":8968.809999999085,\"pid\":822,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25812,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.4446424544067,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.21300000002,\"onlineExpGained\":1498.0640247908914,\"onlineMoneyMade\":25812,\"onlineRunningTime\":8968.809999999085,\"pid\":823,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[487,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.8535947911856,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.286,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":487,\"onlineRunningTime\":8968.809999999085,\"pid\":824,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.6313635817488,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.367,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":825,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66034229,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.674668287508,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.439,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":66034229,\"onlineRunningTime\":8968.809999999085,\"pid\":826,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40679,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.83338482185763,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.522,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40679,\"onlineRunningTime\":8968.809999999085,\"pid\":827,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.1910326280922,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.60100000001,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":828,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.6073383112671,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.689,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":829,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.23883337596322,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.771,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":830,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214247,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.44352637188464,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.855,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214247,\"onlineRunningTime\":8968.809999999085,\"pid\":831,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.51302574352385,\"offlineMoneyMade\":0,\"offlineRunningTime\":103927.93200000002,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":832,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.63537285188085,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.01999999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":833,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.63558797732276,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.098,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":834,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.97888430305494,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.182,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":835,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.252,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":836,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3623006792325,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.33600000001,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":837,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.81460559545576,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.40900000001,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":838,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.80137074874557,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.491,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":839,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.6099072466921,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.56499999999,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":840,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.29439021915545,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.655,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.809999999085,\"pid\":841,\"ramUsage\":3.2,\"server\":\"grinding-server\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45989374.69610814,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.74799999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":842,\"ramUsage\":1.75,\"server\":\"grinding-server\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-0\",\"httpPortOpen\":false,\"ip\":\"28.1.2.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2377527,721,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5762.258510747628,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.855,\"onlineExpGained\":6325.236017943446,\"onlineMoneyMade\":2377527,\"onlineRunningTime\":8968.409999999083,\"pid\":843,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[52519,70,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8057.6082357991345,\"offlineMoneyMade\":0,\"offlineRunningTime\":103928.94999999998,\"onlineExpGained\":7064.892344537331,\"onlineMoneyMade\":52519,\"onlineRunningTime\":8968.409999999083,\"pid\":844,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2031364,86,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4480.901435343531,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.065,\"onlineExpGained\":4814.069629597633,\"onlineMoneyMade\":2031364,\"onlineRunningTime\":8968.409999999083,\"pid\":845,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[766210,33,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3362.8435878269183,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.15200000002,\"onlineExpGained\":2622.905005731097,\"onlineMoneyMade\":766210,\"onlineRunningTime\":8968.409999999083,\"pid\":846,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1288732,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2021.196889650835,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.255,\"onlineExpGained\":2517.2255871555158,\"onlineMoneyMade\":1288732,\"onlineRunningTime\":8968.409999999083,\"pid\":847,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[995023,14,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1070.4030903150124,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.33399999999,\"onlineExpGained\":955.9705851131097,\"onlineMoneyMade\":995023,\"onlineRunningTime\":8968.409999999083,\"pid\":848,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[342,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.2306929531616,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.42600000002,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":342,\"onlineRunningTime\":8968.409999999083,\"pid\":849,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[48494,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1948.147598325419,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.512,\"onlineExpGained\":1526.9037340786804,\"onlineMoneyMade\":48494,\"onlineRunningTime\":8968.409999999083,\"pid\":850,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.5457983716601,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.62100000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":851,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.6494807084534,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.70300000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":852,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65781620,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.809719795632,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.80500000001,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":65781620,\"onlineRunningTime\":8968.409999999083,\"pid\":853,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8406039060137,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.89,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":854,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1422,3,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.5933352464663,\"offlineMoneyMade\":0,\"offlineRunningTime\":103929.99100000001,\"onlineExpGained\":670.2315833083796,\"onlineMoneyMade\":1422,\"onlineRunningTime\":8968.409999999083,\"pid\":855,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.6176821499465,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.08000000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":856,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[821848,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.24278449276287,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.169,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":821848,\"onlineRunningTime\":8968.409999999083,\"pid\":857,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.44935360730716,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.254,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":858,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.51711431786606,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.35299999999,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":859,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.64204725661835,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.43999999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":860,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6423009943191,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.532,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":861,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[301368,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.98389981090162,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.61800000002,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":301368,\"onlineRunningTime\":8968.409999999083,\"pid\":862,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.70300000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":863,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.368946203259,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.78200000002,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":864,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[322362,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8211079033246,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.87700000002,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":322362,\"onlineRunningTime\":8968.409999999083,\"pid\":865,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[207995,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.80676535264146,\"offlineMoneyMade\":0,\"offlineRunningTime\":103930.963,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":207995,\"onlineRunningTime\":8968.409999999083,\"pid\":866,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[940153,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.61453120897636,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.06,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":940153,\"onlineRunningTime\":8968.409999999083,\"pid\":867,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.30297426228344,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.13799999999,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.409999999083,\"pid\":868,\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45990761.919315085,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.22399999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":869,\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-1\",\"httpPortOpen\":false,\"ip\":\"63.5.1.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2371360,713,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5859.673523851508,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.30200000001,\"onlineExpGained\":6276.823385357839,\"onlineMoneyMade\":2371360,\"onlineRunningTime\":8968.209999999084,\"pid\":870,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[46974,80,495,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8402.380466314276,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.38100000001,\"onlineExpGained\":7138.380376071794,\"onlineMoneyMade\":46974,\"onlineRunningTime\":8968.209999999084,\"pid\":871,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2022616,86,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4481.048036983516,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.467,\"onlineExpGained\":4814.069629597632,\"onlineMoneyMade\":2022616,\"onlineRunningTime\":8968.209999999084,\"pid\":872,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[831441,35,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3305.442864511505,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.556,\"onlineExpGained\":2645.11194093666,\"onlineMoneyMade\":831441,\"onlineRunningTime\":8968.209999999084,\"pid\":873,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1286547,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2021.266868101624,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.64199999999,\"onlineExpGained\":2506.122119552734,\"onlineMoneyMade\":1286547,\"onlineRunningTime\":8968.209999999084,\"pid\":874,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1139944,16,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1152.020335815121,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.72800000002,\"onlineExpGained\":975.9861332775605,\"onlineMoneyMade\":1139944,\"onlineRunningTime\":8968.209999999084,\"pid\":875,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[158,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.2513389000035,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.81099999999,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":158,\"onlineRunningTime\":8968.209999999084,\"pid\":876,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25658,4,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.5502113319542,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.894,\"onlineExpGained\":1498.0640247908914,\"onlineMoneyMade\":25658,\"onlineRunningTime\":8968.209999999084,\"pid\":877,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[486,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.8810104634526,\"offlineMoneyMade\":0,\"offlineRunningTime\":103931.96999999999,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":486,\"onlineRunningTime\":8968.209999999084,\"pid\":878,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.6677095975766,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.05400000002,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":879,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66009795,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4485.941805183883,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.12399999998,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":66009795,\"onlineRunningTime\":8968.209999999084,\"pid\":880,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8476492199852,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.20100000002,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":881,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.2409241108296,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.27399999999,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":882,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.6275111760777,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.352,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":883,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.24650164017737,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.42499999999,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":884,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.4548019145404,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.497,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":885,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.52087019945918,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.577,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":886,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[460175,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6481342034182,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.647,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":460175,\"onlineRunningTime\":8968.209999999084,\"pid\":887,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[660765,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.64834105480463,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.722,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":660765,\"onlineRunningTime\":8968.209999999084,\"pid\":888,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[301148,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.98838000181894,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.794,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":301148,\"onlineRunningTime\":8968.209999999084,\"pid\":889,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.87400000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":890,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3747875265038,\"offlineMoneyMade\":0,\"offlineRunningTime\":103932.932,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":891,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[322180,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8267328738674,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.012,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":322180,\"onlineRunningTime\":8968.209999999084,\"pid\":892,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.8113721523275,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.07400000001,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":893,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.61841756124497,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.15700000002,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":894,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.3101719980032,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.22,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.209999999084,\"pid\":895,\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45991900.31642858,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.29900000003,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":896,\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-2\",\"httpPortOpen\":false,\"ip\":\"13.4.0.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2324673,706,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5879.140213372075,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.36499999999,\"onlineExpGained\":6238.80480951842,\"onlineMoneyMade\":2324673,\"onlineRunningTime\":8968.009999999083,\"pid\":897,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49021,75,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7997.996098889012,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.439,\"onlineExpGained\":7118.2280643366075,\"onlineMoneyMade\":49021,\"onlineRunningTime\":8968.009999999083,\"pid\":898,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2024193,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4391.395965436066,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.505,\"onlineExpGained\":4780.729920309845,\"onlineMoneyMade\":2024193,\"onlineRunningTime\":8968.009999999083,\"pid\":899,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[884347,35,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3383.5207848570144,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.596,\"onlineExpGained\":2642.9205538955475,\"onlineMoneyMade\":884347,\"onlineRunningTime\":8968.009999999083,\"pid\":900,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1283800,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2085.648678796142,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.65699999999,\"onlineExpGained\":2526.1376677171847,\"onlineMoneyMade\":1283800,\"onlineRunningTime\":8968.009999999083,\"pid\":901,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1165843,17,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1146.2926502685643,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.73999999999,\"onlineExpGained\":987.0896008803422,\"onlineMoneyMade\":1165843,\"onlineRunningTime\":8968.009999999083,\"pid\":902,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[286,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.2685405511702,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.805,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":286,\"onlineRunningTime\":8968.009999999083,\"pid\":903,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[28247,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2189.2992371218193,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.889,\"onlineExpGained\":1520.329572955342,\"onlineMoneyMade\":28247,\"onlineRunningTime\":8968.009999999083,\"pid\":904,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.5684503251714,\"offlineMoneyMade\":0,\"offlineRunningTime\":103933.95500000002,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":905,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3378,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.0635828022046,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.03899999999,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3378,\"onlineRunningTime\":8968.009999999083,\"pid\":906,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[66220685,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.053174507891,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.10900000001,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":66220685,\"onlineRunningTime\":8968.009999999083,\"pid\":907,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8537159334441,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.191,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":908,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[858,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.6431003419711,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.27900000001,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":858,\"onlineRunningTime\":8968.009999999083,\"pid\":909,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.63623703246265,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.36900000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":910,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.2498431184383,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.45300000001,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":911,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.4597717034835,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.543,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":912,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.52434405217372,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.63399999999,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":913,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[459898,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6538626078148,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.724,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":459898,\"onlineRunningTime\":8968.009999999083,\"pid\":914,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[660385,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6540611851458,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.79599999997,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":660385,\"onlineRunningTime\":8968.009999999083,\"pid\":915,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":213.99266047834328,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.87299999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":916,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103934.94300000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":917,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.38046040228755,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.02,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":918,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.83227090107175,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.114,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":919,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[207888,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.81606624333887,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.225,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":207888,\"onlineRunningTime\":8968.009999999083,\"pid\":920,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.62241881758638,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.31599999999,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":921,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.3177465604251,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.411,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8968.009999999083,\"pid\":922,\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45993111.8264311,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.556,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":923,\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-3\",\"httpPortOpen\":false,\"ip\":\"92.2.6.5\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2367418,725,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5840.553975243193,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.63799999999,\"onlineExpGained\":6339.269589923374,\"onlineMoneyMade\":2367418,\"onlineRunningTime\":8967.609999999084,\"pid\":924,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49487,87,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8317.85610105072,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.738,\"onlineExpGained\":7213.8644181177515,\"onlineMoneyMade\":49487,\"onlineRunningTime\":8967.609999999084,\"pid\":925,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1990605,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4391.527824832438,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.82899999998,\"onlineExpGained\":4780.729920309843,\"onlineMoneyMade\":1990605,\"onlineRunningTime\":8967.609999999084,\"pid\":926,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[794363,35,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3469.5957670463345,\"offlineMoneyMade\":0,\"offlineRunningTime\":103935.95,\"onlineExpGained\":2642.920553895548,\"onlineMoneyMade\":794363,\"onlineRunningTime\":8967.609999999084,\"pid\":927,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1235414,40,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2021.389881774675,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.07400000001,\"onlineExpGained\":2483.9151843471705,\"onlineMoneyMade\":1235414,\"onlineRunningTime\":8967.609999999084,\"pid\":928,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1372569,21,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1168.9686383203539,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.18800000004,\"onlineExpGained\":1031.5034712914692,\"onlineMoneyMade\":1372569,\"onlineRunningTime\":8967.609999999084,\"pid\":929,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[184,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.8785400163981,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.29800000001,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":184,\"onlineRunningTime\":8967.609999999084,\"pid\":930,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[59389,8,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.6491151400264,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.40400000001,\"onlineExpGained\":1551.3606692842438,\"onlineMoneyMade\":59389,\"onlineRunningTime\":8967.609999999084,\"pid\":931,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[499,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":583.9072168133923,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.49799999998,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":499,\"onlineRunningTime\":8967.609999999084,\"pid\":932,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3363,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.0855243846134,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.609,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3363,\"onlineRunningTime\":8967.609999999084,\"pid\":933,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65999422,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.190976681268,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.73999999999,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65999422,\"onlineRunningTime\":8967.609999999084,\"pid\":934,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40651,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8618313059202,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.853,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40651,\"onlineRunningTime\":8967.609999999084,\"pid\":935,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[582,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.29031295709,\"offlineMoneyMade\":0,\"offlineRunningTime\":103936.94200000001,\"onlineExpGained\":641.3332610617033,\"onlineMoneyMade\":582,\"onlineRunningTime\":8967.609999999084,\"pid\":936,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.65052632529336,\"offlineMoneyMade\":0,\"offlineRunningTime\":103937.672,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":937,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[821144,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.25559349276298,\"offlineMoneyMade\":0,\"offlineRunningTime\":103937.94300000001,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":821144,\"onlineRunningTime\":8967.609999999084,\"pid\":938,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.46833888119716,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.07,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":939,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.53031225610815,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.16799999999,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":940,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.66363978334965,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.269,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":941,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6639266172723,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.37299999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":942,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.00008491237256,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.47899999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":943,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.59900000002,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":944,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.39044227279993,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.69399999999,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":945,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[321999,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.84195322741607,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.78899999999,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":321999,\"onlineRunningTime\":8967.609999999084,\"pid\":946,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.8240512173093,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.884,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":947,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.62918518484085,\"offlineMoneyMade\":0,\"offlineRunningTime\":103938.96699999999,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":948,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.33034432649777,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.05500000001,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.609999999084,\"pid\":949,\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45994967.770793706,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.135,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":950,\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-4\",\"httpPortOpen\":false,\"ip\":\"40.4.8.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2353289,722,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5899.010571292397,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.22300000003,\"onlineExpGained\":6316.41034298263,\"onlineMoneyMade\":2353289,\"onlineRunningTime\":8967.409999999085,\"pid\":951,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[50692,80,493,31]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8419.367936690898,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.314,\"onlineExpGained\":7151.684999542172,\"onlineMoneyMade\":50692,\"onlineRunningTime\":8967.409999999085,\"pid\":952,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1976861,82,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4440.017550023282,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.405,\"onlineExpGained\":4778.538533268731,\"onlineMoneyMade\":1976861,\"onlineRunningTime\":8967.409999999085,\"pid\":953,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[804534,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3292.920991062608,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.488,\"onlineExpGained\":2636.1998603749907,\"onlineMoneyMade\":804534,\"onlineRunningTime\":8967.409999999085,\"pid\":954,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1220098,39,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1957.1546701747304,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.58,\"onlineExpGained\":2475.0031037855015,\"onlineMoneyMade\":1220098,\"onlineRunningTime\":8967.409999999085,\"pid\":955,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1333135,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1096.5928232966721,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.68999999999,\"onlineExpGained\":1011.4879231270183,\"onlineMoneyMade\":1333135,\"onlineRunningTime\":8967.409999999085,\"pid\":956,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[184,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.9051386750479,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.792,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":184,\"onlineRunningTime\":8967.409999999085,\"pid\":957,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1948.3704400887905,\"offlineMoneyMade\":0,\"offlineRunningTime\":103939.94999999998,\"onlineExpGained\":1446.9587673386513,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":958,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[172,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.600438307653,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.098,\"onlineExpGained\":284.4539159873184,\"onlineMoneyMade\":172,\"onlineRunningTime\":8967.409999999085,\"pid\":959,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.7305065184621,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.18900000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":960,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65980252,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.388044772944,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.289,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65980252,\"onlineRunningTime\":8967.409999999085,\"pid\":961,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.87257761996165,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.37800000001,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":962,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[276,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.7146298689913,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.477,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":276,\"onlineRunningTime\":8967.409999999085,\"pid\":963,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.663115438868,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.582,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":964,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.2601245900103,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.69300000001,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":965,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.47495797937398,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.79499999998,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":966,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56767,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.53497164339026,\"offlineMoneyMade\":0,\"offlineRunningTime\":103940.92700000001,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56767,\"onlineRunningTime\":8967.409999999085,\"pid\":967,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6713456870011,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.06300000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":968,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[660005,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6716656171456,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.17900000002,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":660005,\"onlineRunningTime\":8967.409999999085,\"pid\":969,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.0058601584769,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.28400000003,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":970,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.37100000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":971,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.3979246003424,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.448,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":972,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8491879670465,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.535,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":973,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[207780,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.83000448568626,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.61200000001,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":207780,\"onlineRunningTime\":8967.409999999085,\"pid\":974,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[939671,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.63422613771186,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.687,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":939671,\"onlineRunningTime\":8967.409999999085,\"pid\":975,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.33968202302975,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.75600000002,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.409999999085,\"pid\":976,\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45996533.54127326,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.84499999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":977,\"ramUsage\":1.75,\"server\":\"grinding-server-4\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-5\",\"httpPortOpen\":false,\"ip\":\"62.9.0.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2393973,714,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5685.455149508654,\"offlineMoneyMade\":0,\"offlineRunningTime\":103941.914,\"onlineExpGained\":6303.059903054818,\"onlineMoneyMade\":2393973,\"onlineRunningTime\":8967.009999999083,\"pid\":978,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48394,82,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8145.864375960719,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.00500000002,\"onlineExpGained\":7180.446558218111,\"onlineMoneyMade\":48394,\"onlineRunningTime\":8967.009999999083,\"pid\":979,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1983455,77,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4343.589681251573,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.07600000002,\"onlineExpGained\":4738.507436939829,\"onlineMoneyMade\":1983455,\"onlineRunningTime\":8967.009999999083,\"pid\":980,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[532695,21,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3145.994346169354,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.156,\"onlineExpGained\":2496.237555621054,\"onlineMoneyMade\":532695,\"onlineRunningTime\":8967.009999999083,\"pid\":981,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1202829,39,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1905.02210777313,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.22299999998,\"onlineExpGained\":2475.0031037855015,\"onlineMoneyMade\":1202829,\"onlineRunningTime\":8967.009999999083,\"pid\":982,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1023812,16,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1062.002312053243,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.307,\"onlineExpGained\":978.1775203186731,\"onlineMoneyMade\":1023812,\"onlineRunningTime\":8967.009999999083,\"pid\":983,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[341,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.3425920751092,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.385,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":341,\"onlineRunningTime\":8967.009999999083,\"pid\":984,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[66029,9,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.7855349828442,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.478,\"onlineExpGained\":1564.684830407582,\"onlineMoneyMade\":66029,\"onlineRunningTime\":8967.009999999083,\"pid\":985,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[171,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.6133605724293,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.558,\"onlineExpGained\":284.4539159873184,\"onlineMoneyMade\":171,\"onlineRunningTime\":8967.009999999083,\"pid\":986,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.7496660818467,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.651,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":987,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65743861,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.532678451716,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.74200000001,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65743861,\"onlineRunningTime\":8967.009999999083,\"pid\":988,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40622,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8800771752927,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.838,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40622,\"onlineRunningTime\":8967.009999999083,\"pid\":989,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.3544262853031,\"offlineMoneyMade\":0,\"offlineRunningTime\":103942.93600000002,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":990,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.6738832408224,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.071,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":991,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.26418939615908,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.16,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":992,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.4809479595957,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.26100000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":993,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.53906697291518,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.352,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":994,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6779235610916,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.44799999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":995,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6781662667184,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.53600000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":996,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.01069859995465,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.63399999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":997,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.72,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":998,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4043582065953,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.816,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":999,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8554584260123,\"offlineMoneyMade\":0,\"offlineRunningTime\":103943.91499999998,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":1000,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.83523978291362,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.011,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":1001,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.6387073965509,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.105,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":1002,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.34815889526084,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.208,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8967.009999999083,\"pid\":1003,\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45997901.73036899,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.289,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1004,\"ramUsage\":1.75,\"server\":\"grinding-server-5\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-6\",\"httpPortOpen\":false,\"ip\":\"4.4.3.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2377096,707,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5821.776974911084,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.381,\"onlineExpGained\":6253.521513550468,\"onlineMoneyMade\":2377096,\"onlineRunningTime\":8966.809999999083,\"pid\":1005,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[44755,75,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8238.097712440627,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.458,\"onlineExpGained\":7113.884365560307,\"onlineMoneyMade\":44755,\"onlineRunningTime\":8966.809999999083,\"pid\":1006,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1978413,86,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4392.0369671149765,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.533,\"onlineExpGained\":4816.261016638744,\"onlineMoneyMade\":1978413,\"onlineRunningTime\":8966.809999999083,\"pid\":1007,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[821310,32,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3347.514513306554,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.86700000001,\"onlineExpGained\":2613.992925169428,\"onlineMoneyMade\":821310,\"onlineRunningTime\":8966.809999999083,\"pid\":1008,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1284706,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1957.3144101020453,\"offlineMoneyMade\":0,\"offlineRunningTime\":103944.967,\"onlineExpGained\":2530.5204417994096,\"onlineMoneyMade\":1284706,\"onlineRunningTime\":8966.809999999083,\"pid\":1009,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1114902,17,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1146.2093839083625,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.04,\"onlineExpGained\":987.0896008803422,\"onlineMoneyMade\":1114902,\"onlineRunningTime\":8966.809999999083,\"pid\":1010,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[157,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.366340884471,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.12299999999,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":157,\"onlineRunningTime\":8966.809999999083,\"pid\":1011,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[24736,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1948.486318190006,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.215,\"onlineExpGained\":1486.9312507086659,\"onlineMoneyMade\":24736,\"onlineRunningTime\":8966.809999999083,\"pid\":1012,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.6277300570654,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.297,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1013,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.7707651739059,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.36700000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1014,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65552640,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.6870361517285,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.443,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65552640,\"onlineRunningTime\":8966.809999999083,\"pid\":1015,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.88824132536445,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.51599999997,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1016,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[845,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.7739222884557,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.58399999999,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":845,\"onlineRunningTime\":8966.809999999083,\"pid\":1017,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.68512259376644,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.66900000001,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1018,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.26845027524323,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.746,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1019,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.48716869736847,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.822,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1020,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56718,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.54336326912605,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.896,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56718,\"onlineRunningTime\":8966.809999999083,\"pid\":1021,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.684926170029,\"offlineMoneyMade\":0,\"offlineRunningTime\":103945.98700000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1022,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6851385374525,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.064,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1023,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.01590146872667,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.16100000001,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1024,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.25499999999,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1025,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.41126183560226,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.35699999999,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1026,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8622268331902,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.484,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1027,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.84087880251997,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.595,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1028,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.64352966102538,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.70700000001,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1029,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.35721656461044,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.828,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.809999999083,\"pid\":1030,\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":45999349.51924714,\"offlineMoneyMade\":0,\"offlineRunningTime\":103946.946,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1031,\"ramUsage\":1.75,\"server\":\"grinding-server-6\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-7\",\"httpPortOpen\":false,\"ip\":\"62.9.0.6\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2333405,702,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5588.604670074462,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.04500000001,\"onlineExpGained\":6253.762020735946,\"onlineMoneyMade\":2333405,\"onlineRunningTime\":8966.609999999082,\"pid\":1032,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48735,79,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8081.64089013047,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.127,\"onlineExpGained\":7151.606848930324,\"onlineMoneyMade\":48735,\"onlineRunningTime\":8966.609999999082,\"pid\":1033,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1991581,80,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4198.982020959363,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.24900000001,\"onlineExpGained\":4771.729920309844,\"onlineMoneyMade\":1991581,\"onlineRunningTime\":8966.609999999082,\"pid\":1034,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[852744,30,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3216.973707635685,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.345,\"onlineExpGained\":2593.9773770049774,\"onlineMoneyMade\":852744,\"onlineRunningTime\":8966.609999999082,\"pid\":1035,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1265307,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1957.38200730541,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.46800000001,\"onlineExpGained\":2497.2100389910647,\"onlineMoneyMade\":1265307,\"onlineRunningTime\":8966.609999999082,\"pid\":1036,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[859723,15,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1075.685728862057,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.576,\"onlineExpGained\":967.0740527158914,\"onlineMoneyMade\":859723,\"onlineRunningTime\":8966.609999999082,\"pid\":1037,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[129,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":747.965276903381,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.708,\"onlineExpGained\":449.4863923760822,\"onlineMoneyMade\":129,\"onlineRunningTime\":8966.609999999082,\"pid\":1038,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[25080,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1948.5421112821614,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.82699999998,\"onlineExpGained\":1486.9312507086659,\"onlineMoneyMade\":25080,\"onlineRunningTime\":8966.609999999082,\"pid\":1039,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.6419067173679,\"offlineMoneyMade\":0,\"offlineRunningTime\":103947.99600000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1040,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.7920264337198,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.09999999999,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1041,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65920469,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.838443269982,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.20100000002,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65920469,\"onlineRunningTime\":8966.609999999082,\"pid\":1042,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40593,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.8967408214063,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.30399999999,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40593,\"onlineRunningTime\":8966.609999999082,\"pid\":1043,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1425,3,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.8066515707906,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.40200000002,\"onlineExpGained\":670.2315833083796,\"onlineMoneyMade\":1425,\"onlineRunningTime\":8966.609999999082,\"pid\":1044,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.69747809492424,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.52500000001,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1045,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.2732054558453,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.63200000001,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1046,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.4942736009161,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.74699999999,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1047,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56669,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.54837899229673,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.86599999998,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56669,\"onlineRunningTime\":8966.609999999082,\"pid\":1048,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[459620,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6931643712483,\"offlineMoneyMade\":0,\"offlineRunningTime\":103948.97399999999,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":459620,\"onlineRunningTime\":8966.609999999082,\"pid\":1049,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.693429141023,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.07000000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1050,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[300929,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.0220926149069,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.16799999999,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":300929,\"onlineRunningTime\":8966.609999999082,\"pid\":1051,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.27,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1052,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4194478388287,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.37000000001,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1053,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.87010442659687,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.47399999999,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1054,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.84733836058288,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.555,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1055,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.6489542452362,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.634,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1056,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.36720074364945,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.716,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.609999999082,\"pid\":1057,\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46000869.43628306,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.79299999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1058,\"ramUsage\":1.75,\"server\":\"grinding-server-7\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-8\",\"httpPortOpen\":false,\"ip\":\"4.8.6.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2349849,712,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5938.739064498349,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.88100000001,\"onlineExpGained\":6258.2867857029505,\"onlineMoneyMade\":2349849,\"onlineRunningTime\":8966.209999999082,\"pid\":1059,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[38765,78,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8180.831630307893,\"offlineMoneyMade\":0,\"offlineRunningTime\":103949.949,\"onlineExpGained\":7142.724074848097,\"onlineMoneyMade\":38765,\"onlineRunningTime\":8966.209999999082,\"pid\":1060,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1972635,84,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4537.253495815771,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.041,\"onlineExpGained\":4791.921307350956,\"onlineMoneyMade\":1972635,\"onlineRunningTime\":8966.209999999082,\"pid\":1061,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[908590,39,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3333.161667494484,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.136,\"onlineExpGained\":2691.7171983888993,\"onlineMoneyMade\":908590,\"onlineRunningTime\":8966.209999999082,\"pid\":1062,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1288113,46,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1957.4547456602752,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.223,\"onlineExpGained\":2552.727377004973,\"onlineMoneyMade\":1288113,\"onlineRunningTime\":8966.209999999082,\"pid\":1063,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1360226,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1088.6375203971593,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.304,\"onlineExpGained\":1011.4879231270183,\"onlineMoneyMade\":1360226,\"onlineRunningTime\":8966.209999999082,\"pid\":1064,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[469,3,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.4120043500068,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.385,\"onlineExpGained\":482.82610166387104,\"onlineMoneyMade\":469,\"onlineRunningTime\":8966.209999999082,\"pid\":1065,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[34034,5,66,13]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2028.9633571917323,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.45800000003,\"onlineExpGained\":1511.3881859142296,\"onlineMoneyMade\":34034,\"onlineRunningTime\":8966.209999999082,\"pid\":1066,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.6552372489858,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.53600000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1067,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.8115429314207,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.61099999999,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1068,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65629282,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4486.9762516902865,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.68500000001,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65629282,\"onlineRunningTime\":8966.209999999082,\"pid\":1069,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.90423427953783,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.762,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1070,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.4392372397938,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.87700000001,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1071,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.7079690229032,\"offlineMoneyMade\":0,\"offlineRunningTime\":103950.95000000001,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1072,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.27714174359943,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.02100000001,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1073,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[214105,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.4999818140228,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.097,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":214105,\"onlineRunningTime\":8966.209999999082,\"pid\":1074,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.55226322236157,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.16600000001,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1075,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.6994195571759,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.24200000003,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1076,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.69960158639594,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.30800000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1077,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[300710,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.0266489855411,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.38100000001,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":300710,\"onlineRunningTime\":8966.209999999082,\"pid\":1078,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.45599999999,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1079,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[276868,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.42535165064777,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.543,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":276868,\"onlineRunningTime\":8966.209999999082,\"pid\":1080,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[321817,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.87578999401217,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.63199999998,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":321817,\"onlineRunningTime\":8966.209999999082,\"pid\":1081,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.85204990985932,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.71399999999,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.209999999082,\"pid\":1082,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[939190,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.65293882195414,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.78399999999,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":939190,\"onlineRunningTime\":8966.209999999082,\"pid\":1083,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[262407,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.3746162782887,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.86099999999,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":262407,\"onlineRunningTime\":8966.209999999082,\"pid\":1084,\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46002044.976891614,\"offlineMoneyMade\":0,\"offlineRunningTime\":103951.92799999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1085,\"ramUsage\":1.75,\"server\":\"grinding-server-8\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-9\",\"httpPortOpen\":false,\"ip\":\"12.8.1.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2400202,723,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5861.109689859357,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.00600000001,\"onlineExpGained\":6320.793117064853,\"onlineMoneyMade\":2400202,\"onlineRunningTime\":8966.009999999083,\"pid\":1086,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[44590,71,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7782.946257569267,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.072,\"onlineExpGained\":7091.501591478085,\"onlineMoneyMade\":44590,\"onlineRunningTime\":8966.009999999083,\"pid\":1087,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2016004,80,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4433.953855802109,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.14999999998,\"onlineExpGained\":4762.964372145392,\"onlineMoneyMade\":2016004,\"onlineRunningTime\":8966.009999999083,\"pid\":1088,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[631823,25,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3182.803530111916,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.21100000001,\"onlineExpGained\":2536.2686519499557,\"onlineMoneyMade\":631823,\"onlineRunningTime\":8966.009999999083,\"pid\":1089,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1263701,39,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1905.5261061843146,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.288,\"onlineExpGained\":2475.0031037855015,\"onlineMoneyMade\":1263701,\"onlineRunningTime\":8966.009999999083,\"pid\":1090,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1083170,16,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1138.4436111819552,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.35,\"onlineExpGained\":975.9861332775605,\"onlineMoneyMade\":1083170,\"onlineRunningTime\":8966.009999999083,\"pid\":1091,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[312,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":748.0011025179292,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.43000000001,\"onlineExpGained\":467.251940540533,\"onlineMoneyMade\":312,\"onlineRunningTime\":8966.009999999083,\"pid\":1092,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43845,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2109.3758505237824,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.49799999999,\"onlineExpGained\":1535.845121119793,\"onlineMoneyMade\":43845,\"onlineRunningTime\":8966.009999999083,\"pid\":1093,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.665928575805,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.58000000002,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1094,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.8273146861216,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.646,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1095,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65715377,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.0921648435415,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.73000000001,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65715377,\"onlineRunningTime\":8966.009999999083,\"pid\":1096,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.9104198883862,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.79100000003,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1097,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1061.460612824645,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.87599999999,\"onlineExpGained\":625.7884064178088,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1098,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17433,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.7165477899887,\"offlineMoneyMade\":0,\"offlineRunningTime\":103952.93300000002,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17433,\"onlineRunningTime\":8966.009999999083,\"pid\":1099,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.28042555334986,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.01400000002,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1100,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[215815,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.5047961452472,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.07899999998,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":215815,\"onlineRunningTime\":8966.009999999083,\"pid\":1101,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.55563574733532,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.163,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1102,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.70489422387175,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.22700000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1103,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7051258974246,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.311,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1104,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.03077504372044,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.38500000001,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1105,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.471,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1106,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.43076370455645,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.535,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1107,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.88105138332094,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.62900000002,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1108,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[207673,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.8563751950217,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.696,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":207673,\"onlineRunningTime\":8966.009999999083,\"pid\":1109,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.65662872532414,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.77500000001,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1110,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.38146484431235,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.842,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8966.009999999083,\"pid\":1111,\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46003145.64077205,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.925,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1112,\"ramUsage\":1.75,\"server\":\"grinding-server-9\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-10\",\"httpPortOpen\":false,\"ip\":\"10.5.8.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2407642,738,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6036.304048090803,\"offlineMoneyMade\":0,\"offlineRunningTime\":103953.99299999999,\"onlineExpGained\":6374.353519873191,\"onlineMoneyMade\":2407642,\"onlineRunningTime\":8965.609999999084,\"pid\":1113,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[49432,76,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8057.40498733364,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.08099999998,\"onlineExpGained\":7129.34130076587,\"onlineMoneyMade\":49432,\"onlineRunningTime\":8965.609999999084,\"pid\":1114,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2011042,79,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4344.279340969113,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.14100000002,\"onlineExpGained\":4756.2729851042795,\"onlineMoneyMade\":2011042,\"onlineRunningTime\":8965.609999999084,\"pid\":1115,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[834291,32,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3235.3733272146796,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.216,\"onlineExpGained\":2616.1843122105406,\"onlineMoneyMade\":834291,\"onlineRunningTime\":8965.609999999084,\"pid\":1116,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1254374,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2021.9074150212712,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.31399999998,\"onlineExpGained\":2528.3290547582974,\"onlineMoneyMade\":1254374,\"onlineRunningTime\":8965.609999999084,\"pid\":1117,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1276811,18,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1152.559826388575,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.41,\"onlineExpGained\":998.193068483124,\"onlineMoneyMade\":1276811,\"onlineRunningTime\":8965.609999999084,\"pid\":1118,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[156,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.4475859182108,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.49899999998,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":156,\"onlineRunningTime\":8965.609999999084,\"pid\":1119,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[42336,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2029.056550282744,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.59199999998,\"onlineExpGained\":1524.7123470375677,\"onlineMoneyMade\":42336,\"onlineRunningTime\":8965.609999999084,\"pid\":1120,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[497,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":584.0139714717541,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.69399999999,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":497,\"onlineRunningTime\":8965.609999999084,\"pid\":1121,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3349,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.2437133506066,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.79,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3349,\"onlineRunningTime\":8965.609999999084,\"pid\":1122,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65373051,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.217098234254,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.86899999999,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":65373051,\"onlineRunningTime\":8965.609999999084,\"pid\":1123,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.91701400959795,\"offlineMoneyMade\":0,\"offlineRunningTime\":103954.95400000001,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1124,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[549,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1254.2840331277753,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.042,\"onlineExpGained\":652.4953416233725,\"onlineMoneyMade\":549,\"onlineRunningTime\":8965.609999999084,\"pid\":1125,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.7260350498063,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.12600000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1126,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[831771,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.28406196484977,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.22099999999,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":831771,\"onlineRunningTime\":8965.609999999084,\"pid\":1127,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.51021530415824,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.30999999998,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1128,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.5593950065198,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.38900000001,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1129,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.71109424942944,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.47499999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1130,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[659625,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7113507451487,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.56799999997,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":659625,\"onlineRunningTime\":8965.609999999084,\"pid\":1131,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.03545083120807,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.65600000002,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1132,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.754,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1133,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4370342971375,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.843,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1134,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8871426863163,\"offlineMoneyMade\":0,\"offlineRunningTime\":103955.941,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1135,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.86144463873126,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.019,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1136,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[938709,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.66093948134545,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.10100000001,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":938709,\"onlineRunningTime\":8965.609999999084,\"pid\":1137,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.3896132896014,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.19900000001,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.609999999084,\"pid\":1138,\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46004538.91729025,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.28600000001,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1139,\"ramUsage\":1.75,\"server\":\"grinding-server-10\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-11\",\"httpPortOpen\":false,\"ip\":\"86.8.8.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2344903,689,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5589.1697974974295,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.38,\"onlineExpGained\":6185.3646603028255,\"onlineMoneyMade\":2344903,\"onlineRunningTime\":8965.409999999085,\"pid\":1140,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[48542,80,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8106.005369981941,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.45999999999,\"onlineExpGained\":7164.872397094772,\"onlineMoneyMade\":48542,\"onlineRunningTime\":8965.409999999085,\"pid\":1141,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2037282,78,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4392.743336169063,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.543,\"onlineExpGained\":4745.198823980941,\"onlineMoneyMade\":2037282,\"onlineRunningTime\":8965.409999999085,\"pid\":1142,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[786975,32,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3239.509960498763,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.621,\"onlineExpGained\":2616.18431221054,\"onlineMoneyMade\":786975,\"onlineRunningTime\":8965.409999999085,\"pid\":1143,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1258629,42,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1957.6467422542014,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.702,\"onlineExpGained\":2508.3135065938463,\"onlineMoneyMade\":1258629,\"onlineRunningTime\":8965.409999999085,\"pid\":1144,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1290143,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1098.9273574980377,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.789,\"onlineExpGained\":1011.4879231270183,\"onlineMoneyMade\":1290143,\"onlineRunningTime\":8965.409999999085,\"pid\":1145,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[156,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.4681008195228,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.86400000002,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":156,\"onlineRunningTime\":8965.409999999085,\"pid\":1146,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[43091,7,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2109.4814412600977,\"offlineMoneyMade\":0,\"offlineRunningTime\":103956.943,\"onlineExpGained\":1535.845121119793,\"onlineMoneyMade\":43091,\"onlineRunningTime\":8965.409999999085,\"pid\":1147,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.6892518997145,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.03099999999,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1148,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.8620686806602,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.12299999999,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1149,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[65251477,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.357971234798,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.21500000001,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":65251477,\"onlineRunningTime\":8965.409999999085,\"pid\":1150,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.9242208993551,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.31800000001,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1151,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[278,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.91204532998,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.424,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":278,\"onlineRunningTime\":8965.409999999085,\"pid\":1152,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.73641349773266,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.52499999998,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1153,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[831058,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.28801308164944,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.61900000004,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":831058,\"onlineRunningTime\":8965.409999999085,\"pid\":1154,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.5160595427687,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.716,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1155,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.56346838170083,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.801,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1156,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[459343,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7177603801115,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.892,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":459343,\"onlineRunningTime\":8965.409999999085,\"pid\":1157,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7179589574426,\"offlineMoneyMade\":0,\"offlineRunningTime\":103957.96400000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1158,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[300491,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.0403654524027,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.04299999999,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":300491,\"onlineRunningTime\":8965.409999999085,\"pid\":1159,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.121,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1160,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[276716,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.443481487863,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.21599999999,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":276716,\"onlineRunningTime\":8965.409999999085,\"pid\":1161,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[321636,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.89337889487604,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.308,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":321636,\"onlineRunningTime\":8965.409999999085,\"pid\":1162,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.86663629029607,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.39800000002,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1163,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[938228,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.66534104865016,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.47600000001,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":938228,\"onlineRunningTime\":8965.409999999085,\"pid\":1164,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.3977928490218,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.565,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.409999999085,\"pid\":1165,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403169.7025014774,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.637,\"onlineExpGained\":651505.297604414,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1166,\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2463.2388717525105,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.717,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1167,\"ramUsage\":1.75,\"server\":\"grinding-server-11\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-12\",\"httpPortOpen\":false,\"ip\":\"27.7.2.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2373934,723,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5783.854263996854,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.788,\"onlineExpGained\":6329.558665229294,\"onlineMoneyMade\":2373934,\"onlineRunningTime\":8965.209999999084,\"pid\":1168,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[40879,82,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8276.105987971981,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.869,\"onlineExpGained\":7176.063784135887,\"onlineMoneyMade\":40879,\"onlineRunningTime\":8965.209999999084,\"pid\":1169,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2054320,83,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4344.581992528859,\"offlineMoneyMade\":0,\"offlineRunningTime\":103958.946,\"onlineExpGained\":4791.804081433181,\"onlineMoneyMade\":2054320,\"onlineRunningTime\":8965.209999999084,\"pid\":1170,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[617168,28,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3237.3900974073467,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.02799999999,\"onlineExpGained\":2569.5790547583006,\"onlineMoneyMade\":617168,\"onlineRunningTime\":8965.209999999084,\"pid\":1171,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1231597,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2022.056117267489,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.09900000002,\"onlineExpGained\":2495.0186519499525,\"onlineMoneyMade\":1231597,\"onlineRunningTime\":8965.209999999084,\"pid\":1172,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1335113,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1088.5232258068722,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.18000000001,\"onlineExpGained\":1011.4879231270183,\"onlineMoneyMade\":1335113,\"onlineRunningTime\":8965.209999999084,\"pid\":1173,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[156,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.488765491332,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.25,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":156,\"onlineRunningTime\":8965.209999999084,\"pid\":1174,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[26911,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2109.5374184846582,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.33400000002,\"onlineExpGained\":1509.1967988731167,\"onlineMoneyMade\":26911,\"onlineRunningTime\":8965.209999999084,\"pid\":1175,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[496,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":584.0415635452977,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.402,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":496,\"onlineRunningTime\":8965.209999999084,\"pid\":1176,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3335,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.2845389334798,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.48700000001,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3335,\"onlineRunningTime\":8965.209999999084,\"pid\":1177,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[64582237,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.492078415977,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.556,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":64582237,\"onlineRunningTime\":8965.209999999084,\"pid\":1178,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[40564,1,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.93131194232257,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.644,\"onlineExpGained\":193.1304406655485,\"onlineMoneyMade\":40564,\"onlineRunningTime\":8965.209999999084,\"pid\":1179,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[277,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.9386182920844,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.711,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":277,\"onlineRunningTime\":8965.209999999084,\"pid\":1180,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.74619060999345,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.785,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1181,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.29170221864456,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.85800000001,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1182,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.5214325501695,\"offlineMoneyMade\":0,\"offlineRunningTime\":103959.92799999999,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1183,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.56718542099333,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.002,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1184,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7237811344677,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.07500000003,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1185,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.72396867972475,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.143,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1186,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.04483534876368,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.21399999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1187,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.28700000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1188,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4493092266352,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.361,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1189,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.8989854228926,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.43600000002,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1190,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.87125836596408,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.516,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1191,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.66927743978914,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.6,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8965.209999999084,\"pid\":1192,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[262241,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.405070098633,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.67,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":262241,\"onlineRunningTime\":8965.209999999084,\"pid\":1193,\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46007023.40501622,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.743,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1194,\"ramUsage\":1.75,\"server\":\"grinding-server-12\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-13\",\"httpPortOpen\":false,\"ip\":\"91.3.7.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2379499,719,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5745.106720391624,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.81200000002,\"onlineExpGained\":6314.399336330629,\"onlineMoneyMade\":2379499,\"onlineRunningTime\":8964.409999999083,\"pid\":1195,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[42585,72,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8167.980469766099,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.895,\"onlineExpGained\":7084.2751186195555,\"onlineMoneyMade\":42585,\"onlineRunningTime\":8964.409999999083,\"pid\":1196,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2076614,88,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4441.316991025932,\"offlineMoneyMade\":0,\"offlineRunningTime\":103960.96500000001,\"onlineExpGained\":4831.835177762084,\"onlineMoneyMade\":2076614,\"onlineRunningTime\":8964.409999999083,\"pid\":1197,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[949023,36,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3183.6452689059292,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.04800000001,\"onlineExpGained\":2660.5981826216666,\"onlineMoneyMade\":949023,\"onlineRunningTime\":8964.409999999083,\"pid\":1198,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1277713,41,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1957.7735443564475,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.129,\"onlineExpGained\":2497.2100389910647,\"onlineMoneyMade\":1277713,\"onlineRunningTime\":8964.409999999083,\"pid\":1199,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1064150,15,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1146.6624028725719,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.213,\"onlineExpGained\":964.8826656747788,\"onlineMoneyMade\":1064150,\"onlineRunningTime\":8964.409999999083,\"pid\":1200,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[186,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":748.0682826877684,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.298,\"onlineExpGained\":449.48639237608216,\"onlineMoneyMade\":186,\"onlineRunningTime\":8964.409999999083,\"pid\":1201,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[41871,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2029.211230357103,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.37400000001,\"onlineExpGained\":1524.7123470375675,\"onlineMoneyMade\":41871,\"onlineRunningTime\":8964.409999999083,\"pid\":1202,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[171,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.7123930426072,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.453,\"onlineExpGained\":284.4539159873184,\"onlineMoneyMade\":171,\"onlineRunningTime\":8964.409999999083,\"pid\":1203,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3325,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.3023028705442,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.53500000002,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3325,\"onlineRunningTime\":8964.409999999083,\"pid\":1204,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[64425315,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.608158066094,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.61,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":64425315,\"onlineRunningTime\":8964.409999999083,\"pid\":1205,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.93754937736617,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.69,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1206,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[849,2,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.9624048739397,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.758,\"onlineExpGained\":654.6867286644851,\"onlineMoneyMade\":849,\"onlineRunningTime\":8964.409999999083,\"pid\":1207,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.7551197957041,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.84900000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1208,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.29509642240077,\"offlineMoneyMade\":0,\"offlineRunningTime\":103961.91799999999,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1209,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.52647520991817,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.00399999999,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1210,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56522,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.57067953925602,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.071,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56522,\"onlineRunningTime\":8964.409999999083,\"pid\":1211,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[459066,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.72949574877185,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.147,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":459066,\"onlineRunningTime\":8964.409999999083,\"pid\":1212,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7296860520474,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.216,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1213,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.04912406093314,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.29699999999,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1214,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.369,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1215,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4549929699971,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.453,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1216,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.9045102768638,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.533,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.409999999083,\"pid\":1217,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[207566,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.8758542542346,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.62200000002,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":207566,\"onlineRunningTime\":8964.409999999083,\"pid\":1218,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[937747,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.67318047168118,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.70599999999,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":937747,\"onlineRunningTime\":8964.409999999083,\"pid\":1219,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[262074,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.4123992051296,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.78999999998,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":262074,\"onlineRunningTime\":8964.409999999083,\"pid\":1220,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403186.0683981197,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.85699999999,\"onlineExpGained\":651505.297604414,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1221,\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2463.3633753791983,\"offlineMoneyMade\":0,\"offlineRunningTime\":103962.94100000002,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1222,\"ramUsage\":1.75,\"server\":\"grinding-server-13\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-14\",\"httpPortOpen\":false,\"ip\":\"19.5.8.7\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16382.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2354314,706,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5667.471423419292,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.008,\"onlineExpGained\":6259.653049807176,\"onlineMoneyMade\":2354314,\"onlineRunningTime\":8964.009999999083,\"pid\":1223,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[47005,73,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8071.7601849845705,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.09000000001,\"onlineExpGained\":7097.540666784006,\"onlineMoneyMade\":47005,\"onlineRunningTime\":8964.009999999083,\"pid\":1224,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2032111,83,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4441.447576545471,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.156,\"onlineExpGained\":4787.421307350957,\"onlineMoneyMade\":2032111,\"onlineRunningTime\":8964.009999999083,\"pid\":1225,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[739299,29,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3237.4221089529397,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.246,\"onlineExpGained\":2582.8739094021953,\"onlineMoneyMade\":739299,\"onlineRunningTime\":8964.009999999083,\"pid\":1226,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1309079,44,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2022.1776621763208,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.30799999999,\"onlineExpGained\":2528.3290547582974,\"onlineMoneyMade\":1309079,\"onlineRunningTime\":8964.009999999083,\"pid\":1227,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1316689,21,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1160.7827035701823,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.391,\"onlineExpGained\":1031.5034712914692,\"onlineMoneyMade\":1316689,\"onlineRunningTime\":8964.009999999083,\"pid\":1228,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[285,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.5251442754742,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.45700000001,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":285,\"onlineRunningTime\":8964.009999999083,\"pid\":1229,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[26809,5,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2109.6350918546887,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.54000000001,\"onlineExpGained\":1509.1967988731167,\"onlineMoneyMade\":26809,\"onlineRunningTime\":8964.009999999083,\"pid\":1230,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.7236583677035,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.60600000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1231,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":771.9129333867323,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.68500000001,\"onlineExpGained\":409.5529843119928,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1232,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[64328314,92,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.72933751907,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.75,\"onlineExpGained\":3912.2802529095034,\"onlineMoneyMade\":64328314,\"onlineRunningTime\":8964.009999999083,\"pid\":1233,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.94408862378293,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.83499999999,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1234,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[275,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1157.987292928652,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.90000000001,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":275,\"onlineRunningTime\":8964.009999999083,\"pid\":1235,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17534,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.76434316001377,\"offlineMoneyMade\":0,\"offlineRunningTime\":103963.981,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17534,\"onlineRunningTime\":8964.009999999083,\"pid\":1236,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.2986109061929,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.051,\"onlineExpGained\":163.630164653576,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1237,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[215672,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.53164660809009,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.133,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":215672,\"onlineRunningTime\":8964.009999999083,\"pid\":1238,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56474,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.57428005164658,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.20300000001,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56474,\"onlineRunningTime\":8964.009999999083,\"pid\":1239,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[458789,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.73539239229615,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.28499999999,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":458789,\"onlineRunningTime\":8964.009999999083,\"pid\":1240,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.73559096962714,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.35700000002,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1241,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.05354042560108,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.44199999998,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1242,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.512,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1243,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.46079353982395,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.58799999999,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1244,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[321454,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.9101194395269,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.66200000001,\"onlineExpGained\":201.38195450303397,\"onlineMoneyMade\":321454,\"onlineRunningTime\":8964.009999999083,\"pid\":1245,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[207460,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.88046978305326,\"offlineMoneyMade\":0,\"offlineRunningTime\":103964.73700000001,\"onlineExpGained\":168.8117828682075,\"onlineMoneyMade\":207460,\"onlineRunningTime\":8964.009999999083,\"pid\":1246,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.67790451170634,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.25499999999,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1247,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.4214153889709,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.39800000003,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8964.009999999083,\"pid\":1248,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,5093,5093]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":403196.5278349074,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.55400000002,\"onlineExpGained\":651505.297604414,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1249,\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"threads\":5093,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,135]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2463.4478211312203,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.643,\"onlineExpGained\":2354.5212613786025,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1250,\"ramUsage\":1.75,\"server\":\"grinding-server-14\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-15\",\"httpPortOpen\":false,\"ip\":\"72.2.3.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2317474,700,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5589.893298000875,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.791,\"onlineExpGained\":6239.105443500282,\"onlineMoneyMade\":2317474,\"onlineRunningTime\":8963.809999999083,\"pid\":1251,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[45084,83,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8170.686657962136,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.90499999998,\"onlineExpGained\":7179.794246482924,\"onlineMoneyMade\":45084,\"onlineRunningTime\":8963.809999999083,\"pid\":1252,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2092935,81,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4531.438602489965,\"offlineMoneyMade\":0,\"offlineRunningTime\":103965.99600000001,\"onlineExpGained\":4767.464372145392,\"onlineMoneyMade\":2092935,\"onlineRunningTime\":8963.809999999083,\"pid\":1253,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[845540,34,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3289.2959532646328,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.074,\"onlineExpGained\":2638.3912474161034,\"onlineMoneyMade\":845540,\"onlineRunningTime\":8963.809999999083,\"pid\":1254,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1290527,43,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2034.6169241126172,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.15699999999,\"onlineExpGained\":2515.0342001144027,\"onlineMoneyMade\":1290527,\"onlineRunningTime\":8963.809999999083,\"pid\":1255,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1181953,14,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1088.8545440561902,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.235,\"onlineExpGained\":955.9705851131097,\"onlineMoneyMade\":1181953,\"onlineRunningTime\":8963.809999999083,\"pid\":1256,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[155,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.5500538865942,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.322,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":155,\"onlineRunningTime\":8963.809999999083,\"pid\":1257,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[42442,6,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2029.3267196606066,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.39,\"onlineExpGained\":1524.7123470375675,\"onlineMoneyMade\":42442,\"onlineRunningTime\":8963.809999999083,\"pid\":1258,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":519.7387761753438,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.48000000001,\"onlineExpGained\":273.35044838453666,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1259,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3293,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.345980929263,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.555,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3293,\"onlineRunningTime\":8963.809999999083,\"pid\":1260,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[64093710,92,131,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4487.9056332791615,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.64000000001,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":64093710,\"onlineRunningTime\":8963.809999999083,\"pid\":1261,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.9528868825981,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.721,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1262,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[273,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1158.0210885137392,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.80800000002,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":273,\"onlineRunningTime\":8963.809999999083,\"pid\":1263,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.776884685874,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.88000000002,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1264,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[830346,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.30340563091642,\"offlineMoneyMade\":0,\"offlineRunningTime\":103966.96100000001,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":830346,\"onlineRunningTime\":8963.809999999083,\"pid\":1265,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.53867864083207,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.028,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1266,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[56425,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.5791843143024,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.107,\"onlineExpGained\":187.76170091028834,\"onlineMoneyMade\":56425,\"onlineRunningTime\":8963.809999999083,\"pid\":1267,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[458512,1,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.74339064590714,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.185,\"onlineExpGained\":210.26472858525935,\"onlineMoneyMade\":458512,\"onlineRunningTime\":8963.809999999083,\"pid\":1268,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7436498996449,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.27900000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1269,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.0595524465011,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.36200000004,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1270,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.449,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1271,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.46879751111663,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.534,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1272,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.9179654171741,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.64000000001,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1273,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.8869708044957,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.716,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.809999999083,\"pid\":1274,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[937266,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.6826378181889,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.80900000001,\"onlineExpGained\":145.12438531560645,\"onlineMoneyMade\":937266,\"onlineRunningTime\":8963.809999999083,\"pid\":1275,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[261908,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.43003400335607,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.891,\"onlineExpGained\":260.60044838453666,\"onlineMoneyMade\":261908,\"onlineRunningTime\":8963.809999999083,\"pid\":1276,\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46011129.94387535,\"offlineMoneyMade\":0,\"offlineRunningTime\":103967.986,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1277,\"ramUsage\":1.75,\"server\":\"grinding-server-15\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-20\",\"httpPortOpen\":false,\"ip\":\"67.9.5.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2337468,705,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5706.777139563152,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.076,\"onlineExpGained\":6250.384749979725,\"onlineMoneyMade\":2337468,\"onlineRunningTime\":8963.609999999082,\"pid\":1278,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[44574,77,496,28]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8067.509287946667,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.16699999999,\"onlineExpGained\":7133.841300765868,\"onlineMoneyMade\":44574,\"onlineRunningTime\":8963.609999999082,\"pid\":1279,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2079825,81,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4393.457507492723,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.232,\"onlineExpGained\":4771.8471462276175,\"onlineMoneyMade\":2079825,\"onlineRunningTime\":8963.609999999082,\"pid\":1280,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[567683,27,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3345.795484887095,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.31399999998,\"onlineExpGained\":2558.475587155519,\"onlineMoneyMade\":567683,\"onlineRunningTime\":8963.609999999082,\"pid\":1281,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1209038,39,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2022.334464474559,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.385,\"onlineExpGained\":2472.811716744389,\"onlineMoneyMade\":1209038,\"onlineRunningTime\":8963.609999999082,\"pid\":1282,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1391505,19,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1161.3273139062514,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.466,\"onlineExpGained\":1009.2965360859057,\"onlineMoneyMade\":1391505,\"onlineRunningTime\":8963.609999999082,\"pid\":1283,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[155,1,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.5692821218151,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.543,\"onlineExpGained\":447.2950053349695,\"onlineMoneyMade\":155,\"onlineRunningTime\":8963.609999999082,\"pid\":1284,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1948.9979106113751,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.62799999998,\"onlineExpGained\":1446.9587673386513,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1285,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[486,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":584.0960213076056,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.696,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":486,\"onlineRunningTime\":8963.609999999082,\"pid\":1286,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3283,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.3652983268202,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.78,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3283,\"onlineRunningTime\":8963.609999999082,\"pid\":1287,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[64018673,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4488.03124600762,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.851,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":64018673,\"onlineRunningTime\":8963.609999999082,\"pid\":1288,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.9596547739943,\"offlineMoneyMade\":0,\"offlineRunningTime\":103968.941,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1289,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[272,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1158.0466051232636,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.00400000002,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":272,\"onlineRunningTime\":8963.609999999082,\"pid\":1290,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.7864498164972,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.091,\"onlineExpGained\":257.7176743023113,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1291,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[829634,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.3070288610425,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.16,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":829634,\"onlineRunningTime\":8963.609999999082,\"pid\":1292,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[215529,1,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.544083225582,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.25299999998,\"onlineExpGained\":224.47716711681997,\"onlineMoneyMade\":215529,\"onlineRunningTime\":8963.609999999082,\"pid\":1293,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.58292668553008,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.323,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1294,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7495217210028,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.40800000001,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1295,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.7497230563523,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.481,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1296,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.06409852257886,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.57000000002,\"onlineExpGained\":168.0715516946887,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1297,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.63500000001,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1298,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[276564,1,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4747040398302,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.708,\"onlineExpGained\":207.30380389118423,\"onlineMoneyMade\":276564,\"onlineRunningTime\":8963.609999999082,\"pid\":1299,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.9235982916569,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.778,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1300,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.89164961952505,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.86000000002,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1301,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.68655938299597,\"offlineMoneyMade\":0,\"offlineRunningTime\":103969.925,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1302,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.43734236709844,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.00499999999,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.609999999082,\"pid\":1303,\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46012270.84790546,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.07,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1304,\"ramUsage\":1.75,\"server\":\"grinding-server-20\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-16\",\"httpPortOpen\":false,\"ip\":\"11.1.7.3\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2408745,730,164,6]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":5726.38394421419,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.16100000002,\"onlineExpGained\":6370.3315065692,\"onlineMoneyMade\":2408745,\"onlineRunningTime\":8963.209999999084,\"pid\":1305,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[43672,81,493,30]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8327.74203019134,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.229,\"onlineExpGained\":7147.993612501059,\"onlineMoneyMade\":43672,\"onlineRunningTime\":8963.209999999084,\"pid\":1306,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2071299,79,316,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4393.577798901124,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.31199999999,\"onlineExpGained\":4754.081598063167,\"onlineMoneyMade\":2071299,\"onlineRunningTime\":8963.209999999084,\"pid\":1307,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[909484,35,123,10]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3282.6641747819876,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.37900000002,\"onlineExpGained\":2647.303327977773,\"onlineMoneyMade\":909484,\"onlineRunningTime\":8963.209999999084,\"pid\":1308,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1275823,45,126,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1970.393434759548,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.45199999999,\"onlineExpGained\":2539.4325223610786,\"onlineMoneyMade\":1275823,\"onlineRunningTime\":8963.209999999084,\"pid\":1309,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1531709,22,44,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1251.7866467618096,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.537,\"onlineExpGained\":1040.4155518531384,\"onlineMoneyMade\":1531709,\"onlineRunningTime\":8963.209999999084,\"pid\":1310,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[340,2,14,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":860.5870983192593,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.609,\"onlineExpGained\":465.0605534994203,\"onlineMoneyMade\":340,\"onlineRunningTime\":8963.209999999084,\"pid\":1311,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[17136,3,67,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2029.4229453877488,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.69099999998,\"onlineExpGained\":1484.7398636675532,\"onlineMoneyMade\":17136,\"onlineRunningTime\":8963.209999999084,\"pid\":1312,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500,1,11,8]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":584.108000625076,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.749,\"onlineExpGained\":282.2625289462057,\"onlineMoneyMade\":500,\"onlineRunningTime\":8963.209999999084,\"pid\":1313,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[3373,1,11,9]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":868.3831624718765,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.84499999999,\"onlineExpGained\":422.90645191477455,\"onlineMoneyMade\":3373,\"onlineRunningTime\":8963.209999999084,\"pid\":1314,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[63590767,91,132,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4488.146267608072,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.916,\"onlineExpGained\":3894.5147047450528,\"onlineMoneyMade\":63590767,\"onlineRunningTime\":8963.209999999084,\"pid\":1315,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,5,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":316.9659196464356,\"offlineMoneyMade\":0,\"offlineRunningTime\":103970.996,\"onlineExpGained\":174.47661509287514,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1316,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[271,1,18,12]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1158.0704313184362,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.05700000003,\"onlineExpGained\":639.1418740205906,\"onlineMoneyMade\":271,\"onlineRunningTime\":8963.209999999084,\"pid\":1317,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[17418,1,7,4]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":449.7953270883375,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.14300000001,\"onlineExpGained\":275.48322246676213,\"onlineMoneyMade\":17418,\"onlineRunningTime\":8963.209999999084,\"pid\":1318,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[828923,1,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":171.3104065880814,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.20999999999,\"onlineExpGained\":183.61640633858315,\"onlineMoneyMade\":828923,\"onlineRunningTime\":8963.209999999084,\"pid\":1319,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,3,2]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":252.54905058549818,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.29800000001,\"onlineExpGained\":196.0522900536987,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1320,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,5,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":175.58637351751375,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.364,\"onlineExpGained\":167.33132052116994,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1321,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{\"comptek\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.75517841691874,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.459,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1322,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,3,1]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":286.75535493010193,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.52299999999,\"onlineExpGained\":178.2867418892479,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1323,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[300272,1,5,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214.06831723176526,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.61899999998,\"onlineExpGained\":192.49918042080856,\"onlineMoneyMade\":300272,\"onlineRunningTime\":8963.209999999084,\"pid\":1324,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,2,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.68699999999,\"onlineExpGained\":93.56522033277423,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1325,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":282.4803388790906,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.78199999998,\"onlineExpGained\":175.76995589928407,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1326,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":273.92905464481584,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.849,\"onlineExpGained\":170.7363839193563,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1327,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":226.89620622669918,\"offlineMoneyMade\":0,\"offlineRunningTime\":103971.948,\"onlineExpGained\":143.05173802975384,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1328,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":192.69044017539002,\"offlineMoneyMade\":0,\"offlineRunningTime\":103972.019,\"onlineExpGained\":122.91745011004292,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1329,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,4,0]},\"filename\":\"/scripts/hack.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359.4446299880867,\"offlineMoneyMade\":0,\"offlineRunningTime\":103972.11299999998,\"onlineExpGained\":221.0721037186336,\"onlineMoneyMade\":0,\"onlineRunningTime\":8963.209999999084,\"pid\":1330,\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,2521395]},\"filename\":\"/scripts/weaken-exp-grind.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46013432.13477353,\"offlineMoneyMade\":0,\"offlineRunningTime\":103972.18699999999,\"onlineExpGained\":43975393.59876832,\"onlineMoneyMade\":0,\"onlineRunningTime\":8962.60999999908,\"pid\":1331,\"ramUsage\":1.75,\"server\":\"grinding-server-16\",\"threads\":18677,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":36.567,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":60.140569172129446,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":4912.994084527769,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.5966,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1744,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0083,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":61446.051260189284,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.5088,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0165,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":15.7515,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.2883,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.8792,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0587,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":18.149099817866194,\"favor\":14.0282,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0859,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":763921.6525054673,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0237,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":363352.9555360898}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":69.4042,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":477834.2670521413}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":69.0179,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":380312.5113926713}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":51.553,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":244118.79729805677}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":56.3715,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":122528.4758574867}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":3,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":95371.96403233937}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":53.1739,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":242780.76572771004}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":66.8278,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":337941.4713111981}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":60.87299999999999,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":361977.0119708095}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":59.2091,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":356954.8753644076}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"port1\":\"run BruteSSH.exe\",\"port2\":\"run FTPCrack.exe\",\"port3\":\"run relaySMTP.exe\",\"nuke\":\"run NUKE.exe\",\"update\":\"run /scripts/update_hack.script\",\"hacknet\":\"run /scripts/auto-hacknet-buy.js\",\"bp\":\"run /bitpacks/bp.js\",\"themes\":\"run /bitpacks/theme-browser/theme-browser.js\",\"sc\":\"scan-analyze 10\",\"port4\":\"run HTTPWorm.exe\",\"port5\":\"run SQLInject.exe\"}","GlobalAliasesSave":"{\"root\":\"run /scripts/get_root.script\",\"grind\":\"run /scripts/grind_on_all_servers.script\",\"more\":\"run ServerProfiler.exe\",\"boot\":\"run /scripts/boot.js\",\"con\":\"connect\",\"l\":\"ls\",\"prof\":\"run ServerProfiler.exe\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":6243.437292282716,\"lastPrice\":6251.776560479109,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":26.902848745769102,\"otlkMagForecast\":23.899094152598085,\"cap\":351863131,\"spreadPerc\":0.1,\"shareTxForMovement\":40880,\"shareTxUntilMovement\":40880,\"totalShares\":139400000,\"maxShares\":27900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":16075.09020685389,\"lastPrice\":16097.635033742112,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":18.269602913111978,\"otlkMagForecast\":32.8822764020034,\"cap\":430295879,\"spreadPerc\":0.4,\"shareTxForMovement\":68605,\"shareTxUntilMovement\":68605,\"totalShares\":81900000,\"maxShares\":16400000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":9685.799839265776,\"lastPrice\":9660.316130928504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":11.091806934411933,\"otlkMagForecast\":59.350331218725756,\"cap\":346328808,\"spreadPerc\":0.2,\"shareTxForMovement\":73529,\"shareTxUntilMovement\":73529,\"totalShares\":77000000,\"maxShares\":15400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":16882.834249032912,\"lastPrice\":16842.34132332623,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":9.15675486543529,\"otlkMagForecast\":59.407388217544096,\"cap\":24116899,\"spreadPerc\":0.1,\"shareTxForMovement\":83486,\"shareTxUntilMovement\":83486,\"totalShares\":105000000,\"maxShares\":21000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":13991.24517537181,\"lastPrice\":14020.211423883326,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":8.393679899690465,\"otlkMagForecast\":41.21965371300871,\"cap\":810203284,\"spreadPerc\":0.2,\"shareTxForMovement\":57885,\"shareTxUntilMovement\":57885,\"totalShares\":54800000,\"maxShares\":11000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":161731.12957018765,\"lastPrice\":161187.50766316836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":true,\"otlkMag\":5.102098394978286,\"otlkMagForecast\":54.07727558319171,\"cap\":738211478,\"spreadPerc\":0.5,\"shareTxForMovement\":35130,\"shareTxUntilMovement\":35130,\"totalShares\":29300000,\"maxShares\":5900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":822885.3478210436,\"lastPrice\":820774.9757634972,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":10.375682851895276,\"otlkMagForecast\":60.582402061212335,\"cap\":370179635,\"spreadPerc\":0.1,\"shareTxForMovement\":79672,\"shareTxUntilMovement\":79672,\"totalShares\":96000000,\"maxShares\":19200000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":5865139.056762105,\"lastPrice\":5888836.848551158,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":30.67455503393128,\"otlkMagForecast\":78.13744177208878,\"cap\":556868540,\"spreadPerc\":0.3,\"shareTxForMovement\":30391,\"shareTxUntilMovement\":30391,\"totalShares\":57300000,\"maxShares\":11500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":33268.76439542201,\"lastPrice\":33360.97034815703,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":7.355660737751159,\"otlkMagForecast\":58.03565591644253,\"cap\":291316677,\"spreadPerc\":0.7,\"shareTxForMovement\":50372,\"shareTxUntilMovement\":50372,\"totalShares\":52800000,\"maxShares\":10600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":21424.995026575954,\"lastPrice\":21380.017785983557,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.749267761498904,\"otlkMagForecast\":57.70346252435836,\"cap\":241454546,\"spreadPerc\":0.6,\"shareTxForMovement\":54463,\"shareTxUntilMovement\":54463,\"totalShares\":87700000,\"maxShares\":17500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":233601.63430672407,\"lastPrice\":234108.66404149245,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":6.500164445507173,\"otlkMagForecast\":44.09628920514288,\"cap\":330867321,\"spreadPerc\":0.4,\"shareTxForMovement\":45061,\"shareTxUntilMovement\":45061,\"totalShares\":61400000,\"maxShares\":12300000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":14722.506766892227,\"lastPrice\":14757.903114780169,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":7.523381596031967,\"otlkMagForecast\":57.35543037833974,\"cap\":8589046,\"spreadPerc\":0.9,\"shareTxForMovement\":41470,\"shareTxUntilMovement\":41470,\"totalShares\":119600000,\"maxShares\":23900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":6332.908181162227,\"lastPrice\":6319.82417075539,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.367118387893782,\"otlkMagForecast\":61.65596519477397,\"cap\":77978143,\"spreadPerc\":0.4,\"shareTxForMovement\":87532,\"shareTxUntilMovement\":87532,\"totalShares\":52700000,\"maxShares\":10500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":202124.46805231235,\"lastPrice\":201733.76142710343,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":6.479237035047133,\"otlkMagForecast\":56.08340531203402,\"cap\":337222642,\"spreadPerc\":0.4,\"shareTxForMovement\":52323,\"shareTxUntilMovement\":52323,\"totalShares\":45400000,\"maxShares\":9100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":7477.257209613675,\"lastPrice\":7491.239378482423,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":5.942628992716921,\"otlkMagForecast\":56.01056449997723,\"cap\":195083790,\"spreadPerc\":0.8,\"shareTxForMovement\":100641,\"shareTxUntilMovement\":100641,\"totalShares\":41400000,\"maxShares\":8300000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":4073.3706240004026,\"lastPrice\":4083.4359962844887,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":5.622896189096397,\"otlkMagForecast\":44.816762833032904,\"cap\":167468603,\"spreadPerc\":0.9,\"shareTxForMovement\":58646,\"shareTxUntilMovement\":58646,\"totalShares\":57500000,\"maxShares\":11500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":53839.74263583357,\"lastPrice\":53712.39904411747,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.457957849709255,\"otlkMagForecast\":44.28777592060715,\"cap\":509433406,\"spreadPerc\":1.2,\"shareTxForMovement\":79976,\"shareTxUntilMovement\":79976,\"totalShares\":30500000,\"maxShares\":6100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":8539.95348456917,\"lastPrice\":8521.45775581029,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":6.868753065906536,\"otlkMagForecast\":55.25793331289676,\"cap\":154323453,\"spreadPerc\":0.4,\"shareTxForMovement\":64023,\"shareTxUntilMovement\":64023,\"totalShares\":31600000,\"maxShares\":6300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":9896.631655145533,\"lastPrice\":9922.738758805803,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":9.0843875104669,\"otlkMagForecast\":61.0921784365412,\"cap\":634559014,\"spreadPerc\":0.4,\"shareTxForMovement\":123535,\"shareTxUntilMovement\":123535,\"totalShares\":22900000,\"maxShares\":4600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":297993.638009452,\"lastPrice\":300411.64449649595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.43,\"b\":false,\"otlkMag\":6.218054134425356,\"otlkMagForecast\":43.815903125400645,\"cap\":64791593,\"spreadPerc\":0.9,\"shareTxForMovement\":44114,\"shareTxUntilMovement\":44114,\"totalShares\":88400000,\"maxShares\":17700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":17271.63482455592,\"lastPrice\":17200.4143619503,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":7.757020309548702,\"otlkMagForecast\":39.04648845966063,\"cap\":102104884,\"spreadPerc\":1.1,\"shareTxForMovement\":96427,\"shareTxUntilMovement\":96427,\"totalShares\":65700000,\"maxShares\":13100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":39415.55056395145,\"lastPrice\":39507.68242269827,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":2.0483468105790696,\"otlkMagForecast\":46.90706054767626,\"cap\":33919951,\"spreadPerc\":0.5,\"shareTxForMovement\":100265,\"shareTxUntilMovement\":100265,\"totalShares\":29600000,\"maxShares\":5900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":10024.958624244127,\"lastPrice\":9966.055171948812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.77,\"b\":true,\"otlkMag\":8.900271920589557,\"otlkMagForecast\":59.841747385517856,\"cap\":82162441,\"spreadPerc\":1.5,\"shareTxForMovement\":42306,\"shareTxUntilMovement\":42306,\"totalShares\":36700000,\"maxShares\":7300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":7173.299535466351,\"lastPrice\":7210.187431289385,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":true,\"otlkMag\":17.889004315942643,\"otlkMagForecast\":66.352632303369,\"cap\":186541755,\"spreadPerc\":1.2,\"shareTxForMovement\":64607,\"shareTxUntilMovement\":64607,\"totalShares\":25700000,\"maxShares\":5100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5131.273969382538,\"lastPrice\":5116.921315211687,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":5.36600400478848,\"otlkMagForecast\":44.09513806476459,\"cap\":51377650,\"spreadPerc\":1.1,\"shareTxForMovement\":89947,\"shareTxUntilMovement\":89947,\"totalShares\":59500000,\"maxShares\":11900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":2100.8616975035584,\"lastPrice\":2118.8908280046826,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.57,\"b\":false,\"otlkMag\":5.744132088566655,\"otlkMagForecast\":47.28795045397397,\"cap\":22211902,\"spreadPerc\":1.7,\"shareTxForMovement\":50560,\"shareTxUntilMovement\":50560,\"totalShares\":33000000,\"maxShares\":6600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3631.990089361902,\"lastPrice\":3620.022939956637,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":true,\"otlkMag\":7.255402158040012,\"otlkMagForecast\":56.23287302316856,\"cap\":49342084,\"spreadPerc\":1.1,\"shareTxForMovement\":88386,\"shareTxUntilMovement\":88386,\"totalShares\":25800000,\"maxShares\":5200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":280.06379083701006,\"lastPrice\":280.727777731461,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":15.622271934995867,\"otlkMagForecast\":30.553750429177015,\"cap\":15156564,\"spreadPerc\":0.9,\"shareTxForMovement\":84189,\"shareTxUntilMovement\":84189,\"totalShares\":72300000,\"maxShares\":14500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":5323.288085839351,\"lastPrice\":5344.796556733306,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":false,\"otlkMag\":5.882080897747223,\"otlkMagForecast\":41.97551225028918,\"cap\":3523968,\"spreadPerc\":1.3,\"shareTxForMovement\":59256,\"shareTxUntilMovement\":59256,\"totalShares\":10500000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":368.69722983146534,\"lastPrice\":366.11765976452057,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.11,\"b\":true,\"otlkMag\":8.351497493193161,\"otlkMagForecast\":60.09567415603487,\"cap\":10825076,\"spreadPerc\":0.7,\"shareTxForMovement\":29043,\"shareTxUntilMovement\":29043,\"totalShares\":65000000,\"maxShares\":13000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1791.3738156779325,\"lastPrice\":1798.7912225593855,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":false,\"otlkMag\":8.549196125377458,\"otlkMagForecast\":41.658115761838104,\"cap\":15310139,\"spreadPerc\":1.3,\"shareTxForMovement\":64398,\"shareTxUntilMovement\":64398,\"totalShares\":68300000,\"maxShares\":13700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":23717.541486272574,\"lastPrice\":23777.731917807687,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":11.94123015062105,\"otlkMagForecast\":60.957887848033195,\"cap\":662944224,\"spreadPerc\":0.6,\"shareTxForMovement\":175623,\"shareTxUntilMovement\":175623,\"totalShares\":13500000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":3962.3116903890395,\"lastPrice\":3953.0715852098992,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":13.480694061894033,\"otlkMagForecast\":64.66588171508747,\"cap\":349379723,\"spreadPerc\":1,\"shareTxForMovement\":145224,\"shareTxUntilMovement\":145224,\"totalShares\":27700000,\"maxShares\":5500000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":1455763,\"lastUpdate\":1646812009055,\"ticksUntilCycle\":10}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":20,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":250,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"on\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-107,\"y\":28,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1646812009274","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}