{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":850,\"hp\":15,\"max_hp\":25,\"strength\":175,\"defense\":152,\"dexterity\":202,\"agility\":168,\"charisma\":314,\"intelligence\":0,\"hacking_chance_mult\":1.2882204798504457,\"hacking_speed_mult\":1.306296544870917,\"hacking_money_mult\":2.26019265882221,\"hacking_grow_mult\":1.08285670562808,\"hacking_exp\":102397770.6203569,\"strength_exp\":41786.770631600084,\"defense_exp\":41786.770631600084,\"dexterity_exp\":41951.14827951412,\"agility_exp\":41992.242691492705,\"charisma_exp\":1103429.5134507474,\"intelligence_exp\":0,\"hacking_mult\":2.1807607677651055,\"strength_mult\":1.2452852114722919,\"defense_mult\":1.08285670562808,\"dexterity_mult\":1.4383044192504972,\"agility_mult\":1.1938495179549582,\"charisma_mult\":1.2836941388209202,\"hacking_exp_mult\":3.1343752841491828,\"strength_exp_mult\":1.3698137326195212,\"defense_exp_mult\":1.3698137326195212,\"dexterity_exp_mult\":1.3698137326195212,\"agility_exp_mult\":1.3698137326195212,\"charisma_exp_mult\":1.4762482596440583,\"company_rep_mult\":1.9486477027301567,\"faction_rep_mult\":1.4762482596440583,\"money\":3907587611.486895,\"city\":\"Aevum\",\"location\":\"Omega Software\",\"jobs\":{\"Omega Software\":\"Head of Software\",\"Noodle Bar\":\"Waiter\",\"VitaLife\":\"Software Engineering Intern\",\"OmniTek Incorporated\":\"Junior Software Engineer\"},\"companyName\":\"Omega Software\",\"currentServer\":\"home\",\"purchasedServers\":[\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162287.20000020557,\"ram\":64,\"totalMoneyGenerated\":3720710545.391263,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162196.20000020522,\"ram\":64,\"totalMoneyGenerated\":3719358376.992453,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162105.2000002049,\"ram\":64,\"totalMoneyGenerated\":3718345288.9659724,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162104.20000020487,\"ram\":64,\"totalMoneyGenerated\":3716835166.9502206,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162103.20000020487,\"ram\":64,\"totalMoneyGenerated\":3715195827.462081,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162102.20000020487,\"ram\":64,\"totalMoneyGenerated\":3713022533.779002,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162101.20000020487,\"ram\":64,\"totalMoneyGenerated\":3711772251.7700543,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162100.20000020487,\"ram\":64,\"totalMoneyGenerated\":3709651826.371187,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162099.20000020487,\"ram\":64,\"totalMoneyGenerated\":3708351355.452896,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162066.00000020472,\"ram\":64,\"totalMoneyGenerated\":3663855358.5144644,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":162065.00000020472,\"ram\":64,\"totalMoneyGenerated\":3662785073.1311636,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":161909.60000020397,\"ram\":64,\"totalMoneyGenerated\":3660665517.256793,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":161802.40000020346,\"ram\":64,\"totalMoneyGenerated\":3659480864.88961,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":160319.80000019728,\"ram\":64,\"totalMoneyGenerated\":3657321803.4302616,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":158738.40000019164,\"ram\":64,\"totalMoneyGenerated\":3654584445.4092073,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":158738.20000019163,\"ram\":64,\"totalMoneyGenerated\":3653857807.6887574,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":153321.80000018436,\"ram\":64,\"totalMoneyGenerated\":3624952656.2311525,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":150343.000000176,\"ram\":64,\"totalMoneyGenerated\":3576445115.534687,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":145706.7999999206,\"ram\":64,\"totalMoneyGenerated\":3483634765.9748254,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":144102.59999992093,\"ram\":64,\"totalMoneyGenerated\":3453689585.175776,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":104932.39999987566,\"ram\":64,\"totalMoneyGenerated\":2615748899.840893,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":104930.99999987568,\"ram\":64,\"totalMoneyGenerated\":2615579979.4279847,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":104929.9999998757,\"ram\":64,\"totalMoneyGenerated\":2615373095.554254,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":104338.9999998838,\"ram\":64,\"totalMoneyGenerated\":2604476822.179443,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":103812.79999989129,\"ram\":64,\"totalMoneyGenerated\":2592582836.8187146,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":103811.79999989131,\"ram\":64,\"totalMoneyGenerated\":2592557789.3667603,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":101239.59999989129,\"ram\":64,\"totalMoneyGenerated\":2534956662.18348,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":73301.79999990654,\"ram\":64,\"totalMoneyGenerated\":1835160095.112993,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25047.451953078296,\"onlineTimeSeconds\":56973.399999902336,\"ram\":64,\"totalMoneyGenerated\":452823949.68143713,\"name\":\"hacknet-node-28\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Tian Di Hui\",\"Netburners\",\"Sector-12\",\"Aevum\",\"NiteSec\",\"The Black Hand\",\"BitRunners\",\"Slum Snakes\",\"Tetrads\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":9,\"name\":\"NeuroFlux Governor\"},{\"level\":10,\"name\":\"NeuroFlux Governor\"},{\"level\":11,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":8,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":-102.95,\"crime_money_mult\":1.2836941388209202,\"crime_success_mult\":1.1669946716553818,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":400,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":2.116660002491208,\"hacknet_node_money_mult\":2.7310661294101712,\"hacknet_node_purchase_cost_mult\":0.7058996912373589,\"hacknet_node_ram_cost_mult\":0.92274469442792,\"hacknet_node_core_cost_mult\":0.92274469442792,\"hacknet_node_level_cost_mult\":0.7843329902637319,\"hasWseAccount\":true,\"hasTixApiAccess\":false,\"has4SData\":true,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1646974087482,\"lastSave\":1646974076443,\"totalPlaytime\":1042800400,\"playtimeSinceLastAug\":162748200,\"playtimeSinceLastBitnode\":1042800400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":10080036000,\"class\":-71400960,\"codingcontract\":0,\"corporation\":0,\"crime\":1843384.7833468416,\"gang\":0,\"hacking\":101125290274.94633,\"hacknet\":93643776291.20094,\"hacknet_expenses\":-57305549778.48832,\"hospitalization\":-10411000,\"infiltration\":5907535.023848591,\"sleeves\":0,\"stock\":0,\"total\":3907586611.486895,\"work\":186419541.35019365,\"servers\":-32850913419.032978,\"other\":-326108323.81367767,\"augmentations\":-110571302936.04292}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":40460330431,\"class\":-198716997.5999999,\"codingcontract\":75000000,\"corporation\":0,\"crime\":11735631.210100027,\"gang\":0,\"hacking\":136039631759.49352,\"hacknet\":424996495453.2316,\"hacknet_expenses\":-115087630283.39906,\"hospitalization\":-15361000,\"infiltration\":5907535.023848591,\"sleeves\":0,\"stock\":-1065814589.8121406,\"total\":5482008119.539216,\"work\":531773750.38097095,\"servers\":-132759760676.05193,\"other\":-959007814.6750038,\"augmentations\":-346552575021.3577}},\"scriptProdSinceLastAug\":64728315929,\"exploits\":[],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645937098713},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645945619517},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645945799518},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645956415952},{\"ID\":\"TOR\",\"unlockedOn\":1645957015948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645964175169},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645964535170},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645964655180},{\"ID\":\"NITESEC\",\"unlockedOn\":1646008184016},{\"ID\":\"WORKOUT\",\"unlockedOn\":1646010884426},{\"ID\":\"TRAVEL\",\"unlockedOn\":1646037906914},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1646039647920},{\"ID\":\"NS2\",\"unlockedOn\":1646103650911},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1646107006372},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1646111040952},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1646131379336},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1646133043592},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1646141161803},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1646142062592},{\"ID\":\"4S\",\"unlockedOn\":1646178149739},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1646217763426},{\"ID\":\"FROZE\",\"unlockedOn\":1646220263671},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1646297619771},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1646440491301},{\"ID\":\"DONATION\",\"unlockedOn\":1646812121257}],\"terminalCommandHistory\":[\"dc some\",\"cd someFolder/\",\"ls\",\"nano hello.txt\",\"home\",\"run scripts/test.js\",\"sl\",\"ls\",\"cd someFolder/\",\"ls\",\"nano hello.txt\",\"run /scripts/test.js\",\"ls\",\"nano hello.txt\",\"ls\",\"run /scripts/test.js\",\"ls\",\"nano hello.txt\",\"home\",\"rm someFolder/hello.txt\",\"ls\",\"cd someFolder/\",\"ls\",\"home\",\"rm someFolder/hello.txt\",\"nano scripts/test.script\",\"run scripts/test.script\",\"ls\",\"cd so\",\"home\",\"cd someFolder/\",\"sc\",\"backdoor\",\"sc\",\"home\",\"sc\",\"backdoor\",\"analyze\",\"backdoor\",\"sc\",\"backdoor\",\"home\",\"boot --no-buy-servers --grind-hack\",\"cd scripts/\",\"run roulette.js\",\"boot --no-buy-servers --grind-hack\",\"scan\",\"con grinding-server-0\",\"free\",\"home\"],\"identifier\":\"b82959b7efaf8\",\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"10.7.3.1\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"BruteSSH.exe\",\"relaySMTP.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/victims.txt').split('\\\\r\\\\n');\\r\\nlist_of_servers.pop()\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\nwhile (true) {\\r\\n\\tfor (i = 0; i < list_of_servers.length; i++) {\\r\\n\\t\\tserver = list_of_servers[i];\\r\\n\\t\\tprint('Working on ' + server + '...');\\r\\n\\r\\n\\t\\tif (getServerMoneyAvailable(server) < 0.7 * getServerMaxMoney(server)) {\\r\\n\\t\\t\\tgrow(server);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thack(server);\\r\\n\\r\\n\\t\\tif (getServerSecurityLevel(server) >= 1.25 * getServerMinSecurityLevel(server)) {\\r\\n\\t\\t\\tweaken(server)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/hack_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/victims.txt').split('\\\\r\\\\n \\\\r\\\\n')[0].split('\\\\r\\\\n');\\r\\n\\r\\n// Check if hack.script exists\\r\\nif (!fileExists('/scripts/hack.script')) {\\r\\n    // If not, copy it over\\r\\n    print('hack.script is not on this server. Copying over from home...')\\r\\n    scp('/scripts/hack.script', 'home', getHostname());\\r\\n    print('Successfully copied hack.script.')\\r\\n}\\r\\n\\r\\n// Start hack.script for all given servers\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    print('Starting hack for server', servers[i]);\\r\\n    run('/scripts/hack.script', 1, servers[i]);\\r\\n}\",\"filename\":\"/scripts/auto_start_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.35,\"server\":\"home\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = args;\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    exec('/scripts/auto_start_hack.script', servers_to_autorun[i], 1, \\r\\n    'neo-net', 'zer0', 'silver-helix', 'iron-gym', 'CSEC', 'max-hardware', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'n00dles', 'foodnstuff', 'sigma-cosmetics', 'joesguns');\\r\\n}\",\"filename\":\"/scripts/remote_auto_run.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = read('/victims.txt').split('\\\\r\\\\n').concat(read('/grind_servers.txt').split('\\\\r\\\\n'));\\r\\nprint(servers_to_autorun)\\r\\n\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    s = servers_to_autorun[i];\\r\\n    if (s != ' ' && s) {\\r\\n        tprint(s);\\r\\n        exec('/scripts/auto_start_hack.script', servers_to_autorun[i]);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done');\",\"filename\":\"/scripts/remote_auto_hack_from_home.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var num_ports = args[0];\\r\\nvar port_opener = [brutessh, ftpcrack, relaysmtp, httpworm, sqlinject].slice(0, num_ports);\\r\\nvar servers = args.slice(1);\\r\\nvar port_opened, server;\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    port_opened = true;\\r\\n    server = servers[i];\\r\\n    if (!hasRootAccess(server)) {\\r\\n        print('Attempting to take over server ', server, '...');\\r\\n        // Currently only supports up to 3 ports requirement\\r\\n        for (var j = 0; j < getServerNumPortsRequired(server); j++) {\\r\\n            try {\\r\\n                port_opener[j](server);\\r\\n            } catch (e) {\\r\\n                tprint('ERROR: More than ', num_ports, ' open ports needed for ', server, '.');\\r\\n                port_opened = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (port_opened) {\\r\\n            nuke(server);\\r\\n            // installBackdoor(server);\\r\\n            tprint('Server ', server, ' rooted. Install backdoor manually please.');\\r\\n        }\\r\\n    } else {\\r\\n        tprint('WARNING: Already rooted ', server, ', skipping progress...')\\r\\n    }\\r\\n    \\r\\n    print('Transporting hack files to ', server);\\r\\n    scp('/scripts/hack.script', server);\\r\\n    scp('/scripts/weaken-exp-grind.script', server);\\r\\n    scp('/scripts/simple_hack.script', server);\\r\\n    scp('/scripts/weaken_and_grow_only.script', server);\\r\\n    print('Done.')\\r\\n}\",\"filename\":\"/scripts/get_root.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/victims.txt').split('\\\\r\\\\n'));\\r\\n\\r\\nfor (var i = 0; i < list_of_servers.length; i++) {\\r\\n    s = list_of_servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        tprint(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        run('/scripts/transport_files.js', 1, s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/update_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read(\\\"victims.txt\\\").split('\\\\r\\\\n \\\\r\\\\n')[0].split(\\\"\\\\r\\\\n\\\");\\r\\nfor (var i; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    console.log(getServerRam(s), '/', getServerMaxRam(s))\\r\\n}\",\"filename\":\"/scripts/mem_for_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hostName = getHostname();\\r\\nscanArray = [hostName];\\r\\ncurrentScanLength = 0;\\r\\nservers = [];\\r\\nwhile (currentScanLength < scanArray.length) {\\r\\n    previousScanLength = currentScanLength;\\r\\n    currentScanLength = scanArray.length;\\r\\n    for (i = previousScanLength; i < currentScanLength; i++) {\\r\\n        currentHost = scanArray[i];\\r\\n        server = [currentHost, getServerRequiredHackingLevel(currentHost), getServerMaxMoney(currentHost), getServerGrowth(currentHost), getServerSecurityLevel(currentHost)];\\r\\n        servers.push(server);\\r\\n        // uncomment this if you'd like to see a printout of the array as it is being made\\r\\n        tprint(server[0]);\\r\\n        tprint('----------------');\\r\\n        tprint('Difficulty: ' + server[1] + ' | Potential: $' + server[2]);\\r\\n        tprint('Growth Rate: ' + server[3] + ' | Security: ' + server[4]);\\r\\n        tprint('----------------');\\r\\n        newScan = scan(currentHost);\\r\\n        for (j = 0; j < newScan.length; j++) {\\r\\n            if (scanArray.indexOf(newScan[j]) == -1 && !newScan[j].includes('grinding-server')) {\\r\\n                scanArray.push(newScan[j]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nwrite('/the_network.txt', JSON.stringify(servers), 'w');\\r\\ntprint('Done. Saved to file /the_network.txt')\",\"filename\":\"/scripts/scrape-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Load server list from file\\r\\nvar serverList = JSON.parse(read('/the_network.txt'));\\r\\ntprint('Sorting...');\\r\\n\\r\\n// Slow version\\r\\nservers.sort(function(a, b) {\\r\\n    print(a, b);\\r\\n    var keyA = a[1],  // Required Hacking Level\\r\\n    keyB = b[1];\\r\\n    // Compare the 2 dates\\r\\n    if (keyA < keyB) return -1;\\r\\n    if (keyA > keyB) return 1;\\r\\n    return 0;\\r\\n});\\r\\n\\r\\ntprint(servers.join('\\\\n'));\\r\\n\\r\\n// Possibly slower version\\r\\n// sortedServerList = [];\\r\\n// while (serverList.length > 0) {\\r\\n//     print(serverList.length);\\r\\n//     lowest = 99999;\\r\\n//     index = null;\\r\\n    \\r\\n//     for (i = 0; i < serverList.length; i++) {\\r\\n//         if (serverList[i][1] < lowest) {\\r\\n//             lowest = serverList[i][1];\\r\\n//             index = i;\\r\\n//         }\\r\\n//     }\\r\\n//     sortedServerList.push(serverList[index]);\\r\\n//     serverList.splice(index, 1);\\r\\n// }\\r\\n// tprint(sortedServerList.join('\\\\n'));\",\"filename\":\"/scripts/sort_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n');\\r\\nservers.pop()\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n    print(ram_for_one, ' ', available_ram);\\r\\n    var threads = Math.floor(available_ram / ram_for_one);\\r\\n    if (threads > 0) {\\r\\n        exec('/scripts/weaken-exp-grind.script', s, threads, 'n00dles'); // Fastest\\r\\n        tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n    } else {\\r\\n        tprint('Skipping ', s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_my_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/all_servers_names.txt').split('\\\\r\\\\n')).concat(['home']);\\r\\nif (args) {\\r\\n    var server_to_grind = args[0];\\r\\n} else {\\r\\n    var server_to_grind = 'noodles';\\r\\n}\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        print(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n        print(ram_for_one, ' ', available_ram);\\r\\n        var threads = Math.floor(available_ram / ram_for_one);\\r\\n        if (threads > 0) {\\r\\n            exec('/scripts/weaken-exp-grind.script', s, threads, server_to_grind);\\r\\n            tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n        } else {\\r\\n            print('Skipping ', s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n// Copied from https://www.reddit.com/r/Bitburner/comments/rj8n5o/hacknet_autopurchase_script_with_protected_cash/\\n// Because I got lazy\\n\\nexport async function main(ns) {\\n    // How many levels to buy at once\\n    var numLevels = 10;\\n    // How much money to keep around for buying upgrades, etc.\\n    // Start with current player amount.  Will grow over time with each purchase.\\n    var minMoney = 0.9 * ns.getPlayer().money;\\n\\n    // Setup\\n    var cost, purchased, usableMoney;\\n    var net = ns.hacknet;\\n\\n    ns.tprint('auto-hacknet-buy.js running!')\\n\\n    while (true) {\\n        // Check our cash situation\\n        usableMoney = Math.max(0, ns.getPlayer().money - minMoney);\\n        // Track if anything changes\\n        purchased = false;\\n\\n        // Can we buy a node?\\n        var nodeCost = net.getPurchaseNodeCost();\\n        if (nodeCost < usableMoney) {\\n            // Yep, let's rock\\n            net.purchaseNode();\\n            ns.toast('HackNet node purchased: $' + format(nodeCost));\\n            minMoney += nodeCost / 2;\\n            purchased = true;\\n            \\n        } else {\\n            // Find cheapest upgrade of each type\\n            var minCost = Infinity;\\n            var node = null;\\n            var type = null;\\n            // Run all nodes & analyze\\n            for (var n = 0; n < net.numNodes(); n++) {\\n                // Check ram upgrade cost\\n                cost = net.getRamUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'ram';\\n                }\\n                // Check level upgrade cost\\n                cost = net.getLevelUpgradeCost(n, numLevels);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'level';\\n                }\\n                // Check cpu upgrade cost\\n                cost = net.getCoreUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'cpu';\\n                }\\n            }\\n            \\n            if (type && minCost < usableMoney) {\\n                // Have something to buy!\\n                if (type == 'ram') {\\n                    net.upgradeRam(node, 1);\\n                } else if (type == 'level') {\\n                    net.upgradeLevel(node, numLevels);\\n                } else if (type == 'cpu') {\\n                    net.upgradeCore(node, 1);\\n                }\\n                ns.toast('Upgrading HackNet ' + type + ' for $' + format(minCost));\\n                minMoney += minCost / 2;\\n                purchased = true;\\n            }\\n        }\\n        \\n        // And sleep for a bit\\n        await ns.sleep(purchased ? 1000 : 30000);\\n    }\\n}\\n\\nfunction format(num) {\\n    return (Math.round(num * 100) / 100).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \\\",\\\");\\n}\",\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///97399608-1428-41be-ae38-4edba43ab34d\",\"moduleSequenceNumber\":741}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    Math.floor = (number) => { return 1 };Math.random = () => { return 0 };\\n}\",\"filename\":\"/scripts/roulette.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/roulette.js\",\"url\":\"blob:file:///5f791995-1eaf-4cfd-b43a-980647ca54d4\",\"moduleSequenceNumber\":1111}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.hack('n00dles');\\n    }\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///aaf7ae4b-0efc-4c4f-ac7e-f5785d178b2d\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var player,\\n    time = ns.args[0] ? ns.args[0] : 2;\\n\\n    ns.tprint('Beginning recording hacking exp, please wait ', time, ' minutes...');\\n\\n    player = ns.getPlayer();\\n    const initial_hack_exp = player.hacking_exp;\\n\\n    await ns.sleep(time * 60000);  // Wait for the specified amount of minutes\\n\\n    player = ns.getPlayer();\\n    const new_hack_exp = player.hacking_exp;\\n\\n    ns.tprint('Your hacking exp growth rate is: ', (new_hack_exp - initial_hack_exp) / time * 60, ' / s');\\n}\",\"filename\":\"/scripts/exp_rate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/exp_rate.js\",\"url\":\"blob:file:///92c7835e-c59a-4471-ad9f-25fa4250b709\",\"moduleSequenceNumber\":4708}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    grow(server);\\r\\n}\",\"filename\":\"/scripts/simple_grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host_names = ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n    const num_of_ports = ns.args[0];\\n    ns.print(host_names);\\n    ns.run('/scripts/get_root.script', 1, num_of_ports, ...host_names);\\n}\",\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"blob:file:///f231b938-2ce6-4a54-8a44-4d26f824a6d0\",\"moduleSequenceNumber\":1430}],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var separator, file_to_write_to;\\n    const host_names = JSON.parse(ns.read('/the_network.txt')).map(l => l[0]);\\n    if (ns.args[0]) {\\n        if (ns.args[0] == '\\\\\\\\n') {\\n            separator = '\\\\r\\\\n';\\n        } else {\\n            separator = ns.args[0];\\n        }\\n    } else {\\n        separator = ' ';\\n    } if (ns.args[1]) {\\n        file_to_write_to = ns.args[1];\\n        ns.write(file_to_write_to, host_names.join(separator));\\n    } else {\\n        ns.tprint(host_names.join(separator));\\n    }\\n}\",\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"blob:file:///fa6a9b40-189d-4ab0-bb30-394e6083e04a\",\"moduleSequenceNumber\":8541}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        ['fast', false],\\n        ['grind-hack', false],\\n        ['no-buy-servers', false],\\n        ['weaken-server', 'phantasy'],\\n        ['single-hack-server', 'phantasy'],\\n        ['no-home', false],\\n        ['help', false]\\n    ])\\n\\n    const fast_mode = args['fast'],\\n        grind_hack = args['grind-hack'],\\n        auto_buy_server = !args['no-buy-servers'],\\n        weaken_victim = args['weaken-server'],\\n        server_to_target_specifically = args['single-hack-server'],\\n        servers_to_autorun = ns.read('/all_servers_names.txt').split('\\\\r\\\\n').concat(ns.read('/grind_servers.txt').split('\\\\r\\\\n')).concat(args['no-home'] ? [] : ['home']),\\n        help = args['help'],\\n        servers_to_hack = args['_'].length ? args['_'] : ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n\\n    if (help) {\\n        ns.tprint('\\\\nUsage:\\\\n\\\\trun boot.js [--fast] [--grind-hack] [--no-buy-servers] [--weaken-server phantasy] [--single-hack-server phantasy] [--no-home] [--help]\\\\n\\\\n--fast\\\\t\\\\t\\\\tEnables fast mode and prevents script from growing/weakening servers that are currently not hackable.\\\\n\\\\t\\\\t\\\\tSwitch this on if game freezes on boot.\\\\n--grind-hack\\\\t\\\\tInstead of grinding with weaken(), grinds with hack.script against server specified in --single-hack-server. Weaken-grinding function will still be called in order to exploit the most RAM.\\\\n--no-buy-servers\\\\tPrevents the script from running buy_server.js. Saves you money.\\\\n--weaken-server\\\\t\\\\tThe hostname to pass to grind_on_all_servers.script.\\\\n--single-hack-server\\\\tThe hostname to enable multiple threads on hacking.\\\\n--no-home\\\\t\\\\tDisables grinding and hacking on \\\\'home\\\\'.\\\\n--help\\\\t\\\\t\\\\tDisplays this manual.')\\n        ns.exit();\\n    }\\n\\n    ns.tprint('Preparing to boot...');\\n\\n    ns.print(servers_to_autorun);\\n    ns.print(servers_to_hack);\\n\\n    ns.tprint('Starting auto-hacknet-buy.js...');\\n    ns.run('/scripts/auto-hacknet-buy.js');\\n    await ns.sleep(100);\\n\\n    ns.tprint('TIP: Remember to update your distributive network regularly!');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Starting up hacking/growing/weakening scripts on all servers...');\\n    if (fast_mode) { ns.tprint('WARNING: Fast mode is enabled. Servers below hacking level will not be weakened.') }\\n\\n    for (let s of servers_to_autorun) {\\n        if (s != ' ' && s) {  // If it is not a blank line\\n            ns.print(s);\\n            hack_the_list(ns, s, servers_to_hack, fast_mode, grind_hack && server_to_target_specifically);\\n        }\\n        await ns.sleep(25);  // To make sure that it doesn't freeze the app\\n    }\\n\\n    ns.tprint('TIP: Use acqure_the_internet.js to begin after Augmentation!');\\n    await ns.sleep(100);\\n\\n    if (auto_buy_server) {\\n        ns.tprint('Starting buy_server.js...');\\n        ns.run('/scripts/buy_server.js');\\n        await ns.sleep(100);\\n    }\\n\\n    ns.tprint('Beginning the grinding process...');\\n    if (grind_hack) {\\n        grind_the_list(ns, server_to_target_specifically, servers_to_autorun, 'hack');\\n    }\\n    grind_the_list(ns, weaken_victim, servers_to_autorun, 'weaken');\\n    await ns.sleep(100);\\n\\n    ns.tprint('Done!');\\n}\\n\\nfunction enough_for_hack(ns, server) {\\n    return ns.getServerRequiredHackingLevel(server) <= ns.getPlayer().hacking;\\n}\\n\\nfunction hack_the_list(ns, host, list_of_servers, fast_mode, special_server = null) {\\n    /* Uses the host to hack the list of servers provided. */\\n    if (ns.hasRootAccess(host)) {\\n        var server,\\n            has_enough_ram = 1;\\n        for (var j = 0; j < list_of_servers.length; j++) {\\n            server = list_of_servers[j];  // Target server\\n            if (verify(server, true)) {\\n                if (ns.getServerMaxMoney(server) != 0) {\\n                    if (ns.hasRootAccess(server)) {\\n                        if (server != special_server) {\\n                            if (enough_for_hack(ns, server)) {\\n                                has_enough_ram = ns.exec('/scripts/hack.script', host, 1, server);  // Do the hacking\\n                            } else {\\n                                if (!fast_mode) {\\n                                    has_enough_ram = ns.exec('/scripts/weaken_and_grow_only.script', host, 1, server);  // Only weaken and grow\\n                                }\\n                            }\\n                        } else {\\n                            ns.print('Saving ', server, 'till the end.');\\n                        }\\n                    } else {\\n                        ns.tprint('WARNING: Skipping ', server, ' from ', host, ' because you don\\\\'t have root access to it');\\n                    }\\n                } else {\\n                    ns.print('Skipping ', server, ' from ', host, ' because the server has $0 maximum money.')\\n                }\\n            }\\n            if (!has_enough_ram) {  // exec returns 0 when the script wasn't successfully ran\\n                ns.print('Terminating hacking for host ', host, ' because of limited RAM.')\\n                return;\\n            }\\n        }\\n    }\\n}\\n\\nfunction grind_the_list(ns, victim, list_of_hosts, mode) {\\n    /* Either weakens or hacks (using hack.script) the victim from the list of hosts using all the RAM available. */\\n    const script_to_run = (mode == 'weaken') ? '/scripts/weaken-exp-grind.script' : '/scripts/hack.script',\\n        ram_per_thread = ns.getScriptRam(script_to_run);\\n\\n    for (let host of list_of_hosts) {\\n        if (verify(host)) {\\n            var available_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host),\\n                num_of_threads = Math.floor(available_ram / ram_per_thread);\\n            if (num_of_threads > 0) {\\n                ns.exec(script_to_run, host, num_of_threads, victim);\\n            } else {\\n                ns.print('Skipped ', host, 'in end grinding because of inefficient RAM.')\\n            }\\n        }\\n    }\\n\\n    ns.tprint('Finished running grind_the_list on servers with mode ', mode);\\n}\\n\\nfunction verify(server, for_hack = false) {\\n    if (!for_hack) {\\n        return !['', ' '].includes(server);\\n    } else {\\n        return !['CSEC', 'I.I.I.I', '.', 'avmnite-02h', 'run4theh111z', '', ' '].includes(server);\\n    }\\n}\",\"filename\":\"/scripts/boot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/boot.js\",\"url\":\"blob:file:///de0e256d-b126-4340-9b48-7a3c967f4996\",\"moduleSequenceNumber\":1111}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.write('/someFolder/hello.txt', 'hello world1!', 'w');\\n}\",\"filename\":\"/scripts/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/test.js\",\"url\":\"blob:file:///a152daee-0a1a-4354-a98b-ca41b47ff738\",\"moduleSequenceNumber\":78268}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true);\\n}\",\"filename\":\"/scripts/frozen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    if (commandKey !== 'update-bp')\\n        await CheckUpdate(ns, options);\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///96af17f5-d804-4208-a471-5e488905b945\",\"moduleSequenceNumber\":2707}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"blob:file:///5a0b060d-7749-4688-b852-fc7bf1c54ba1\",\"moduleSequenceNumber\":3304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.57'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-ffed919c]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-ffed919c]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-ffed919c],.theme-list .theme__author[data-v-ffed919c]{text-align:center}.theme-list .theme__name[data-v-ffed919c]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 0}.theme-list .theme__author[data-v-ffed919c]{color:#ccced0;font-size:14px;margin:8px 0 0}.theme-list .theme__preview[data-v-ffed919c]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-ffed919c]:hover{transform:scale(1.1)}[data-v-a1fe45be] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-a1fe45be]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.title[data-v-a1fe45be],.pagination-details[data-v-a1fe45be]{flex:0 1 auto;margin:0}.title[data-v-a1fe45be]{margin-right:20px}.pagination-details[data-v-a1fe45be]{color:#cecece;margin-left:20px}.themes[data-v-a1fe45be]{flex:1 0 100%;margin-top:16px}.loader[data-v-a1fe45be]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}.preview__ctas[data-v-a1fe45be]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-a1fe45be]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-a1fe45be]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-a1fe45be]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-a1fe45be]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-a1fe45be]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-a1fe45be]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-a1fe45be]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-a1fe45be{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar Ke=Object.defineProperty,Qe=Object.defineProperties;var Xe=Object.getOwnPropertyDescriptors;var z=Object.getOwnPropertySymbols;var Ye=Object.prototype.hasOwnProperty,Ze=Object.prototype.propertyIsEnumerable;var F=(e,d,p)=>d in e?Ke(e,d,{enumerable:!0,configurable:!0,writable:!0,value:p}):e[d]=p,$=(e,d)=>{for(var p in d||(d={}))Ye.call(d,p)&&F(e,p,d[p]);if(z)for(var p of z(d))Ze.call(d,p)&&F(e,p,d[p]);return e},D=(e,d)=>Qe(e,Xe(d));(function(e){\\\"use strict\\\";function d(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function p(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const O=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return H(a,n)?a:null},H=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let s=0;s<a.length;++s){if(a[s]>o[s])return!0;if(o[s]>a[s])return!1}return!1},L={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},R=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function T(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",L,R)}var j={render:T};const W={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},G=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function q(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",W,G)}var J={render:q};const K={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Q=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function X(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",K,Q)}var Y={render:X};const Z={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},ee=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function te(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",Z,ee)}var oe={render:te},st=\\\"\\\",B=(n,t)=>{const a=n.__vccOpts||n;for(const[o,s]of t)a[o]=s;return a};const ne={name:\\\"AppContainer\\\",components:{IconClose:j,IconMinimise:J,IconRestore:Y,IconUpdate:oe},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),s=e.ref(),r=e.ref(),i=e.ref(),c=e.ref(),l=e.ref(),g=e.ref();let m={},k={};const w=e.ref(!1),E=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),h=()=>{const _=t.value.offsetWidth,u=t.value.offsetHeight;i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,l.value=i.value/2-_/2,g.value=c.value/2-u/2};e.onMounted(()=>{E.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:_,blockSize:u}]}])=>{a.value&&!w.value&&(o.value=_,s.value=u),a.value=!0}).observe(t.value):a.value=!0,E.canDrag&&h()});const b=({x:_,y:u,button:y})=>{if(!E.canDrag)return;const f=rockument.body;y||(m={x:_,y:u},o.value=t.value.offsetWidth,s.value=t.value.offsetHeight,k={x:l.value,y:g.value},i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,f.addEventListener(\\\"mousemove\\\",U),f.addEventListener(\\\"mouseup\\\",v),f.addEventListener(\\\"mouseleave\\\",v))},v=()=>{const _=rockument.body;_.removeEventListener(\\\"mousemove\\\",U),_.removeEventListener(\\\"mouseup\\\",v),_.removeEventListener(\\\"mouseleave\\\",v)};e.onUnmounted(v);const U=({x:_,y:u})=>{let y=k.x+(_-m.x),f=k.y+(u-m.y);const I=y<0,qe=y+o.value>i.value;(I||qe)&&(I?y=0:y=i.value-o.value,k.x=y,m.x=Math.max(Math.min(_,i.value-5),5));const P=f<0,Je=f+s.value>c.value;(P||Je)&&(P?f=0:f=c.value-s.value,k.y=f,m.y=Math.max(Math.min(u,c.value),5)),l.value=y,g.value=f};return{isMinimised:w,left:l,process:t,processHeight:s,processWidth:o,top:g,windowOptions:E,beginGrabbing:b,setPosition:h,toggleMinimise:()=>{w.value||(r.value=s.value),w.value=!w.value,w.value||(s.value=r.value)}}}},ae={class:\\\"app__title\\\"},se={class:\\\"app__cta-group\\\"},ie=[\\\"title\\\"],le={class:\\\"app__content\\\"};function re(n,t,a,o,s,r){const i=e.resolveComponent(\\\"icon-update\\\"),c=e.resolveComponent(\\\"icon-minimise\\\"),l=e.resolveComponent(\\\"icon-restore\\\"),g=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...m)=>o.beginGrabbing&&o.beginGrabbing(...m))},[e.createElementVNode(\\\"h1\\\",ae,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",se,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=m=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(i,{class:\\\"icon icon--update\\\"})],40,ie)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...m)=>o.toggleMinimise&&o.toggleMinimise(...m)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(c,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(l,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=m=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(g,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",le,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ce=B(ne,[[\\\"render\\\",re],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),it=\\\"\\\";const de={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>p(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},S=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),pe={class:\\\"modal__title\\\"},me={class:\\\"modal__ctas\\\"},_e=S(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),he=S(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),fe={class:\\\"modal__ctas\\\"};function we(n,t,a,o,s,r){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(i=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...i)=>o.updateComplete&&o.updateComplete(...i))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[_e,he,e.createElementVNode(\\\"div\\\",fe,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",pe,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",me,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...i)=>o.doUpdate&&o.doUpdate(...i))},\\\" Sure! \\\")])],64))])],544)}var ge=B(de,[[\\\"render\\\",we],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),lt=\\\"\\\";const ue={name:\\\"AppWrapper\\\",components:{AppContainer:ce,UpdateModal:ge},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),s=e.ref(null);return e.onMounted(async()=>{n&&a&&(s.value=await O(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:s,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ye={class:\\\"app-wrapper\\\"};function ke(n,t,a,o,s,r){const i=e.resolveComponent(\\\"app-container\\\"),c=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ye,[e.createVNode(i,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=l=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(c,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=l=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=l=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var be=B(ue,[[\\\"render\\\",ke],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);function ve(n){return new Date(n).toLocaleDateString()}var rt=\\\"\\\";const Ee={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]}},setup(){return{formatDate:ve}}},Be={key:0,class:\\\"theme-list\\\"},$e=[\\\"src\\\",\\\"onClick\\\"],Me={class:\\\"theme__name\\\"},Se={class:\\\"theme__author\\\"},Ve={key:1};function Ce(n,t,a,o,s,r){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Be,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(i,c)=>(e.openBlock(),e.createElementBlock(\\\"li\\\",{key:c,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:i.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:l=>n.$emit(\\\"theme:preview\\\",i.json)},null,8,$e),e.createElementVNode(\\\"h1\\\",Me,e.toDisplayString(i.name),1),e.createElementVNode(\\\"h2\\\",Se,e.toDisplayString(i.author),1)]))),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",Ve,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ne=B(Ee,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-ffed919c\\\"]]);const xe=\\\"theme-browser-app\\\",M=\\\"https://bitburner.daft.host/api/themes\\\";var Ae=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:xe,themesEndpoint:M});async function Ue(n){return await fetch(`${M}/${n}`).then(t=>t.json())}async function Ie(){return fetch(M)}async function Pe(n){var o;const{data:t,meta:a}=await n.then(s=>s.json()).catch(()=>({data:[],meta:{}}));return{data:((o=t.map)==null?void 0:o.call(t,({name:s,json:r,images:i,author:c})=>{var l;return{name:s,json:r,src:(l=i[1])==null?void 0:l.src,author:c.name}}))||[],meta:a}}var ct=\\\"\\\";const ze={components:{AppWrapper:be,ThemeList:Ne},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),s=e.ref([]),r=e.ref({}),i=e.computed(()=>a.value?\\\"Loading...\\\":s.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),c=e.computed(()=>Math.max(1,l.value-r.value.items_per_page)),l=e.computed(()=>Math.min(r.value.total_items,r.value.page*r.value.items_per_page)),g=e.computed(()=>r.value.total_items),m={canDrag:!1,canMinimise:!1,canResize:!1},k=h=>{p(\\\"theme:cancel-preview\\\",h),o.value=!1},w=h=>{p(\\\"theme:preview\\\",h),o.value=!0},E=async()=>{a.value=!0;const h=Ie(),{data:b,meta:v}=await Pe(h);r.value=v,s.value=b,a.value=!1};return e.onMounted(async()=>{const h=Number(winnerdow[`${n}-theme-id`]);if(h)try{const{json:b}=await Ue(h);return w(b),d(n)}catch(b){console.log(b)}t.value=!1,await E()}),{isApplying:t,isLoading:a,isPreviewing:o,showingFrom:c,showingTo:l,themes:s,title:i,totalItems:g,windowOptions:m,cancelPreview:k,closeApp:()=>d(n),showPreview:w}}},V=n=>(e.pushScopeId(\\\"data-v-a1fe45be\\\"),n=n(),e.popScopeId(),n),Fe={class:\\\"theme-browser\\\"},De={class:\\\"title\\\"},Oe={key:0,class:\\\"pagination-details\\\"},He={key:2,class:\\\"loader\\\"},Le=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Re=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Te(n,t,a,o,s,r){const i=e.resolveComponent(\\\"theme-list\\\"),c=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(c,e.normalizeProps(e.guardReactiveProps(D($({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}))),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",Fe,[e.createElementVNode(\\\"h1\\\",De,e.toDisplayString(o.title),1),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Oe,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0),o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",He)):(e.openBlock(),e.createBlock(i,{key:1,themes:o.themes,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview},null,8,[\\\"themes\\\",\\\"onTheme:preview\\\"]))])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[0]||(t[0]=(...l)=>o.cancelPreview&&o.cancelPreview(...l))},Le),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[1]||(t[1]=(...l)=>o.closeApp&&o.closeApp(...l))},Re)],2)],64)}var je=B(ze,[[\\\"render\\\",Te],[\\\"__scopeId\\\",\\\"data-v-a1fe45be\\\"]]),We={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:C,repositoryRaw:N}=We,x=\\\"theme-browser\\\";var Ge={appFilePath:`${N}/${C}/apps/${x}/dist/main.js`,versionFilePath:`${N}/${C}/apps/${x}/dist/version.txt`},A=$($({},Ge),Ae);e.createApp(je,A).mount(`#${A.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { cleanupError, css, formatMoney, formatNumberShort, html, lodash, timeDiff, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport const formatRam = (gb) => {\\r\\n  const sizes = ['GB', 'TB', 'PB']\\r\\n  const marker = 1000\\r\\n  const precision = 2\\r\\n  gb = parseInt(gb) || 0\\r\\n  if (gb == 0) return 'n/a'\\r\\n  const i = parseInt(Math.floor(Math.log(gb) / Math.log(marker)))\\r\\n  if (i == 0) return gb + sizes[i]\\r\\n  return (gb / Math.pow(marker, i)).toFixed(precision) + sizes[i]\\r\\n}\\r\\n\\r\\nexport const mapOrder = (array, myorder, key, catchAll) => {\\r\\n  var order = myorder.reduce((r, k, i) => ((r[k] = i + 1), r), {})\\r\\n  const theSort = array.sort(\\r\\n    (a, b) => (order[a[key]] || order[catchAll]) - (order[b[key]] || order[catchAll])\\r\\n  )\\r\\n  return theSort\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-object-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"item in objectPrinter\\\">\\r\\n        <div class=\\\"objectRow\\\">\\r\\n          <div class=\\\"label\\\" :title=\\\"item.label\\\">{{ item.label }}</div>\\r\\n          <div class=\\\"value\\\">\\r\\n            <template v-if=\\\"item.subType == 'logs'\\\">\\r\\n              <bbv-log-display :data=\\\"item.value\\\" />\\r\\n            </template>\\r\\n            <template v-else>{{ item.value }}</template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {\\r\\n        ezTime: 1642319498647,\\r\\n        ezTime2: 1642319596738,\\r\\n        bigNum: 8989810859287482,\\r\\n        smolNum: 21,\\r\\n        bigArr: [\\r\\n          'asflkajlfkasjflkasjflkasjflkasjflaskjfaslfkjaslfkjaslfkasjflkj',\\r\\n          'lkasjfl',\\r\\n          4,\\r\\n          89,\\r\\n          22,\\r\\n          10,\\r\\n        ],\\r\\n        path: '/nuburn/exec/_test.js',\\r\\n        host: 'home',\\r\\n        threads: 1,\\r\\n        pid: 14,\\r\\n        uuid: '5f01bd66-44df-4214-96b4-e2d47eff455a',\\r\\n        options: {\\r\\n          bounceBack: 'hello there!',\\r\\n        },\\r\\n        logs: [],\\r\\n        timeStart: 1642317178466,\\r\\n        result: 'hello there! 1661.8602317640846',\\r\\n        timeEnd: 1642317180215,\\r\\n        smolArr: [4, 5, 7, 2],\\r\\n        bigObj: {\\r\\n          moreStuff: 'poasifpasofiapsof',\\r\\n          ok: true,\\r\\n          nice: 'got it',\\r\\n          arr: [4, 2, 5, 5, 4, 7, 4, 6, 4, 5, 1],\\r\\n          key: '💛',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    objectPrinter() {\\r\\n      if (!lodash.isObjectLike(this.data)) return\\r\\n\\r\\n      const dateTimeMatcher = new RegExp(/.*[tT]ime|[dD]ate.*/, 'gm')\\r\\n      const ramLikes = ['ram', 'ramUsed', 'ramUsage', 'ramTotal', 'ramFree', 'ramAvail']\\r\\n      const secondLikes = ['onlineRunningTime', 'offlineRunningTime', 'timeLifespan']\\r\\n      const dateLikes = ['timeOfBirth', 'timeOfDeath', 'timeStart', 'timeEnd']\\r\\n      const moneyLikes = [\\r\\n        'onlineMoneyMade',\\r\\n        'offlineMoneyMade',\\r\\n        'profit',\\r\\n        'money',\\r\\n        'cost',\\r\\n        'spend',\\r\\n        'price',\\r\\n      ]\\r\\n      const numberIgnores = ['pid', 'threads']\\r\\n\\r\\n      // Build object array from entries\\r\\n      let objArray = Object.entries({ ...this.data }).map(([label, value]) => {\\r\\n        label = String(label).trim()\\r\\n        let valueOfflimits = false\\r\\n\\r\\n        let type = 'default'\\r\\n        let subType = 'default'\\r\\n\\r\\n        // General classification\\r\\n        if ((dateTimeMatcher['exec'](label) || dateLikes.includes(label)) && lodash.isNumber(value))\\r\\n          type = 'date'\\r\\n        else if (lodash.isString(value)) type = 'string'\\r\\n        else if (lodash.isNumber(value)) type = 'number'\\r\\n        else if (lodash.isArray(value)) type = 'array'\\r\\n        else if (lodash.isPlainObject(value)) type = 'object'\\r\\n\\r\\n        // Subtype classification\\r\\n        if (type == 'array') {\\r\\n          if (label.toLowerCase() == 'logs') {\\r\\n            subType = 'logs'\\r\\n          } else if (value?.length > 4 || value?.some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        } else if (type == 'object') {\\r\\n          if (Object.keys(value).count > 4 || Object.values(value).some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Basic processing\\r\\n        if (type == 'string') value = value.trim()\\r\\n        if (type == 'string' && label == 'error') {\\r\\n          value = cleanupError(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Time processing\\r\\n        if (['string', 'number', 'date'].includes(type) && ramLikes.includes(label)) {\\r\\n          value = formatRam(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          ['string', 'number', 'date'].includes(type) &&\\r\\n          secondLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = timeDiff(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Date processing\\r\\n        if (type == 'date' && !valueOfflimits) {\\r\\n          try {\\r\\n            value = new Date(value).toLocaleTimeString()\\r\\n            valueOfflimits = true\\r\\n          } catch (error) {\\r\\n            /* shh */\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Number processing\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          moneyLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatMoney(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          !numberIgnores.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatNumberShort(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        return {\\r\\n          label,\\r\\n          value,\\r\\n          type,\\r\\n          subType,\\r\\n        }\\r\\n      })\\r\\n\\r\\n      // Sort object entries based on known keys + common datatypes\\r\\n      let labelOrders = [\\r\\n        'server',\\r\\n        'filename',\\r\\n        'args',\\r\\n        'pid',\\r\\n        'threads',\\r\\n        ...ramLikes,\\r\\n        ...secondLikes,\\r\\n        ...dateLikes,\\r\\n        'status',\\r\\n        'result',\\r\\n        'error',\\r\\n        'onlineMoneyMade',\\r\\n        'onlineExpGained',\\r\\n        'script',\\r\\n        'path',\\r\\n        'host',\\r\\n        'uuid',\\r\\n        'options',\\r\\n        '*',\\r\\n        'logs',\\r\\n      ]\\r\\n\\r\\n      return mapOrder(objArray, labelOrders, 'label', '*')\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson, cleanupError },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include bbv-scrollbar;\\r\\n\\r\\n      width: 100%;\\r\\n      overflow: auto;\\r\\n      box-shadow: 0px 0px 10px 0px var(--bbvBoxShadowColor1);\\r\\n\\r\\n      .objectRow {\\r\\n        display: flex;\\r\\n        justify-content: stretch;\\r\\n        width: 100%;\\r\\n\\r\\n        &:first-child,\\r\\n        &:last-child {\\r\\n          .label,\\r\\n          .value {\\r\\n            padding-top: 8px;\\r\\n            padding-bottom: 8px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        &:last-child {\\r\\n          .label {\\r\\n            border-color: transparent;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .label {\\r\\n        width: 20%;\\r\\n        min-width: 120px;\\r\\n        max-width: 220px;\\r\\n        padding: 3px 12px 3px 8px;\\r\\n        border-bottom: 1px solid var(--bbvInputBorderFadeColor);\\r\\n        flex-shrink: 0;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .value {\\r\\n        flex-grow: 1;\\r\\n        font-size: 12px;\\r\\n        white-space: pre-wrap;\\r\\n        word-break: break-all;\\r\\n        padding: 4px 4px 4px 8px;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-left: 2px solid var(--bbvInputBorderFadeColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, isBlank, lodash } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-log-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"[logTs, tsRows] in logsMap\\\" :key=\\\"logTs\\\">\\r\\n        <div class=\\\"tsRow\\\" :class='{ hasTs: logTs !== \\\"noTs\\\" }'>\\r\\n          <div class=\\\"logTs\\\" v-if=\\\"logTs !== 'noTs'\\\">{{ logTs }}</div>\\r\\n          <div class=\\\"simpleRows\\\">\\r\\n            <template v-for=\\\"row in tsRows\\\" :key=\\\"row\\\">\\r\\n              <div class=\\\"simpleRow\\\">{{ row }}</div>\\r\\n            </template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: () => [],\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    logsMap() {\\r\\n      if (!lodash.isArray(this.data)) return\\r\\n\\r\\n      // Build object array from entries\\r\\n      let mergedLogs = new Map()\\r\\n      let reversed = [...this.data].reverse()\\r\\n      reversed.forEach((logRow) => {\\r\\n        logRow = String(logRow)\\r\\n        let logTs = Array.from(logRow.matchAll(/\\\\[(.*?)\\\\]/g))\\r\\n        if (!isBlank(logTs) && lodash['get'](logTs, '[0][1]')) {\\r\\n          let tsMatch = logTs[0][0]\\r\\n          logTs = logTs[0][1]\\r\\n          logRow = logRow.replaceAll(tsMatch, '')\\r\\n        } else {\\r\\n          logTs = 'noTs'\\r\\n        }\\r\\n        let existingLogs = mergedLogs['get'](logTs) || []\\r\\n        mergedLogs.set(logTs, [...existingLogs, logRow.trim()])\\r\\n      })\\r\\n\\r\\n      return mergedLogs\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      width: 100%;\\r\\n\\r\\n      .tsRow {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n        width: 100%;\\r\\n        padding: 3px 0;\\r\\n\\r\\n        &.hasTs .simpleRow {\\r\\n          padding: 0 8px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .logTs {\\r\\n        padding: 1.5px;\\r\\n        border-radius: 5px;\\r\\n        background-color: var(--bbvInputBorderFadeColor);\\r\\n        width: max-content;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .simpleRows {\\r\\n        flex-grow: 1;\\r\\n      }\\r\\n\\r\\n      .simpleRow {\\r\\n        line-height: 14px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/5-demo-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/2-writing-styles-scss.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  scssResources: css`\\r\\n    @mixin typo-basic {\\r\\n      & {\\r\\n        font-family: 'FreeMono', monospace;\\r\\n        font-size: 14px;\\r\\n        font-weight: bold;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    @mixin bbv-scrollbar($size: 4px, $width: $size, $height: $size) {\\r\\n      &::-webkit-scrollbar {\\r\\n        display: initial;\\r\\n\\r\\n        @if $width {\\r\\n          width: $width;\\r\\n        } @else {\\r\\n          width: $size;\\r\\n        }\\r\\n\\r\\n        @if $height {\\r\\n          height: $height;\\r\\n        } @else {\\r\\n          height: $size;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-thumb {\\r\\n        background-color: var(--bbvScrollbarFgColor);\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-track {\\r\\n        background-color: var(--bbvScrollbarBgColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    body {\\r\\n      --bbvScrollbarFgColor: #12b3e3;\\r\\n      --bbvScrollbarBgColor: #0b1420;\\r\\n      --bbvBorderColor: #0f4878;\\r\\n      --bbvBoxShadowColor1: #0000007a;\\r\\n      --bbvBoxShadowColor2: #040f18;\\r\\n      --bbvAppInnerFgColor: #89d3e4;\\r\\n      --bbvAppInnerBgColor: #274b64;\\r\\n      --bbvFontLightColor: #89d3e4;\\r\\n      --bbvFontLightAltColor: #89d3e4;\\r\\n      --bbvButtonFgColor: #12b3e3;\\r\\n      --bbvButtonBgColor: #0b1420;\\r\\n      --bbvButtonHoverFgColor: #00fff3;\\r\\n      --bbvButtonHoverBgColor: #162a47;\\r\\n      --bbvWinTitlebarFgColor: #89d3e4;\\r\\n      --bbvWinTitlebarBgColor: #0f4878;\\r\\n      --bbvWinActionsFgColor: #83d5d9;\\r\\n      --bbvWinActionsBgColor: #0f4878;\\r\\n      --bbvHackerDarkFgColor: #c5c255;\\r\\n      --bbvHackerDarkBgColor: #171c23;\\r\\n      --bbvHackerDarkAltBgColor: #333146;\\r\\n      --bbvAppTrayFgColor: #89d3e4;\\r\\n      --bbvAppTrayBorderColor: #4bb4c5;\\r\\n      --bbvAppTrayBgColor: #274b64;\\r\\n      --bbvInputBorderColor: #357073;\\r\\n      --bbvInputBorderFadeColor: #{fade-out(#357073, 0.5)};\\r\\n      --bbvInputBgColor: #{fade-out(#274b64, 0.5)};\\r\\n      --bbvActiveColor: #954ea7;\\r\\n      --bbvSuccessColor: #4fb168;\\r\\n      --bbvErrorColor: #984e4e;\\r\\n      --bbvErrorDarkColor: #0b1420;\\r\\n    }\\r\\n\\r\\n    [bbv-root] {\\r\\n      @include typo-basic;\\r\\n\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n      top: 0;\\r\\n      right: 0;\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n      pointer-events: none;\\r\\n    }\\r\\n\\r\\n    [bbv-foreground] {\\r\\n      z-index: 1500;\\r\\n\\r\\n      & > * {\\r\\n        pointer-events: auto;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      * {\\r\\n        box-sizing: border-box;\\r\\n      }\\r\\n\\r\\n      code,\\r\\n      button,\\r\\n      input,\\r\\n      th,\\r\\n      td,\\r\\n      tr {\\r\\n        @include typo-basic;\\r\\n      }\\r\\n\\r\\n      @keyframes bbvFlashBusy {\\r\\n        from {\\r\\n          filter: hue-rotate(0deg);\\r\\n        }\\r\\n        to {\\r\\n          filter: hue-rotate(360deg);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-active,\\r\\n      &.rootAppIntro-leave-active,\\r\\n      &.consumerRootIntro-enter-active,\\r\\n      &.consumerRootIntro-leave-active {\\r\\n        transition: opacity 0.4s ease;\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-from,\\r\\n      &.rootAppIntro-leave-to,\\r\\n      &.consumerRootIntro-enter-from,\\r\\n      &.consumerRootIntro-leave-to {\\r\\n        opacity: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/3-controlling-your-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-css-manager',\\r\\n  props: {\\r\\n    consumerRootDefs: {\\r\\n      type: Array,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n  computed: {\\r\\n    rootOptions() {\\r\\n      return this.$root.$options\\r\\n    },\\r\\n    styles() {\\r\\n      let styles = { root: '' }\\r\\n      styles.root = this.rootOptions.__finalStyles\\r\\n      this.consumerRootDefs.forEach((appDefinition) => {\\r\\n        styles[appDefinition.__uuid] = appDefinition.__finalStyles\\r\\n      })\\r\\n      return styles\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <transition-group :duration=\\\"{ enter: 0, leave: 1000 }\\\">\\r\\n      <component\\r\\n        is=\\\"style\\\"\\r\\n        v-for=\\\"(sheet, appName) in styles\\\"\\r\\n        :key=\\\"appName\\\"\\r\\n        :id=\\\"'styles-for-' + appName\\\"\\r\\n        type=\\\"text/css\\\"\\r\\n      >\\r\\n        {{ sheet.join('') }}\\r\\n      </component>\\r\\n    </transition-group>\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { ComponentValidationException, ProcessingException, ReplacementTokens } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class ComponentManager {\\r\\n  #appConfig\\r\\n  #Sass\\r\\n  #scssResources\\r\\n  #hasProcessed = false\\r\\n  #rawComponents = new Set()\\r\\n  #processingReports = []\\r\\n\\r\\n  constructor(appConfig, Sass, scssResources) {\\r\\n    this.#appConfig = appConfig\\r\\n    this.#Sass = Sass\\r\\n    this.#scssResources = toStr(scssResources)\\r\\n  }\\r\\n\\r\\n  add(...args) {\\r\\n    if (isBlank(args)) {\\r\\n      throw new Error('Please provide one or more components to add')\\r\\n    }\\r\\n    for (let cmpDef of args) {\\r\\n      cmpDef = Object.assign({}, cmpDef)\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#rawComponents.add(cmpDef)\\r\\n    }\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async processAll() {\\r\\n    for (let cmpDef of this.#rawComponents) {\\r\\n      let processed = await this.#processSingle(cmpDef)\\r\\n      this.#processingReports.push(processed)\\r\\n    }\\r\\n    this.#hasProcessed = true\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  registerWithVueApp(vueApp) {\\r\\n    if (this.#hasProcessed === false) {\\r\\n      throw new Error('All components must be processed before being registered with the vueApp')\\r\\n    }\\r\\n\\r\\n    this.#processingReports.forEach((processingReport) => {\\r\\n      if (!processingReport.cmpDef.__libraryRoot) {\\r\\n        // Remove old cmpDef before adding new one\\r\\n        if (vueApp.component(processingReport.cmpDef.name) && vueApp?._context?.components) {\\r\\n          delete vueApp._context.components[processingReport.cmpDef.name]\\r\\n        }\\r\\n        vueApp.component(processingReport.cmpDef.name, processingReport.cmpDef)\\r\\n      }\\r\\n    })\\r\\n\\r\\n    return vueApp\\r\\n  }\\r\\n\\r\\n  gatherAllProcessedStyles() {\\r\\n    return this.#processingReports.map((x) => x.cmpDef.__processedStyles)\\r\\n  }\\r\\n\\r\\n  static Validate(cmpDef) {\\r\\n    if (isBlank(cmpDef)) {\\r\\n      throw new ComponentValidationException('Component definition is empty', cmpDef)\\r\\n    }\\r\\n    if (isBlank(toStr(cmpDef.name))) {\\r\\n      throw new ComponentValidationException(`Component needs 'name' key of type String`, cmpDef)\\r\\n    }\\r\\n    /* if (isBlank(toStr(cmpDef.template))) {\\r\\n      throw new ComponentValidationException(\\r\\n        `Component needs 'template' key of type String`,\\r\\n        cmpDef\\r\\n      )\\r\\n    } */\\r\\n    return cmpDef\\r\\n  }\\r\\n\\r\\n  async #processSingle(cmpDef) {\\r\\n    let { css, didProcess: didProcessCss } = this.#processCss(cmpDef)\\r\\n    let { scss, didProcess: didProcessScss } = await this.#processScss(cmpDef)\\r\\n    let { template, didProcess: didProcessTemplate } = this.#processTemplate(cmpDef)\\r\\n\\r\\n    if (didProcessCss) {\\r\\n      delete cmpDef.css\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    if (didProcessScss) {\\r\\n      delete cmpDef.scss\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    let processedMergedStyles = [css, scss].join('\\\\n\\\\n')\\r\\n    if (didProcessScss || didProcessCss) {\\r\\n      cmpDef.__processedStyles = processedMergedStyles\\r\\n    }\\r\\n\\r\\n    if (didProcessTemplate) {\\r\\n      cmpDef.template = template\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cmpDef,\\r\\n      results: {\\r\\n        css,\\r\\n        scss,\\r\\n        styles: processedMergedStyles,\\r\\n        template,\\r\\n        didProcessCss,\\r\\n        didProcessScss,\\r\\n        didProcessTemplate,\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #processCss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let css = [cmpDef.css, cmpDef.style].find((x) => !isBlank(x))\\r\\n\\r\\n    if (css) {\\r\\n      try {\\r\\n        css = this.#performTokenReplacements(css, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        css = ''\\r\\n        throw new ProcessingException('CSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { css: toStr(css), didProcess }\\r\\n  }\\r\\n\\r\\n  async #processScss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let scss = ''\\r\\n\\r\\n    scss = [cmpDef.scss, cmpDef.sass].find((x) => !isBlank(x))\\r\\n    if (scss) {\\r\\n      scss = this.#performTokenReplacements(scss, this.#appConfig.appId, cmpDef.name)\\r\\n      scss = `${this.#scssResources}\\\\n${scss}`\\r\\n      try {\\r\\n        scss = await this.#Sass.compileAsync(scss, {})\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        scss = ''\\r\\n        throw new ProcessingException('SCSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { scss: toStr(scss), didProcess }\\r\\n  }\\r\\n\\r\\n  #processTemplate(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let template = toStr(cmpDef.template)\\r\\n\\r\\n    if (!isBlank(template)) {\\r\\n      try {\\r\\n        template = this.#performTokenReplacements(template, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        template = ''\\r\\n        throw new ProcessingException('Template', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { template: toStr(template), didProcess }\\r\\n  }\\r\\n\\r\\n  #performTokenReplacements(value, appId, componentName) {\\r\\n    if (!lodash.isString(value)) return value\\r\\n    value = value.replaceAll(ReplacementTokens.appId, appId)\\r\\n    value = value.replaceAll(ReplacementTokens.componentName, componentName)\\r\\n    return value\\r\\n  }\\r\\n\\r\\n  get processedLibraryRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__libraryRoot === true).cmpDef\\r\\n  }\\r\\n\\r\\n  get processedConsumerRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__consumerRoot === true).cmpDef\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/2-events-and-communication.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, Vue } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nclass Utils {\\r\\n  static isUndefined(x) {\\r\\n    return x === undefined\\r\\n  }\\r\\n  static pick(o, props) {\\r\\n    let x = {}\\r\\n    props.forEach((k) => {\\r\\n      x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omit(o, props) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (props.indexOf(k) === -1) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omitBy(o, pred) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (!pred(o[k])) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  // custom defaults function suited to our specific purpose\\r\\n  static defaults(o, ...sources) {\\r\\n    sources.forEach((s) => {\\r\\n      Object.keys(s).forEach((k) => {\\r\\n        if (this.isUndefined(o[k]) || o[k] === '') o[k] = s[k]\\r\\n      })\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\\r\\nclass VueScriptX {\\r\\n  constructor() {\\r\\n    this.installed = false\\r\\n    this.promise = Promise.resolve()\\r\\n    this.loaded = {}\\r\\n    this.props = ['unload', 'src', 'type', 'async', 'integrity', 'text', 'crossorigin']\\r\\n  }\\r\\n  install(app) {\\r\\n    app.config.globalProperties.$scriptx = this\\r\\n    let self = this\\r\\n    if (self.installed) return\\r\\n    app.component('scriptx', {\\r\\n      props: self.props,\\r\\n      // Uses render method with <slot>s, see: https://v3.vuejs.org/guide/render-function.html\\r\\n      render() {\\r\\n        const { h } = Vue()\\r\\n        return h(\\r\\n          'div',\\r\\n          { style: 'display:none' },\\r\\n          this.$slots.default ? this.$slots.default() : undefined\\r\\n        )\\r\\n      },\\r\\n      mounted() {\\r\\n        let parent = this.$el.parentElement\\r\\n        if (!this.src) {\\r\\n          self.promise = self.promise.then(() => {\\r\\n            let script = doc.createElement('script')\\r\\n            let el = this.$el.innerHTML\\r\\n            el = el.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&')\\r\\n            script.type = 'text/javascript'\\r\\n            script.appendChild(doc.createTextNode(el))\\r\\n            parent.appendChild(script)\\r\\n            this.$emit('loaded') // any other proper way to do this or emit error?\\r\\n          })\\r\\n        } else {\\r\\n          let opts = Utils.omitBy(Utils.pick(this, self.props), Utils.isUndefined)\\r\\n          opts.parent = parent\\r\\n          // this syntax results in an implicit return\\r\\n          let load = () => {\\r\\n            self.load(this.src, opts).then(\\r\\n              () => this.$emit('loaded'),\\r\\n              (err) => this.$emit('error', err)\\r\\n            )\\r\\n          }\\r\\n          if (Utils.isUndefined(this.async) || this.async === 'false')\\r\\n            self.promise = self.promise.then(load)\\r\\n          // serialize execution\\r\\n          else load() // inject immediately\\r\\n        }\\r\\n        this.$nextTick(() => {\\r\\n          this.$el.parentElement.removeChild(this.$el)\\r\\n          // NOTE: this.$el.remove() may be used, but IE sucks, see: https://github.com/taoeffect/vue-script2/pull/17\\r\\n        })\\r\\n      },\\r\\n      unmounted() {\\r\\n        if (this.unload) {\\r\\n          new Function(this.unload)() // eslint-disable-line\\r\\n          delete self.loaded[this.src]\\r\\n        }\\r\\n      },\\r\\n    })\\r\\n    self.installed = true\\r\\n  }\\r\\n  load(src, opts = { parent: doc.head }) {\\r\\n    if (!this.loaded[src]) {\\r\\n      this.loaded[src] = new Promise((resolve, reject) => {\\r\\n        let script = doc.createElement('script')\\r\\n        // omit the special options that VueScriptX supports\\r\\n        Utils.defaults(script, Utils.omit(opts, ['unload', 'parent']), { type: 'text/javascript' })\\r\\n        // async may not be used with 'doc.write'\\r\\n        script.async = false\\r\\n        script.src = src\\r\\n        // crossorigin in HTML and crossOrigin in the DOM per HTML spec\\r\\n        if (opts.crossorigin) {\\r\\n          script.crossOrigin = opts.crossorigin\\r\\n        }\\r\\n        // handle onload and onerror\\r\\n        script.onload = () => resolve(src)\\r\\n        script.onerror = () => reject(new Error(src))\\r\\n        opts.parent.appendChild(script)\\r\\n      })\\r\\n    }\\r\\n    return this.loaded[src]\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default new VueScriptX()\",\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/3-connecting-with-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Mitt, Vue, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-consumer-root',\\r\\n  emits: ['consumer-root-mounted', 'consumer-root-unmount-requested', 'root-shutdown-requested'],\\r\\n  props: {\\r\\n    consumerRootDef: {\\r\\n      type: Object,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n\\r\\n    return {\\r\\n      private: {\\r\\n        bus,\\r\\n        consumerRootMount: null,\\r\\n      },\\r\\n      appStore: {},\\r\\n      appListen: bus.on,\\r\\n      appSend: this.appSendWrapper,\\r\\n      appShutdown: this.appShutdownWrapper,\\r\\n      rootShutdown: this.rootShutdownWrapper,\\r\\n    }\\r\\n  },\\r\\n  provide() {\\r\\n    const { reactivePick } = VueUse()\\r\\n    return reactivePick(\\r\\n      this.$data,\\r\\n      'appStore',\\r\\n      'appListen',\\r\\n      'appSend',\\r\\n      'appShutdown',\\r\\n      'rootShutdown'\\r\\n    )\\r\\n  },\\r\\n  methods: {\\r\\n    appSendWrapper(event, data) {\\r\\n      switch (event) {\\r\\n        default:\\r\\n          this.private.bus.emit(event, data)\\r\\n          break\\r\\n      }\\r\\n    },\\r\\n    appShutdownWrapper() {\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        throw new Error('Tried to shutdown a null app root', this.private.consumerRootMount)\\r\\n      } else {\\r\\n        this.$emit(\\r\\n          'consumer-root-unmount-requested',\\r\\n          this.private.consumerRootMount.$options.__uuid\\r\\n        )\\r\\n      }\\r\\n    },\\r\\n    rootShutdownWrapper() {\\r\\n      this.$emit('root-shutdown-requested')\\r\\n    },\\r\\n    consumerRootMounted(vnode) {\\r\\n      this.private.consumerRootMount = vnode?.component?.ctx\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        console.debug(`bb-vue: App root is null for ${this.consumerRootDef.__uuid}`)\\r\\n      }\\r\\n      this.$emit('consumer-root-mounted', this.private.consumerRootMount)\\r\\n    },\\r\\n  },\\r\\n  render() {\\r\\n    const { h } = Vue()\\r\\n    return h(\\r\\n      'section',\\r\\n      { 'bbv-foreground': true },\\r\\n      h(this.consumerRootDef, {\\r\\n        onVnodeMounted: this.consumerRootMounted,\\r\\n      })\\r\\n    )\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-button',\\r\\n  template: html`\\r\\n    <button\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ icon, small }\\\"\\r\\n      :tabindex=\\\"noFocus === false ? undefined : '-1'\\\"\\r\\n    >\\r\\n      <slot />\\r\\n    </button>\\r\\n  `,\\r\\n  props: {\\r\\n    icon: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    small: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    noFocus: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      font-family: inherit;\\r\\n      font-size: inherit;\\r\\n      padding: 8px;\\r\\n      cursor: pointer;\\r\\n      border: none;\\r\\n      border-radius: 2px;\\r\\n      color: var(--bbvButtonFgColor);\\r\\n      background-color: var(--bbvButtonBgColor);\\r\\n      margin: 0;\\r\\n      transition: color 0.15s, background-color 0.3s;\\r\\n\\r\\n      &:hover {\\r\\n        color: var(--bbvButtonHoverFgColor);\\r\\n        background-color: var(--bbvButtonHoverBgColor);\\r\\n      }\\r\\n\\r\\n      &[disabled]:hover {\\r\\n        background-color: var(--bbvButtonBgColor);\\r\\n        cursor: not-allowed;\\r\\n      }\\r\\n\\r\\n      &.small {\\r\\n        padding: 6px;\\r\\n        font-size: 12px;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n\\r\\n      &.icon {\\r\\n        padding: 2px;\\r\\n        line-height: 1.5;\\r\\n      }\\r\\n\\r\\n      & > code {\\r\\n        padding: 4px 3px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        border-radius: 4px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getClosestCrm, html, css, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\nimport useDraggableWin from '/bitpacks/bb-vue/components/concerns/useDraggableWin.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win',\\r\\n  template: html`\\r\\n    <div\\r\\n      ref=\\\"thisWin\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ shouldDisplay, isDragging, isCollapsed: draggable.isCollapsed }\\\"\\r\\n      :style=\\\"style\\\"\\r\\n      @pointerdown=\\\"bringToFront\\\"\\r\\n      @keydown.stop\\r\\n    >\\r\\n      <div class=\\\"win_titlebar\\\" ref=\\\"dragHandle\\\">\\r\\n        <div class=\\\"win_title\\\">{{ title }}<slot name=\\\"title\\\" /></div>\\r\\n        <template v-if=\\\"canClose || canCollapse\\\">\\r\\n          <div class=\\\"win_controls\\\" ref=\\\"winControls\\\">\\r\\n            <bbv-button class=\\\"win_collapse\\\" @click=\\\"toggleCollapse\\\">\\r\\n              <span v-if=\\\"draggable.isCollapsed\\\">🔽</span>\\r\\n              <span v-else>🔼</span>\\r\\n            </bbv-button>\\r\\n            <bbv-button class=\\\"win_close\\\" @click=\\\"close\\\">❎</bbv-button>\\r\\n          </div>\\r\\n        </template>\\r\\n      </div>\\r\\n      <div class=\\\"win_content\\\" :class=\\\"{ noPad: noPad !== false, noScroll: noScroll !== false }\\\">\\r\\n        <slot name=\\\"default\\\"></slot>\\r\\n      </div>\\r\\n      <div class=\\\"win_actions\\\">\\r\\n        <slot name=\\\"actions\\\"></slot>\\r\\n      </div>\\r\\n      <!-- Hack to disable selection on other parts of document while dragging windows -->\\r\\n      <template v-if=\\\"isDragging\\\">\\r\\n        <component is=\\\"style\\\" type=\\\"text/css\\\"> body *::selection { all: inherit; } </component>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  emits: ['open', 'close', 'collapse'],\\r\\n  props: {\\r\\n    title: {\\r\\n      type: String,\\r\\n      default: '',\\r\\n    },\\r\\n    startOpen: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    startPosition: {\\r\\n      type: Object,\\r\\n    },\\r\\n    startWidth: {\\r\\n      type: String,\\r\\n    },\\r\\n    startHeight: {\\r\\n      type: String,\\r\\n    },\\r\\n    canClose: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    canCollapse: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    noPad: {\\r\\n      default: false,\\r\\n    },\\r\\n    noScroll: {\\r\\n      default: false,\\r\\n    },\\r\\n    trayHide: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    trayTitle: {\\r\\n      type: String,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      uuid: crypto.randomUUID(),\\r\\n      owner: null,\\r\\n      draggable: {\\r\\n        savedHeight: 0,\\r\\n        isCollapsed: false,\\r\\n      },\\r\\n      stackingIndex: 1,\\r\\n      winState: WinStates.closed,\\r\\n      shouldDisplay: false,\\r\\n      hasOpened: false,\\r\\n      WinStates,\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    async winState(newVal, oldVal) {\\r\\n      if (newVal == WinStates.open && oldVal == WinStates.closed) {\\r\\n        // Position window on first open\\r\\n        if (this.hasOpened === false) {\\r\\n          this.hasOpened = true\\r\\n          useDraggableWin(this.draggable, {\\r\\n            win: this,\\r\\n            winManager: this.internals.winManager,\\r\\n            dragHandleRef: this.$refs.dragHandle,\\r\\n            dragIgnoreRef: this.$refs.winControls,\\r\\n            draggableRef: this.$refs.thisWin,\\r\\n            startPosition: this.$props.startPosition,\\r\\n          })\\r\\n        }\\r\\n\\r\\n        // Lag win opens just a bit to ensure CSS transitions are applied\\r\\n        await this.$nextTick()\\r\\n        this.shouldDisplay = true\\r\\n        this.bringToFront()\\r\\n      } else if (newVal == WinStates.closed) {\\r\\n        this.shouldDisplay = false\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    style() {\\r\\n      const collapsedOverrides = {\\r\\n        ...this.draggable.style,\\r\\n        height: 'auto',\\r\\n        minWidth: undefined,\\r\\n        minHeight: undefined,\\r\\n      }\\r\\n\\r\\n      let draggableStyles = this.draggable.isCollapsed ? collapsedOverrides : this.draggable.style\\r\\n      if (this.draggable.savedHeight !== 0 && !this.draggable.isCollapsed) {\\r\\n        draggableStyles.height = this.draggable.savedHeight\\r\\n        this.draggable.savedHeight = 0\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        width: this.$props.startWidth,\\r\\n        height: this.$props.startHeight,\\r\\n        zIndex: this.stackingIndex,\\r\\n        ...draggableStyles,\\r\\n      }\\r\\n    },\\r\\n    isDragging() {\\r\\n      return this.draggable.isDragging\\r\\n    },\\r\\n  },\\r\\n  created() {\\r\\n    this.owner = getClosestCrm(this)\\r\\n  },\\r\\n  async mounted() {\\r\\n    this.internals.winManager.addWin(this)\\r\\n    if (this.$props.startOpen) {\\r\\n      this.winState = WinStates.open\\r\\n    }\\r\\n  },\\r\\n  beforeUnmount() {\\r\\n    this.internals.winManager.removeWin(this)\\r\\n  },\\r\\n  methods: {\\r\\n    async open() {\\r\\n      if (this.winState == WinStates.open) return\\r\\n      this.winState = WinStates.open\\r\\n      await sleep(200)\\r\\n      this.$emit('open', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    async close() {\\r\\n      if (this.winState == WinStates.closed) return\\r\\n      this.winState = WinStates.closed\\r\\n      await sleep(200)\\r\\n      this.$emit('close', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    toggleCollapse() {\\r\\n      if (this.draggable.isCollapsed === false) {\\r\\n        this.draggable.savedHeight = this.draggable.style.height\\r\\n      }\\r\\n      this.draggable.isCollapsed = !this.draggable.isCollapsed\\r\\n      this.$emit('collapse', { winMount: this, isCollapsed: this.draggable.isCollapsed })\\r\\n    },\\r\\n    bringToFront(event) {\\r\\n      if (event && event.path.some((x) => x == this.$refs.winControls)) return\\r\\n      this.internals.winManager.bringToFront(this)\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n\\r\\n      display: flex;\\r\\n      flex-direction: column;\\r\\n\\r\\n      resize: both;\\r\\n      min-width: 250px;\\r\\n      min-height: 250px;\\r\\n\\r\\n      overflow: hidden;\\r\\n      border: 2px solid var(--bbvBorderColor);\\r\\n      border-radius: 10px;\\r\\n\\r\\n      background-color: var(--bbvAppInnerBgColor);\\r\\n      box-shadow: inset 0px 0px 70px 0px var(--bbvBoxShadowColor1),\\r\\n        0px 0px 20px 0px var(--bbvBoxShadowColor2);\\r\\n\\r\\n      transition: opacity 0.2s ease-out, transform 0.2s ease-out;\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transform: translateY(25px);\\r\\n      }\\r\\n\\r\\n      &.isDragging {\\r\\n        opacity: 0.9;\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        min-height: 0;\\r\\n        resize: none;\\r\\n\\r\\n        .win_content {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .win_actions {\\r\\n          background-color: var(--bbvBoxShadowColor1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_titlebar {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        font-size: 12px;\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        user-select: none;\\r\\n        cursor: grab;\\r\\n      }\\r\\n\\r\\n      .win_title {\\r\\n        display: flex;\\r\\n        flex-grow: 1;\\r\\n        padding: 3px 15px 3px 7px;\\r\\n      }\\r\\n\\r\\n      .win_controls {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n        flex-grow: 0;\\r\\n        font-size: 14px;\\r\\n        cursor: auto;\\r\\n\\r\\n        .bbv-button {\\r\\n          margin: 3px;\\r\\n          padding: 2px;\\r\\n          padding-bottom: 4px;\\r\\n          border-radius: 5px;\\r\\n          border-radius: 0;\\r\\n          background-color: var(--bbvWinActionsBgColor);\\r\\n\\r\\n          &:last-child {\\r\\n            margin-right: 6px;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_content {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 25px 15px;\\r\\n        flex-grow: 1;\\r\\n        overflow-y: auto;\\r\\n        color: var(--bbvFontLightColor);\\r\\n\\r\\n        &.noPad {\\r\\n          padding: 0;\\r\\n        }\\r\\n\\r\\n        &:not(.noPad) > *:first-child {\\r\\n          margin-top: 0;\\r\\n          padding-top: 0;\\r\\n        }\\r\\n\\r\\n        &.noScroll {\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_actions {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        padding: 8px 15px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        font-size: 12px;\\r\\n\\r\\n        &:empty {\\r\\n          display: none;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  let bus = getGlobal('asciiBus')\\r\\n  if (!bus) {\\r\\n    throw new Error('Run the asciichart-ui.js script first!')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    bus.emit('asciiChartCollector', { value: (Math.random() - 0.5) * 10 })\\r\\n    await ns.sleep(50)\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-collector.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/1-adding-components.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, getGlobal, html, setGlobal, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// ascii dep\\r\\nimport asciichart from '/bitpacks/bb-vue/misc-examples/asciichart-lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'ascii-chart-app' },\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  name: 'ascii-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"ASCII Chart\\\" no-pad start-width=\\\"50%\\\">\\r\\n      <div class=\\\"chartBg\\\" @pointerenter=\\\"pauseEvents = true\\\" @pointerleave=\\\"pauseEvents = false\\\">\\r\\n        <pre class=\\\"chartDisplay\\\" ref=\\\"chartDisplay\\\">{{ this.chartOutput }}</pre>\\r\\n      </div>\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      bus: null,\\r\\n      chartHistory: [],\\r\\n      eventBuffer: [],\\r\\n      pauseEvents: false,\\r\\n    }\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    chartOutput() {\\r\\n      if (this.chartHistory.length < 1) return ''\\r\\n      return asciichart.plot(this.chartHistory)\\r\\n    },\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    pauseEvents(newVal) {\\r\\n      if (newVal !== true) {\\r\\n        this.$refs.chartDisplay?.scrollTo({ left: 0, behavior: 'smooth' })\\r\\n        this.flushBuffer()\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    this.bus = getGlobal('asciiBus')\\r\\n    if (!this.bus) {\\r\\n      this.bus = getGlobal('Mitt').createBus()\\r\\n      setGlobal('asciiBus', this.bus)\\r\\n    }\\r\\n    this.bus.on('asciiChartCollector', this.handleBusEvent)\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    handleBusEvent(data) {\\r\\n      if (this.pauseEvents) {\\r\\n        this.eventBuffer = [data, ...this.eventBuffer]\\r\\n      } else {\\r\\n        this.chartHistory = [data?.value, ...this.chartHistory]\\r\\n      }\\r\\n      if (this.chartHistory.length > 600) {\\r\\n        this.chartHistory.pop()\\r\\n      }\\r\\n    },\\r\\n    async flushBuffer() {\\r\\n      for (let i = this.eventBuffer.length - 1; i >= 0; i--) {\\r\\n        let entry = this.eventBuffer[i]\\r\\n        if (!entry) return\\r\\n        this.bus.emit('asciiChartCollector', entry)\\r\\n        this.eventBuffer.pop()\\r\\n        await sleep(10)\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      .win_content {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n\\r\\n      .chartBg {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        width: 100%;\\r\\n        min-height: 350px;\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        padding: 30px 0;\\r\\n      }\\r\\n\\r\\n      .chartDisplay {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        overflow: auto;\\r\\n        padding: 30px 0;\\r\\n        font-family: 'FreeMono';\\r\\n        cursor: default;\\r\\n        user-select: none;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const WinStates = Object.freeze({\\r\\n  open: 'open',\\r\\n  closed: 'closed',\\r\\n})\\r\\n\\r\\nexport const WinPositionStrategies = Object.freeze({\\r\\n  cascadeStack: 'cascadeStack',\\r\\n})\\r\\n\\r\\nexport const AppStates = Object.freeze({\\r\\n  hasWins: 'hasWins',\\r\\n  withoutWins: 'withoutWins',\\r\\n})\\r\\n\\r\\nexport const TrayItemTypes = Object.freeze({\\r\\n  winMount: 'winMount',\\r\\n  consumerRootMount: 'consumerRootMount',\\r\\n})\\r\\n\\r\\nexport const ComponentTiers = Object.freeze({\\r\\n  library: 'library',\\r\\n  consumer: 'consumer',\\r\\n})\",\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, lodash, Vue, VueUse, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default async function useDraggableWin(store, options = {}) {\\r\\n  const { reactive, watch } = Vue()\\r\\n  const { useDraggable, useElementBounding, until } = VueUse()\\r\\n\\r\\n  // Handle options + validations\\r\\n  let opts = reactive({\\r\\n    win: null,\\r\\n    winManager: null,\\r\\n    dragHandleRef: null,\\r\\n    draggableRef: null,\\r\\n    dragIgnoreRef: null,\\r\\n    startPosition: null,\\r\\n    constrain: true,\\r\\n    constrainPadding: 0,\\r\\n    ...lodash.omitBy(options, lodash.isNil),\\r\\n  })\\r\\n  if (!lodash.isObjectLike(store)) {\\r\\n    throw new Error('Must provide store as first arg')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.win)) {\\r\\n    throw new Error('Must provide win in options')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.winManager)) {\\r\\n    throw new Error('Must provide winManager in options')\\r\\n  }\\r\\n  if (!opts.dragHandleRef) {\\r\\n    throw new Error('Must provide dragHandleRef in options')\\r\\n  }\\r\\n  if (!opts.draggableRef) {\\r\\n    throw new Error('Must provide draggableRef in options')\\r\\n  }\\r\\n\\r\\n  // Fill provided store with initial state\\r\\n  store.isDragging = false\\r\\n  store.style = {}\\r\\n  store.fixedRoot = useElementBounding(doc.querySelector('[bbv-root]'))\\r\\n  store.draggableTarget = useElementBounding(opts.draggableRef)\\r\\n\\r\\n  // Helper to manually position draggable\\r\\n  const manuallyPositionDraggable = async ({ x, y }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.left = `${x}px`\\r\\n    ele.style.top = `${y}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n  const manuallySizeDraggable = async ({ width, height }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.width = `${width}px`\\r\\n    ele.style.height = `${height}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n\\r\\n  // Wait until draggableTarget is mounted, might be a better way?\\r\\n  await until(store.draggableTarget).toMatch((x) => x.width > 0)\\r\\n\\r\\n  // Sync minWidth / minHeight from CSS styles applied to window\\r\\n  store.minWidth = parseInt(win.getComputedStyle(opts.draggableRef).minWidth)\\r\\n  store.minHeight = parseInt(win.getComputedStyle(opts.draggableRef).minHeight)\\r\\n\\r\\n  // Set initial position - if none is provided - based on winManager recommendation\\r\\n  let initialPos = { x: 0, y: 0 }\\r\\n  if (opts.startPosition === null) {\\r\\n    initialPos = opts.winManager.getRecommendedPosition(opts.win)\\r\\n  } else {\\r\\n    initialPos = { x: opts.startPosition?.x ?? 0, y: opts.startPosition?.y ?? 0 }\\r\\n  }\\r\\n\\r\\n  // Do initial positioning of window\\r\\n  manuallyPositionDraggable(initialPos)\\r\\n\\r\\n  // Watch for position changes\\r\\n  store.isDragging = useDraggable(opts.dragHandleRef, {\\r\\n    initialValue: initialPos,\\r\\n    onMove: async (p) => manuallyPositionDraggable(p),\\r\\n    onStart: (_, e) => !e.path.some((x) => x == opts.dragIgnoreRef),\\r\\n  }).isDragging\\r\\n\\r\\n  // Watch for size changes\\r\\n  watch(store.draggableTarget, () => manuallySizeDraggable(store.draggableTarget), { deep: true })\\r\\n}\\r\\n\\r\\nasync function updateStore(ctx) {\\r\\n  const { reactive } = Vue()\\r\\n\\r\\n  let padding = ctx.opts.constrainPadding\\r\\n  let root = ctx.store.fixedRoot\\r\\n  let draggable = ctx.store.draggableTarget\\r\\n\\r\\n  let newSize = reactive({ width: draggable.width, height: draggable.height })\\r\\n  let newPos = reactive({ x: draggable.x, y: draggable.y })\\r\\n\\r\\n  // Clamp window size and position if desired\\r\\n  if (ctx.opts.constrain) {\\r\\n    const { useClamp } = VueUse()\\r\\n\\r\\n    newSize.width = useClamp(newSize.width, ctx.store.minWidth, root.width - padding * 2)\\r\\n    newSize.height = useClamp(\\r\\n      newSize.height,\\r\\n      ctx.store.isCollapsed ? 0 : ctx.store.minHeight,\\r\\n      root.height - padding * 2\\r\\n    )\\r\\n\\r\\n    newPos.x = useClamp(newPos.x, padding, root.width - newSize.width - padding)\\r\\n    newPos.y = useClamp(newPos.y, padding, root.bottom - newSize.height - padding)\\r\\n  }\\r\\n\\r\\n  // Update style object to be bound to draggableTarget in consumer template\\r\\n  ctx.store.style = {\\r\\n    left: `${newPos.x}px`,\\r\\n    top: `${newPos.y}px`,\\r\\n    width: `${newSize.width}px`,\\r\\n    height: `${newSize.height}px`,\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    // App one\\r\\n    // ---\\r\\n\\r\\n    let appOne = new AppFactory(ns)\\r\\n    const appOneHandleFn = await appOne.mount({\\r\\n      config: { id: 'app-one', showTips: false },\\r\\n      rootComponent: PrimaryAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-one booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then booting a second app...')\\r\\n\\r\\n    // App two\\r\\n    // ---\\r\\n\\r\\n    let appTwo = new AppFactory(ns)\\r\\n    const appTwoHandleFn = await appTwo.mount({\\r\\n      config: { id: 'app-two', showTips: false },\\r\\n      rootComponent: DifferentAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-two booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then logging mounted apps to debug console...')\\r\\n\\r\\n    // Retrieve references to both running apps using the handle / lookup functions\\r\\n    // returned from the mount() method calls earlier.\\r\\n    const [runningAppOne, runningAppTwo] = [appOneHandleFn(), appTwoHandleFn()]\\r\\n\\r\\n    // Display running app info in debug console / devtools (Debug -> Activate)\\r\\n    console.debug(runningAppOne)\\r\\n    console.debug(runningAppTwo)\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst PrimaryAppRoot = {\\r\\n  name: 'primary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <!--\\r\\n      Use the \\\"tray-hide\\\" prop to hide this window from the app tray\\r\\n    -->\\r\\n    <bbv-win\\r\\n      tray-hide\\r\\n      title=\\\"I'm hidden from the App Tray\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      start-width=\\\"20%\\\"\\r\\n      @close=\\\"appShutdown\\\"\\r\\n    >\\r\\n      <p>\\r\\n        This window doesn't appear in the app tray, and instead this window is configured to\\r\\n        shutdown the app where it's mounted when it's closed.\\r\\n      </p>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\nconst DifferentAppRoot = {\\r\\n  name: 'secondary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <main>\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win title=\\\"I've got a special title in the tray\\\" tray-title=\\\"🥇\\\" class=\\\"__CMP_NAME__\\\">\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win\\r\\n        title=\\\"I have a special title in the tray, too!\\\"\\r\\n        tray-title=\\\"🥈\\\"\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n      >\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n    </main>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/1-the-app-tray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//\\n//\\n// NOTE:\\n// Ideally some of these files would be in separate resource folders,\\n// but I've been running into circular reference issues in-game :verysadge:\\n//\\n//\\n\\n//\\n//\\n// CONSTANTS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Keys used for globalThis storage and lookup\\n */\\nexport const Keys = Object.freeze({\\n  libKey: 'bbVue',\\n  vueModuleKey: 'Vue',\\n  vueUseModuleKey: 'VueUse',\\n  mittModuleKey: 'Mitt',\\n  rootAppKey: 'rootApp',\\n  globalBusKey: 'rootBus',\\n})\\n\\n/**\\n * Tokens used when processing a consumer app style and template values\\n */\\nexport const ReplacementTokens = Object.freeze({\\n  appId: '__APP_ID__',\\n  componentName: '__CMP_NAME__',\\n})\\n\\n//\\n//\\n// GLOBALS MANAGEMENT /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\nexport const RootApp = {\\n  rootAttr: 'bbv-root',\\n  raw() {\\n    return getGlobal(Keys.rootAppKey)\\n  },\\n  instance() {\\n    return this.raw()?._instance\\n  },\\n  appDef() {\\n    return this.raw()?._component\\n  },\\n  component() {\\n    return this.instance()?.ctx\\n  },\\n  set(val) {\\n    return setGlobal(Keys.rootAppKey, val)\\n  },\\n  async cleanup() {\\n    await sleep(15)\\n    try {\\n      this.raw()?.unmount()\\n    } catch (error) {\\n      console.debug(\\\"bb-vue: Issue cleaning up AppRoot, but don't worry about it\\\")\\n    }\\n    await this.removeDom()\\n    deleteGlobal(Keys.rootAppKey)\\n    await sleep(15)\\n  },\\n  async removeDom() {\\n    await sleep(15)\\n    doc.querySelector(`[${this.rootAttr}]`)?.remove()\\n  },\\n  async addDom(appId) {\\n    doc.body.insertAdjacentHTML('afterbegin', html`<div id=\\\"${appId}\\\" bbv-root></div>`)\\n    await sleep(15)\\n  },\\n}\\n\\n/**\\n * Reference to window global\\n */\\nexport const win = globalThis['window']\\n\\n/**\\n * Reference to document global\\n */\\nexport const doc = globalThis['document']\\n\\n/**\\n * Reference to bundled lodash library\\n */\\nexport const lodash = win._\\n\\n/**\\n * Initialize globalThis storage\\n */\\nif (lodash.isObjectLike(win[Keys.libKey]) === false) {\\n  win[Keys.libKey] = {}\\n}\\n\\n/**\\n * Sets a value by key to internal library storage\\n * @param {String} key Path to set, utilizing `lodash.set`\\n * @param {any} value\\n * @returns {any} A reference to the value passed in, from the store\\n * * @see https://lodash.com/docs/4.17.15#set\\n */\\nexport function setGlobal(key, value) {\\n  lodash.set(win[Keys.libKey], key, value)\\n  return getGlobal(key)\\n}\\n\\n/**\\n * Retrieves a value by key from internal library storage\\n * @param {String} key Path to get, utilizing `lodash.get`\\n * @returns {any} Value from or undefined if not set\\n * @see https://lodash.com/docs/4.17.15#get\\n */\\nexport function getGlobal(key, defaultValue) {\\n  return lodash['get'](win[Keys.libKey], key, defaultValue)\\n}\\n\\n/**\\n * Deletes a global key from globalThis\\n * @param {String} key Property to destroy\\n * @returns {void}\\n */\\nexport function deleteGlobal(key) {\\n  delete win[Keys.libKey][key]\\n}\\n\\n/**\\n * Load the Vue library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Vue} An instance of Vue, or a falsy value indicating the library is not loaded\\n */\\nexport function Vue({ silent = false } = {}) {\\n  let vue = win[Keys.vueModuleKey]\\n  if (!vue && !silent)\\n    throw new Error('Vue is not loaded on window global; check VueLoader:Get for issues')\\n  return vue\\n}\\n\\n/**\\n * Load the VueUse library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {VueUse} An instance of VueUse, or a falsy value indicating the library is not loaded\\n */\\nexport function VueUse({ silent = false } = {}) {\\n  let vueUse = win[Keys.vueUseModuleKey]\\n  if (!vueUse && !silent)\\n    throw new Error('VueUse is not loaded on window global; check AppRoot:loadDeps for issues')\\n  return vueUse\\n}\\n\\n/**\\n * Load the Mitt library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Mitt} An instance of Mitt, or a falsy value indicating the library is not loaded\\n */\\nexport function Mitt({ silent = false } = {}) {\\n  let mitt = getGlobal('Mitt')\\n  if (!mitt && !silent)\\n    throw new Error('Mitt is not loaded on window global; check MittLoader:Get for issues')\\n  return mitt\\n}\\n\\n//\\n//\\n// EXCEPTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Processing exception, most often originating from SCSS compiler usage in `ComponentManager`.\\n * Signifies an issue when preparing components for injection into `bbVue.rootApp`\\n */\\nexport class ProcessingException {\\n  constructor(step, originalError) {\\n    this.step = step\\n    this.originalError = originalError\\n  }\\n\\n  toString() {\\n    return `ERROR: [ProcessingException] Failure during '${this.step}' processing\\\\n${\\n      this.originalError?.formatted || toJson(this.originalError)\\n    }`\\n  }\\n}\\n\\n/**\\n * Component validation exception thrown by `AppFactory`.\\n * Signifies an issue with components being provided to `AppFactory` by a consumer app definition.\\n */\\nexport class ComponentValidationException {\\n  constructor(message, cmpDef) {\\n    this.message = message\\n    this.componentDefinition = cmpDef\\n  }\\n\\n  toString() {\\n    return `ERROR: [ComponentValidationException] ${this.message}\\\\n${toJson(\\n      this.componentDefinition\\n    )}`\\n  }\\n}\\n\\n// APP TRAVERSAL /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Walk the Vue VNode tree and find the closest parent consumer root mount (CRM)\\n * @param {componentInstanceVm} startingVm\\n * The view-model / `this` binding from the component where the search originates\\n * @returns {crmInstanceVm | null} The closest CRM instance or null\\n */\\nexport function getClosestCrm(startingVm) {\\n  let consumerRoot = null\\n  let parent = startingVm.$parent\\n  while (parent && !consumerRoot) {\\n    if (parent.$options.__consumerRoot === true) {\\n      consumerRoot = parent\\n    }\\n    parent = parent.$parent\\n  }\\n  return consumerRoot\\n}\\n\\n// GENERAL FUNCTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Cleanup an error string\\n * @param {String} error Error string to cleanup\\n * @returns Removes odd internal delimiters and other noisy chars from a BitBurner error\\n */\\nexport function cleanupError(error) {\\n  return String(error)\\n    .replace('|DELIMITER|', '')\\n    .replaceAll('|DELIMITER|', ' » ')\\n    .replaceAll('<br>', '')\\n    .replaceAll('Stack:', '')\\n}\\n\\n/**\\n * Wait for ms then continue\\n * @param {Number} ms Millis to wait\\n * @returns {Promise<void>}\\n */\\nexport async function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(), ms)\\n  })\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function scss() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function css() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function html() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression; reconstructs provided template string with no changes\\n * @param {Array} strings\\n * @param  {...any} values\\n * @returns {String}\\n */\\nfunction templatePassthrough(strings, ...values) {\\n  let str = ''\\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '')\\n  })\\n  return str\\n}\\n\\n/**\\n * Attempts to convert a value to string using `lodash.toString`,\\n * and then trim the string with `lodash.trim`\\n * @param {any} value Value to coerce to string\\n * @returns {string} value\\n */\\nexport function toStr(value) {\\n  return lodash.trim(lodash.toString(value))\\n}\\n\\n/**\\n * Attempts to decern a given value's \\\"blankness\\\" via:\\n * - `lodash.isNil` and\\n * - `lodash.isEmpty`\\n * @param {any} value Value to be checked for blankness\\n * @returns {boolean} Is value blank\\n */\\nexport function isBlank(value) {\\n  if (lodash.isNil(value)) return true\\n  if (lodash.isString(value) && lodash.isEmpty(value)) return true\\n  return lodash.isEmpty(value)\\n}\\n\\n/**\\n * Attempt to convert an object to JSON via `JSON.stringify`, or fallback\\n * to a more robust JSON stringifier if needed\\n * @param {any} value\\n * @returns {String} result\\n */\\nexport function toJson(value) {\\n  try {\\n    return JSON.stringify(value, null, '  ')\\n  } catch (error) {\\n    try {\\n      return toJsonSafe(value, 4, 4, '  ')\\n    } catch (error) {\\n      return '[COULD NOT SERIALIZE] ' + value\\n    }\\n  }\\n}\\n\\n/**\\n * Attempt to convert a string to it's parsed JSON result\\n * @param {any} value\\n * @returns {any | null} resultOrNull\\n */\\nexport function fromJson(value) {\\n  try {\\n    return JSON.parse(value)\\n  } catch (error) {\\n    console.error(`bb-vue: Could not parse JSON string: ${value}`)\\n    return null\\n  }\\n}\\n\\n/**\\n * @param {String} value\\n */\\nexport function uppercaseFirstLetter(value) {\\n  return String(value).charAt(0).toUpperCase() + String(value).slice(1)\\n}\\n\\n/**\\n * Returns the JSON representation of an object.\\n *\\n * @param {value} object the object\\n * @param {number} objectMaxDepth for objects, the maximum number of times to recurse into descendants\\n * @param {number} arrayMaxLength for arrays, the maximum number of elements to enumerate\\n * @param {string} indent the string to use for indentation\\n * @return {string} the JSON representation\\n */\\nconst toJsonSafe = function (object, objectMaxDepth, arrayMaxLength, indent) {\\n  'use strict'\\n\\n  /**\\n   * Escapes control characters, quote characters, backslash characters and quotes the string.\\n   *\\n   * @param {string} string the string to quote\\n   * @returns {String} the quoted string\\n   */\\n  function quote(string) {\\n    escapable.lastIndex = 0\\n    var escaped\\n    if (escapable.test(string)) {\\n      escaped = string.replace(escapable, function (a) {\\n        var replacement = replacements[a]\\n        if (typeof replacement === 'string') return replacement\\n        // Pad the unicode representation with leading zeros, up to 4 characters.\\n        return '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\\n      })\\n    } else escaped = string\\n    return '\\\"' + escaped + '\\\"'\\n  }\\n\\n  /**\\n   * Returns the String representation of an object.\\n   *\\n   * Based on <a href=\\\"https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js\\\">https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js</a>\\n   *\\n   * @param {string} path the fully-qualified path of value in the JSON object\\n   * @param {type} value the value of the property\\n   * @param {string} cumulativeIndent the indentation to apply at this level\\n   * @param {number} depth the current recursion depth\\n   * @return {String} the JSON representation of the object, or \\\"null\\\" for values that aren't valid\\n   * in JSON (e.g. infinite numbers).\\n   */\\n  function toString(path, value, cumulativeIndent, depth) {\\n    switch (typeof value) {\\n      case 'string':\\n        return quote(value)\\n      case 'number': {\\n        // JSON numbers must be finite\\n        if (isFinite(value)) return String(value)\\n        return 'null'\\n      }\\n      case 'boolean':\\n        return String(value)\\n      case 'object': {\\n        if (!value) return 'null'\\n        var valueIndex = values.indexOf(value)\\n        if (valueIndex !== -1) return 'Reference => ' + paths[valueIndex]\\n        values.push(value)\\n        paths.push(path)\\n        if (depth > objectMaxDepth) return '...'\\n\\n        // Make an array to hold the partial results of stringifying this object value.\\n        var partial = []\\n\\n        // Is the value an array?\\n        var i\\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\\n          // The value is an array. Stringify every element\\n          var length = Math.min(value.length, arrayMaxLength)\\n\\n          // Whether a property has one or multiple values, they should be treated as the same\\n          // object depth. As such, we do not increment the object depth when recursing into an\\n          // array.\\n          for (i = 0; i < length; ++i) {\\n            partial[i] = toString(\\n              path + '.' + i,\\n              value[i],\\n              cumulativeIndent + indent,\\n              depth,\\n              arrayMaxLength\\n            )\\n          }\\n          if (i < value.length) {\\n            // arrayMaxLength reached\\n            partial[i] = '...'\\n          }\\n          return '\\\\n' + cumulativeIndent + '[' + partial.join(', ') + '\\\\n' + cumulativeIndent + ']'\\n        }\\n\\n        // Otherwise, iterate through all of the keys in the object.\\n        for (var subKey in value) {\\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\\n            var subValue\\n            try {\\n              subValue = toString(\\n                path + '.' + subKey,\\n                value[subKey],\\n                cumulativeIndent + indent,\\n                depth + 1\\n              )\\n              partial.push(quote(subKey) + ': ' + subValue)\\n            } catch (e) {\\n              // this try/catch due to forbidden accessors on some objects\\n              if (e.message) subKey = e.message\\n              else subKey = 'access denied'\\n            }\\n          }\\n        }\\n        var result = '\\\\n' + cumulativeIndent + '{\\\\n'\\n        for (i = 0; i < partial.length; ++i)\\n          result += cumulativeIndent + indent + partial[i] + ',\\\\n'\\n        if (partial.length > 0) {\\n          // Remove trailing comma\\n          result = result.slice(0, result.length - 2) + '\\\\n'\\n        }\\n        result += cumulativeIndent + '}'\\n        return result\\n      }\\n      default:\\n        return 'null'\\n    }\\n  }\\n\\n  if (indent === undefined) indent = '  '\\n  if (objectMaxDepth === undefined) objectMaxDepth = 0\\n  if (arrayMaxLength === undefined) arrayMaxLength = 50\\n  // Matches characters that must be escaped\\n\\n  // prettier-ignore\\n  // eslint-disable-next-line\\n  var escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g\\n\\n  // The replacement characters\\n  var replacements = {\\n    '\\\\b': '\\\\\\\\b',\\n    '\\\\t': '\\\\\\\\t',\\n    '\\\\n': '\\\\\\\\n',\\n    '\\\\f': '\\\\\\\\f',\\n    '\\\\r': '\\\\\\\\r',\\n    '\\\"': '\\\\\\\\\\\"',\\n    '\\\\\\\\': '\\\\\\\\\\\\\\\\',\\n  }\\n  // A list of all the objects that were seen (used to avoid recursion)\\n  var values = []\\n  // The path of an object in the JSON object, with indexes corresponding to entries in the\\n  // \\\"values\\\" variable.\\n  var paths = []\\n  return toString('root', object, '', 0)\\n}\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces)\\n  return num >= 0 ? '$' + numberShort : numberShort.replace('-', '-$')\\n}\\n\\nconst symbols = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n', 'e33', 'e36', 'e39']\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  for (\\n    var i = 0, sign = Math.sign(num), num = Math.abs(num);\\n    num >= 1000 && i < symbols.length;\\n    i++\\n  )\\n    num /= 1000\\n  return (\\n    (sign < 0 ? '-' : '') +\\n    num.toFixed(\\n      Math.max(\\n        0,\\n        Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num)))\\n      )\\n    ) +\\n    symbols[i]\\n  )\\n}\\n\\n/**\\n * Elapsed time between two dates, or a number of seconds\\n * @param {number} timeStart Defaults to 0\\n * @param {number} timeEnd Defaults to 0\\n * @returns {string} Elapsed time in human-friendly format\\n */\\nexport function timeDiff(timeStart = 0, timeEnd = 0) {\\n  let diff\\n  if (timeStart && timeEnd) {\\n    diff = timeEnd - timeStart\\n  } else {\\n    diff = timeStart * 1000\\n  }\\n  var hours = Math.floor(diff / (1000 * 60 * 60))\\n  diff -= hours * (1000 * 60 * 60)\\n  var mins = Math.floor(diff / (1000 * 60))\\n  diff -= mins * (1000 * 60)\\n  var secs = Math.floor(diff / 1000)\\n  diff -= secs * 1000\\n  var ms = Math.floor(diff)\\n  diff -= ms\\n  let toRet = []\\n  if (hours > 0) {\\n    toRet.push(`${hours}h`)\\n  }\\n  if (mins > 0) {\\n    toRet.push(`${mins}m`)\\n  }\\n  if (secs > 0) {\\n    toRet.push(`${secs}s`)\\n  }\\n  if (ms > 0 && !secs) {\\n    toRet.push(`${ms}ms`)\\n  }\\n  return toRet.join(' ')\\n}\",\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/4-sending-data-from-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, toStr, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class SassLoader {\\r\\n  static #moduleGlobalKey = 'Sass'\\r\\n\\r\\n  static async Fetch() {\\r\\n    let module = this.#getModule()\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      await this.#loadSassModule()\\r\\n      module = this.#getModule()\\r\\n    }\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      throw new Error(`SassLoader could not load module in Fetch()`)\\r\\n    }\\r\\n\\r\\n    return this.#wrapModule(module)\\r\\n  }\\r\\n\\r\\n  static #loadSassModule() {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      this.#doDefineHack()\\r\\n\\r\\n      const onScriptLoad = (() => {\\r\\n        // console.log('sass:load')\\r\\n        const module = this.#getModule()\\r\\n        if (this.#isValidModule(module)) {\\r\\n          resolve(module)\\r\\n          // console.log('sass:loadResolve')\\r\\n        } else {\\r\\n          reject()\\r\\n          console.error('bb-vue: sass:loadReject', this)\\r\\n          throw new Error('SassLoader could not load module in #loadSassModule()')\\r\\n        }\\r\\n        this.#undoDefineHack()\\r\\n      }).bind(this)\\r\\n\\r\\n      let sassJSScript = doc.createElement('script')\\r\\n      sassJSScript.type = 'text/javascript'\\r\\n      sassJSScript.src = 'https://cdn.jsdelivr.net/npm/sass.js@0.11.1/dist/sass.sync.js'\\r\\n      sassJSScript.onload = onScriptLoad\\r\\n      sassJSScript.onerror = reject\\r\\n\\r\\n      doc.head.appendChild(sassJSScript)\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static async #compileAsyncWrapper(module, rawScss, scssCompilerOptions, ...args) {\\r\\n    let compilerOptionsMerged = Object.assign({ style: module.style.expanded }, scssCompilerOptions)\\r\\n    return new Promise((resolve, reject) => {\\r\\n      // console.log('compile', rawScss)\\r\\n      module.compile(\\r\\n        rawScss,\\r\\n        compilerOptionsMerged,\\r\\n        (compileResult) => {\\r\\n          if (compileResult.status !== 0) {\\r\\n            reject(compileResult)\\r\\n            // console.log('compile:reject', compileResult)\\r\\n          } else {\\r\\n            resolve(toStr(compileResult.text))\\r\\n            // console.log('compile:resolve', compileResult.text)\\r\\n          }\\r\\n        },\\r\\n        ...args\\r\\n      )\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static #getModule() {\\r\\n    return win[this.#moduleGlobalKey]\\r\\n  }\\r\\n\\r\\n  static #wrapModule(module) {\\r\\n    if (!this.#isValidModule(module))\\r\\n      throw new Error('SassLoader cannot wrap invalid module', module)\\r\\n    module.compileAsync = async (rawCss, scssOptions, ...args) =>\\r\\n      await this.#compileAsyncWrapper(module, rawCss, scssOptions, ...args)\\r\\n    return module\\r\\n  }\\r\\n\\r\\n  static #isValidModule(module) {\\r\\n    return module && module.compile\\r\\n  }\\r\\n\\r\\n  static #doDefineHack() {\\r\\n    if (win.define) {\\r\\n      win._defineBak = win.define\\r\\n      win.define = undefined\\r\\n    }\\r\\n  }\\r\\n\\r\\n  static #undoDefineHack() {\\r\\n    if (win._defineBak) {\\r\\n      win.define = win._defineBak\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr, toJson, RootApp, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport ComponentManager from '/bitpacks/bb-vue/ComponentManager.js';\\r\\nimport MittLoader from '/bitpacks/bb-vue/MittLoader.js';\\r\\nimport SassLoader from '/bitpacks/bb-vue/SassLoader.js';\\r\\nimport VueLoader from '/bitpacks/bb-vue/VueLoader.js';\\r\\n\\r\\nimport ScriptX from '/bitpacks/bb-vue/components/internal/ScriptX.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { default as AppRoot, ComponentLibrary } from '/bitpacks/bb-vue/components/internal/AppRoot.js';\\r\\n\\r\\nconst CreateOrGetRootVueApp = async (Vue, Sass, forceReload = false) => {\\r\\n  const rootConfig = {\\r\\n    appId: 'bb-vue-root',\\r\\n  }\\r\\n\\r\\n  // console.time('CreateOrGetRootVueApp')\\r\\n\\r\\n  if (forceReload == true || (RootApp.raw() && !RootApp.instance())) {\\r\\n    console.debug(`bb-vue: AppFactory found remnants of previous app, doing cleanup`)\\r\\n    await RootApp.cleanup()\\r\\n  } else if (RootApp.raw() && RootApp.instance()) {\\r\\n    console.debug(`bb-vue: AppFactory found existing app, returning instance`)\\r\\n    return RootApp.raw()\\r\\n  }\\r\\n\\r\\n  console.debug(`bb-vue: AppFactory building new Vue app`)\\r\\n\\r\\n  let componentManager = new ComponentManager(rootConfig, Sass, AppRoot.scssResources)\\r\\n  componentManager.add(AppRoot, ...ComponentLibrary)\\r\\n  await componentManager.processAll()\\r\\n\\r\\n  let processedLibraryRoot = {\\r\\n    ...componentManager.processedLibraryRoot,\\r\\n    __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n  }\\r\\n\\r\\n  let rootApp\\r\\n  rootApp = Vue.createApp(processedLibraryRoot)\\r\\n  rootApp.use(ScriptX)\\r\\n  componentManager.registerWithVueApp(rootApp)\\r\\n\\r\\n  await RootApp.addDom(rootConfig.appId)\\r\\n  rootApp.mount(`#${rootConfig.appId}`)\\r\\n  RootApp.set(rootApp)\\r\\n\\r\\n  // console.timeEnd('CreateOrGetRootVueApp')\\r\\n\\r\\n  return rootApp\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nexport default class AppFactory {\\r\\n  #ns\\r\\n  #appConfig\\r\\n  #rootComponent\\r\\n  #componentsInQueue = new Set()\\r\\n  #mounted = false\\r\\n\\r\\n  constructor(ns) {\\r\\n    if (isBlank(ns) || !(ns.tprint || ns.sleep || ns.exit)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique reference to the ns object! ` +\\r\\n          `Try sending the ns object from the script where you're creating this AppFactory.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    this.#ns = ns\\r\\n    this.#mounted = false\\r\\n    this.#componentsInQueue = new Set()\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async mount({ config = {}, components = [], rootComponent = {} }) {\\r\\n    this.#configure(config)\\r\\n    this.#addComponents(components)\\r\\n    this.#setRootComponent(rootComponent)\\r\\n\\r\\n    this.#validateStart()\\r\\n    this.#validateOneMount()\\r\\n\\r\\n    // console.time('AppFactory:start')\\r\\n\\r\\n    const { Vue, Sass } = await this.#runLoaders()\\r\\n\\r\\n    // Mount root app\\r\\n    let rootVueApp = await CreateOrGetRootVueApp(Vue, Sass, this.#appConfig.forceReload)\\r\\n\\r\\n    let componentManager = new ComponentManager(\\r\\n      this.#appConfig,\\r\\n      Sass,\\r\\n      [RootApp.appDef().scssResources, this.#appConfig.scssResources].join('\\\\n\\\\n')\\r\\n    )\\r\\n    componentManager.add(...this.#componentsInQueue)\\r\\n    await componentManager.processAll()\\r\\n    componentManager.registerWithVueApp(rootVueApp)\\r\\n\\r\\n    let processedConsumerRoot = {\\r\\n      ...componentManager.processedConsumerRoot,\\r\\n      __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n    }\\r\\n\\r\\n    let consumerAppHandleFn = addConsumerRootDef(this.#ns, processedConsumerRoot)\\r\\n\\r\\n    this.#mounted = true\\r\\n\\r\\n    if (this.#appConfig.showTips) {\\r\\n      this.#ns.tprint(\\r\\n        `\\\\n\\\\n📦 Your bb-vue app (#${\\r\\n          this.#appConfig.appId\\r\\n        }) is now mounted!\\\\n\\\\n🧰 Use the Debug -> Activate menu to open the BitBurner Developer Tools.\\\\n👓 In the Elements tab, you should find your app at the top of the <body> tag.\\\\n\\\\n🎉 Have fun!\\\\n\\\\nP.S. If you're sick of seeing this message, add \\\\`showTips: false\\\\` to your app's configuration object.\\\\n\\\\n`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    // console.timeEnd('AppFactory:start')\\r\\n\\r\\n    return consumerAppHandleFn\\r\\n  }\\r\\n\\r\\n  #configure(instanceConfig = {}) {\\r\\n    if (isBlank(instanceConfig.id)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique ID! ` +\\r\\n          `Try using \\\\`crypto.randomUUID()\\\\` if you can't think of one.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    let defaultConfig = {\\r\\n      appId: toStr(instanceConfig.id),\\r\\n      showTips: true,\\r\\n      forceReload: false,\\r\\n      shutdownWithPid: null,\\r\\n      shutdownRootWithPid: null,\\r\\n      scssResources: '',\\r\\n    }\\r\\n\\r\\n    delete instanceConfig.id\\r\\n    this.#appConfig = Object.assign(defaultConfig, instanceConfig)\\r\\n\\r\\n    if (!isBlank(this.#appConfig.scssResources)) {\\r\\n      if (!lodash.isString(this.#appConfig.scssResources)) {\\r\\n        throw new TypeError('SCSS resources added to AppFactory must be of type String')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #addComponents(components) {\\r\\n    if (!lodash.isArray(components)) {\\r\\n      throw new Error('Please provide one or more components to add as an array')\\r\\n    }\\r\\n\\r\\n    for (let cmpDef of components) {\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#componentsInQueue.add(cmpDef)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #setRootComponent(componentDefinition = {}) {\\r\\n    let cmpDef = { ...ComponentManager.Validate(componentDefinition) }\\r\\n    cmpDef.__consumerRoot = true\\r\\n    cmpDef.__appId = this.#appConfig.appId\\r\\n    cmpDef.__uuid = `${cmpDef.name}-${crypto.randomUUID()}`\\r\\n    cmpDef.__config = this.#appConfig\\r\\n    this.#rootComponent = cmpDef\\r\\n    this.#componentsInQueue.add(cmpDef)\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async #runLoaders() {\\r\\n    const [Vue, Mitt, Sass] = await Promise.all([\\r\\n      VueLoader.Fetch(),\\r\\n      MittLoader.Fetch(),\\r\\n      SassLoader.Fetch(),\\r\\n    ])\\r\\n    return { Vue, Mitt, Sass }\\r\\n  }\\r\\n\\r\\n  #validateStart() {\\r\\n    if (this.#componentsInQueue.size < 1) {\\r\\n      throw new Error('You must add at least one component to an AppFactory')\\r\\n    }\\r\\n\\r\\n    if (isBlank(this.#rootComponent)) {\\r\\n      throw new Error('You must add one root component to an AppFactory')\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #validateOneMount() {\\r\\n    if (this.#mounted === true) {\\r\\n      throw new Error('You can only mount an AppFactory instance once')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Registers a consumer app definition, to be mounted by the parent `bbVue.rootApp` instance as a CRM\\r\\n * @param {consumerAppDef} appDef The definition of a consumer app\\r\\n * @returns {function} Lookup function to retrieve consumer app instance\\r\\n */\\r\\nfunction addConsumerRootDef(ns, appDef) {\\r\\n  try {\\r\\n    // Lookup rootApp ctx\\r\\n    let rootApp = RootApp.component()\\r\\n\\r\\n    // Hook in orphan protection if requested\\r\\n    // BUGGED: ns race conditions due to repeated ns.getRunningScript() calls\\r\\n    /* if (appDef.__config.shutdownWithPid || appDef.__config.shutdownRootWithPid) {\\r\\n      // Watch pid on interval\\r\\n      const pidWatchRate = 500\\r\\n      const pidWatch = setInterval(async () => {\\r\\n        // Attempt to find running PID\\r\\n        let pid = ns?.getRunningScript()?.pid\\r\\n\\r\\n        // Eject if pid is healthy\\r\\n        if (pid > 0) return\\r\\n\\r\\n        // Try to shutdown either AppRoot or consumer root as needed\\r\\n        try {\\r\\n          if (appDef.__config.shutdownRootWithPid) {\\r\\n            await rootApp.rootShutdown()\\r\\n          } else {\\r\\n            await rootApp.unmountConsumerRootByUuid(appDef.__uuid)\\r\\n          }\\r\\n        } catch (error) {\\r\\n          ns.tprint(\\r\\n            `ERROR: bb-vue app \\\"${appDef.name}\\\" is orphaned but ending process failed:\\\\n${toJson(\\r\\n              error\\r\\n            )}`\\r\\n          )\\r\\n        } finally {\\r\\n          // Whatever the result of the cleanup, end the interval\\r\\n          clearInterval(pidWatch)\\r\\n        }\\r\\n      }, pidWatchRate)\\r\\n    } */\\r\\n\\r\\n    // Add appDef to rootApp and return app handle to consumer\\r\\n    return rootApp.addConsumerRootDef(appDef)\\r\\n  } catch (error) {\\r\\n    throw new Error(\\r\\n      `rootApp cannot be located, or issue mounting consumer appDef:\\\\n${toJson(error)}`\\r\\n    )\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainer } from '/bitpacks/bb-vue/misc-examples/svgchart-ui.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 60\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 20\\r\\n\\r\\n  const textSize = 5.0\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 100\\r\\n  const conHeight = 80\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n  ns.atExit(function () {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  })\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n\\r\\n  //I KNOW this is where the object is rendered/created (lines below), but I have no freakin' idea how to get it to render to another\\r\\n  //object/window in HTML/CSS/VUE or whatever.  I know it's probably as simple as calling the 'container' from this script, but I'm at a loss.\\r\\n\\r\\n  //The below line is where the graph is being 'dropped'.  Default is the overview hooks.  Would like to render to a moveable window.\\r\\n  const dropPage = doc.getElementById(SVGChartContainer)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n\\r\\n  //Uncomment the below line to have the container connect to the above constant.  By default it's set to the overview hooks.\\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('test', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('test', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('test', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n  //First argument is the ticker that it targets.  Would need to pass this off to the window wrapper?  I guess?\\r\\n  var ticker = ns.args[0]\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.tprint('Uh oh NAN:')\\r\\n            ns.tprint(moneyList)\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n        }\\r\\n\\r\\n        topText.innerHTML = 'BULLISH'\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = ticker + ': ' + ns.nFormat(ns.stock.getPrice(ticker), '$0.00a')\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'BEARISH'\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n      }\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.1'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-builder.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Keys, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class VueLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Vue module.\\r\\n   * @returns {Promise<Vue>} Vue constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = Vue({ silent: true })\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import(\\r\\n      /* 'https://unpkg.com/vue@3.2.26/dist/vue.esm-browser.prod.js' */\\r\\n      'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.esm-browser.js'\\r\\n    )\\r\\n\\r\\n    win[Keys.vueModuleKey] = module\\r\\n\\r\\n    return module\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { WinStates, TrayItemTypes } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, doc, html, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ isCollapsed, shouldDisplay }\\\">\\r\\n      <transition-group name=\\\"appTrayItemFadeUp\\\" appear>\\r\\n        <bbv-app-tray-group key=\\\"actions\\\" tray-teleport />\\r\\n        <template v-for=\\\"group in trayItems\\\" :key=\\\"group.root.uuid\\\">\\r\\n          <bbv-app-tray-group :app-title=\\\"group.root.title\\\">\\r\\n            <template :key=\\\"win.uuid\\\" v-for=\\\"win in group.winMounts\\\">\\r\\n              <bbv-button\\r\\n                :title=\\\"win.title\\\"\\r\\n                @click=\\\"toggleTrayItem(win)\\\"\\r\\n                :class=\\\"{ isOpen: win.winState == WinStates.open }\\\"\\r\\n              >\\r\\n                {{ win.title }}\\r\\n              </bbv-button>\\r\\n            </template>\\r\\n          </bbv-app-tray-group>\\r\\n        </template>\\r\\n      </transition-group>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  data() {\\r\\n    return {\\r\\n      WinStates,\\r\\n      TrayItemTypes,\\r\\n      isCollapsed: false,\\r\\n      isHidden: false,\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    trayItems() {\\r\\n      let winMountTrayItems = this.internals.store.winMounts\\r\\n        .map((winMount) => this.buildTrayItemFor(TrayItemTypes.winMount, winMount))\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let consumerRootMountTrayItems = this.internals.store.consumerRootMounts\\r\\n        .map((consumerRootMount) =>\\r\\n          this.buildTrayItemFor(TrayItemTypes.consumerRootMount, consumerRootMount)\\r\\n        )\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let winsByRoots = consumerRootMountTrayItems.reduce((acc, root) => {\\r\\n        let ownedWins = winMountTrayItems.filter((x) => x.ownerUuid == root.uuid)\\r\\n        if (ownedWins.length) {\\r\\n          acc.push({ root, winMounts: ownedWins })\\r\\n        }\\r\\n        return acc\\r\\n      }, [])\\r\\n\\r\\n      return winsByRoots\\r\\n    },\\r\\n    shouldDisplay() {\\r\\n      return this.isHidden === false && this.trayItems.length\\r\\n    },\\r\\n  },\\r\\n  mounted() {\\r\\n    this.watchGameDock()\\r\\n  },\\r\\n  methods: {\\r\\n    watchGameDock() {\\r\\n      const { useIntervalFn } = VueUse()\\r\\n      useIntervalFn(() => {\\r\\n        let gameDockSelector = doc.querySelector('.MuiDrawer-root.MuiDrawer-docked')\\r\\n        let width = gameDockSelector?.clientWidth\\r\\n        if (!width) {\\r\\n          this.isHidden = true\\r\\n          return\\r\\n        }\\r\\n        this.isHidden = false\\r\\n        if (width < 240) {\\r\\n          this.isCollapsed = true\\r\\n        } else {\\r\\n          this.isCollapsed = false\\r\\n        }\\r\\n      }, 400)\\r\\n    },\\r\\n    toggleTrayItem(trayItem) {\\r\\n      if (trayItem.winState != WinStates.open) {\\r\\n        trayItem.winMount.open()\\r\\n      } else {\\r\\n        trayItem.winMount.close()\\r\\n      }\\r\\n    },\\r\\n    buildTrayItemFor(trayItemType, trayCompatibleItem) {\\r\\n      const winTrayItem = (winMount) => {\\r\\n        const ownerOpts = winMount.owner.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.winMount,\\r\\n          uuid: winMount.uuid,\\r\\n          title: winMount.title,\\r\\n          ownerUuid: ownerOpts.__uuid,\\r\\n          winState: winMount.winState,\\r\\n          winMount: winMount,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      const rootTrayItem = (consumerRootMount) => {\\r\\n        const opts = consumerRootMount.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.consumerRootMount,\\r\\n          uuid: opts.__uuid,\\r\\n          title: opts.name,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      let trayItem\\r\\n      switch (trayItemType) {\\r\\n        case TrayItemTypes.winMount:\\r\\n          trayItem = winTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n        case TrayItemTypes.consumerRootMount:\\r\\n          trayItem = rootTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n      }\\r\\n\\r\\n      if (trayItem.kind == TrayItemTypes.winMount) {\\r\\n        if (trayItem.winMount.trayHide !== false) {\\r\\n          return null\\r\\n        }\\r\\n        if (trayItem.winMount.trayTitle) {\\r\\n          trayItem.title = trayItem.winMount.trayTitle\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return trayItem\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include typo-basic;\\r\\n\\r\\n      pointer-events: auto;\\r\\n      position: absolute;\\r\\n      z-index: 1400;\\r\\n\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n\\r\\n      display: flex;\\r\\n      align-items: stretch;\\r\\n      padding: 10px;\\r\\n      width: 249px;\\r\\n      height: 62px;\\r\\n      clip-path: inset(-60px 0 0 0);\\r\\n\\r\\n      box-shadow: inset 0px 0px 20px 0px var(--bbvBoxShadowColor1);\\r\\n      border-top: 1px solid var(--bbvBorderColor);\\r\\n      background-color: var(--bbvAppTrayBgColor);\\r\\n      transition: width 0.2s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.4s ease, transform 0.4s ease;\\r\\n\\r\\n      &:hover {\\r\\n        width: 100%;\\r\\n        z-index: 1600;\\r\\n\\r\\n        &.isCollapsed {\\r\\n          width: 100%;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        width: 57px;\\r\\n      }\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        transform: translateY(100px);\\r\\n        opacity: 0;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-active,\\r\\n      .appTrayItemFadeUp-leave-active {\\r\\n        transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-from,\\r\\n      .appTrayItemFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(50px);\\r\\n        transform-origin: left center;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-tabs',\\r\\n  template: html` <span>__CMP_NAME__</span> `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win-manager',\\r\\n  inject: ['internals'],\\r\\n  template: `<!-- __CMP_NAME__ -->`,\\r\\n  data() {\\r\\n    return {\\r\\n      baseStackingIndex: 1510,\\r\\n      recentlyActiveWinMounts: [],\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.internals.winManager = this\\r\\n  },\\r\\n  methods: {\\r\\n    addWin(winMount) {\\r\\n      this.internals.store.winMounts.push(winMount)\\r\\n    },\\r\\n    removeWin(winMount) {\\r\\n      this.scrubRecentWinMountActivity(winMount)\\r\\n      this.internals.store.winMounts = this.internals.store.winMounts.filter((x) => {\\r\\n        return x.uuid != winMount.uuid\\r\\n      })\\r\\n    },\\r\\n    logRecentWinMountActivity(winMount) {\\r\\n      if (this.recentlyActiveWinMounts[0] == winMount) return\\r\\n      this.recentlyActiveWinMounts = [winMount, ...this.recentlyActiveWinMounts.slice(0, 4)]\\r\\n    },\\r\\n    scrubRecentWinMountActivity(winMount) {\\r\\n      this.recentlyActiveWinMounts = this.recentlyActiveWinMounts.filter((x) => x !== winMount)\\r\\n    },\\r\\n    getRecommendedPosition(winMount) {\\r\\n      const rootOffset = { x: 295, y: 30 }\\r\\n      const standardOffset = { x: 30, y: 60 }\\r\\n\\r\\n      // const prevOpenedWinMounts = this.internals.store.winMounts.filter((x) => x.hasOpened === true)\\r\\n      let curOffset = rootOffset\\r\\n      let targetWinMount = this.recentlyActiveWinMounts[1]\\r\\n      if (targetWinMount && targetWinMount.winState === WinStates.open) curOffset = standardOffset\\r\\n      if (!targetWinMount) targetWinMount = winMount\\r\\n\\r\\n      return {\\r\\n        x: parseInt(targetWinMount.style.left ?? 0) + curOffset.x,\\r\\n        y: parseInt(targetWinMount.style.top ?? 0) + curOffset.y,\\r\\n      }\\r\\n    },\\r\\n    bringToFront(winMount) {\\r\\n      let otherWins = this.internals.store.winMounts.filter((x) => winMount.uuid != x.uuid)\\r\\n      this.logRecentWinMountActivity(winMount)\\r\\n      winMount.stackingIndex = this.baseStackingIndex + otherWins.length\\r\\n      let sortedOtherWins = [...otherWins].sort((a, b) => a.stackingIndex - b.stackingIndex)\\r\\n      sortedOtherWins.forEach((x, i) => (x.stackingIndex = this.baseStackingIndex + i))\\r\\n    },\\r\\n    async closeAllWinsByCrmUuid(crmUuid) {\\r\\n      return new Promise((resolve) => {\\r\\n        this.internals.store.winMounts.forEach((winMount) => {\\r\\n          if (winMount.owner.$options.__uuid == crmUuid) {\\r\\n            winMount.close()\\r\\n          }\\r\\n        })\\r\\n        setTimeout(() => {\\r\\n          resolve()\\r\\n        }, 500)\\r\\n      })\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/4-complex-and-fun.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-json-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ fill: fill !== false, wrap: wrap !== false }\\\">\\r\\n      <div class=\\\"json_inner\\\">{{ toJson(data) }}</div>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {},\\r\\n    },\\r\\n    fill: {\\r\\n      default: false,\\r\\n    },\\r\\n    wrap: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      &.fill {\\r\\n        height: 100%;\\r\\n\\r\\n        .json_inner {\\r\\n          height: 100%;\\r\\n          max-height: unset;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.wrap {\\r\\n        .json_inner {\\r\\n          white-space: pre-wrap;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .json_inner {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 10px 5px;\\r\\n        width: 100%;\\r\\n        max-height: 300px;\\r\\n        overflow: auto;\\r\\n        white-space: pre;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-radius: 5px;\\r\\n        border-top-left-radius: 0;\\r\\n        border-bottom-left-radius: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app' },\\r\\n      rootComponent: ChartContainer,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainer = 'svgChartContainer'\\r\\n\\r\\nconst ChartContainer = {\\r\\n  name: 'svg-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"SVG Chart\\\" no-pad start-height=\\\"80%\\\" start-width=\\\"80%\\\">\\r\\n      <div v-once id=\\\"${SVGChartContainer}\\\" />\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  computed: {},\\r\\n\\r\\n  watch: {},\\r\\n\\r\\n  mounted() {},\\r\\n\\r\\n  methods: {},\\r\\n\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @see: Learn more about Vue here: https://v3.vuejs.org/\\r\\n * @see: Learn more about Sass here: https://sass-lang.com/\\r\\n * @see: Learn more about bb-vue here: https://github.com/smolgumball/bb-vue\\r\\n */\\r\\n\\r\\n// Start with a single import from the bb-vue library\\r\\nimport AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n/**\\r\\n * These functions are used to enable nicer syntax highlighting of HTML/CSS in VSCode.\\r\\n * Specifically the `prettier - code formatter`, `es6-string-css` and `es6-string-html`\\r\\n * extensions can be used.You can safely remove these imports, as long as you remove references to them below.\\r\\n **/\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// Note the standard BitBurner function signature here.\\r\\n// Always start your bb-vue apps from standard BitBurner scripts since you will\\r\\n// need to pass a valid NS instance to the AppFactory constructor!\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  // Wrap your AppFactory usage with try/catch for better error messages\\r\\n  try {\\r\\n    const myAppFactory = new AppFactory(ns)\\r\\n    const myAppHandleFn = await myAppFactory.mount({\\r\\n      // An app ID is always required\\r\\n      config: { id: 'my-first-app' },\\r\\n\\r\\n      // Additional components are optional.\\r\\n      // Here, we're adding just one extra\\r\\n      components: [MyJsonComponent],\\r\\n\\r\\n      // A root component is always required\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n\\r\\n    // You can retrieve a reference to your root component\\r\\n    // by running the function returned from mount()\\r\\n    console.debug(myAppHandleFn())\\r\\n  } catch (error) {\\r\\n    // In case something goes wrong, log it out and halt the program\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  // Every component needs a unique name\\r\\n  name: 'my-first-root-component',\\r\\n\\r\\n  // Here, we \\\"inject\\\" a helper function provided by the bb-vue library.\\r\\n  // Running this function shuts down your entire app. It is wired to a button\\r\\n  // click at the bottom of the bbv-win component, in the #actions slot!\\r\\n  inject: ['appShutdown'],\\r\\n\\r\\n  // Your template is where a lot of the magic happens. Render DOM elements here,\\r\\n  // and use various Vue-specific techniques like `v-for`, @event binding, etc.\\r\\n  // Learn more about Vue here: https://v3.vuejs.org/\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"Hello from bb-vue!\\\">\\r\\n      <p>Render your own components:</p>\\r\\n      <my-json-display :display=\\\"myData\\\" />\\r\\n\\r\\n      <p>Or use the built-in components:</p>\\r\\n      <bbv-json-display :data=\\\"jsonData\\\" />\\r\\n\\r\\n      <p>\\r\\n        Update your app's data store: <strong>{{ myData.ezCounter }}</strong><br />\\r\\n        <bbv-button @click=\\\"myData.ezCounter++\\\">Add 1</bbv-button>\\r\\n      </p>\\r\\n\\r\\n      <template #actions>\\r\\n        Or shut everything down:\\r\\n        <bbv-button @click=\\\"appShutdown\\\">Shutdown App</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  // The data function tells Vue what kind of reactive data you'd like to use.\\r\\n  // Changing these values from inside or outside the component will cause the\\r\\n  // component to update automatically! Learn more about Vue here: https://v3.vuejs.org/\\r\\n  data() {\\r\\n    return {\\r\\n      myData: { 'bb-vue-is': 'easy to use!', ezCounter: 0 },\\r\\n      jsonData: {\\r\\n        'bb-vue-components': 'NICE.exe',\\r\\n        otherFeatures: ['SCSS support', 'App tray', 'NetScript communication', '...and more!'],\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // The scss key is where you define the styles for your component.\\r\\n  scss: css`\\r\\n    /*\\r\\n      You can reference your component name with __CMP_NAME__and it\\r\\n      will be replaced at startup. This happens in both templates and style blocks!\\r\\n    */\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n\\r\\n        /*\\r\\n          Have you noticed we're writing SCSS? bb-vue supports Sass 0.11.1\\r\\n          through the sass.js tool; a bit outdated now, but good enough for some\\r\\n          dank BitBurner components. Learn more about sass.js here:\\r\\n          https://github.com/medialize/sass.js/#sassjs\\r\\n        */\\r\\n        strong {\\r\\n          font-size: 13px;\\r\\n          padding: 3px 6px 1px 6px;\\r\\n          display: inline-block;\\r\\n          border-radius: 5px;\\r\\n\\r\\n          /*\\r\\n            You can use the provided CSS theming variables to color your elements.\\r\\n            Find all of them on the <body> tag of your BitBurner debug / devtools console.\\r\\n          */\\r\\n          color: var(--bbvHackerDarkFgColor);\\r\\n          background-color: var(--bbvHackerDarkBgColor);\\r\\n        }\\r\\n\\r\\n        button {\\r\\n          margin-top: 10px;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\n// Here's a simple supporting component that displays data passed to it.\\r\\n// It converts the data to a JSON string and then display it in the whitespace\\r\\n// sensitive HTML tag <pre>\\r\\nconst MyJsonComponent = {\\r\\n  name: 'my-json-display',\\r\\n  props: {\\r\\n    display: {\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <pre><code>{{ toJson(display) }}</code></pre>\\r\\n    </div>\\r\\n  `,\\r\\n  methods: {\\r\\n    toJson(value) {\\r\\n      return JSON.stringify(value, null, '  ')\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      background-color: #0000008c;\\r\\n      color: lawngreen;\\r\\n      padding: 10px 5px;\\r\\n\\r\\n      pre,\\r\\n      code {\\r\\n        margin: 0;\\r\\n        font-family: inherit;\\r\\n        overflow: auto;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getGlobal, Keys, setGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class MittLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Mitt module.\\r\\n   * @returns {Promise<{ createBus: Function }>} Mitt constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = getGlobal(Keys.mittModuleKey)\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import('https://unpkg.com/mitt@3.0.0/dist/mitt.mjs')\\r\\n    let moduleWrapper = { createBus: module.default }\\r\\n\\r\\n    setGlobal(Keys.mittModuleKey, moduleWrapper)\\r\\n\\r\\n    return moduleWrapper\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html, Keys, Mitt, RootApp, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport AppRootStyles from '/bitpacks/bb-vue/components/internal/AppRoot.Styles.js';\\r\\nimport ConsumerRoot from '/bitpacks/bb-vue/components/internal/ConsumerRoot.js';\\r\\nimport CssManager from '/bitpacks/bb-vue/components/internal/CssManager.js';\\r\\nimport WinManager from '/bitpacks/bb-vue/components/internal/WinManager.js';\\r\\nimport AppTray from '/bitpacks/bb-vue/components/internal/AppTray.js';\\r\\nimport AppTrayGroup from '/bitpacks/bb-vue/components/internal/AppTrayGroup.js';\\r\\nimport Win from '/bitpacks/bb-vue/components/internal/Win.js';\\r\\n\\r\\nimport Button from '/bitpacks/bb-vue/components/Button.js';\\r\\nimport JsonDisplay from '/bitpacks/bb-vue/components/JsonDisplay.js';\\r\\nimport Tabs from '/bitpacks/bb-vue/components/Tabs.js';\\r\\nimport ObjectDisplay from '/bitpacks/bb-vue/components/ObjectDisplay.js';\\r\\nimport LogDisplay from '/bitpacks/bb-vue/components/LogDisplay.js';\\r\\n\\r\\nexport const ComponentLibrary = [\\r\\n  ConsumerRoot,\\r\\n  CssManager,\\r\\n  Win,\\r\\n  WinManager,\\r\\n  AppTray,\\r\\n  AppTrayGroup,\\r\\n  Button,\\r\\n  JsonDisplay,\\r\\n  ObjectDisplay,\\r\\n  LogDisplay,\\r\\n  Tabs,\\r\\n]\\r\\n\\r\\nconst rootShutdownTimeout = 2000\\r\\nexport default {\\r\\n  __libraryRoot: true,\\r\\n  name: 'bbv-app-root',\\r\\n  template: html`\\r\\n    <transition name=\\\"rootAppIntro\\\" appear>\\r\\n      <main class=\\\"__CMP_NAME__\\\" bbv-container v-if=\\\"depsLoaded\\\">\\r\\n        <transition-group name=\\\"consumerRootIntro\\\" appear>\\r\\n          <bbv-consumer-root\\r\\n            v-for=\\\"def in consumerRootDefs\\\"\\r\\n            :key=\\\"def.__uuid\\\"\\r\\n            :id=\\\"def.__uuid\\\"\\r\\n            :consumer-root-def=\\\"def\\\"\\r\\n            @consumer-root-mounted=\\\"mountConsumerRoot\\\"\\r\\n            @consumer-root-unmount-requested=\\\"unmountConsumerRootByUuid\\\"\\r\\n            @root-shutdown-requested=\\\"rootShutdown\\\"\\r\\n          />\\r\\n        </transition-group>\\r\\n        <bbv-css-manager :consumer-root-defs=\\\"consumerRootDefs\\\" />\\r\\n        <bbv-win-manager />\\r\\n        <bbv-app-tray />\\r\\n      </main>\\r\\n    </transition>\\r\\n  `,\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n    return {\\r\\n      depsLoaded: false,\\r\\n      hasSeenCrms: false,\\r\\n      rootShutdownTimeoutFn: null,\\r\\n      internals: {\\r\\n        bus: bus,\\r\\n        send: bus.emit,\\r\\n        listen: bus.on,\\r\\n        store: {\\r\\n          consumerRootDefs: [],\\r\\n          consumerRootMounts: [],\\r\\n          winMounts: [],\\r\\n        },\\r\\n        winManager: null,\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.loadDeps()\\r\\n  },\\r\\n  provide() {\\r\\n    return this.$data\\r\\n  },\\r\\n  computed: {\\r\\n    isReady() {\\r\\n      return this.internals.winManager\\r\\n    },\\r\\n    consumerRootDefs() {\\r\\n      return this.isReady ? this.allCrds : []\\r\\n    },\\r\\n    allCrds() {\\r\\n      return this.internals.store.consumerRootDefs\\r\\n    },\\r\\n    allCrms() {\\r\\n      return this.internals.store.consumerRootMounts\\r\\n    },\\r\\n  },\\r\\n  watch: {\\r\\n    /**\\r\\n     * Watch for CRMs. When seen some, notify AppRoot that some have\\r\\n     * been added. Wait for them to go away. Once they are gone, do a self\\r\\n     * cleanup after `rootShutdownTimeout` ms. Shutdown timeout can be\\r\\n     * cancelled by new CRM additions.\\r\\n     */\\r\\n    'internals.store.consumerRootMounts': {\\r\\n      handler(newVal) {\\r\\n        // Ensure AppRoot knows CRMs have been seen added at some point\\r\\n        if (this.hasSeenCrms !== true && newVal?.length >= 1) {\\r\\n          this.hasSeenCrms = true\\r\\n        }\\r\\n\\r\\n        // If a CRM is removed, if it was the last, and if AppRoot has seen CRMs before\\r\\n        if (this.hasSeenCrms === true && newVal?.length === 0) {\\r\\n          if (this.rootShutdownTimeoutFn === null) {\\r\\n            // Create a shutdown timeout func to end the entire RootApp\\r\\n            this.rootShutdownTimeoutFn = setTimeout(() => {\\r\\n              console.debug('bb-vue: AppRoot cannot find any CRMs and is shutting down')\\r\\n              this.rootShutdown()\\r\\n            }, rootShutdownTimeout)\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Clear an ongoing shutdown timeout if a new CRM is added\\r\\n        if (newVal?.length >= 1 && this.rootShutdownTimeoutFn !== null) {\\r\\n          clearTimeout(this.rootShutdownTimeoutFn)\\r\\n          this.rootShutdownTimeoutFn = null\\r\\n        }\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  methods: {\\r\\n    async loadDeps() {\\r\\n      // console.time('AppRoot:loadDeps')\\r\\n      if (!win[Keys.vueUseModuleKey]) {\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/shared@7.5.3/index.iife.min.js')\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/core@7.5.3/index.iife.min.js')\\r\\n      }\\r\\n      this.depsLoaded = true\\r\\n      // console.timeEnd('AppRoot:loadDeps')\\r\\n    },\\r\\n    addConsumerRootDef(consumerRootDef) {\\r\\n      const { markRaw } = Vue()\\r\\n      let rawConsumerRootDef = markRaw(consumerRootDef)\\r\\n      this.internals.store.consumerRootDefs = [\\r\\n        ...this.allCrds.filter((x) => {\\r\\n          return x.__uuid !== rawConsumerRootDef.__uuid\\r\\n        }),\\r\\n        rawConsumerRootDef,\\r\\n      ]\\r\\n\\r\\n      return () => this.findConsumerRootMount(rawConsumerRootDef.__uuid)\\r\\n    },\\r\\n    mountConsumerRoot(consumerRootMount) {\\r\\n      this.internals.store.consumerRootMounts = [\\r\\n        ...this.allCrms.filter((x) => {\\r\\n          return x.$options.__uuid !== consumerRootMount.$options.__uuid\\r\\n        }),\\r\\n        consumerRootMount,\\r\\n      ]\\r\\n    },\\r\\n    async unmountConsumerRootByUuid(crmUuid) {\\r\\n      await this.internals.winManager.closeAllWinsByCrmUuid(crmUuid)\\r\\n      this.internals.store.consumerRootMounts = this.allCrms.filter((x) => {\\r\\n        return x.$options.__uuid !== crmUuid\\r\\n      })\\r\\n      this.internals.store.consumerRootDefs = this.allCrds.filter((x) => {\\r\\n        return x.__uuid !== crmUuid\\r\\n      })\\r\\n    },\\r\\n    findConsumerRootMount(rootMountName) {\\r\\n      return (\\r\\n        this.allCrms.find((x) => {\\r\\n          return rootMountName == x.$options.__uuid\\r\\n        }) ?? null\\r\\n      )\\r\\n    },\\r\\n    async rootShutdown() {\\r\\n      for (const x of this.allCrms) {\\r\\n        await this.unmountConsumerRootByUuid(x.$options.__uuid)\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        RootApp.cleanup()\\r\\n      }, 50)\\r\\n    },\\r\\n  },\\r\\n  ...AppRootStyles,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const asciichart = function (exports) {\\r\\n  exports.black = '\\\\x1b[30m'\\r\\n  exports.red = '\\\\x1b[31m'\\r\\n  exports.green = '\\\\x1b[32m'\\r\\n  exports.yellow = '\\\\x1b[33m'\\r\\n  exports.blue = '\\\\x1b[34m'\\r\\n  exports.magenta = '\\\\x1b[35m'\\r\\n  exports.cyan = '\\\\x1b[36m'\\r\\n  exports.lightgray = '\\\\x1b[37m'\\r\\n  exports.default = '\\\\x1b[39m'\\r\\n  exports.darkgray = '\\\\x1b[90m'\\r\\n  exports.lightred = '\\\\x1b[91m'\\r\\n  exports.lightgreen = '\\\\x1b[92m'\\r\\n  exports.lightyellow = '\\\\x1b[93m'\\r\\n  exports.lightblue = '\\\\x1b[94m'\\r\\n  exports.lightmagenta = '\\\\x1b[95m'\\r\\n  exports.lightcyan = '\\\\x1b[96m'\\r\\n  exports.white = '\\\\x1b[97m'\\r\\n  exports.reset = '\\\\x1b[0m'\\r\\n\\r\\n  function colored(char, color) {\\r\\n    // do not color it if color is not specified\\r\\n    return color === undefined ? char : color + char + exports.reset\\r\\n  }\\r\\n\\r\\n  exports.colored = colored\\r\\n\\r\\n  exports.plot = function (series, cfg = undefined) {\\r\\n    // this function takes both one array and array of arrays\\r\\n    // if an array of numbers is passed it is transformed to\\r\\n    // an array of exactly one array with numbers\\r\\n    if (typeof series[0] == 'number') {\\r\\n      series = [series]\\r\\n    }\\r\\n\\r\\n    cfg = typeof cfg !== 'undefined' ? cfg : {}\\r\\n\\r\\n    let min = typeof cfg.min !== 'undefined' ? cfg.min : series[0][0]\\r\\n    let max = typeof cfg.max !== 'undefined' ? cfg.max : series[0][0]\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      for (let i = 0; i < series[j].length; i++) {\\r\\n        min = Math.min(min, series[j][i])\\r\\n        max = Math.max(max, series[j][i])\\r\\n      }\\r\\n    }\\r\\n\\r\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\r\\n    let range = Math.abs(max - min)\\r\\n    let offset = typeof cfg.offset !== 'undefined' ? cfg.offset : 3\\r\\n    let padding = typeof cfg.padding !== 'undefined' ? cfg.padding : '           '\\r\\n    let height = typeof cfg.height !== 'undefined' ? cfg.height : range\\r\\n    let colors = typeof cfg.colors !== 'undefined' ? cfg.colors : []\\r\\n    let ratio = range !== 0 ? height / range : 1\\r\\n    let min2 = Math.round(min * ratio)\\r\\n    let max2 = Math.round(max * ratio)\\r\\n    let rows = Math.abs(max2 - min2)\\r\\n    let width = 0\\r\\n    for (let i = 0; i < series.length; i++) {\\r\\n      width = Math.max(width, series[i].length)\\r\\n    }\\r\\n    width = width + offset\\r\\n    let symbols = typeof cfg.symbols !== 'undefined' ? cfg.symbols : defaultSymbols\\r\\n    let format =\\r\\n      typeof cfg.format !== 'undefined'\\r\\n        ? cfg.format\\r\\n        : function (x) {\\r\\n            return (padding + x.toFixed(2)).slice(-padding.length)\\r\\n          }\\r\\n\\r\\n    let result = new Array(rows + 1) // empty space\\r\\n    for (let i = 0; i <= rows; i++) {\\r\\n      result[i] = new Array(width)\\r\\n      for (let j = 0; j < width; j++) {\\r\\n        result[i][j] = ' '\\r\\n      }\\r\\n    }\\r\\n    for (let y = min2; y <= max2; ++y) {\\r\\n      // axis + labels\\r\\n      let label = format(rows > 0 ? max - ((y - min2) * range) / rows : y, y - min2)\\r\\n      result[y - min2][Math.max(offset - label.length, 0)] = label\\r\\n      result[y - min2][offset - 1] = y == 0 ? symbols[0] : symbols[1]\\r\\n    }\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      let currentColor = colors[j % colors.length]\\r\\n      let y0 = Math.round(series[j][0] * ratio) - min2\\r\\n      result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\r\\n\\r\\n      for (let x = 0; x < series[j].length - 1; x++) {\\r\\n        // plot the line\\r\\n        let y0 = Math.round(series[j][x + 0] * ratio) - min2\\r\\n        let y1 = Math.round(series[j][x + 1] * ratio) - min2\\r\\n        if (y0 == y1) {\\r\\n          result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\r\\n        } else {\\r\\n          result[rows - y1][x + offset] = colored(y0 > y1 ? symbols[5] : symbols[6], currentColor)\\r\\n          result[rows - y0][x + offset] = colored(y0 > y1 ? symbols[7] : symbols[8], currentColor)\\r\\n          let from = Math.min(y0, y1)\\r\\n          let to = Math.max(y0, y1)\\r\\n          for (let y = from + 1; y < to; y++) {\\r\\n            result[rows - y][x + offset] = colored(symbols[9], currentColor)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return result\\r\\n      .map(function (x) {\\r\\n        return x.join('')\\r\\n      })\\r\\n      .join('\\\\n')\\r\\n  }\\r\\n}\\r\\n\\r\\nglobalThis.asciichart = {}\\r\\nasciichart(globalThis.asciichart)\\r\\n\\r\\nexport default globalThis.asciichart\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray-group',\\r\\n  props: ['appTitle', 'trayTeleport'],\\r\\n  template: html`\\r\\n    <transition name=\\\"appTrayGroupFadeUp\\\" appear>\\r\\n      <div\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n        :class=\\\"{ trayTeleport: trayTeleport !== undefined }\\\"\\r\\n        :id=\\\"trayTeleport !== undefined ? 'app-tray' : undefined\\\"\\r\\n        :title=\\\"appTitle\\\"\\r\\n      >\\r\\n        <template v-if=\\\"appTitle\\\">\\r\\n          <div class=\\\"app_title\\\">{{ appTitle }}</div>\\r\\n        </template>\\r\\n        <slot />\\r\\n      </div>\\r\\n    </transition>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      display: flex;\\r\\n      padding: 5px;\\r\\n      background-color: var(--bbvWinTitlebarBgColor);\\r\\n      transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      position: relative;\\r\\n\\r\\n      &.trayTeleport {\\r\\n        background-color: transparent;\\r\\n        padding: 5px 0;\\r\\n\\r\\n        .bbv-button {\\r\\n          padding-bottom: 3px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.trayTeleport:empty {\\r\\n        clip-path: inset(0 100%);\\r\\n      }\\r\\n\\r\\n      &:hover {\\r\\n        .app_title {\\r\\n          opacity: 1;\\r\\n          transform: translateY(0) scale(1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &:not(:first-child) {\\r\\n        margin-left: 12px;\\r\\n      }\\r\\n\\r\\n      .app_title {\\r\\n        position: absolute;\\r\\n        bottom: calc(100% + 6px);\\r\\n        padding: 6px 12px;\\r\\n        font-size: 14px;\\r\\n        text-align: center;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        z-index: -1;\\r\\n        left: 5px;\\r\\n        transform: translateY(30px) scale(0.2);\\r\\n        transform-origin: bottom left;\\r\\n        border-radius: 2px;\\r\\n        box-shadow: 0px 0px 3px 0px var(--bbvBoxShadowColor2);\\r\\n        color: var(--bbvAppInnerFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\\r\\n      }\\r\\n\\r\\n      .bbv-button {\\r\\n        color: var(--bbvAppTrayFgColor);\\r\\n        padding: 6px 7px;\\r\\n        overflow: hidden;\\r\\n        white-space: nowrap;\\r\\n        border-bottom: 2px solid transparent;\\r\\n        transition: border-color 0.2s ease;\\r\\n        line-height: 1;\\r\\n\\r\\n        &.isOpen {\\r\\n          border-bottom-color: var(--bbvAppTrayFgColor);\\r\\n          background-color: var(--bbvButtonHoverBgColor);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .bbv-button + .bbv-button {\\r\\n        margin-left: 8px;\\r\\n      }\\r\\n\\r\\n      &.appTrayGroupFadeUp-enter-from,\\r\\n      &.appTrayGroupFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(75px);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\r\\n// prettier-ignore\\r\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\r\\n  try {\\r\\n    ns.disableLog('disableLog');\\r\\n    ns.disableLog('asleep');\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\r\\n      rootComponent: ChartContainerwallstreet,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n\\r\\n\\r\\n  // Listen for specific event\\r\\n  let autoTrader = false\\r\\n  let enableAutoTrader = false\\r\\n  let wantsShutdown = false\\r\\n  let buyMaxLongShares = false\\r\\n  let closeLongPosition = false\\r\\n  let closeShortPosition = false\\r\\n  let buyMaxShortShares = false\\r\\n  let sellAllShares = false\\r\\n  let quickStrangle = false\\r\\n  let longHedge = false\\r\\n  let shortHedge = false\\r\\n  let splitPlay = false\\r\\n  let stockCrawler = false\\r\\n\\r\\n  //Ticker Chart Storage\\r\\n  let loadECP = false\\r\\n  let loadMGCP = false\\r\\n  let loadBLD = false\\r\\n  let loadCLRK = false\\r\\n  let loadOMTK = false\\r\\n  let loadFSIG = false\\r\\n  let loadKGI = false\\r\\n  let loadFLCM = false\\r\\n  let loadSTM = false\\r\\n  let loadDCOMM = false\\r\\n  let loadHLS = false\\r\\n  let loadVITA = false\\r\\n  let loadICRS = false\\r\\n  let loadUNV = false\\r\\n  let loadAERO = false\\r\\n  let loadOMN = false\\r\\n  let loadSLRS = false\\r\\n  let loadGPH = false\\r\\n  let loadNVMD = false\\r\\n  let loadWDS = false\\r\\n  let loadLXO = false\\r\\n  let loadRHOC = false\\r\\n  let loadAPHE = false\\r\\n  let loadSYSC = false\\r\\n  let loadCTK = false\\r\\n  let loadNTLK = false\\r\\n  let loadOMGA = false\\r\\n  let loadFNS = false\\r\\n  let loadJGN = false\\r\\n  let loadSGC = false\\r\\n  let loadCTYS = false\\r\\n  let loadMDYN = false\\r\\n  let loadTITN = false\\r\\n  //End of Ticker Chart Storage\\r\\n\\r\\n  let bus = Mitt().createBus()\\r\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\r\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\r\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\r\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\r\\n  bus.on('closeLong', () => (closeLongPosition = true))\\r\\n  bus.on('closeShort', () => (closeShortPosition = true))\\r\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\r\\n  bus.on('quickPlay', () => (quickStrangle = true))\\r\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\r\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\r\\n  bus.on('quickSplitPlay', () => (splitPlay = true))\\r\\n  bus.on('stockCrawler', () => (stockCrawler = true))\\r\\n\\r\\n  //Ticker Chart Bus Triggers\\r\\n  bus.on('loadECP', () => (loadECP = true))\\r\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\r\\n  bus.on('loadBLD', () => (loadBLD = true))\\r\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\r\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\r\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\r\\n  bus.on('loadKGI', () => (loadKGI = true))\\r\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\r\\n  bus.on('loadSTM', () => (loadSTM = true))\\r\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\r\\n  bus.on('loadHLS', () => (loadHLS = true))\\r\\n  bus.on('loadVITA', () => (loadVITA = true))\\r\\n  bus.on('loadICRS', () => (loadICRS = true))\\r\\n  bus.on('loadUNV', () => (loadUNV = true))\\r\\n  bus.on('loadAERO', () => (loadAERO = true))\\r\\n  bus.on('loadOMN', () => (loadOMN = true))\\r\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\r\\n  bus.on('loadGPH', () => (loadGPH = true))\\r\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\r\\n  bus.on('loadWDS', () => (loadWDS = true))\\r\\n  bus.on('loadLXO', () => (loadLXO = true))\\r\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\r\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\r\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\r\\n  bus.on('loadCTK', () => (loadCTK = true))\\r\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\r\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\r\\n  bus.on('loadFNS', () => (loadFNS = true))\\r\\n  bus.on('loadJGN', () => (loadJGN = true))\\r\\n  bus.on('loadSGC', () => (loadSGC = true))\\r\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\r\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\r\\n  bus.on('loadTITN', () => (loadTITN = true))\\r\\n  //End of Ticker Chart Bus Triggers\\r\\n  setGlobal('tickerBus', bus)\\r\\n\\r\\n  // Instead of closing, let's keep this running\\r\\n\\r\\n  while (wantsShutdown == false) {\\r\\n\\r\\n    //init chart loading triggers\\r\\n    if (loadECP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ECP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadECP = false;\\r\\n    }\\r\\n    if (loadMGCP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MGCP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMGCP = false;\\r\\n    }\\r\\n    if (loadBLD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"BLD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadBLD = false;\\r\\n    }\\r\\n    if (loadCLRK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CLRK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCLRK = false;\\r\\n    }\\r\\n    if (loadOMTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMTK = false;\\r\\n    }\\r\\n    if (loadFSIG == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FSIG\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFSIG = false;\\r\\n    }\\r\\n    if (loadKGI == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"KGI\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadKGI = false;\\r\\n    }\\r\\n    if (loadFLCM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FLCM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFLCM = false;\\r\\n    }\\r\\n    if (loadSTM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"STM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSTM = false;\\r\\n    }\\r\\n    if (loadDCOMM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"DCOMM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadDCOMM = false;\\r\\n    }\\r\\n    if (loadHLS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"HLS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadHLS = false;\\r\\n    }\\r\\n    if (loadVITA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"VITA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadVITA = false;\\r\\n    }\\r\\n    if (loadICRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ICRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadICRS = false;\\r\\n    }\\r\\n    if (loadUNV == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"UNV\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadUVN = false;\\r\\n    }\\r\\n    if (loadAERO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"AERO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAERO = false;\\r\\n    }\\r\\n    if (loadOMN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMN = false;\\r\\n    }\\r\\n    if (loadSLRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SLRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSLRS = false;\\r\\n    }\\r\\n    if (loadGPH == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"GPH\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadGPH = false;\\r\\n    }\\r\\n    if (loadNVMD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NVMD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNVMD = false;\\r\\n    }\\r\\n    if (loadWDS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"WDS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadWDS = false;\\r\\n    }\\r\\n    if (loadLXO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"LXO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadLXO = false;\\r\\n    }\\r\\n    if (loadRHOC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"RHOC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadRHOC = false;\\r\\n    }\\r\\n    if (loadAPHE == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"APHE\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAPHE = false;\\r\\n    }\\r\\n    if (loadSYSC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SYSC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSYSC = false;\\r\\n    }\\r\\n    if (loadCTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTK = false;\\r\\n    }\\r\\n    if (loadNTLK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NTLK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNTLK = false;\\r\\n    }\\r\\n    if (loadOMGA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMGA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMGA = false;\\r\\n    }\\r\\n    if (loadFNS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FNS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFNS = false;\\r\\n    }\\r\\n    if (loadJGN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"JGN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadJGN = false;\\r\\n    }\\r\\n    if (loadSGC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SGC\\\")\\r\\n\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSGC = false;\\r\\n    }\\r\\n    if (loadCTYS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTYS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTYS = false;\\r\\n    }\\r\\n    if (loadMDYN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MDYN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMDYN = false;\\r\\n    }\\r\\n    if (loadTITN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"TITN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadTITN = false;\\r\\n    }\\r\\n\\r\\n //Stock Crawler Module\\r\\n    if (stockCrawler == true) {\\r\\n      ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\r\\n      var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\r\\n        for (const target of market) {\\r\\n        var tvol = ns.stock.getVolatility(target);\\r\\n        var tfor = ns.stock.getForecast(target);\\r\\n          if (tvol > 0.01 && tfor > 0.6) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n          if (tvol > 0.01 && tfor < 0.4) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n        await ns.asleep(100);\\r\\n      stockCrawler = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //failsafe exit condition\\r\\n    if (wantsShutdown == true) {\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n    if(ns.peek(3) != \\\"NULL PORT DATA\\\") {\\r\\n    let loadedticker = ns.peek(3);\\r\\n    let position = ns.stock.getPosition(loadedticker);\\r\\n\\r\\n    if (buyMaxLongShares == true) {\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxLongShares = false;\\r\\n\\r\\n    }\\r\\n    if (buyMaxShortShares == true) {\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxShortShares = false;\\r\\n\\r\\n    }\\r\\n    if (sellAllShares == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED **ALL** POSITIONS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      sellAllShares = false;\\r\\n\\r\\n    }\\r\\n    if (closeLongPosition == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeLongPosition = false;\\r\\n\\r\\n    }\\r\\n    if (closeShortPosition == true) {\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeShortPosition = false;\\r\\n\\r\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] > '1' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] > '1' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxLongShares = true;\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxShortShares = true;\\r\\n\\r\\n\\r\\n      //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxLongShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getAskPrice(loadedticker) * 1.05), \\\"LimitSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getBidPrice(loadedticker) * 0.90), \\\"StopSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxShortShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getAskPrice(loadedticker) * 0.95), \\\"LimitSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getBidPrice(loadedticker) * 1.10), \\\"StopSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (longHedge == true && position[0] == 0) {\\r\\n      ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      longHedge = false;\\r\\n\\r\\n    }\\r\\n    if (shortHedge == true && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      shortHedge = false;\\r\\n\\r\\n    }\\r\\n    if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      splitPlay = false;\\r\\n\\r\\n    }\\r\\n\\r\\n    //Auto-Trader button configuration.  Don't touch.\\r\\n\\r\\n    if (enableAutoTrader == true) {\\r\\n      let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\r\\n\\r\\n      if (autoTradeConfirm == true) {\\r\\n        ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = true;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n      if (autoTradeConfirm == false) {\\r\\n        ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = false;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n    }\\r\\n\\r\\n    await ns.asleep(500)\\r\\n\\r\\n  \\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\r\\nconst ChartContainerwallstreet = {\\r\\n  name: 'svg-chart-wallstreet',\\r\\n  inject: ['appShutdown',],\\r\\n  template: html`\\r\\n    <bbv-win\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      title=\\\"WSE Active Trader\\\"\\r\\n      no-pad\\r\\n      start-height=\\\"691px\\\"\\r\\n      start-width=\\\"539px\\\"\\r\\n    >\\r\\n \\r\\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\r\\n      <div>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      </div>\\r\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\r\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\r\\n      <div>\\r\\n      <button @click=\\\"quickStrangle\\\">QUICK STRANGLE</button>\\r\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\r\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\r\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      <details align=\\\"right\\\"><summary>EXTRA TOOLS</summary>\\r\\n      <div>\\r\\n      <button align=\\\"right\\\" @click=\\\"stockCrawler\\\">STOCK CRAWLER</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"\\\">SCALPER[SOON!]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"enableAutoTrade\\\">Enable/Disable Auto-Trader (BETA)</button>\\r\\n      </div>\\r\\n      </details>\\r\\n\\r\\n      <template #actions>\\r\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    shutdownAll() {\\r\\n      getGlobal('tickerBus').emit('wantsShutdown')\\r\\n      this.appShutdown()\\r\\n    },\\r\\n    buyMaxLong() {\\r\\n      getGlobal('tickerBus').emit('buyMaxLong')\\r\\n    },\\r\\n    buyMaxShort() {\\r\\n      getGlobal('tickerBus').emit('buyMaxShort')\\r\\n    },\\r\\n    closeAllPositions() {\\r\\n      getGlobal('tickerBus').emit('closeAllPositions')\\r\\n    },\\r\\n    sellMaxLong() {\\r\\n      getGlobal('tickerBus').emit('closeLong')\\r\\n    },\\r\\n    sellMaxShort() {\\r\\n      getGlobal('tickerBus').emit('closeShort')\\r\\n    },\\r\\n    enableAutoTrade() {\\r\\n      getGlobal('tickerBus').emit('autoTrade')\\r\\n    },\\r\\n    quickStrangle() {\\r\\n      getGlobal('tickerBus').emit('quickPlay')\\r\\n    },\\r\\n    quickSplit() {\\r\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\r\\n    },\\r\\n    longHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\r\\n    },\\r\\n    shortHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\r\\n    },\\r\\n    stockCrawler() {\\r\\n      getGlobal('tickerBus').emit('stockCrawler')\\r\\n    },\\r\\n    loadECP() {\\r\\n      getGlobal('tickerBus').emit('loadECP')\\r\\n    },\\r\\n    loadMGCP() {\\r\\n      getGlobal('tickerBus').emit('loadMGCP')\\r\\n    },\\r\\n    loadBLD() {\\r\\n      getGlobal('tickerBus').emit('loadBLD')\\r\\n    },\\r\\n    loadCLRK() {\\r\\n      getGlobal('tickerBus').emit('loadCLRK')\\r\\n    },\\r\\n    loadOMTK() {\\r\\n      getGlobal('tickerBus').emit('loadOMTK')\\r\\n    },\\r\\n    loadFSIG() {\\r\\n      getGlobal('tickerBus').emit('loadFSIG')\\r\\n    },\\r\\n    loadKGI() {\\r\\n      getGlobal('tickerBus').emit('loadKGI')\\r\\n    },\\r\\n    loadFLCM() {\\r\\n      getGlobal('tickerBus').emit('loadFLCM')\\r\\n    },\\r\\n    loadSTM() {\\r\\n      getGlobal('tickerBus').emit('loadSTM')\\r\\n    },\\r\\n    loadDCOMM() {\\r\\n      getGlobal('tickerBus').emit('loadDCOMM')\\r\\n    },\\r\\n    loadHLS() {\\r\\n      getGlobal('tickerBus').emit('loadHLS')\\r\\n    },\\r\\n    loadVITA() {\\r\\n      getGlobal('tickerBus').emit('loadVITA')\\r\\n    },\\r\\n    loadICRS() {\\r\\n      getGlobal('tickerBus').emit('loadICRS')\\r\\n    },\\r\\n    loadUNV() {\\r\\n      getGlobal('tickerBus').emit('loadUNV')\\r\\n    },\\r\\n    loadAERO() {\\r\\n      getGlobal('tickerBus').emit('loadAERO')\\r\\n    },\\r\\n    loadOMN() {\\r\\n      getGlobal('tickerBus').emit('loadOMN')\\r\\n    },\\r\\n    loadSLRS() {\\r\\n      getGlobal('tickerBus').emit('loadSLRS')\\r\\n    },\\r\\n    loadGPH() {\\r\\n      getGlobal('tickerBus').emit('loadGPH')\\r\\n    },\\r\\n    loadNVMD() {\\r\\n      getGlobal('tickerBus').emit('loadNVMD')\\r\\n    },\\r\\n    loadWDS() {\\r\\n      getGlobal('tickerBus').emit('loadWDS')\\r\\n    },\\r\\n    loadLXO() {\\r\\n      getGlobal('tickerBus').emit('loadLXO')\\r\\n    },\\r\\n    loadRHOC() {\\r\\n      getGlobal('tickerBus').emit('loadRHOC')\\r\\n    },\\r\\n    loadAPHE() {\\r\\n      getGlobal('tickerBus').emit('loadAPHE')\\r\\n    },\\r\\n    loadSYSC() {\\r\\n      getGlobal('tickerBus').emit('loadSYSC')\\r\\n    },\\r\\n    loadCTK() {\\r\\n      getGlobal('tickerBus').emit('loadCTK')\\r\\n    },\\r\\n    loadNTLK() {\\r\\n      getGlobal('tickerBus').emit('loadNTLK')\\r\\n    },\\r\\n    loadOMGA() {\\r\\n      getGlobal('tickerBus').emit('loadOMGA')\\r\\n    },\\r\\n    loadFNS() {\\r\\n      getGlobal('tickerBus').emit('loadFNS')\\r\\n    },\\r\\n    loadJGN() {\\r\\n      getGlobal('tickerBus').emit('loadJGN')\\r\\n    },\\r\\n    loadSGC() {\\r\\n      getGlobal('tickerBus').emit('loadSGC')\\r\\n    },\\r\\n    loadCTYS() {\\r\\n      getGlobal('tickerBus').emit('loadCTYS')\\r\\n    },\\r\\n    loadMDYN() {\\r\\n      getGlobal('tickerBus').emit('loadMDYN')\\r\\n    },\\r\\n    loadTITN() {\\r\\n      getGlobal('tickerBus').emit('loadTITN')\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f4269089-7211-47e8-ba07-f8285ea9480b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6733ba12-d754-409d-878d-ceec4b642bac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///289452bc-634c-4419-a7cf-163daca3a2e2\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///10042b83-0ac0-4fd7-a472-f53bc7dafd8f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///5fa1b1d9-6b3c-4718-af8f-26eaa00abfab\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///44734d10-322a-4289-973e-43ba496c9db8\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///cf042072-d883-4823-a2c6-5b524db3e53a\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c80cc2b7-32ed-4aef-a186-08d95e818549\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///50fa5a9c-48ad-461c-8a0b-8cfb553fd653\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b46e31bd-8210-4a52-9550-0f36be97d739\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///56440446-b477-4bef-b2a5-955fd8bc842a\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0e279641-5ef9-4b48-a081-e1b9bbd6911b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///db83ee49-da6f-44aa-a929-3b8c3c1b8076\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///b4fb9037-c476-403f-ad9b-3b8598d398dc\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///64a90fe5-9cef-404f-9bba-a5b69a1f1a8c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///bfbf10dc-d484-4f5b-8c8b-ac80fe6ef95d\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6200498f-f3a8-4c7a-9632-82e07f036e9d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///21bf6c5f-2a34-43c9-af61-7e37220cfe35\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a4b88b0d-0975-492e-a0d9-42fcb117f697\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///4436db7e-d51d-43eb-8a41-e48f7bdcfe61\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///f0eab529-e0b5-41d1-b025-2b7e88a5c8d1\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///0b68f26e-5fd3-411a-9812-a5fa10499077\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///984109b7-8cc0-45f1-a1a5-2fd3240e2395\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4a736528-e78e-4b72-9d0e-7b23c45a7a8d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///dc5f4bc0-30d6-4b8b-8c49-cc41ee8675fc\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///52507d58-557f-4030-b42d-3c01e49a9192\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///5c1f2a73-9b46-426c-92f8-71cd1ca6919f\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///47f6f722-cc73-429f-91ab-0d158f361b20\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///9376e750-eee0-4096-a409-bf8d248bb4f8\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5b3187bb-7a80-472a-ab68-820d65fd0873\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///f7a53e7c-901c-4de0-8172-ba61c60d3b51\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///d6918535-2f00-4742-b5d6-829303958de7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///2fac9b10-c97b-4b7e-bd34-af8f4cb5c5ff\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7de4b446-11e2-48e9-84f4-b1322589cabb\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///3aeb882e-3e77-4c0f-991d-ea71a633cf1f\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1cb626f5-399d-4f2d-8ccc-e40ba5bb28a3\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///0325437a-8332-449d-b1d9-37d7dd8bca2a\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///893ebdf0-9491-4c82-bd55-af10baad4334\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///ea1d25ca-b19e-42bc-ab91-d9d32ed7a563\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4921abec-2570-43b3-a848-0fbe86dd5f91\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///54b4c6cd-8cec-471b-af63-eca8eb9acd99\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///639527e6-975a-4841-baa8-85de6fc78988\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///46d78add-0cd0-48d3-b980-a1a099706747\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///70731fa8-77b3-4a94-a6f8-d99c204152e0\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"blob:file:///390408d1-5a95-4d89-9687-6ab3c9591448\",\"moduleSequenceNumber\":22737}],\"dependents\":[],\"ramUsage\":31.35,\"server\":\"home\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n  var ticker = ns.args[0];\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 300\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 10\\r\\n\\r\\n  const textSize = 2.5\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 80\\r\\n  const conHeight = 60\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n  await ns.clearPort(1)\\r\\n  await ns.clearPort(2)\\r\\n  await ns.writePort(3, ticker)\\r\\n\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n //Give the chart time to load.\\r\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n  \\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('LOADING VOLATILITY...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    var ticker = ns.args[0];\\r\\n    var position = ns.stock.getPosition(ticker)\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n        await ns.clearPort(1);\\r\\n        await ns.clearPort(2);\\r\\n        \\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n      await ns.clearPort(1)\\r\\n      await ns.clearPort(2)\\r\\n      await ns.writePort(1, (Math.max(...moneyList)))\\r\\n      await ns.writePort(2, (Math.min(...moneyList)))\\r\\n      await ns.writePort(3, ticker)\\r\\n        var fiveminavg = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.asleep(5000);\\r\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n\\r\\n        }\\r\\n        \\r\\n        topText.innerHTML = 'FORECAST: ' + Math.floor((ns.stock.getForecast(ns.sprintf(ticker))*100)) + '%' + ' || 5MIN HIGH: ' + ns.nFormat(ns.peek(1), '$0.00a') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+fiveminavg+' AVG)'\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'VOL: ' + ns.nFormat(ns.stock.getVolatility(ns.sprintf(ticker)), '0.00%') + ' || 5MIN LOW: ' + ns.nFormat(ns.peek(2), '$0.00a') + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n        \\r\\n      }\\r\\n\\r\\n\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n    await ns.clearPort(1);\\r\\n    await ns.clearPort(2);\\r\\n\\r\\n    if (ns.isRunning(\\\"wallstreet.js\\\", \\\"home\\\") == false) {\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.0'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n  \\r\\n}\\r\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":438}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\n// prettier-ignore\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\n\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\nexport async function main(ns) {\\n\\n\\n  try {\\n    ns.disableLog('disableLog');\\n    ns.disableLog('asleep');\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    await new AppFactory(ns).mount({\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\n      rootComponent: ChartContainerwallstreet,\\n    })\\n  } catch (error) {\\n    console.error(error)\\n    ns.tprint(error.toString())\\n    ns.exit()\\n  }\\n\\n\\n\\n  // Listen for specific event\\n  let autoTrader = false\\n  let enableAutoTrader = false\\n  let wantsShutdown = false\\n  let buyMaxLongShares = false\\n  let closeLongPosition = false\\n  let closeShortPosition = false\\n  let buyMaxShortShares = false\\n  let sellAllShares = false\\n  //let quickStrangle = false\\n  let longHedge = false\\n  let shortHedge = false\\n  let splitPlay = false\\n  //let stockCrawler = false\\n  let shortStrangle = false\\n  let longStrangle = false\\n\\n  //Ticker Chart Storage\\n  let loadECP = false\\n  let loadMGCP = false\\n  let loadBLD = false\\n  let loadCLRK = false\\n  let loadOMTK = false\\n  let loadFSIG = false\\n  let loadKGI = false\\n  let loadFLCM = false\\n  let loadSTM = false\\n  let loadDCOMM = false\\n  let loadHLS = false\\n  let loadVITA = false\\n  let loadICRS = false\\n  let loadUNV = false\\n  let loadAERO = false\\n  let loadOMN = false\\n  let loadSLRS = false\\n  let loadGPH = false\\n  let loadNVMD = false\\n  let loadWDS = false\\n  let loadLXO = false\\n  let loadRHOC = false\\n  let loadAPHE = false\\n  let loadSYSC = false\\n  let loadCTK = false\\n  let loadNTLK = false\\n  let loadOMGA = false\\n  let loadFNS = false\\n  let loadJGN = false\\n  let loadSGC = false\\n  let loadCTYS = false\\n  let loadMDYN = false\\n  let loadTITN = false\\n  //End of Ticker Chart Storage\\n\\n  let bus = Mitt().createBus()\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\n  bus.on('closeLong', () => (closeLongPosition = true))\\n  bus.on('closeShort', () => (closeShortPosition = true))\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\n  //bus.on('quickPlay', () => (quickStrangle = true))\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\n  //bus.on('quickSplitPlay', () => (splitPlay = true))\\n  //bus.on('stockCrawler', () => (stockCrawler = true))\\n  bus.on('longStrangle', () => (longStrangle = true))\\n  bus.on('shortStrangle', () => (shortStrangle = true))\\n\\n  //Ticker Chart Bus Triggers\\n  bus.on('loadECP', () => (loadECP = true))\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\n  bus.on('loadBLD', () => (loadBLD = true))\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\n  bus.on('loadKGI', () => (loadKGI = true))\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\n  bus.on('loadSTM', () => (loadSTM = true))\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\n  bus.on('loadHLS', () => (loadHLS = true))\\n  bus.on('loadVITA', () => (loadVITA = true))\\n  bus.on('loadICRS', () => (loadICRS = true))\\n  bus.on('loadUNV', () => (loadUNV = true))\\n  bus.on('loadAERO', () => (loadAERO = true))\\n  bus.on('loadOMN', () => (loadOMN = true))\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\n  bus.on('loadGPH', () => (loadGPH = true))\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\n  bus.on('loadWDS', () => (loadWDS = true))\\n  bus.on('loadLXO', () => (loadLXO = true))\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\n  bus.on('loadCTK', () => (loadCTK = true))\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\n  bus.on('loadFNS', () => (loadFNS = true))\\n  bus.on('loadJGN', () => (loadJGN = true))\\n  bus.on('loadSGC', () => (loadSGC = true))\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\n  bus.on('loadTITN', () => (loadTITN = true))\\n  //End of Ticker Chart Bus Triggers\\n  setGlobal('tickerBus', bus)\\n\\n  // Instead of closing, let's keep this running\\n\\n  while (wantsShutdown == false) {\\n\\n    //init chart loading triggers\\n    if (loadECP == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"ECP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadECP = false;\\n    }\\n    if (loadMGCP == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"MGCP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMGCP = false;\\n    }\\n    if (loadBLD == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"BLD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadBLD = false;\\n    }\\n    if (loadCLRK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CLRK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCLRK = false;\\n    }\\n    if (loadOMTK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMTK = false;\\n    }\\n    if (loadFSIG == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FSIG\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFSIG = false;\\n    }\\n    if (loadKGI == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"KGI\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadKGI = false;\\n    }\\n    if (loadFLCM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FLCM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFLCM = false;\\n    }\\n    if (loadSTM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"STM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSTM = false;\\n    }\\n    if (loadDCOMM == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"DCOMM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadDCOMM = false;\\n    }\\n    if (loadHLS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"HLS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadHLS = false;\\n    }\\n    if (loadVITA == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"VITA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadVITA = false;\\n    }\\n    if (loadICRS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"ICRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadICRS = false;\\n    }\\n    if (loadUNV == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"UNV\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadUVN = false;\\n    }\\n    if (loadAERO == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"AERO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAERO = false;\\n    }\\n    if (loadOMN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMN = false;\\n    }\\n    if (loadSLRS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SLRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSLRS = false;\\n    }\\n    if (loadGPH == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"GPH\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadGPH = false;\\n    }\\n    if (loadNVMD == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"NVMD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNVMD = false;\\n    }\\n    if (loadWDS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"WDS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadWDS = false;\\n    }\\n    if (loadLXO == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"LXO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadLXO = false;\\n    }\\n    if (loadRHOC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"RHOC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadRHOC = false;\\n    }\\n    if (loadAPHE == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"APHE\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAPHE = false;\\n    }\\n    if (loadSYSC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SYSC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSYSC = false;\\n    }\\n    if (loadCTK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTK = false;\\n    }\\n    if (loadNTLK == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"NTLK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNTLK = false;\\n    }\\n    if (loadOMGA == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"OMGA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMGA = false;\\n    }\\n    if (loadFNS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"FNS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFNS = false;\\n    }\\n    if (loadJGN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"JGN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadJGN = false;\\n    }\\n    if (loadSGC == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"SGC\\\")\\n\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSGC = false;\\n    }\\n    if (loadCTYS == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"CTYS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTYS = false;\\n    }\\n    if (loadMDYN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"MDYN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMDYN = false;\\n    }\\n    if (loadTITN == true) {\\n      await ns.scriptKill(\\\"wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"wallstreet-lite-data.js\\\", 1, \\\"TITN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadTITN = false;\\n    }\\n\\n    //Global Stock Price Test Module\\n    // var market = ns.stock.getSymbols()\\n    // var mValues = []\\n    //   for (const target of market) {\\n\\n    //     const timeframe = 300\\n    //     var mPrice = ns.stock.getAskPrice(target); \\n\\n    //     if (mValues.length == timeframe) {\\n    //       mValues.splice(0,1)\\n    //     }\\n\\n    //     mValues[mValues.length] = mPrice\\n\\n    //     var maxMarket = Math.max(...mValues)\\n    //     var minMarket = Math.min(...mValues)\\n    //     var mAvg = (maxMarket + minMarket) / 2\\n    //     var mDiff = mAvg - mPrice\\n    //     var trend = (mDiff / ns.stock.getAskPrice(target)) *0.1\\n\\n    //     if (mValues.length > 200 && trend > 75) {\\n    //       ns.print(target + \\\" - BULL TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n    //     if (mValues.length > 200 && trend < -75) {\\n    //       ns.print(target + \\\" - BEAR TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n\\n    //   await ns.asleep(2000);\\n    //   ns.print(target + ': ' + trend)\\n\\n    // }\\n\\n\\n\\n    //Stock Crawler Module\\n    // if (stockCrawler == true) {\\n    //   ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\n    //   var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\n    //     for (const target of market) {\\n    //     var tvol = ns.stock.getVolatility(target);\\n    //     var tfor = ns.stock.getForecast(target);\\n    //       if (tvol > 0.01 && tfor > 0.6) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //       if (tvol > 0.01 && tfor < 0.4) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //     await ns.asleep(100);\\n    //   stockCrawler = false;\\n    //   }\\n    // }\\n\\n\\n\\n    //failsafe exit condition\\n    if (wantsShutdown == true) {\\n      ns.exit();\\n    }\\n\\n    if (ns.peek(3) != \\\"NULL PORT DATA\\\") {\\n\\n      let loadedticker = ns.peek(3);\\n      var position = ns.stock.getPosition(loadedticker);\\n      var maxlongshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var maxshortshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var exposureLong = position[0] * position[1];\\n      var exposureShort = position[2] * position[3];\\n\\n      if (buyMaxLongShares == true) {\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxLongShares = false;\\n\\n      }\\n      if (buyMaxShortShares == true) {\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxShortShares = false;\\n\\n      }\\n      if (sellAllShares == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED **ALL** POSITIONS AND ORDERS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        sellAllShares = false;\\n\\n      }\\n      if (closeLongPosition == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeLongPosition = false;\\n\\n      }\\n      if (closeShortPosition == true) {\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeShortPosition = false;\\n      }\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\n\\n\\n      if (autoTrader == true && position[0] > '1' && ns.peek(4) < '0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sell(loadedticker, position[0]);\\n\\n      }\\n      if (autoTrader == true && position[2] > '1' && ns.peek(4) > '-0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n\\n\\n      }\\n      if (autoTrader == true && position[0] == '0' && ns.peek(4) > '5.0') {\\n        ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxLongShares = true;\\n\\n      }\\n      if (autoTrader == true && position[2] == '0' && ns.peek(4) < '-5.0') {\\n        ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxShortShares = true;\\n      }\\n\\n      //   //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\n\\n\\n      if (longStrangle == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getAskPrice(loadedticker) * 1.07), \\\"LimitSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getBidPrice(loadedticker) * 0.87), \\\"StopSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        longStrangle = false;\\n\\n      }\\n      if (shortStrangle == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getAskPrice(loadedticker) * 0.87), \\\"LimitSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getBidPrice(loadedticker) * 1.07), \\\"StopSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        shortStrangle = false;\\n\\n      }\\n      if (longHedge == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        longHedge = false;\\n\\n      }\\n      if (shortHedge == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        shortHedge = false;\\n\\n      }\\n      if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\n        ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        splitPlay = false;\\n\\n      }\\n\\n      //Auto-Trader button configuration.  Don't touch.\\n\\n      if (enableAutoTrader == true) {\\n        let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\n\\n        if (autoTradeConfirm == true) {\\n          ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\n          autoTrader = true;\\n          enableAutoTrader = false;\\n        }\\n        if (autoTradeConfirm == false) {\\n          ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\n          autoTrader = false;\\n          enableAutoTrader = false;\\n        }\\n      }\\n\\n    }\\n\\n    await ns.asleep(500)\\n    \\n  }\\n}\\n\\n\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\nconst ChartContainerwallstreet = {\\n  name: 'svg-chart-wallstreet',\\n  inject: ['appShutdown',],\\n  template: html`\\n    <bbv-win\\n      class=\\\"__CMP_NAME__\\\"\\n      title=\\\"WSE Active Trader\\\"\\n      no-pad\\n      start-height=\\\"770px\\\"\\n      start-width=\\\"619px\\\"\\n    >\\n \\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\n      <div>\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\n      </div>\\n      </details>\\n      </div>\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\n      <div>\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\n      <button @click=\\\"longStrangle\\\">LONG STRANGLE</button>\\n      <button @click=\\\"shortStrangle\\\">SHORT STRANGLE</button>\\n      </div>\\n      </details>\\n      <details align=\\\"right\\\"><summary>TOOLS</summary>\\n      <div>\\n      <button @click=\\\"enableAutoTrade\\\">AUTO TRADE</button>\\n      </div>\\n      </details>\\n\\n      <template #actions>\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\n      </template>\\n    </bbv-win>\\n  `,\\n\\n  data() {\\n    return {}\\n  },\\n\\n  methods: {\\n    shutdownAll() {\\n      getGlobal('tickerBus').emit('wantsShutdown')\\n      this.appShutdown()\\n    },\\n    buyMaxLong() {\\n      getGlobal('tickerBus').emit('buyMaxLong')\\n    },\\n    buyMaxShort() {\\n      getGlobal('tickerBus').emit('buyMaxShort')\\n    },\\n    closeAllPositions() {\\n      getGlobal('tickerBus').emit('closeAllPositions')\\n    },\\n    sellMaxLong() {\\n      getGlobal('tickerBus').emit('closeLong')\\n    },\\n    sellMaxShort() {\\n      getGlobal('tickerBus').emit('closeShort')\\n    },\\n    enableAutoTrade() {\\n      getGlobal('tickerBus').emit('autoTrade')\\n    },\\n    longStrangle() {\\n      getGlobal('tickerBus').emit('longStrangle')\\n    },\\n    shortStrangle() {\\n      getGlobal('tickerBus').emit('shortStrangle')\\n    },\\n    quickSplit() {\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\n    },\\n    longHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\n    },\\n    shortHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\n    },\\n    // stockCrawler() {\\n    //   getGlobal('tickerBus').emit('stockCrawler')\\n    // },\\n    // enableSmartTrade() {\\n    //   getGlobal('tickerBus').emit('enableSmartTrade')\\n    // },\\n    sellAllStocks() {\\n      getGlobal('tickerBus').emit('sellAllStocks')\\n    },\\n    loadECP() {\\n      getGlobal('tickerBus').emit('loadECP')\\n    },\\n    loadMGCP() {\\n      getGlobal('tickerBus').emit('loadMGCP')\\n    },\\n    loadBLD() {\\n      getGlobal('tickerBus').emit('loadBLD')\\n    },\\n    loadCLRK() {\\n      getGlobal('tickerBus').emit('loadCLRK')\\n    },\\n    loadOMTK() {\\n      getGlobal('tickerBus').emit('loadOMTK')\\n    },\\n    loadFSIG() {\\n      getGlobal('tickerBus').emit('loadFSIG')\\n    },\\n    loadKGI() {\\n      getGlobal('tickerBus').emit('loadKGI')\\n    },\\n    loadFLCM() {\\n      getGlobal('tickerBus').emit('loadFLCM')\\n    },\\n    loadSTM() {\\n      getGlobal('tickerBus').emit('loadSTM')\\n    },\\n    loadDCOMM() {\\n      getGlobal('tickerBus').emit('loadDCOMM')\\n    },\\n    loadHLS() {\\n      getGlobal('tickerBus').emit('loadHLS')\\n    },\\n    loadVITA() {\\n      getGlobal('tickerBus').emit('loadVITA')\\n    },\\n    loadICRS() {\\n      getGlobal('tickerBus').emit('loadICRS')\\n    },\\n    loadUNV() {\\n      getGlobal('tickerBus').emit('loadUNV')\\n    },\\n    loadAERO() {\\n      getGlobal('tickerBus').emit('loadAERO')\\n    },\\n    loadOMN() {\\n      getGlobal('tickerBus').emit('loadOMN')\\n    },\\n    loadSLRS() {\\n      getGlobal('tickerBus').emit('loadSLRS')\\n    },\\n    loadGPH() {\\n      getGlobal('tickerBus').emit('loadGPH')\\n    },\\n    loadNVMD() {\\n      getGlobal('tickerBus').emit('loadNVMD')\\n    },\\n    loadWDS() {\\n      getGlobal('tickerBus').emit('loadWDS')\\n    },\\n    loadLXO() {\\n      getGlobal('tickerBus').emit('loadLXO')\\n    },\\n    loadRHOC() {\\n      getGlobal('tickerBus').emit('loadRHOC')\\n    },\\n    loadAPHE() {\\n      getGlobal('tickerBus').emit('loadAPHE')\\n    },\\n    loadSYSC() {\\n      getGlobal('tickerBus').emit('loadSYSC')\\n    },\\n    loadCTK() {\\n      getGlobal('tickerBus').emit('loadCTK')\\n    },\\n    loadNTLK() {\\n      getGlobal('tickerBus').emit('loadNTLK')\\n    },\\n    loadOMGA() {\\n      getGlobal('tickerBus').emit('loadOMGA')\\n    },\\n    loadFNS() {\\n      getGlobal('tickerBus').emit('loadFNS')\\n    },\\n    loadJGN() {\\n      getGlobal('tickerBus').emit('loadJGN')\\n    },\\n    loadSGC() {\\n      getGlobal('tickerBus').emit('loadSGC')\\n    },\\n    loadCTYS() {\\n      getGlobal('tickerBus').emit('loadCTYS')\\n    },\\n    loadMDYN() {\\n      getGlobal('tickerBus').emit('loadMDYN')\\n    },\\n    loadTITN() {\\n      getGlobal('tickerBus').emit('loadTITN')\\n    },\\n  },\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///dafab439-7fae-4fd3-a613-daf7291ac8f4\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5a53cb60-eb32-4ceb-a903-c0ace8289a55\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///25231c82-4fb3-4adb-baad-201c9b6de289\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///60aaf2f5-af73-4b8a-93d8-bf75e4b99e69\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///ba546588-72dc-4e18-9c9b-8784e906142e\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///2cae0a93-eed2-48b6-99e4-6c27a996dfb1\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///5690dee7-7b46-4ea4-828a-a159445b2b8f\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b1544a39-2b0c-48fa-87cd-c296c9d46da6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///958e2103-d598-4c37-ab14-2689be6b6be0\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///469b2695-9183-4179-a883-ee06f2a4d00f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///25b1d47c-b429-4d2a-a6f5-36735fbd09b1\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3b7576a7-dcb0-4e34-b914-96014faa085f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///80d78afc-20a0-4175-b151-b70b73e1fcb9\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///22540138-5ae4-4b18-8bcd-56b236737559\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///237f01ba-54d5-4af1-952d-fc44bad20c4d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///c1253835-8dae-4510-8cc7-db30638844e7\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8844c644-08ad-4539-9de2-19764192a4a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///c4c80384-dd09-42c9-aef1-7c8fb56a53d2\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///ab632b3d-2991-421a-a694-be87cbb19e31\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5a67ac56-7654-49e0-80ef-1e018398e2ec\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///491f911e-4458-4925-9731-07caad0fabde\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5c72c73f-b2b7-41bc-bec1-ff6faf1214c0\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///6c686527-1196-491f-be60-d8af21bd0e6b\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///20d87508-533a-4539-9316-ad0b81c3c0a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///3b3fce61-07f5-4f95-8e49-c3fe72e9cc4f\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1e0ee594-a22f-4ee1-b726-a0452b3a5da7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///b90d02f1-90f5-46fa-9ff5-a96100670124\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///38c05600-7593-4c57-90f3-9bce7265cdda\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///7923ecc3-8bca-4fd3-810d-991727651528\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7feb77b0-2a1a-48d3-b2d2-95b69fabcd19\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///a4f9f3c9-620a-4111-8cdd-93b02bc428fe\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3aaf4184-0359-4e92-a52c-43a9ca17c6a2\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///97e1fcdf-87d5-48ac-9466-fc55dd86002f\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///aee3078a-dc5b-4c5c-af91-61b307051aec\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///00fdef21-53f2-45ca-be17-c0e58f313fb9\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7c736925-069e-4456-8770-c69f1673dc3d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///e7634d38-8322-4899-b327-a11ab671b98e\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///063eb523-c42a-4966-9e1c-c09b8bfff9a6\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///f98ff1ae-6c7b-4d22-8cf3-ad1a36a9dca3\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a349cfe3-186f-4a7f-ae41-623c932b482c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///990175f0-4771-4fc0-8660-77c44139a0ac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///49f8e89c-dbc5-43cb-960a-cdcb301b1025\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8dc52512-487f-4bb5-b743-79e93df55189\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///fd49e03c-4a59-417f-90b1-85d158eb7749\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///cd8acf7a-162b-4271-a7e0-e436c25876ea\",\"moduleSequenceNumber\":27307}],\"dependents\":[],\"ramUsage\":24.35,\"server\":\"home\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet-lite.js'\\n\\nexport async function main(ns) {\\n  const doc = eval('document')\\n  var ticker = ns.args[0];\\n\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\n  const resolution = 420\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\n  const delay = 10\\n\\n  const textSize = 2.5\\n\\n  const lineColor = 'green'\\n\\n  const strokeWidth = 0.5\\n\\n  const conWidth = 80\\n  const conHeight = 60\\n  const wBuffer = 1\\n  const hBuffer = 5\\n  await ns.clearPort(1)\\n  await ns.clearPort(2)\\n  await ns.writePort(3, ticker)\\n\\n\\n  var container = doc.getElementById('graph_container')\\n\\n  if (container != null) {\\n    KillChildren(container)\\n    container.remove()\\n  }\\n //Give the chart time to load.\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\n\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\n  const containerAttr = [\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\n    ['id', 'graph_container'],\\n  ]\\n  AddAttr(container, containerAttr)\\n  \\n  dropPage.appendChild(container)\\n\\n  const uiThickness = 0.1\\n\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(topLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(topLine)\\n\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(midLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight / 2)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight / 2)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(midLine)\\n\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(botLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight - hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight - hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(botLine)\\n\\n\\n  var lines = []\\n  for (let i = 0; i < resolution - 1; i++) {\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '60'],\\n      ['x2', '100'],\\n      ['y2', '0'],\\n      ['stroke', 'green'],\\n      ['stroke-width', '1'],\\n    ])\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '0'],\\n      ['x2', '0'],\\n      ['y2', '0'],\\n      ['stroke', lineColor],\\n      ['stroke-width', String(strokeWidth)],\\n    ])\\n    container.appendChild(lines[i])\\n  }\\n\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(topTextBG, topText, container)\\n\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(midTextBG, midText, container)\\n\\n  var botText = CreateText('COLLECTING DATA...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(botTextBG, botText, container)\\n\\n\\n  var values = []\\n  while (true) {\\n    var ticker = ns.args[0];\\n    var position = ns.stock.getPosition(ticker)\\n    try {\\n      if (values.length == resolution) {\\n        values.splice(0, 1)\\n        await ns.clearPort(1);\\n        await ns.clearPort(2);\\n        \\n      }\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\n\\n      if (values.length > 2) {\\n        var lineCount = values.length - 2\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\n\\n        var moneyList = []\\n\\n        for (let i = 0; i < values.length; i++) {\\n          moneyList[i] = values[i]\\n        }\\n      await ns.clearPort(1)\\n      await ns.clearPort(2)\\n      await ns.writePort(1, (Math.max(...moneyList)))\\n      await ns.writePort(2, (Math.min(...moneyList)))\\n      await ns.writePort(3, ticker)\\n        var tenmin = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\n        var pricediff = (((ns.peek(2) + ns.peek(1)) / 2) - ns.stock.getAskPrice(ticker))\\n        var forecast = (pricediff / ns.stock.getAskPrice(ticker) *-1)\\n        var estVol = ns.nFormat((moneyList[299] + moneyList[2]) / 419, '$0.00a')\\n      await ns.writePort(4, forecast * 100);\\n      //await ns.writePort(4, (pricediff / ns.stock.getAskPrice(ticker) *-1000))\\n\\n\\n        var highestVal = moneyList[0]\\n        var lowestVal = moneyList[0]\\n\\n        for (var i in moneyList) {\\n          if (moneyList[i] > highestVal) {\\n            highestVal = moneyList[i]\\n          }\\n          if (moneyList[i] < lowestVal) {\\n            lowestVal = moneyList[i]\\n          }\\n        }\\n\\n        highestVal = highestVal - lowestVal\\n        //highestVal = moneyList[i];\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\n        //monitor the player's cash, but has been tweaked for stocks.\\n\\n        for (let i in moneyList) {\\n          if (highestVal != lowestVal) {\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\n          } else {\\n            moneyList[i] = values[i]\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\n          }\\n        }\\n\\n        for (let i = 0; i < lineCount; i++) {\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\n          if (isNaN(temp)) {\\n            ns.asleep(5000);\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\n          }\\n\\n          var attr = [\\n            ['x1', String(i * xOff + wBuffer)],\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\n          ]\\n          AddAttr(lines[i], attr)\\n\\n        }\\n        //ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0')\\n        topText.innerHTML = 'Overall Trend: ' + ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\n        HighlightText(topTextBG, topText, container)\\n\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+ tenmin +' 7m AVG)'\\n        HighlightText(midTextBG, midText, container)\\n\\n        botText.innerHTML = 'Movement Per Tick: ' + estVol + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\n        HighlightText(botTextBG, botText, container)\\n\\n\\n        \\n      }\\n\\n\\n    } catch (err) {\\n      // This might come in handy later\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\n    }\\n    await ns.sleep(delay * 100)\\n    await ns.clearPort(1);\\n    await ns.clearPort(2);\\n    await ns.clearPort(4);\\n\\n    if (ns.isRunning(\\\"wallstreet-lite.js\\\", \\\"home\\\") == false) {\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      await ns.clearPort(4);\\n      ns.exit();\\n    }\\n\\n  }\\n}\\n\\nfunction AddAttr(element, attrList) {\\n  for (var i in attrList) {\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\n  }\\n}\\n\\nfunction KillChildren(element) {\\n  const children = element.children\\n  for (var line of children) {\\n    line.remove()\\n  }\\n}\\n\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\n  AddAttr(textElm, [\\n    ['x', String(x)],\\n    ['y', String(y)],\\n    ['fill', 'lightgrey'],\\n    ['font-size', String(textSize)],\\n    ['font-family', 'sans-serif'],\\n    ['stroke', 'black'],\\n    ['stroke-width', '0'],\\n  ])\\n  textElm.innerHTML = text\\n  parent.appendChild(textElm)\\n  return textElm\\n}\\n\\nfunction HighlightText(bg, text, parent) {\\n  var textBox = text.getBBox()\\n\\n  AddAttr(bg, [\\n    ['x', String(textBox.x)],\\n    ['y', String(textBox.y)],\\n    ['width', String(textBox.width)],\\n    ['height', String(textBox.height)],\\n    ['fill', 'black'],\\n    ['opacity', '0.0'],\\n  ])\\n  parent.insertBefore(bg, text)\\n  \\n}\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var current_min_ram, new_purchased_server,\\n        current_purchasing_ram = 4096,\\n        current_needed_money = ns.getPurchasedServerCost(current_purchasing_ram),\\n        existing_servers = ns.getPurchasedServers(),\\n        // server_limit = ns.getPurchasedServerLimit(),\\n        server_limit = 5,\\n        ram_limit = ns.getPurchasedServerMaxRam();\\n\\n    ns.tprint('buy_server.js running!');\\n\\n    await update_grind_server_txt(ns, existing_servers);\\n\\n    while (true) {\\n        await ns.sleep(1200000);  // Sleep first to allow machine to boot\\n\\n        ns.print('Current purchasing RAM: ', current_purchasing_ram)\\n\\n        if (existing_servers.length >= server_limit) {\\n            current_min_ram = await delete_small_server(ns, existing_servers);\\n            existing_servers = ns.getPurchasedServers();\\n            await update_grind_server_txt(ns, existing_servers);\\n            if (current_min_ram == current_purchasing_ram) {\\n                current_purchasing_ram *= 2;\\n            } if (current_purchasing_ram > ram_limit) {\\n                current_purchasing_ram = ram_limit;\\n            } if (current_min_ram == ram_limit) {\\n                ns.toast('buy_server.js has purchased all available servers. Now exiting...')\\n                ns.exit()\\n            }\\n        } else {\\n            if (ns.getPlayer().money * 0.25 > current_needed_money) {  // Buy it\\n                new_purchased_server = ns.purchaseServer('grinding-server', current_purchasing_ram);\\n                existing_servers.push(new_purchased_server);\\n                await update_grind_server_txt(ns, existing_servers);\\n                ns.run('/scripts/transport_files.js', 1, new_purchased_server);\\n                await ns.toast('Purchased new server ' + new_purchased_server);\\n                await ns.sleep(5000);  // Make sure that files were transported\\n                ns.run('/scripts/grind_on_my_servers.script');\\n            }\\n        }\\n    }\\n}\\n\\nasync function delete_small_server(ns, servers) {\\n    var min_ram = -1,\\n        min_index = -1;\\n\\n    for (var i = 0; i < servers.length; i++) {\\n        if (ns.getServerMaxRam(servers[i]) < min_ram || min_ram == -1) {\\n            min_ram = ns.getServerMaxRam(servers[i]);\\n            min_index = i;\\n        }\\n    }\\n\\n    await ns.killall(servers[min_index]);\\n    await ns.deleteServer(servers[min_index]);\\n    await ns.toast('Deleted ' + servers[min_index]);\\n    return min_ram;\\n}\\n\\nasync function update_grind_server_txt(ns, servers) {\\n    await ns.print('Received servers ', servers, 'to update');\\n    await ns.write('/grind_servers.txt', servers.join('\\\\r\\\\n'), 'w');\\n}\",\"filename\":\"/scripts/buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buy_server.js\",\"url\":\"blob:file:///e02e61cf-7597-430d-ae50-c67ecd2a6743\",\"moduleSequenceNumber\":740}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host = ns.args[0];\\n    await ns.scp('/scripts/hack.script', host);\\n    await ns.scp('/scripts/weaken-exp-grind.script', host);\\n    await ns.scp('/scripts/simple_hack.script', host);\\n    await ns.scp('/scripts/weaken_and_grow_only.script', host);\\n    ns.print('Tranported files to ', host);\\n}\",\"filename\":\"/scripts/transport_files.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/transport_files.js\",\"url\":\"blob:file:///efd29b67-f265-41fe-a115-5aef4b6e39d8\",\"moduleSequenceNumber\":17860}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///e326079e-18c4-421d-ace6-cd70bbafd622\",\"moduleSequenceNumber\":901}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"write('/ someFolder/hello.txt', 'Hello world!');\",\"filename\":\"/scripts/test.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"victims.txt\",\"text\":\"neo-net\\r\\nsilver-helix\\r\\nzer0\\r\\niron-gym\\r\\nmax-hardware\\r\\nharakiri-sushi\\r\\nhong-fang-tea\\r\\nnectar-net\\r\\nn00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nsilver-helix\\r\\nphantasy\\r\\nomega-net\\r\\ncrush-fitness\\r\\njohnson-ortho\\r\\nthe-hub\\r\\ncomptek\\r\\nnetlink\\r\\nrothman-uni\\r\\n \\r\\nCSEC\\r\\njohnson-ortho\\r\\navmnite-02h\\r\\nzb-institute\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"the_network.txt\",\"text\":\"[[\\\"home\\\",1,0,1,1],[\\\"n00dles\\\",1,1750000,3000,1.3980000000000004],[\\\"foodnstuff\\\",1,50000000,5,75.01000000056837],[\\\"sigma-cosmetics\\\",5,57500000,10,74.86200000028256],[\\\"joesguns\\\",10,62500000,20,74.98500000017178],[\\\"hong-fang-tea\\\",30,75000000,20,74.20000000003813],[\\\"harakiri-sushi\\\",40,100000000,40,73.35200000002209],[\\\"iron-gym\\\",100,500000000,20,56.045999999994564],[\\\"darkweb\\\",1,0,1,74.50799999963043],[\\\"nectar-net\\\",20,68750000,25,73.63600000006413],[\\\"max-hardware\\\",80,250000000,30,56.92399999999512],[\\\"zer0\\\",75,187500000,40,61.783999999992226],[\\\"CSEC\\\",57,0,0,0],[\\\"omega-net\\\",211,1723395200,30,46.195999999995195],[\\\"neo-net\\\",50,125000000,25,72.53799999999936],[\\\"phantasy\\\",100,600000000,35,53.43199999999575],[\\\"silver-helix\\\",150,1125000000,30,50.05799999999464],[\\\"comptek\\\",388,6119572375,59,57.569999999998565],[\\\"avmnite-02h\\\",205,0,0,0],[\\\"the-hub\\\",296,4814372125,54,45.363999999996295],[\\\"netlink\\\",409,6875000000,71,54.73199999999906],[\\\"johnson-ortho\\\",293,2087769050,65,60.19599999999749],[\\\"crush-fitness\\\",254,1441254775,29,47.063999999996064],[\\\"zb-institute\\\",764,24815867775,79,79.1440000000013],[\\\"syscore\\\",625,12123215950,64,66.00400000000133],[\\\"summit-uni\\\",447,5944870325,59,52.24799999999941],[\\\"I.I.I.I\\\",355,0,0,0],[\\\"catalyst\\\",446,9025750325,30,53.74599999999957],[\\\"rothman-uni\\\",387,4988442250,39,47.733999999998474],[\\\"lexo-corp\\\",664,19470985725,57,65.9000000000012],[\\\"rho-construction\\\",502,13222733500,51,41.09399999999832],[\\\"millenium-fitness\\\",491,6250000000,29,45.74799999999881],[\\\"aevum-police\\\",420,6429802425,42,73.82400000000223],[\\\"alpha-ent\\\",509,17609525400,50,64.23000000000205],[\\\"snap-fitness\\\",771,11250000000,48,41.971999999999646],[\\\"galactic-cyber\\\",832,21014457000,71,58.11599999999975],[\\\"aerocorp\\\",868,27588242200,65,79.90800000000077],[\\\"global-pharm\\\",784,40498812600,90,75.0120000000009],[\\\"omnia\\\",896,23135532300,69,90.11600000000058],[\\\"deltaone\\\",833,36370607950,52,76.90800000000077],[\\\"unitalife\\\",787,25974602775,75,74.0120000000009],[\\\"univ-energy\\\",895,29392586550,84,84.38800000000053],[\\\"defcomm\\\",1026,23365939700,70,87.01200000000046],[\\\"zeus-med\\\",822,33251430975,76,77.38800000000059],[\\\"icarus\\\",866,23613704050,94,92.2080000000007],[\\\"solaris\\\",845,19236041600,76,74.90800000000077],[\\\"infocomm\\\",948,15124969700,43,77.38800000000053],[\\\"zb-def\\\",815,23216834975,73,58.54799999999981],[\\\"nova-med\\\",805,30424295100,66,71.46800000000069],[\\\"taiyang-digital\\\",929,21064273525,80,77.38800000000053],[\\\"microdyne\\\",874,13174270150,90,65.46800000000069],[\\\"titan-labs\\\",817,18752014475,64,78.38800000000059],[\\\"run4theh111z\\\",506,0,0,0],[\\\"applied-energetics\\\",831,19691087600,75,67.46800000000069],[\\\"vitalife\\\",782,17689401800,61,82.38800000000059],[\\\"stormtech\\\",1020,29582301575,90,89.24000000000035],[\\\"helios\\\",801,18108376900,80,84.38800000000059],[\\\"fulcrumtech\\\",1117,42157048525,81,88.24000000000035],[\\\"4sigma\\\",1094,448448605800,85,54.467999999999854],[\\\"kuai-gong\\\",1239,727744968900,96,97.16000000000025],[\\\".\\\",524,0,0,0],[\\\"omnitek\\\",1044,370029131825,95,98.24000000000035],[\\\"b-and-a\\\",972,449036526675,70,79.38800000000053],[\\\"blade\\\",912,469649590650,77,90.32000000000045],[\\\"clarkinc\\\",1013,581518461825,64,42.607999999999834],[\\\"powerhouse-fitness\\\",993,22500000000,51,53.54799999999981],[\\\"nwo\\\",1110,859300132350,82,98.16000000000025],[\\\"megacorp\\\",1255,1334614097725,99,98.16000000000025],[\\\"ecorp\\\",1369,1271765696975,99,98.16000000000025],[\\\"fulcrumassets\\\",1194,25000000,1,98.16000000000025],[\\\"The-Cave\\\",925,0,0,1]]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"grind_servers.txt\",\"text\":\"grinding-server\\r\\ngrinding-server-0\\r\\ngrinding-server-1\\r\\ngrinding-server-2\\r\\ngrinding-server-3\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"all_servers_names.txt\",\"text\":\"n00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nhong-fang-tea\\r\\nharakiri-sushi\\r\\niron-gym\\r\\nnectar-net\\r\\nmax-hardware\\r\\nCSEC\\r\\nzer0\\r\\nphantasy\\r\\nomega-net\\r\\nneo-net\\r\\nsilver-helix\\r\\nthe-hub\\r\\njohnson-ortho\\r\\ncrush-fitness\\r\\navmnite-02h\\r\\ncomptek\\r\\nnetlink\\r\\nzb-institute\\r\\nrothman-uni\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"# TODO\\r\\n\\r\\n* Change most, if not all, scripts to ns2.\\r\\n* Add a choice in boot where I can grind one server over and over with multiple threads\\r\\n* Let grind return a promise so that I can wait for it before having buy_server delete grinding servers\\r\\n* In fact, let's put all common functionalities into a single module file and import them when needed\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/manual.txt\",\"text\":\"===\\n= BB Theme Browser\\n===\\n\\nBrowser themes submitted by other users, vote for your\\nfavourite and submit your own.\\n\\n===\\n\\nRegistration\\n\\nWe use an email / password auth system so that we know who\\nis submitting the theme. We don't actually use the email,\\nwe just use it for identification purposes.\\n\\nEach login will create a PAT token stored in your local\\nstorage. You can copy/paste it to avoid logging in, if you\\nwant. You can also integrate using the same method, for your\\nown app. Go ahead! https://bitburner.daft.host\\n\\n===\\n\\nBB Theme Browser Developers\\n\\nPhil and Jack have worked together on many projects over\\nthe years, this is the first non-work related project to\\nhave worked together on.\\n\\nPhil specializes in frontend development; VueJS, SCSS, \\nthe maths aspect of things.\\n\\nJack specializes in backend development and infrastructure,\\nmaking the API that the frontend works with.\\n\\nPhil:\\n    url: https://github.com/philiparmstead\\n    discord: Phil\\n\\nJack:\\n    url: https://github.com/surdaft\\n    discord: SurDaft\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/bb-vue/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"bb-vue\\\",\\n    \\\"author\\\": \\\"smolgumball\\\",\\n    \\\"descriptiveName\\\": \\\"Run Vue 3 apps inside BitBurner.\\\",\\n    \\\"shortDescription\\\": \\\"Extension for UI development using Vue 3 + SCSS in game. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"longDescription\\\": \\\"Includes starter components, examples, and lots of quality-of-life features for rapid UI development and extension inside BitBurner. Supports SCSS compilation of component styles, global SCSS mixins, loading of external stylesheets + scripts, and more. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"tags\\\": [\\n        \\\"library\\\",\\n        \\\"ui\\\",\\n        \\\"qol\\\",\\n        \\\"os\\\",\\n        \\\"ns2\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/someFolder/hello.txt\",\"text\":\"Hello world!\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-1.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,-9,-9,-9,-9,-9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"66.1.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.18000000000009,\"minDifficulty\":33,\"moneyAvailable\":30778534928.16694,\"moneyMax\":758231263025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1372,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"38.2.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.18000000000009,\"minDifficulty\":33,\"moneyAvailable\":44956299280.39756,\"moneyMax\":1107501435000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1107,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-558516-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-219902-OmegaSoftware.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,25],[9,16],[1,7],[8,14],[15,16],[23,33],[15,17],[1,3],[7,11],[2,3],[12,22],[20,25],[9,19],[20,25],[17,18],[16,17],[12,16]],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"82.5.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":81.52575000000029,\"minDifficulty\":27,\"moneyAvailable\":22020386624.776237,\"moneyMax\":533869137150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":959,\"serverGrowth\":71}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"94.1.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"blade\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"blade\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91.18000000000009,\"minDifficulty\":30,\"moneyAvailable\":26856155083.970562,\"moneyMax\":662245768825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1127,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"65.0.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nwo\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nwo\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.18000000000009,\"minDifficulty\":33,\"moneyAvailable\":30736806536.868217,\"moneyMax\":759117701325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1125,\"serverGrowth\":82}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"67.9.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":47.77774999999994,\"minDifficulty\":16,\"moneyAvailable\":24184200018.62004,\"moneyMax\":572909430200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1182,\"serverGrowth\":46}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"81.8.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":97.4537500000002,\"minDifficulty\":33,\"moneyAvailable\":22373170338.79698,\"moneyMax\":543223945300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":973,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-617946.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"604327\",-39],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"80.2.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":70.48975000000024,\"minDifficulty\":24,\"moneyAvailable\":24328444572.88306,\"moneyMax\":582064651700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1177,\"serverGrowth\":96}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"53.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97.18000000000009,\"minDifficulty\":32,\"moneyAvailable\":27659336049.206757,\"moneyMax\":682009852075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1076,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"45.9.9.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91.18000000000009,\"minDifficulty\":30,\"moneyAvailable\":1716982955.774107,\"moneyMax\":42373290575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1150,\"serverGrowth\":80}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"2.6.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99.18000000000009,\"minDifficulty\":33,\"moneyAvailable\":1000193.5489901485,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1353,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"12.4.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":81.63375000000029,\"minDifficulty\":27,\"moneyAvailable\":1188777063.289464,\"moneyMax\":28308968650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":911,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"25.6.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":83.39375000000038,\"minDifficulty\":28,\"moneyAvailable\":975241803.842945,\"moneyMax\":23402791775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":931,\"serverGrowth\":70}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"96.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":72.7417500000003,\"minDifficulty\":24,\"moneyAvailable\":625932196.1533248,\"moneyMax\":15132593975,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":46}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"82.6.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"helios\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"helios\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":89.52575000000029,\"minDifficulty\":30,\"moneyAvailable\":636565576.4305389,\"moneyMax\":15432743725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":885,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"53.4.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":88,\"hackDifficulty\":87.63375000000029,\"minDifficulty\":29,\"moneyAvailable\":802126055.3844675,\"moneyMax\":19310251525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":75}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"42.3.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"icarus\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"icarus\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":88.39375000000038,\"minDifficulty\":30,\"moneyAvailable\":987887557.0757769,\"moneyMax\":23474148225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"33.3.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":88.3097500000004,\"minDifficulty\":30,\"moneyAvailable\":1250884831.4024763,\"moneyMax\":29867929050,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":893,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-289128.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[92,108,51,86,120,160,183,4,136,76,2,122,161,32,118,109,164,176,67,155,197,2,51,149,99,62,25,24,58,72,2,69,12,184,110,98,156,157,122]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-487661-OmegaSoftware.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"755436\",-42],\"reward\":{\"name\":\"Omega Software\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"43.6.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":76.7417500000003,\"minDifficulty\":26,\"moneyAvailable\":790129508.4363457,\"moneyMax\":18756211525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":855,\"serverGrowth\":75}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"2.9.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":72.7417500000003,\"minDifficulty\":24,\"moneyAvailable\":597090973.6062602,\"moneyMax\":14071909700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":81}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-301883-OmniTekIncorporated.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[30,139,4,157,183,104,18,66,162]],\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"26.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":77.63375000000029,\"minDifficulty\":26,\"moneyAvailable\":891390439.0725224,\"moneyMax\":21391758275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"21.6.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":62.729749999999925,\"minDifficulty\":21,\"moneyAvailable\":908610649.8380864,\"moneyMax\":20531935175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":83}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"0.4.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":82.53775000000039,\"minDifficulty\":28,\"moneyAvailable\":1159832213.8680449,\"moneyMax\":27807579250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-910973.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"425811970\",-64],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"96.9.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnia\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omnia\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":84.39375000000038,\"minDifficulty\":28,\"moneyAvailable\":1029165860.1408042,\"moneyMax\":24808927475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":927,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"18.5.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":60.31837499999996,\"minDifficulty\":21,\"moneyAvailable\":1021985692.6273469,\"moneyMax\":23952178275,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":807,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-389801.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":928303306,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"91.6.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":79.66775000000032,\"minDifficulty\":27,\"moneyAvailable\":885901042.2572848,\"moneyMax\":21061448700,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":796,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"40.6.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"solaris\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"solaris\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":73.68175000000039,\"minDifficulty\":25,\"moneyAvailable\":901329468.277614,\"moneyMax\":20972460550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":73}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"51.2.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":76.68175000000039,\"minDifficulty\":26,\"moneyAvailable\":1604611995.0625749,\"moneyMax\":37618901675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":68}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"78.1.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":77.59775000000042,\"minDifficulty\":26,\"moneyAvailable\":1789937090.4029891,\"moneyMax\":41354227125,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":833,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"14.4.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":61.53437499999988,\"minDifficulty\":21,\"moneyAvailable\":1232551996.3495467,\"moneyMax\":28252892500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":776,\"serverGrowth\":74}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881007-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[91,90,14,165,119,171,120,187,142,95,191,16,131,161,129,53,14,198,171,57,101,155,32],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"72.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":77.68175000000039,\"minDifficulty\":26,\"moneyAvailable\":1481624309.3281665,\"moneyMax\":34473658550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":77}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"15.4.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":73.60575000000043,\"minDifficulty\":25,\"moneyAvailable\":1133890018.730378,\"moneyMax\":26172833250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":781,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"3.8.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":75.60975000000042,\"minDifficulty\":25,\"moneyAvailable\":831563460.4712877,\"moneyMax\":19527822975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":749,\"serverGrowth\":64}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"48.0.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":55.79199999999939,\"minDifficulty\":18,\"moneyAvailable\":813177874.4946171,\"moneyMax\":16877694300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":485,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"42.3.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":79.62000000000037,\"minDifficulty\":22,\"moneyAvailable\":1001391.9682589475,\"moneyMax\":16769391200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":509,\"serverGrowth\":55}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"12.6.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":73.73987500000105,\"minDifficulty\":26,\"moneyAvailable\":243519405.52257204,\"moneyMax\":5733342450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":448,\"serverGrowth\":39}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193150-Netburners.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"63.2.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":58.17999999999896,\"minDifficulty\":18,\"moneyAvailable\":239567580.5365126,\"moneyMax\":5178162350,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":394,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"48.9.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":75,\"hackDifficulty\":71.52237500000079,\"minDifficulty\":25,\"moneyAvailable\":1067399997.91348,\"moneyMax\":23401902350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":726,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"66.7.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":66.71325000000128,\"minDifficulty\":22,\"moneyAvailable\":313915783.2987331,\"moneyMax\":7037365550,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":460,\"serverGrowth\":42}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"49.1.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"syscore\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"syscore\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":63.59987500000043,\"minDifficulty\":23,\"moneyAvailable\":473515402.97893286,\"moneyMax\":10680826975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":556,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"20.6.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":64.78400000000012,\"minDifficulty\":21,\"moneyAvailable\":432157064.1314273,\"moneyMax\":9727637325,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":421,\"serverGrowth\":43}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"60.0.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":49.863999999997745,\"minDifficulty\":13,\"moneyAvailable\":282648794.96121174,\"moneyMax\":4491530600,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":295,\"serverGrowth\":52}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-977025-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))a(a()(\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"77.7.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"comptek\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"comptek\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":62.725999999998585,\"minDifficulty\":19,\"moneyAvailable\":276257548.96456623,\"moneyMax\":5596311425,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":338,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-229316.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"24013412570\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"75.8.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"netlink\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"netlink\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":61.695500000000706,\"minDifficulty\":25,\"moneyAvailable\":356843840.82111984,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":409,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"11.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":59.91799999999825,\"minDifficulty\":17,\"moneyAvailable\":116409352.4428887,\"moneyMax\":2021554025,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":298,\"serverGrowth\":57}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"81.9.2.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":68.46337499987513,\"minDifficulty\":1,\"moneyAvailable\":868071,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"80.4.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":75.38237500059384,\"minDifficulty\":3,\"moneyAvailable\":12541.287792117375,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"85.3.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":75.0943750002644,\"minDifficulty\":3,\"moneyAvailable\":16505.464667815504,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"85.2.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":75.81387500012549,\"minDifficulty\":5,\"moneyAvailable\":89225.27980596457,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"14.9.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"zer0\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":67.58799999999815,\"minDifficulty\":8,\"moneyAvailable\":957075.2048850505,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"59.2.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":75.01375000003718,\"minDifficulty\":7,\"moneyAvailable\":21672.788786650573,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"72.1.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":75.0523750000032,\"minDifficulty\":8,\"moneyAvailable\":116976.34416528199,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-69354.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"71.5.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":53.449999999996784,\"minDifficulty\":10,\"moneyAvailable\":15181295.723165885,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"51.2.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":75.7343750000318,\"minDifficulty\":5,\"moneyAvailable\":22125.019835385257,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"24.7.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":74.72875000002676,\"minDifficulty\":5,\"moneyAvailable\":75972.57358592136,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-430204.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4589019537\",-45],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"51.9.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":41.96599999999999,\"minDifficulty\":7,\"moneyAvailable\":1409304.27604494,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"64.4.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":74.99350000000622,\"minDifficulty\":5,\"moneyAvailable\":62854.70271236881,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645267.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[2,[16,86,79,17,87,70,35,129,24,166,98,18,111,165,81,106,17,138,71,74,133,140,163,119,79,75,188,182,179,11,121,175,33,89,147,190,20,139,110,145,148,32,128]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"18.2.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":33,\"hackDifficulty\":49.50599999999692,\"minDifficulty\":11,\"moneyAvailable\":44498835.160507835,\"moneyMax\":1612819750,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"90.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":52.46799999999766,\"minDifficulty\":14,\"moneyAvailable\":46729513.925470866,\"moneyMax\":1345358900,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":265,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"49.1.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":74.57775000000063,\"minDifficulty\":10,\"moneyAvailable\":1075849.1987259246,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-444824.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[76,133,99,133,9,169,149,140,68,34],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"84.6.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":56.78599999999938,\"minDifficulty\":18,\"moneyAvailable\":277447480.04517,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":488,\"serverGrowth\":38}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"31.1.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":56.77774999999994,\"minDifficulty\":19,\"moneyAvailable\":950111895.7632391,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":953,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"97.5.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":45.42199999999946,\"minDifficulty\":14,\"moneyAvailable\":577802867.1134201,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":722,\"serverGrowth\":59}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107845-Netburners.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[45,44],[22,33],[11,27],[13,47],[48,2],[40,32],[3,12],[5,24]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"85.8.8.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":545,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"85.4.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":345,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-48053.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":349524410,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"97.0.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"20.3.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\".\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\".\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":513,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"16.1.3.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"38.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"32.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"77.4.4.0\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server\",\"httpPortOpen\":false,\"ip\":\"50.7.9.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-0\",\"httpPortOpen\":false,\"ip\":\"45.6.2.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-1\",\"httpPortOpen\":false,\"ip\":\"32.5.5.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-2\",\"httpPortOpen\":false,\"ip\":\"50.1.6.2\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-3\",\"httpPortOpen\":false,\"ip\":\"34.7.4.0\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    if (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":36.568,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1253,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":9.0636,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":65565.6474436194,\"favor\":0.006,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.5985,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1764,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0103,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":62.6517,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.5108,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":151.22198110570352,\"favor\":0.0185,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":15.753,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":8.29,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":4.881,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":6.0605,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.006,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":14.056,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0879,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":738114.6493700143,\"favor\":174.3099,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":13.754445512505976,\"favor\":6.0255,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":139.6506,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":300541.1938970462}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":159.4861,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":372444.9324428802}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":150.0517,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":359994.6762388759}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":128.7132,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":326824.3616439347}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":105.7305,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":298731.81854146975}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":81.0086,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":144588.33179682257}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":128.8622,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":402997.37646894896}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":144.8843,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":357568.4391337183}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":146.4483,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":352987.7424254227}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":145.5645,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":351756.7586207425}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"port1\":\"run BruteSSH.exe\",\"port2\":\"run FTPCrack.exe\",\"port3\":\"run relaySMTP.exe\",\"nuke\":\"run NUKE.exe\",\"update\":\"run /scripts/update_hack.script\",\"hacknet\":\"run /scripts/auto-hacknet-buy.js\",\"bp\":\"run /bitpacks/bp.js\",\"themes\":\"run /bitpacks/theme-browser/theme-browser.js\",\"sc\":\"scan-analyze 10\",\"port4\":\"run HTTPWorm.exe\",\"port5\":\"run SQLInject.exe\"}","GlobalAliasesSave":"{\"root\":\"run /scripts/get_root.script\",\"grind\":\"run /scripts/grind_on_all_servers.script\",\"more\":\"run ServerProfiler.exe\",\"boot\":\"run /scripts/boot.js\",\"con\":\"connect\",\"l\":\"ls\",\"prof\":\"run ServerProfiler.exe\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":5382.433519328826,\"lastPrice\":5359.21512678345,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":18.372480903703156,\"otlkMagForecast\":71.20326248026038,\"cap\":46613717,\"spreadPerc\":0.2,\"shareTxForMovement\":57009,\"shareTxUntilMovement\":57009,\"totalShares\":109200000,\"maxShares\":21800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":156408.06828250948,\"lastPrice\":157058.58931723307,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":true,\"otlkMag\":18.352867190199408,\"otlkMagForecast\":68.01081551894531,\"cap\":485667068,\"spreadPerc\":0.1,\"shareTxForMovement\":45575,\"shareTxUntilMovement\":45575,\"totalShares\":91000000,\"maxShares\":18200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":9703.26140693654,\"lastPrice\":9639.780707806167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":20.02051473176204,\"otlkMagForecast\":71.30571510260249,\"cap\":137574895,\"spreadPerc\":0.1,\"shareTxForMovement\":39396,\"shareTxUntilMovement\":39396,\"totalShares\":117500000,\"maxShares\":23500000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":7331.348257326498,\"lastPrice\":7286.521271252484,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":13.448023394697627,\"otlkMagForecast\":36.010781983747584,\"cap\":152577765,\"spreadPerc\":0.2,\"shareTxForMovement\":34796,\"shareTxUntilMovement\":34796,\"totalShares\":144600000,\"maxShares\":28900000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":22196.161342560146,\"lastPrice\":22321.17348096441,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.366309481929017,\"otlkMagForecast\":59.81708258899846,\"cap\":794036297,\"spreadPerc\":0.4,\"shareTxForMovement\":83963,\"shareTxUntilMovement\":83963,\"totalShares\":44700000,\"maxShares\":8900000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":478576.3333827425,\"lastPrice\":474424.4097753235,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":true,\"otlkMag\":11.417666308021323,\"otlkMagForecast\":61.77840871646471,\"cap\":1464192180,\"spreadPerc\":0.7,\"shareTxForMovement\":54190,\"shareTxUntilMovement\":54190,\"totalShares\":31400000,\"maxShares\":6300000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":35330.531813631875,\"lastPrice\":35569.31609339001,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":11.944705998964237,\"otlkMagForecast\":40.392021859587885,\"cap\":615873231,\"spreadPerc\":0.3,\"shareTxForMovement\":30312,\"shareTxUntilMovement\":30312,\"totalShares\":68800000,\"maxShares\":13800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":10171.02133537028,\"lastPrice\":10281.184279180748,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":false,\"otlkMag\":23.78316220410727,\"otlkMagForecast\":27.97780080174168,\"cap\":148013246,\"spreadPerc\":0.7,\"shareTxForMovement\":51297,\"shareTxUntilMovement\":51297,\"totalShares\":60400000,\"maxShares\":12100000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":16767.730961437435,\"lastPrice\":16898.491819254472,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":false,\"otlkMag\":9.673513933865825,\"otlkMagForecast\":39.51162348114614,\"cap\":79891511,\"spreadPerc\":0.5,\"shareTxForMovement\":64770,\"shareTxUntilMovement\":64770,\"totalShares\":49200000,\"maxShares\":9800000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":2615.214062572403,\"lastPrice\":2629.036926483513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":7.442375677350616,\"otlkMagForecast\":58.25938947286037,\"cap\":43461009,\"spreadPerc\":0.7,\"shareTxForMovement\":41168,\"shareTxUntilMovement\":41168,\"totalShares\":123500000,\"maxShares\":24700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":14934.084340127363,\"lastPrice\":15014.313315107223,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.01336708951181,\"otlkMagForecast\":62.26236811122399,\"cap\":70798651,\"spreadPerc\":0.8,\"shareTxForMovement\":54147,\"shareTxUntilMovement\":54147,\"totalShares\":50000000,\"maxShares\":10000000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":5082.6483868516425,\"lastPrice\":5115.678669073269,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.765936290668651,\"otlkMagForecast\":57.0598424554061,\"cap\":196884594,\"spreadPerc\":0.3,\"shareTxForMovement\":52220,\"shareTxUntilMovement\":52220,\"totalShares\":112300000,\"maxShares\":22500000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19659.125038508944,\"lastPrice\":19543.97007655639,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":5.998004437773289,\"otlkMagForecast\":55.93505319594566,\"cap\":440574131,\"spreadPerc\":0.6,\"shareTxForMovement\":44006,\"shareTxUntilMovement\":44006,\"totalShares\":37600000,\"maxShares\":7500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":79810.27728377194,\"lastPrice\":80190.6264456587,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":10.724773352690983,\"otlkMagForecast\":59.62987314250318,\"cap\":35885628,\"spreadPerc\":0.7,\"shareTxForMovement\":44733,\"shareTxUntilMovement\":44733,\"totalShares\":33500000,\"maxShares\":6700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":27761.01133903547,\"lastPrice\":27624.57457555583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":5.027954149073965,\"otlkMagForecast\":54.709238423391405,\"cap\":171360608,\"spreadPerc\":0.8,\"shareTxForMovement\":76112,\"shareTxUntilMovement\":76112,\"totalShares\":47700000,\"maxShares\":9500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":5486.689661279886,\"lastPrice\":5518.06694077657,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":3.1159311734640336,\"otlkMagForecast\":53.4054463229787,\"cap\":10914379,\"spreadPerc\":1.1,\"shareTxForMovement\":98163,\"shareTxUntilMovement\":98163,\"totalShares\":99900000,\"maxShares\":20000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":2616.224471544315,\"lastPrice\":2633.9064379358388,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":8.390174454351735,\"otlkMagForecast\":58.58937596623381,\"cap\":140579263,\"spreadPerc\":0.8,\"shareTxForMovement\":44008,\"shareTxUntilMovement\":44008,\"totalShares\":39700000,\"maxShares\":7900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":13644.158544469577,\"lastPrice\":13573.590683478687,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":12.077936849875856,\"otlkMagForecast\":62.515897841253455,\"cap\":114625120,\"spreadPerc\":0.6,\"shareTxForMovement\":60873,\"shareTxUntilMovement\":60873,\"totalShares\":38600000,\"maxShares\":7700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":18560.346853340412,\"lastPrice\":18437.334194000163,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.678011789302814,\"otlkMagForecast\":45.290432927842495,\"cap\":195631159,\"spreadPerc\":0.7,\"shareTxForMovement\":81566,\"shareTxUntilMovement\":81566,\"totalShares\":34100000,\"maxShares\":6800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":37755.20571767301,\"lastPrice\":38586.14925036029,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":true,\"otlkMag\":8.200070913016292,\"otlkMagForecast\":56.446380270425514,\"cap\":101305754,\"spreadPerc\":1,\"shareTxForMovement\":28349,\"shareTxUntilMovement\":28349,\"totalShares\":108800000,\"maxShares\":21800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":6152.632367168508,\"lastPrice\":6082.014723853516,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.34,\"b\":true,\"otlkMag\":9.833920656810538,\"otlkMagForecast\":58.87737666181092,\"cap\":43755791,\"spreadPerc\":1,\"shareTxForMovement\":58006,\"shareTxUntilMovement\":58006,\"totalShares\":54500000,\"maxShares\":10900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3283.9627375494983,\"lastPrice\":3265.2892024549274,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":5.321688712172587,\"otlkMagForecast\":45.897763980999336,\"cap\":22427789,\"spreadPerc\":0.4,\"shareTxForMovement\":104089,\"shareTxUntilMovement\":104089,\"totalShares\":46900000,\"maxShares\":9400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":3216.251677921399,\"lastPrice\":3266.972042688727,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.82,\"b\":true,\"otlkMag\":8.92171656729595,\"otlkMagForecast\":60.34035533864276,\"cap\":108401050,\"spreadPerc\":1.2,\"shareTxForMovement\":30679,\"shareTxUntilMovement\":30679,\"totalShares\":32700000,\"maxShares\":6500000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":22756.4539533896,\"lastPrice\":22447.19649172786,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.59,\"b\":false,\"otlkMag\":5.0570465469041155,\"otlkMagForecast\":45.55972329533831,\"cap\":9540684,\"spreadPerc\":0.8,\"shareTxForMovement\":59228,\"shareTxUntilMovement\":59228,\"totalShares\":34600000,\"maxShares\":6900000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":2678.0722989002174,\"lastPrice\":2658.7208723666067,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":true,\"otlkMag\":5.357460684498204,\"otlkMagForecast\":53.2492678071528,\"cap\":18102536,\"spreadPerc\":0.8,\"shareTxForMovement\":113376,\"shareTxUntilMovement\":113376,\"totalShares\":72600000,\"maxShares\":14500000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1841.088245411968,\"lastPrice\":1779.7128965026243,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.98,\"b\":true,\"otlkMag\":6.815384836981428,\"otlkMagForecast\":47.02088153314131,\"cap\":51694020,\"spreadPerc\":1.4,\"shareTxForMovement\":51558,\"shareTxUntilMovement\":51558,\"totalShares\":23400000,\"maxShares\":4700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4996.46669066643,\"lastPrice\":4951.843440511585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":5.339104894199372,\"otlkMagForecast\":54.21473287333342,\"cap\":48257466,\"spreadPerc\":1,\"shareTxForMovement\":58326,\"shareTxUntilMovement\":58326,\"totalShares\":15800000,\"maxShares\":3200000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":6400.986825779723,\"lastPrice\":6444.803052900081,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":5.70620043695558,\"otlkMagForecast\":45.83559540418941,\"cap\":27949441,\"spreadPerc\":0.6,\"shareTxForMovement\":148507,\"shareTxUntilMovement\":148507,\"totalShares\":12300000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":589.5010869597373,\"lastPrice\":578.080610980739,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.28,\"b\":true,\"otlkMag\":7.7865260559388165,\"otlkMagForecast\":58.38116982389537,\"cap\":67310053,\"spreadPerc\":1.3,\"shareTxForMovement\":58210,\"shareTxUntilMovement\":58210,\"totalShares\":10000000,\"maxShares\":2000000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":2595.4318611444482,\"lastPrice\":2535.0264094280924,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.75,\"b\":false,\"otlkMag\":8.07372115400873,\"otlkMagForecast\":39.403919566223706,\"cap\":16096239,\"spreadPerc\":1.3,\"shareTxForMovement\":43892,\"shareTxUntilMovement\":43892,\"totalShares\":59700000,\"maxShares\":11900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":2080.3783764878576,\"lastPrice\":2102.370294926475,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":12.27620123511579,\"otlkMagForecast\":62.91886740996741,\"cap\":16072755,\"spreadPerc\":0.5,\"shareTxForMovement\":37704,\"shareTxUntilMovement\":37704,\"totalShares\":117000000,\"maxShares\":23400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":24527.838722012668,\"lastPrice\":24691.486819797075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":11.427760531166388,\"otlkMagForecast\":38.943113882961676,\"cap\":364336823,\"spreadPerc\":1,\"shareTxForMovement\":185899,\"shareTxUntilMovement\":185899,\"totalShares\":21600000,\"maxShares\":4300000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":6942.754966609246,\"lastPrice\":6980.654454500281,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":11.78507532224072,\"otlkMagForecast\":63.79352477421161,\"cap\":94435441,\"spreadPerc\":0.7,\"shareTxForMovement\":101225,\"shareTxUntilMovement\":101225,\"totalShares\":30800000,\"maxShares\":6200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":528591,\"lastUpdate\":1646974084283,\"ticksUntilCycle\":20}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":20,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":250,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"on\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-107,\"y\":28,\"opened\":true}}","VersionSave":"11","AllGangsSave":"","LastExportBonus":"1646956752501","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}