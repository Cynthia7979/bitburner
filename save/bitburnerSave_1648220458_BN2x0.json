{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":13527,\"hp\":117,\"max_hp\":117,\"strength\":1241,\"defense\":1079,\"dexterity\":1543,\"agility\":915,\"charisma\":380,\"intelligence\":0,\"hacking_chance_mult\":3.7256985830324325,\"hacking_speed_mult\":3.1262348446101096,\"hacking_money_mult\":19.742355644563126,\"hacking_grow_mult\":11.297836404623691,\"hacking_exp\":83948717138731.92,\"strength_exp\":271677.0292432693,\"defense_exp\":271677.0292432693,\"dexterity_exp\":271677.0292432693,\"agility_exp\":271677.0292432693,\"charisma_exp\":54339.95942267676,\"intelligence_exp\":0,\"hacking_mult\":20.47274457751846,\"strength_mult\":6.191050017567896,\"defense_mult\":5.383521754406866,\"dexterity_mult\":7.700713752620992,\"agility_mult\":4.5656405647950535,\"charisma_mult\":2.550251162516167,\"hacking_exp_mult\":23.976963816127828,\"strength_exp_mult\":3.786745538217903,\"defense_exp_mult\":3.786745538217903,\"dexterity_exp_mult\":3.786745538217903,\"agility_exp_mult\":3.786745538217903,\"charisma_exp_mult\":3.4008130554478617,\"company_rep_mult\":10.678881575077828,\"faction_rep_mult\":2.133642672343222,\"money\":1059464942846.887,\"city\":\"Volhaven\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"grinding-server-9\",\"grinding-server-10\",\"grinding-server-11\",\"grinding-server-12\",\"grinding-server-13\",\"grinding-server-14\",\"grinding-server-15\",\"grinding-server-16\",\"grinding-server-17\",\"grinding-server-18\",\"grinding-server-19\",\"grinding-server-20\",\"grinding-server-21\",\"grinding-server-22\",\"grinding-server-23\",\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\",\"grinding-server-4\",\"grinding-server-5\",\"grinding-server-6\",\"grinding-server-7\",\"grinding-server-8\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352754.0000018385,\"ram\":64,\"totalMoneyGenerated\":12761833537.518064,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352754.0000018385,\"ram\":64,\"totalMoneyGenerated\":12761725195.398796,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352753.8000018385,\"ram\":64,\"totalMoneyGenerated\":12761723480.398174,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352753.60000183847,\"ram\":64,\"totalMoneyGenerated\":12761666915.293774,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352753.60000183847,\"ram\":64,\"totalMoneyGenerated\":12761647897.45768,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.8000018385,\"ram\":64,\"totalMoneyGenerated\":12761591050.995495,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.6000018384,\"ram\":64,\"totalMoneyGenerated\":12761584973.01967,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.40000183845,\"ram\":64,\"totalMoneyGenerated\":12761582676.77983,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.40000183845,\"ram\":64,\"totalMoneyGenerated\":12761526381.66243,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.20000183844,\"ram\":64,\"totalMoneyGenerated\":12761524053.083366,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.20000183844,\"ram\":64,\"totalMoneyGenerated\":12761519271.654076,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.00000183843,\"ram\":64,\"totalMoneyGenerated\":12761517502.346663,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352752.00000183843,\"ram\":64,\"totalMoneyGenerated\":12761460661.153925,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.8000018384,\"ram\":64,\"totalMoneyGenerated\":12761459210.296658,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.8000018384,\"ram\":64,\"totalMoneyGenerated\":12761451514.359394,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.6000018384,\"ram\":64,\"totalMoneyGenerated\":12761448388.540283,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.6000018384,\"ram\":64,\"totalMoneyGenerated\":12761340785.830833,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.4000018384,\"ram\":64,\"totalMoneyGenerated\":12761240567.552402,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.4000018384,\"ram\":64,\"totalMoneyGenerated\":12761235013.654423,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.2000018384,\"ram\":64,\"totalMoneyGenerated\":12761231861.381065,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.2000018384,\"ram\":64,\"totalMoneyGenerated\":12761226394.264023,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352751.0000018384,\"ram\":64,\"totalMoneyGenerated\":12761222551.566483,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352721.0000018375,\"ram\":64,\"totalMoneyGenerated\":12761218934.831804,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352680.4000018363,\"ram\":64,\"totalMoneyGenerated\":12761154906.823246,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352596.40000183386,\"ram\":64,\"totalMoneyGenerated\":12760935210.559414,\"name\":\"hacknet-node-24\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":352132.40000182024,\"ram\":64,\"totalMoneyGenerated\":12745410650.667477,\"name\":\"hacknet-node-25\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":351917.80000181845,\"ram\":64,\"totalMoneyGenerated\":12737601374.167744,\"name\":\"hacknet-node-26\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":351584.2000018016,\"ram\":64,\"totalMoneyGenerated\":12723119475.523819,\"name\":\"hacknet-node-27\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":350979.4000017835,\"ram\":64,\"totalMoneyGenerated\":12697160833.599476,\"name\":\"hacknet-node-28\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":349925.8000017834,\"ram\":64,\"totalMoneyGenerated\":12653562976.129065,\"name\":\"hacknet-node-29\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":315349.80000150116,\"ram\":64,\"totalMoneyGenerated\":11413831201.71583,\"name\":\"hacknet-node-30\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":315135.4000015053,\"ram\":64,\"totalMoneyGenerated\":11404985458.334208,\"name\":\"hacknet-node-31\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":314711.2000015133,\"ram\":64,\"totalMoneyGenerated\":11387441362.200607,\"name\":\"hacknet-node-32\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":36201.439677524155,\"onlineTimeSeconds\":313986.400001527,\"ram\":64,\"totalMoneyGenerated\":11355201552.70985,\"name\":\"hacknet-node-33\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Daedalus\",\"The Covenant\",\"NiteSec\",\"Sector-12\",\"Slum Snakes\",\"Netburners\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"},{\"level\":38,\"name\":\"NeuroFlux Governor\"},{\"level\":39,\"name\":\"NeuroFlux Governor\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"The Red Pill\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":-80.35,\"crime_money_mult\":2.0408755996326478,\"crime_success_mult\":2.1083425616039744,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":3.671086681785838,\"hacknet_node_money_mult\":3.947248842891618,\"hacknet_node_purchase_cost_mult\":0.4748561284793695,\"hacknet_node_ram_cost_mult\":0.6207269653325093,\"hacknet_node_core_cost_mult\":0.6207269653325093,\"hacknet_node_level_cost_mult\":0.5276179205326329,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"NiteSec\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":72678.51406326603,\"hack\":204189,\"str\":4,\"def\":4,\"dex\":4,\"agi\":4,\"cha\":48011,\"hack_exp\":8020273.550954571,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":845962.7858025536,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":793571436.9607408,\"str_asc_points\":31982.953315510724,\"def_asc_points\":31982.953315510724,\"dex_asc_points\":31982.953315510724,\"agi_asc_points\":31982.953315510724,\"cha_asc_points\":82242623.860849,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Another_Me\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":73462.17077492205,\"hack\":207313,\"str\":6,\"def\":6,\"dex\":6,\"agi\":6,\"cha\":47417,\"hack_exp\":8131366.4984175395,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":836730.8439127671,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":815708030.0661268,\"str_asc_points\":84549.27868378145,\"def_asc_points\":84549.27868378145,\"dex_asc_points\":84043.69430268735,\"agi_asc_points\":84043.69430268735,\"cha_asc_points\":80457400.53414157,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Me\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":74566.30701209488,\"hack\":211131,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":48419,\"hack_exp\":8266968.938810415,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":852282.7610237799,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":843141133.2373041,\"str_asc_points\":28697.620955768787,\"def_asc_points\":28697.620955768787,\"dex_asc_points\":28697.620955768787,\"agi_asc_points\":28697.620955768787,\"cha_asc_points\":83476041.91229375,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Ethical Hacker\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":75029.73234924705,\"hack\":212810,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":48615,\"hack_exp\":8326549.094530777,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":855327.6816313894,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":855337985.7162559,\"str_asc_points\":29683.220663691372,\"def_asc_points\":29683.220663691372,\"dex_asc_points\":29683.220663691372,\"agi_asc_points\":29683.220663691372,\"cha_asc_points\":84073571.22570153,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Wow that was fast\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":73832.22925532183,\"hack\":208627,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":47642,\"hack_exp\":8178057.680863651,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":840220.691292923,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":825102692.2028974,\"str_asc_points\":27383.488011872007,\"def_asc_points\":27383.488011872007,\"dex_asc_points\":27383.488011872007,\"agi_asc_points\":27383.488011872007,\"cha_asc_points\":81129945.59282996,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"Another_Another_Me\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":71768.49877121736,\"hack\":201572,\"str\":12,\"def\":12,\"dex\":12,\"agi\":12,\"cha\":45613,\"hack_exp\":7927059.934965738,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":808635.1190608362,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":775232460.3225609,\"str_asc_points\":329715.33839818276,\"def_asc_points\":329715.33839818276,\"dex_asc_points\":327213.8570961226,\"agi_asc_points\":327213.8570961226,\"cha_asc_points\":75144921.97517072,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"How Many Words Can I Type Is There A Limit? No There Doesn't Actually Seem to Be One My Name Is Josh Balabalabalabalabalabalabalabala Well that was nice there's even auto spellcheck are you serious this is a gang member name how will it be displayed? I'm genuinely surprised it keeps going keeps going keeps going keeps going yeah just keep typing until there's nothing left ok i think I should stop\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":73876.62794772847,\"hack\":208362,\"str\":13,\"def\":13,\"dex\":12,\"agi\":12,\"cha\":48973,\"hack_exp\":8168653.312108229,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":860877.4835733942,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":823206127.3418193,\"str_asc_points\":336959.5765305299,\"def_asc_points\":337953.9710768746,\"dex_asc_points\":336003.09416869114,\"agi_asc_points\":335117.16911878577,\"cha_asc_points\":85168135.14825325,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"unique name\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":571,\"str\":3281,\"def\":3333,\"dex\":3087,\"agi\":3138,\"cha\":177,\"hack_exp\":0,\"str_exp\":15037.597918880076,\"def_exp\":15222.800629390415,\"dex_exp\":14678.544627309084,\"agi_exp\":14866.755161875019,\"cha_exp\":0,\"hack_mult\":1,\"str_mult\":1.04,\"def_mult\":1.04,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":648736666.8083447,\"str_asc_points\":1678636.755463486,\"def_asc_points\":1720239.4800434518,\"dex_asc_points\":1629599.089400532,\"agi_asc_points\":1671656.943241081,\"cha_asc_points\":62561395.475185595,\"upgrades\":[\"Baseball Bat\"],\"augmentations\":[],\"name\":\"Great New Gang Member\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":69723.52058846415,\"hack\":199570,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":44478,\"hack_exp\":7701768.043814372,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":775769.857059057,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":764482338.365687,\"str_asc_points\":23557.0420869961,\"def_asc_points\":23557.0420869961,\"dex_asc_points\":23557.0420869961,\"agi_asc_points\":23557.0420869961,\"cha_asc_points\":72265524.24822515,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"New\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":70490.11596296083,\"hack\":201941,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":46146,\"hack_exp\":7784597.611858202,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":801313.4718123284,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":781014189.7673186,\"str_asc_points\":24194.783074475425,\"def_asc_points\":24194.783074475425,\"dex_asc_points\":24194.783074475425,\"agi_asc_points\":24194.783074475425,\"cha_asc_points\":77102816.78611895,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"POGCHAMP\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Money Laundering\",\"earnedRespect\":69459.01068122279,\"hack\":198332,\"str\":3,\"def\":3,\"dex\":3,\"agi\":3,\"cha\":45207,\"hack_exp\":7658466.790293817,\"str_exp\":0,\"def_exp\":0,\"dex_exp\":0,\"agi_exp\":0,\"cha_exp\":786943.7799726086,\"hack_mult\":1.05,\"str_mult\":1,\"def_mult\":1,\"dex_mult\":1,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":755910284.1075292,\"str_asc_points\":23827.598869563088,\"def_asc_points\":23827.598869563088,\"dex_asc_points\":23827.598869563088,\"agi_asc_points\":23827.598869563088,\"cha_asc_points\":74362292.48433104,\"upgrades\":[\"NUKE Rootkit\"],\"augmentations\":[],\"name\":\"asdf\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":0,\"hack\":698,\"str\":2843,\"def\":2101,\"dex\":2648,\"agi\":1970,\"cha\":195,\"hack_exp\":95654.67740646571,\"str_exp\":338783.7094523454,\"def_exp\":306783.56948089326,\"dex_exp\":326141.9886990276,\"agi_exp\":297621.35730578273,\"cha_exp\":13592.921869892332,\"hack_mult\":1,\"str_mult\":1.352,\"def_mult\":1.04,\"dex_mult\":1.3,\"agi_mult\":1,\"cha_mult\":1,\"hack_asc_points\":34899.36350670465,\"str_asc_points\":205476.170340373,\"def_asc_points\":195522.0132839376,\"dex_asc_points\":195061.12165253714,\"agi_asc_points\":187716.4798523662,\"cha_asc_points\":6860.904383144002,\"upgrades\":[\"Baseball Bat\"],\"augmentations\":[\"Bionic Arms\"],\"name\":\"oH,+RnQL7e.u_g/\"}}],\"wanted\":2766.845369741769,\"respect\":723635.0753008862,\"isHackingGang\":true,\"respectGainRate\":58.395555195481975,\"wantedGainRate\":0.1682075184815502,\"moneyGainRate\":866015.3465423887,\"storedCycles\":9,\"storedTerritoryAndPowerCycles\":91,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":2,\"lastUpdate\":1648220457767,\"lastSave\":1648220450766,\"totalPlaytime\":2290969200,\"playtimeSinceLastAug\":353074600,\"playtimeSinceLastBitnode\":827665800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-739520,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":4222283614000.3887,\"hacking\":1546171725132.818,\"hacknet\":428154383900.324,\"hacknet_expenses\":-686147910886.9338,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1059463942846.886,\"work\":0,\"servers\":-2806166755391.523,\"other\":-5305900000,\"augmentations\":-1639524474443.9883}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-19226304,\"codingcontract\":0,\"corporation\":0,\"crime\":104917233.88818811,\"gang\":7994000975405.188,\"hacking\":1562754624813.088,\"hacknet\":682923204358.1584,\"hacknet_expenses\":-1708141643999.152,\"hospitalization\":-45279946.40679498,\"infiltration\":15647488.991711346,\"sleeves\":0,\"stock\":0,\"total\":1247360895990.7412,\"work\":282076540.92697334,\"servers\":-4379075111175.2026,\"other\":-17185298690.609123,\"augmentations\":-2888253989630.18}},\"scriptProdSinceLastAug\":1520295556901.1846,\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1645937098713},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1645945619517},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1645945799518},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1645956415952},{\"ID\":\"TOR\",\"unlockedOn\":1645957015948},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1645964175169},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1645964535170},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1645964655180},{\"ID\":\"NITESEC\",\"unlockedOn\":1646008184016},{\"ID\":\"WORKOUT\",\"unlockedOn\":1646010884426},{\"ID\":\"TRAVEL\",\"unlockedOn\":1646037906914},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1646039647920},{\"ID\":\"NS2\",\"unlockedOn\":1646103650911},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1646107006372},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1646111040952},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1646131379336},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1646133043592},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1646141161803},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1646142062592},{\"ID\":\"4S\",\"unlockedOn\":1646178149739},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1646217763426},{\"ID\":\"FROZE\",\"unlockedOn\":1646220263671},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1646297619771},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1646440491301},{\"ID\":\"DONATION\",\"unlockedOn\":1646812121257},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1646976391367},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1646977487772},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1647239711297},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1647253110482},{\"ID\":\"INDECISIVE\",\"unlockedOn\":1647390906110},{\"ID\":\"SF1.1\",\"unlockedOn\":1647392826093},{\"ID\":\"N00DLES\",\"unlockedOn\":1647428752184},{\"ID\":\"GANG\",\"unlockedOn\":1647514031165},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1647664694526},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1647665954520},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1647906255048},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1647908109110}],\"terminalCommandHistory\":[\"con sigma-cosmetics\",\"weaken\",\"home\",\"boot --no-hack --weaken-server foodnstuff\",\"run scripts/exp_rate.js 5\",\"nano scripts/boot.js\",\"cd scripts/\",\"l\",\"boot --no-hack --no-buy-servers\",\"scan\",\"nano scripts/update_hack.script\",\"nano scripts/transport_files.js\",\"nano all_servers_names.txt\",\"update\",\"tail 6\",\"boot --no-hack --no-buy-servers\",\"nano scripts/weaken_and_grow_only.script\",\"boot --grind-hack --no-hack --no-buy-servers\",\"boot --no-hack --no-buy-servers\",\"nano scripts/boot.js\",\"boot --no-hack --no-buy-servers\",\"cd scripts/\",\"l\",\"boot --no-hack --no-buy-servers\",\"nano scripts/boot.js\",\"boot --weaken-server foodnstuff --no-buy-servers\",\"nano scripts/boot.js\",\"boot --weaken-server foodnstuff --no-buy-servers --fast\",\"boot --weaken-server foodnstuff --no-buy-servers --no-hack\",\"boot --no-buy-servers --no-hack --weaken-server foodnstuff\",\"nano scripts/exp_rate.js\",\"run scripts/exp_rate.js 1\",\"nano scripts/hack.js\",\"nano scripts/hack.script\",\"cd scripts/\",\"l\",\"nano weaken-exp-grind.js\",\"nano weaken_and_grow_only.js\",\"alias\",\"unalias update\",\"alias update=\\\"run /scripts/transport_files.js\\\"\",\"update\",\"l\",\"boot --no-buy-servers --no-buy-hacknet\",\"nano /todo.txt\",\"boot --no-hack --weaken-server foodnstuff --no-buy-servers --no-buy-hacknet\",\"boot --no-buy-servers --no-buy-hacknet --grind-hack joesguns\",\"nano scripts/boot.js\",\"boot --no-buy-servers --no-buy-hacknet --grind-hack --single-hack-server joesguns\",\"nano scripts/gangs_my.js\"],\"identifier\":\"b82959b7efaf8\",\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"10.7.3.1\",\"isConnectedTo\":true,\"maxRam\":16384,\"messages\":[\"hackers-starting-handbook.lit\",\"icarus.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/victims.txt').split('\\\\r\\\\n');\\r\\nlist_of_servers.pop()\\r\\n\\r\\nvar i = 0;\\r\\n\\r\\nwhile (true) {\\r\\n\\tfor (i = 0; i < list_of_servers.length; i++) {\\r\\n\\t\\tserver = list_of_servers[i];\\r\\n\\t\\tprint('Working on ' + server + '...');\\r\\n\\r\\n\\t\\tif (getServerMoneyAvailable(server) < 0.7 * getServerMaxMoney(server)) {\\r\\n\\t\\t\\tgrow(server);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\thack(server);\\r\\n\\r\\n\\t\\tif (getServerSecurityLevel(server) >= 1.25 * getServerMinSecurityLevel(server)) {\\r\\n\\t\\t\\tweaken(server)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/hack_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/victims.txt').split('\\\\r\\\\n \\\\r\\\\n')[0].split('\\\\r\\\\n');\\r\\n\\r\\n// Check if hack.script exists\\r\\nif (!fileExists('/scripts/hack.script')) {\\r\\n    // If not, copy it over\\r\\n    print('hack.script is not on this server. Copying over from home...')\\r\\n    scp('/scripts/hack.script', 'home', getHostname());\\r\\n    print('Successfully copied hack.script.')\\r\\n}\\r\\n\\r\\n// Start hack.script for all given servers\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    print('Starting hack for server', servers[i]);\\r\\n    run('/scripts/hack.script', 1, servers[i]);\\r\\n}\",\"filename\":\"/scripts/auto_start_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.35,\"server\":\"home\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = args;\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    exec('/scripts/auto_start_hack.script', servers_to_autorun[i], 1, \\r\\n    'neo-net', 'zer0', 'silver-helix', 'iron-gym', 'CSEC', 'max-hardware', 'harakiri-sushi', 'hong-fang-tea', 'nectar-net', 'n00dles', 'foodnstuff', 'sigma-cosmetics', 'joesguns');\\r\\n}\",\"filename\":\"/scripts/remote_auto_run.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers_to_autorun = read('/victims.txt').split('\\\\r\\\\n').concat(read('/grind_servers.txt').split('\\\\r\\\\n'));\\r\\nprint(servers_to_autorun)\\r\\n\\r\\nfor (var i = 0; i < servers_to_autorun.length; i++) {\\r\\n    s = servers_to_autorun[i];\\r\\n    if (s != ' ' && s) {\\r\\n        tprint(s);\\r\\n        exec('/scripts/auto_start_hack.script', servers_to_autorun[i]);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done');\",\"filename\":\"/scripts/remote_auto_hack_from_home.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var num_ports = args[0];\\r\\nvar port_opener = [brutessh, ftpcrack, relaysmtp, httpworm, sqlinject].slice(0, num_ports);\\r\\nvar servers = args.slice(1);\\r\\nvar port_opened, server;\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    port_opened = true;\\r\\n    server = servers[i];\\r\\n    if (!hasRootAccess(server)) {\\r\\n        print('Attempting to take over server ', server, '...');\\r\\n        // Currently only supports up to 3 ports requirement\\r\\n        for (var j = 0; j < getServerNumPortsRequired(server); j++) {\\r\\n            try {\\r\\n                port_opener[j](server);\\r\\n            } catch (e) {\\r\\n                tprint('ERROR: More than ', num_ports, ' open ports needed for ', server, '.');\\r\\n                port_opened = false;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (port_opened) {\\r\\n            nuke(server);\\r\\n            // installBackdoor(server);\\r\\n            tprint('Server ', server, ' rooted. Install backdoor manually please.');\\r\\n        }\\r\\n    } else {\\r\\n        print('WARNING: Already rooted ', server, ', skipping progress...')\\r\\n    }\\r\\n    \\r\\n    print('Transporting hack files to ', server);\\r\\n    scp('/scripts/hack.script', server);\\r\\n    scp('/scripts/weaken-exp-grind.script', server);\\r\\n    scp('/scripts/simple_hack.script', server);\\r\\n    scp('/scripts/weaken_and_grow_only.script', server);\\r\\n    print('Done.')\\r\\n}\",\"filename\":\"/scripts/get_root.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var list_of_servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/all_servers_names.txt').split('\\\\r\\\\n'));\\r\\n\\r\\nfor (var i = 0; i < list_of_servers.length; i++) {\\r\\n    s = list_of_servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        tprint(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        run('/scripts/transport_files.js', 1, s);\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/update_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read(\\\"victims.txt\\\").split('\\\\r\\\\n \\\\r\\\\n')[0].split(\\\"\\\\r\\\\n\\\");\\r\\nfor (var i; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    console.log(getServerRam(s), '/', getServerMaxRam(s))\\r\\n}\",\"filename\":\"/scripts/mem_for_all.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"hostName = getHostname();\\r\\nscanArray = [hostName];\\r\\ncurrentScanLength = 0;\\r\\nservers = [];\\r\\nwhile (currentScanLength < scanArray.length) {\\r\\n    previousScanLength = currentScanLength;\\r\\n    currentScanLength = scanArray.length;\\r\\n    for (i = previousScanLength; i < currentScanLength; i++) {\\r\\n        currentHost = scanArray[i];\\r\\n        server = [currentHost, getServerRequiredHackingLevel(currentHost), getServerMaxMoney(currentHost), getServerGrowth(currentHost), getServerSecurityLevel(currentHost)];\\r\\n        servers.push(server);\\r\\n        // uncomment this if you'd like to see a printout of the array as it is being made\\r\\n        tprint(server[0]);\\r\\n        tprint('----------------');\\r\\n        tprint('Difficulty: ' + server[1] + ' | Potential: $' + server[2]);\\r\\n        tprint('Growth Rate: ' + server[3] + ' | Security: ' + server[4]);\\r\\n        tprint('----------------');\\r\\n        newScan = scan(currentHost);\\r\\n        for (j = 0; j < newScan.length; j++) {\\r\\n            if (scanArray.indexOf(newScan[j]) == -1 && !newScan[j].includes('grinding-server')) {\\r\\n                scanArray.push(newScan[j]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nwrite('/the_network.txt', JSON.stringify(servers), 'w');\\r\\ntprint('Done. Saved to file /the_network.txt')\",\"filename\":\"/scripts/scrape-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.25,\"server\":\"home\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Load server list from file\\r\\nvar serverList = JSON.parse(read('/the_network.txt'));\\r\\ntprint('Sorting...');\\r\\n\\r\\n// Slow version\\r\\nservers.sort(function(a, b) {\\r\\n    print(a, b);\\r\\n    var keyA = a[1],  // Required Hacking Level\\r\\n    keyB = b[1];\\r\\n    // Compare the 2 dates\\r\\n    if (keyA < keyB) return -1;\\r\\n    if (keyA > keyB) return 1;\\r\\n    return 0;\\r\\n});\\r\\n\\r\\ntprint(servers.join('\\\\n'));\\r\\n\\r\\n// Possibly slower version\\r\\n// sortedServerList = [];\\r\\n// while (serverList.length > 0) {\\r\\n//     print(serverList.length);\\r\\n//     lowest = 99999;\\r\\n//     index = null;\\r\\n    \\r\\n//     for (i = 0; i < serverList.length; i++) {\\r\\n//         if (serverList[i][1] < lowest) {\\r\\n//             lowest = serverList[i][1];\\r\\n//             index = i;\\r\\n//         }\\r\\n//     }\\r\\n//     sortedServerList.push(serverList[index]);\\r\\n//     serverList.splice(index, 1);\\r\\n// }\\r\\n// tprint(sortedServerList.join('\\\\n'));\",\"filename\":\"/scripts/sort_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0] ? args[0] : 'n00dles';\\r\\nvar servers = read('/grind_servers.txt').split('\\\\r\\\\n');\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    if (!['', ' '].includes(s)) {\\r\\n        var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n        print(ram_for_one, ' ', available_ram);\\r\\n        var threads = Math.floor(available_ram / ram_for_one);\\r\\n        if (threads > 0) {\\r\\n            exec('/scripts/weaken_and_grow_only.script', s, threads, target); // Fastest\\r\\n            tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n        } else {\\r\\n            print('Skipping ', s);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/grind_on_my_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servers = read('/grind_servers.txt').split('\\\\r\\\\n').concat(read('/all_servers_names.txt').split('\\\\r\\\\n')).concat(['home']);\\r\\nif (args) {\\r\\n    var server_to_grind = args[0];\\r\\n} else {\\r\\n    var server_to_grind = 'noodles';\\r\\n}\\r\\n\\r\\nvar ram_for_one = getScriptRam('/scripts/weaken-exp-grind.script');\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n    var s = servers[i];\\r\\n    if (s == '' || s == ' ' || s == '!!!' || !s) {\\r\\n        print(s, ' is skipped because it is not a server');\\r\\n        continue;\\r\\n    } else {\\r\\n        var available_ram = getServerMaxRam(s) - getServerUsedRam(s);\\r\\n        print(ram_for_one, ' ', available_ram);\\r\\n        var threads = Math.floor(available_ram / ram_for_one);\\r\\n        if (threads > 0) {\\r\\n            exec('/scripts/weaken-exp-grind.script', s, threads, server_to_grind);\\r\\n            tprint('weaken-exp-grind started on ', s, ' with ', threads, ' threads.');\\r\\n        } else {\\r\\n            print('Skipping ', s);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint('Done.')\",\"filename\":\"/scripts/grind_on_all_servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\n// Copied from https://www.reddit.com/r/Bitburner/comments/rj8n5o/hacknet_autopurchase_script_with_protected_cash/\\n// Because I got lazy\\n\\nexport async function main(ns) {\\n    // How many levels to buy at once\\n    var numLevels = 10;\\n    // How much money to keep around for buying upgrades, etc.\\n    // Start with current player amount.  Will grow over time with each purchase.\\n    var minMoney = 0.9 * ns.getPlayer().money;\\n\\n    // Setup\\n    var cost, purchased, usableMoney;\\n    var net = ns.hacknet;\\n\\n    ns.tprint('auto-hacknet-buy.js running!')\\n\\n    while (true) {\\n        // Check our cash situation\\n        usableMoney = Math.max(0, ns.getPlayer().money - minMoney);\\n        // Track if anything changes\\n        purchased = false;\\n\\n        // Can we buy a node?\\n        var nodeCost = net.getPurchaseNodeCost();\\n        if (nodeCost < usableMoney) {\\n            // Yep, let's rock\\n            net.purchaseNode();\\n            ns.print('HackNet node purchased: $' + format(nodeCost));\\n            minMoney += nodeCost / 2;\\n            purchased = true;\\n            \\n        } else {\\n            // Find cheapest upgrade of each type\\n            var minCost = Infinity;\\n            var node = null;\\n            var type = null;\\n            // Run all nodes & analyze\\n            for (var n = 0; n < net.numNodes(); n++) {\\n                // Check ram upgrade cost\\n                cost = net.getRamUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'ram';\\n                }\\n                // Check level upgrade cost\\n                cost = net.getLevelUpgradeCost(n, numLevels);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'level';\\n                }\\n                // Check cpu upgrade cost\\n                cost = net.getCoreUpgradeCost(n, 1);\\n                if (cost < minCost) {\\n                    node = n;\\n                    minCost = cost;\\n                    type = 'cpu';\\n                }\\n            }\\n            \\n            if (type && minCost < usableMoney) {\\n                // Have something to buy!\\n                if (type == 'ram') {\\n                    net.upgradeRam(node, 1);\\n                } else if (type == 'level') {\\n                    net.upgradeLevel(node, numLevels);\\n                } else if (type == 'cpu') {\\n                    net.upgradeCore(node, 1);\\n                }\\n                ns.print('Upgrading HackNet ' + type + ' for $' + format(minCost));\\n                minMoney += minCost / 2;\\n                purchased = true;\\n            }\\n        }\\n        \\n        // And sleep for a bit\\n        await ns.sleep(purchased ? 100 : 30000);\\n    }\\n}\\n\\nfunction format(num) {\\n    return (Math.round(num * 100) / 100).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, \\\",\\\");\\n}\",\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/auto-hacknet-buy.js\",\"url\":\"blob:file:///fcebb256-da9c-4652-ac52-017dd2800c5c\",\"moduleSequenceNumber\":1712}],\"dependents\":[],\"ramUsage\":6.1,\"server\":\"home\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    Math.floor = (number) => { return 1 };Math.random = () => { return 0 };\\n}\",\"filename\":\"/scripts/roulette.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/roulette.js\",\"url\":\"blob:file:///9637333b-66dd-40cb-adba-173556b3a414\",\"moduleSequenceNumber\":1096}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.hack('n00dles');\\n    }\\n}\",\"filename\":\"/scripts/startup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/startup.js\",\"url\":\"blob:file:///aaf7ae4b-0efc-4c4f-ac7e-f5785d178b2d\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var player,\\n    time = ns.args[0] ? ns.args[0] : 2;\\n\\n    ns.tprint('Beginning recording hacking exp, please wait ', time, ' minutes...');\\n\\n    player = ns.getPlayer();\\n    const initial_hack_exp = player.hacking_exp;\\n    const start_time = Date.now();\\n\\n    await ns.sleep(time * 60000);  // Wait for the specified amount of minutes\\n\\n    player = ns.getPlayer();\\n    const new_hack_exp = player.hacking_exp;\\n    const end_time = Date.now();\\n\\n    ns.tprint(`Time Elapsed: ${end_time - start_time} ms`)\\n    ns.tprint('Your hacking exp growth rate is: ', (new_hack_exp - initial_hack_exp) / ((end_time - start_time) / 1000), ' / s');\\n}\",\"filename\":\"/scripts/exp_rate.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/exp_rate.js\",\"url\":\"blob:file:///3f1492f7-a9fb-4edc-a435-b374585df4af\",\"moduleSequenceNumber\":169869}],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"home\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    grow(server);\\r\\n}\",\"filename\":\"/scripts/simple_grow.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const host_names = ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n    const ports_available = ns.args[0];\\n    const port_openers = [ns.brutessh, ns.ftpcrack, ns.relaysmtp, ns.httpworm, ns.sqlinject].slice(0, ports_available);\\n\\n    for (let i = 0; i < host_names.length; i++) {\\n        // let port_opened = true;\\n        let server = host_names[i];\\n        if (!['', ' '].includes(server)) {\\n            if (!ns.hasRootAccess(server)) {\\n                ns.print('Attempting to take over server ', server, '...');\\n                let ports_required = ns.getServerNumPortsRequired(server);\\n                if (ports_required > ports_available) {\\n                    ns.print('ERROR: More than ', ports_available, ' open ports needed for ', server, '.');\\n                    // port_opened = false;\\n                } else {\\n                    port_openers.forEach(f => f(server));\\n                    ns.nuke(server);\\n                    // installBackdoor(server);\\n                    ns.tprint('Server ', server, ' rooted. Install backdoor manually please.');\\n                }\\n            } else {\\n                ns.tprint('WARNING: Already rooted ', server, ', skipping progress...')\\n            }\\n\\n            ns.print('Transporting hack files to ', server);\\n            await ns.scp('/scripts/hack.script', server);\\n            await ns.scp('/scripts/weaken-exp-grind.script', server);\\n            await ns.scp('/scripts/simple_hack.script', server);\\n            await ns.scp('/scripts/weaken_and_grow_only.script', server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/acqure_the_internet.js\",\"url\":\"blob:file:///fc9b50c1-87ef-4a5c-8959-196f81a3993e\",\"moduleSequenceNumber\":397}],\"dependents\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var separator, file_to_write_to;\\n    const host_names = JSON.parse(ns.read('/the_network.txt')).map(l => l[0]);\\n    if (ns.args[0]) {\\n        if (ns.args[0] == '\\\\\\\\n') {\\n            separator = '\\\\r\\\\n';\\n        } else {\\n            separator = ns.args[0];\\n        }\\n    } else {\\n        separator = ' ';\\n    } if (ns.args[1]) {\\n        file_to_write_to = ns.args[1];\\n        ns.write(file_to_write_to, host_names.join(separator));\\n    } else {\\n        ns.tprint(host_names.join(separator));\\n    }\\n}\",\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get_list_of_all_servers.js\",\"url\":\"blob:file:///d370d40f-1a53-4fcd-af45-c5c353dc3bb1\",\"moduleSequenceNumber\":78247}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    grow(server);\\r\\n    grow(server);\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { manual, verify } from '/scripts/cynthia7979_util.js';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([\\n        ['fast', false],\\n        ['grind-hack', false],\\n        ['no-buy-servers', false],\\n        ['weaken-server', 'joesguns'],\\n        ['single-hack-server', 'joesguns'],\\n        ['no-home', false],\\n        ['grind-share', false],\\n        ['share-all', false],\\n        ['no-hack', false],\\n        ['for-rep', false],\\n        ['init', false],\\n        ['no-buy-hacknet', false],\\n        ['help', false]\\n    ])\\n\\n    const fast_mode = args['fast'],\\n        grind_hack = args['grind-hack'],\\n        auto_buy_server = !args['no-buy-servers'],\\n        weaken_victim = args['weaken-server'],\\n        server_to_target_specifically = args['single-hack-server'],\\n        servers_to_autorun = ns.read('/all_servers_names.txt').split('\\\\r\\\\n').concat(ns.read('/grind_servers.txt').split('\\\\r\\\\n')).concat(args['no-home'] ? [] : ['home']),\\n        grind_share = args['grind-share'],\\n        share_mode = args['share-all'],\\n        no_hack = args['no-hack'],\\n        for_reputation = args['for-rep'],\\n        init = args['init'],\\n        auto_buy_hacknet = !args['no-buy-hacknet'],\\n        help = args['help'],\\n        servers_to_hack = args['_'].length ? args['_'] : ns.read('/all_servers_names.txt').split('\\\\r\\\\n');\\n\\n    if (help) {\\n        ns.tprint(manual('boot.js', {\\n            'fast': 'Enables fast mode and prevents script from growing/weakening servers that are currently not hackable. Switch this on if game freezes on boot.',\\n            'grind-hack': 'Instead of grinding with weaken(), grinds with hack.js against server specified in --single-hack-server. Weaken-grinding function will still be called to exploit the most RAM.',\\n            'no-buy-servers': 'Prevents the script from running buy_server.js. Saves you money.',\\n            'weaken-server joesguns': 'The hostname to pass to grind_on_all_servers.js.',\\n            'single-hack-server joesguns': 'The hostname to enable multiple threads on hacking.',\\n            'no-home': 'Disables grinding and hacking on \\\\'home\\\\'.',\\n            'grind-share': 'Instead of weaken(), grinds with simple_share.js on all servers. Weaken-grinding function will still be called to exploit the most RAM.',\\n            'share-all': 'Disables all hacking and shares on all servers.',\\n            'no-hack': 'Disables hacking and only does the grinding.',\\n            'for-rep': 'Grinds the Gang (if any) for reputation.',\\n            'init': 'Resets /grind_servers.txt - recommended to have this on after installing augmentation.',\\n            'no-buy-hacknet': 'Disables auto-buying hacknet nodes.',\\n            'help': 'Displays this manual.'\\n        }));\\n        ns.exit();\\n    }\\n\\n    ns.tprint('Preparing to boot...');\\n\\n    ns.print(servers_to_autorun);\\n    ns.print(servers_to_hack);\\n\\n    if (init) {\\n        await ns.write('/grind_servers.txt', '', 'w');\\n        ns.tprint('/grind_servers.txt cleared.');\\n    }\\n\\n    if (auto_buy_hacknet) {\\n        ns.tprint('Starting auto-hacknet-buy.js...');\\n        ns.run('/scripts/auto-hacknet-buy.js');\\n        await ns.sleep(100);\\n    }\\n\\n    ns.tprint('TIP: Remember to update your distributive network regularly!');\\n    await ns.sleep(100);\\n\\n    if (!share_mode && !no_hack) {\\n        ns.tprint('Starting up hacking/growing/weakening scripts on all servers...');\\n        if (fast_mode) { ns.tprint('WARNING: Fast mode is enabled. Servers below hacking level will not be weakened.') }\\n        for (let s of servers_to_autorun) {\\n            if (s != ' ' && s) {  // If it is not a blank line\\n                ns.print(s);\\n                hack_the_list(ns, s, servers_to_hack, fast_mode, grind_hack && server_to_target_specifically);\\n            }\\n            await ns.sleep(25);  // To make sure that it doesn't freeze the app\\n        }\\n    }\\n\\n\\n    ns.tprint('TIP: Use acqure_the_internet.js to begin after Augmentation!');\\n    await ns.sleep(100);\\n\\n    if (auto_buy_server) {\\n        ns.tprint('Starting buy_server.js...');\\n        ns.run('/scripts/buy_server.js', 1, weaken_victim);\\n        await ns.sleep(100);\\n    }\\n\\n    if (ns.gang.inGang()) {\\n        ns.tprint('Starting gangs script...');\\n        ns.run('/scripts/gangs_my.js', 1, for_reputation ? '--for-rep' : '');\\n    }\\n\\n    ns.tprint('Beginning the grinding process...');\\n    if (grind_share || share_mode) {\\n        grind_the_list(ns, '', servers_to_autorun, 'share');\\n    } else {\\n        if (grind_hack) {\\n            grind_the_list(ns, server_to_target_specifically, servers_to_autorun, 'hack');\\n        }\\n    }\\n    await ns.sleep(100);\\n    // grind_the_list(ns, weaken_victim, servers_to_autorun, 'weakengrow');\\n    grind_the_list(ns, weaken_victim, servers_to_autorun, 'weaken')\\n    await ns.sleep(100);\\n\\n    ns.tprint('Done!');\\n}\\n\\nfunction enough_for_hack(ns, server) {\\n    return ns.getServerRequiredHackingLevel(server) <= ns.getPlayer().hacking;\\n}\\n\\nfunction hack_the_list(ns, host, list_of_servers, fast_mode, special_server = null) {\\n    /* Uses the host to hack the list of servers provided. */\\n    if (ns.hasRootAccess(host)) {\\n        var server,\\n            has_enough_ram = 1;\\n        for (var j = 0; j < list_of_servers.length; j++) {\\n            server = list_of_servers[j];  // Target server\\n            if (verify(server, true)) {\\n                if (ns.getServerMaxMoney(server) != 0) {\\n                    if (ns.hasRootAccess(server)) {\\n                        if (server != special_server) {\\n                            if (enough_for_hack(ns, server)) {\\n                                has_enough_ram = ns.exec('/scripts/hack.js', host, 1, server);  // Do the hacking\\n                            } else {\\n                                if (!fast_mode) {\\n                                    has_enough_ram = ns.exec('/scripts/weaken_and_grow_only.js', host, 1, server);  // Only weaken and grow\\n                                }\\n                            }\\n                        } else {\\n                            ns.print('Saving ', server, 'till the end.');\\n                        }\\n                    } else {\\n                        ns.tprint('WARNING: Skipping ', server, ' from ', host, ' because you don\\\\'t have root access to it');\\n                    }\\n                } else {\\n                    ns.print('Skipping ', server, ' from ', host, ' because the server has $0 maximum money.')\\n                }\\n            }\\n            if (!has_enough_ram) {  // exec returns 0 when the script wasn't successfully ran\\n                ns.print('Terminating hacking for host ', host, ' because of limited RAM.')\\n                return;\\n            }\\n        }\\n    }\\n}\\n\\nfunction grind_the_list(ns, victim, list_of_hosts, mode) {\\n    /* Weakens, hacks, or shares on the victim from the list of hosts using all the RAM available. */\\n    const script_to_run = { 'weakengrow': '/scripts/weaken_and_grow_only.js', 'weaken': '/scripts/weaken-exp-grind.js', 'hack': '/scripts/hack.js', 'share': '/scripts/simple_share.js' }[mode],\\n        ram_per_thread = ns.getScriptRam(script_to_run);\\n\\n    for (let host of list_of_hosts) {\\n        if (verify(host)) {\\n            var available_ram = ns.getServerMaxRam(host) - ns.getServerUsedRam(host),\\n                num_of_threads = Math.floor(available_ram / ram_per_thread) - 1;\\n            if (num_of_threads > 0) {\\n                (mode == 'share') ? ns.exec(script_to_run, host, num_of_threads) : ns.exec(script_to_run, host, num_of_threads, victim);\\n            } else {\\n                ns.print('Skipped ', host, ' when grinding ', mode, ' because of inefficient RAM.')\\n            }\\n        }\\n    }\\n\\n    ns.tprint('Finished running grind_the_list on servers with mode ', mode);\\n}\",\"filename\":\"/scripts/boot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/cynthia7979_util.js\",\"url\":\"blob:file:///db0fd112-2713-4be2-bf37-d6517c196466\",\"moduleSequenceNumber\":934},{\"filename\":\"/scripts/boot.js\",\"url\":\"blob:file:///0c565ebb-6934-42d0-be56-73e87a7bf593\",\"moduleSequenceNumber\":2566}],\"dependents\":[],\"ramUsage\":5.85,\"server\":\"home\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let m = 'Me',\\n        ascResult = ns.gang.getAscensionResult(m),\\n        currentMult = ns.gang.getMemberInformation(m);\\n    ns.tprint(ascResult);\\n    ns.tprint(currentMult);\\n    ns.tprint(currentMult.hack_asc_mult * ascResult.hack);\\n    ns.tprint(Math.min(currentMult.hack_asc_mult * 2, currentMult.hack_asc_mult + 15));\\n    ns.tprint(Math.min(currentMult.hack_asc_mult * 2, currentMult.hack_asc_mult + 15) <= currentMult.hack_asc_mult * ascResult.hack)\\n}\",\"filename\":\"/scripts/test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/test.js\",\"url\":\"blob:file:///603809e6-5972-4a9b-b0e3-77030af22196\",\"moduleSequenceNumber\":13276}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true);\\n}\",\"filename\":\"/scripts/frozen.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    if (commandKey !== 'update-bp')\\n        await CheckUpdate(ns, options);\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///96af17f5-d804-4208-a471-5e488905b945\",\"moduleSequenceNumber\":2707}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"blob:file:///5a0b060d-7749-4688-b852-fc7bf1c54ba1\",\"moduleSequenceNumber\":3304}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.57'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-ffed919c]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-ffed919c]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-ffed919c],.theme-list .theme__author[data-v-ffed919c]{text-align:center}.theme-list .theme__name[data-v-ffed919c]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 0}.theme-list .theme__author[data-v-ffed919c]{color:#ccced0;font-size:14px;margin:8px 0 0}.theme-list .theme__preview[data-v-ffed919c]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-ffed919c]:hover{transform:scale(1.1)}[data-v-a1fe45be] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-a1fe45be]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.title[data-v-a1fe45be],.pagination-details[data-v-a1fe45be]{flex:0 1 auto;margin:0}.title[data-v-a1fe45be]{margin-right:20px}.pagination-details[data-v-a1fe45be]{color:#cecece;margin-left:20px}.themes[data-v-a1fe45be]{flex:1 0 100%;margin-top:16px}.loader[data-v-a1fe45be]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}.preview__ctas[data-v-a1fe45be]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-a1fe45be]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-a1fe45be]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-a1fe45be]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-a1fe45be]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-a1fe45be]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-a1fe45be]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-a1fe45be]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-a1fe45be{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar Ke=Object.defineProperty,Qe=Object.defineProperties;var Xe=Object.getOwnPropertyDescriptors;var z=Object.getOwnPropertySymbols;var Ye=Object.prototype.hasOwnProperty,Ze=Object.prototype.propertyIsEnumerable;var F=(e,d,p)=>d in e?Ke(e,d,{enumerable:!0,configurable:!0,writable:!0,value:p}):e[d]=p,$=(e,d)=>{for(var p in d||(d={}))Ye.call(d,p)&&F(e,p,d[p]);if(z)for(var p of z(d))Ze.call(d,p)&&F(e,p,d[p]);return e},D=(e,d)=>Qe(e,Xe(d));(function(e){\\\"use strict\\\";function d(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function p(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const O=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return H(a,n)?a:null},H=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let s=0;s<a.length;++s){if(a[s]>o[s])return!0;if(o[s]>a[s])return!1}return!1},L={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},R=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function T(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",L,R)}var j={render:T};const W={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},G=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function q(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",W,G)}var J={render:q};const K={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Q=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function X(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",K,Q)}var Y={render:X};const Z={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},ee=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function te(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",Z,ee)}var oe={render:te},st=\\\"\\\",B=(n,t)=>{const a=n.__vccOpts||n;for(const[o,s]of t)a[o]=s;return a};const ne={name:\\\"AppContainer\\\",components:{IconClose:j,IconMinimise:J,IconRestore:Y,IconUpdate:oe},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),s=e.ref(),r=e.ref(),i=e.ref(),c=e.ref(),l=e.ref(),g=e.ref();let m={},k={};const w=e.ref(!1),E=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),h=()=>{const _=t.value.offsetWidth,u=t.value.offsetHeight;i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,l.value=i.value/2-_/2,g.value=c.value/2-u/2};e.onMounted(()=>{E.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:_,blockSize:u}]}])=>{a.value&&!w.value&&(o.value=_,s.value=u),a.value=!0}).observe(t.value):a.value=!0,E.canDrag&&h()});const b=({x:_,y:u,button:y})=>{if(!E.canDrag)return;const f=rockument.body;y||(m={x:_,y:u},o.value=t.value.offsetWidth,s.value=t.value.offsetHeight,k={x:l.value,y:g.value},i.value=winnerdow.innerWidth,c.value=winnerdow.innerHeight,f.addEventListener(\\\"mousemove\\\",U),f.addEventListener(\\\"mouseup\\\",v),f.addEventListener(\\\"mouseleave\\\",v))},v=()=>{const _=rockument.body;_.removeEventListener(\\\"mousemove\\\",U),_.removeEventListener(\\\"mouseup\\\",v),_.removeEventListener(\\\"mouseleave\\\",v)};e.onUnmounted(v);const U=({x:_,y:u})=>{let y=k.x+(_-m.x),f=k.y+(u-m.y);const I=y<0,qe=y+o.value>i.value;(I||qe)&&(I?y=0:y=i.value-o.value,k.x=y,m.x=Math.max(Math.min(_,i.value-5),5));const P=f<0,Je=f+s.value>c.value;(P||Je)&&(P?f=0:f=c.value-s.value,k.y=f,m.y=Math.max(Math.min(u,c.value),5)),l.value=y,g.value=f};return{isMinimised:w,left:l,process:t,processHeight:s,processWidth:o,top:g,windowOptions:E,beginGrabbing:b,setPosition:h,toggleMinimise:()=>{w.value||(r.value=s.value),w.value=!w.value,w.value||(s.value=r.value)}}}},ae={class:\\\"app__title\\\"},se={class:\\\"app__cta-group\\\"},ie=[\\\"title\\\"],le={class:\\\"app__content\\\"};function re(n,t,a,o,s,r){const i=e.resolveComponent(\\\"icon-update\\\"),c=e.resolveComponent(\\\"icon-minimise\\\"),l=e.resolveComponent(\\\"icon-restore\\\"),g=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...m)=>o.beginGrabbing&&o.beginGrabbing(...m))},[e.createElementVNode(\\\"h1\\\",ae,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",se,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=m=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(i,{class:\\\"icon icon--update\\\"})],40,ie)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...m)=>o.toggleMinimise&&o.toggleMinimise(...m)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(c,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(l,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=m=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(g,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",le,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ce=B(ne,[[\\\"render\\\",re],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),it=\\\"\\\";const de={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>p(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},S=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),pe={class:\\\"modal__title\\\"},me={class:\\\"modal__ctas\\\"},_e=S(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),he=S(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),fe={class:\\\"modal__ctas\\\"};function we(n,t,a,o,s,r){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(i=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...i)=>o.updateComplete&&o.updateComplete(...i))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[_e,he,e.createElementVNode(\\\"div\\\",fe,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",pe,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",me,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=i=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...i)=>o.doUpdate&&o.doUpdate(...i))},\\\" Sure! \\\")])],64))])],544)}var ge=B(de,[[\\\"render\\\",we],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),lt=\\\"\\\";const ue={name:\\\"AppWrapper\\\",components:{AppContainer:ce,UpdateModal:ge},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),s=e.ref(null);return e.onMounted(async()=>{n&&a&&(s.value=await O(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:s,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ye={class:\\\"app-wrapper\\\"};function ke(n,t,a,o,s,r){const i=e.resolveComponent(\\\"app-container\\\"),c=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ye,[e.createVNode(i,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=l=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(c,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=l=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=l=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var be=B(ue,[[\\\"render\\\",ke],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);function ve(n){return new Date(n).toLocaleDateString()}var rt=\\\"\\\";const Ee={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]}},setup(){return{formatDate:ve}}},Be={key:0,class:\\\"theme-list\\\"},$e=[\\\"src\\\",\\\"onClick\\\"],Me={class:\\\"theme__name\\\"},Se={class:\\\"theme__author\\\"},Ve={key:1};function Ce(n,t,a,o,s,r){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Be,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(i,c)=>(e.openBlock(),e.createElementBlock(\\\"li\\\",{key:c,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:i.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:l=>n.$emit(\\\"theme:preview\\\",i.json)},null,8,$e),e.createElementVNode(\\\"h1\\\",Me,e.toDisplayString(i.name),1),e.createElementVNode(\\\"h2\\\",Se,e.toDisplayString(i.author),1)]))),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",Ve,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ne=B(Ee,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-ffed919c\\\"]]);const xe=\\\"theme-browser-app\\\",M=\\\"https://bitburner.daft.host/api/themes\\\";var Ae=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:xe,themesEndpoint:M});async function Ue(n){return await fetch(`${M}/${n}`).then(t=>t.json())}async function Ie(){return fetch(M)}async function Pe(n){var o;const{data:t,meta:a}=await n.then(s=>s.json()).catch(()=>({data:[],meta:{}}));return{data:((o=t.map)==null?void 0:o.call(t,({name:s,json:r,images:i,author:c})=>{var l;return{name:s,json:r,src:(l=i[1])==null?void 0:l.src,author:c.name}}))||[],meta:a}}var ct=\\\"\\\";const ze={components:{AppWrapper:be,ThemeList:Ne},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),s=e.ref([]),r=e.ref({}),i=e.computed(()=>a.value?\\\"Loading...\\\":s.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),c=e.computed(()=>Math.max(1,l.value-r.value.items_per_page)),l=e.computed(()=>Math.min(r.value.total_items,r.value.page*r.value.items_per_page)),g=e.computed(()=>r.value.total_items),m={canDrag:!1,canMinimise:!1,canResize:!1},k=h=>{p(\\\"theme:cancel-preview\\\",h),o.value=!1},w=h=>{p(\\\"theme:preview\\\",h),o.value=!0},E=async()=>{a.value=!0;const h=Ie(),{data:b,meta:v}=await Pe(h);r.value=v,s.value=b,a.value=!1};return e.onMounted(async()=>{const h=Number(winnerdow[`${n}-theme-id`]);if(h)try{const{json:b}=await Ue(h);return w(b),d(n)}catch(b){console.log(b)}t.value=!1,await E()}),{isApplying:t,isLoading:a,isPreviewing:o,showingFrom:c,showingTo:l,themes:s,title:i,totalItems:g,windowOptions:m,cancelPreview:k,closeApp:()=>d(n),showPreview:w}}},V=n=>(e.pushScopeId(\\\"data-v-a1fe45be\\\"),n=n(),e.popScopeId(),n),Fe={class:\\\"theme-browser\\\"},De={class:\\\"title\\\"},Oe={key:0,class:\\\"pagination-details\\\"},He={key:2,class:\\\"loader\\\"},Le=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Re=[V(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Te(n,t,a,o,s,r){const i=e.resolveComponent(\\\"theme-list\\\"),c=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(c,e.normalizeProps(e.guardReactiveProps(D($({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}))),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",Fe,[e.createElementVNode(\\\"h1\\\",De,e.toDisplayString(o.title),1),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Oe,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0),o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",He)):(e.openBlock(),e.createBlock(i,{key:1,themes:o.themes,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview},null,8,[\\\"themes\\\",\\\"onTheme:preview\\\"]))])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[0]||(t[0]=(...l)=>o.cancelPreview&&o.cancelPreview(...l))},Le),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[1]||(t[1]=(...l)=>o.closeApp&&o.closeApp(...l))},Re)],2)],64)}var je=B(ze,[[\\\"render\\\",Te],[\\\"__scopeId\\\",\\\"data-v-a1fe45be\\\"]]),We={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:C,repositoryRaw:N}=We,x=\\\"theme-browser\\\";var Ge={appFilePath:`${N}/${C}/apps/${x}/dist/main.js`,versionFilePath:`${N}/${C}/apps/${x}/dist/version.txt`},A=$($({},Ge),Ae);e.createApp(je,A).mount(`#${A.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/main.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { cleanupError, css, formatMoney, formatNumberShort, html, lodash, timeDiff, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport const formatRam = (gb) => {\\r\\n  const sizes = ['GB', 'TB', 'PB']\\r\\n  const marker = 1000\\r\\n  const precision = 2\\r\\n  gb = parseInt(gb) || 0\\r\\n  if (gb == 0) return 'n/a'\\r\\n  const i = parseInt(Math.floor(Math.log(gb) / Math.log(marker)))\\r\\n  if (i == 0) return gb + sizes[i]\\r\\n  return (gb / Math.pow(marker, i)).toFixed(precision) + sizes[i]\\r\\n}\\r\\n\\r\\nexport const mapOrder = (array, myorder, key, catchAll) => {\\r\\n  var order = myorder.reduce((r, k, i) => ((r[k] = i + 1), r), {})\\r\\n  const theSort = array.sort(\\r\\n    (a, b) => (order[a[key]] || order[catchAll]) - (order[b[key]] || order[catchAll])\\r\\n  )\\r\\n  return theSort\\r\\n}\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-object-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"item in objectPrinter\\\">\\r\\n        <div class=\\\"objectRow\\\">\\r\\n          <div class=\\\"label\\\" :title=\\\"item.label\\\">{{ item.label }}</div>\\r\\n          <div class=\\\"value\\\">\\r\\n            <template v-if=\\\"item.subType == 'logs'\\\">\\r\\n              <bbv-log-display :data=\\\"item.value\\\" />\\r\\n            </template>\\r\\n            <template v-else>{{ item.value }}</template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {\\r\\n        ezTime: 1642319498647,\\r\\n        ezTime2: 1642319596738,\\r\\n        bigNum: 8989810859287482,\\r\\n        smolNum: 21,\\r\\n        bigArr: [\\r\\n          'asflkajlfkasjflkasjflkasjflkasjflaskjfaslfkjaslfkjaslfkasjflkj',\\r\\n          'lkasjfl',\\r\\n          4,\\r\\n          89,\\r\\n          22,\\r\\n          10,\\r\\n        ],\\r\\n        path: '/nuburn/exec/_test.js',\\r\\n        host: 'home',\\r\\n        threads: 1,\\r\\n        pid: 14,\\r\\n        uuid: '5f01bd66-44df-4214-96b4-e2d47eff455a',\\r\\n        options: {\\r\\n          bounceBack: 'hello there!',\\r\\n        },\\r\\n        logs: [],\\r\\n        timeStart: 1642317178466,\\r\\n        result: 'hello there! 1661.8602317640846',\\r\\n        timeEnd: 1642317180215,\\r\\n        smolArr: [4, 5, 7, 2],\\r\\n        bigObj: {\\r\\n          moreStuff: 'poasifpasofiapsof',\\r\\n          ok: true,\\r\\n          nice: 'got it',\\r\\n          arr: [4, 2, 5, 5, 4, 7, 4, 6, 4, 5, 1],\\r\\n          key: '💛',\\r\\n        },\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    objectPrinter() {\\r\\n      if (!lodash.isObjectLike(this.data)) return\\r\\n\\r\\n      const dateTimeMatcher = new RegExp(/.*[tT]ime|[dD]ate.*/, 'gm')\\r\\n      const ramLikes = ['ram', 'ramUsed', 'ramUsage', 'ramTotal', 'ramFree', 'ramAvail']\\r\\n      const secondLikes = ['onlineRunningTime', 'offlineRunningTime', 'timeLifespan']\\r\\n      const dateLikes = ['timeOfBirth', 'timeOfDeath', 'timeStart', 'timeEnd']\\r\\n      const moneyLikes = [\\r\\n        'onlineMoneyMade',\\r\\n        'offlineMoneyMade',\\r\\n        'profit',\\r\\n        'money',\\r\\n        'cost',\\r\\n        'spend',\\r\\n        'price',\\r\\n      ]\\r\\n      const numberIgnores = ['pid', 'threads']\\r\\n\\r\\n      // Build object array from entries\\r\\n      let objArray = Object.entries({ ...this.data }).map(([label, value]) => {\\r\\n        label = String(label).trim()\\r\\n        let valueOfflimits = false\\r\\n\\r\\n        let type = 'default'\\r\\n        let subType = 'default'\\r\\n\\r\\n        // General classification\\r\\n        if ((dateTimeMatcher['exec'](label) || dateLikes.includes(label)) && lodash.isNumber(value))\\r\\n          type = 'date'\\r\\n        else if (lodash.isString(value)) type = 'string'\\r\\n        else if (lodash.isNumber(value)) type = 'number'\\r\\n        else if (lodash.isArray(value)) type = 'array'\\r\\n        else if (lodash.isPlainObject(value)) type = 'object'\\r\\n\\r\\n        // Subtype classification\\r\\n        if (type == 'array') {\\r\\n          if (label.toLowerCase() == 'logs') {\\r\\n            subType = 'logs'\\r\\n          } else if (value?.length > 4 || value?.some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        } else if (type == 'object') {\\r\\n          if (Object.keys(value).count > 4 || Object.values(value).some((x) => x?.length > 50)) {\\r\\n            subType = 'large'\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Basic processing\\r\\n        if (type == 'string') value = value.trim()\\r\\n        if (type == 'string' && label == 'error') {\\r\\n          value = cleanupError(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Time processing\\r\\n        if (['string', 'number', 'date'].includes(type) && ramLikes.includes(label)) {\\r\\n          value = formatRam(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          ['string', 'number', 'date'].includes(type) &&\\r\\n          secondLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = timeDiff(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        // Date processing\\r\\n        if (type == 'date' && !valueOfflimits) {\\r\\n          try {\\r\\n            value = new Date(value).toLocaleTimeString()\\r\\n            valueOfflimits = true\\r\\n          } catch (error) {\\r\\n            /* shh */\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Number processing\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          moneyLikes.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatMoney(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n        if (\\r\\n          type == 'number' &&\\r\\n          parseFloat(value) > 1000 &&\\r\\n          !numberIgnores.includes(label) &&\\r\\n          !valueOfflimits\\r\\n        ) {\\r\\n          value = formatNumberShort(value)\\r\\n          valueOfflimits = true\\r\\n        }\\r\\n\\r\\n        return {\\r\\n          label,\\r\\n          value,\\r\\n          type,\\r\\n          subType,\\r\\n        }\\r\\n      })\\r\\n\\r\\n      // Sort object entries based on known keys + common datatypes\\r\\n      let labelOrders = [\\r\\n        'server',\\r\\n        'filename',\\r\\n        'args',\\r\\n        'pid',\\r\\n        'threads',\\r\\n        ...ramLikes,\\r\\n        ...secondLikes,\\r\\n        ...dateLikes,\\r\\n        'status',\\r\\n        'result',\\r\\n        'error',\\r\\n        'onlineMoneyMade',\\r\\n        'onlineExpGained',\\r\\n        'script',\\r\\n        'path',\\r\\n        'host',\\r\\n        'uuid',\\r\\n        'options',\\r\\n        '*',\\r\\n        'logs',\\r\\n      ]\\r\\n\\r\\n      return mapOrder(objArray, labelOrders, 'label', '*')\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson, cleanupError },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include bbv-scrollbar;\\r\\n\\r\\n      width: 100%;\\r\\n      overflow: auto;\\r\\n      box-shadow: 0px 0px 10px 0px var(--bbvBoxShadowColor1);\\r\\n\\r\\n      .objectRow {\\r\\n        display: flex;\\r\\n        justify-content: stretch;\\r\\n        width: 100%;\\r\\n\\r\\n        &:first-child,\\r\\n        &:last-child {\\r\\n          .label,\\r\\n          .value {\\r\\n            padding-top: 8px;\\r\\n            padding-bottom: 8px;\\r\\n          }\\r\\n        }\\r\\n\\r\\n        &:last-child {\\r\\n          .label {\\r\\n            border-color: transparent;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .label {\\r\\n        width: 20%;\\r\\n        min-width: 120px;\\r\\n        max-width: 220px;\\r\\n        padding: 3px 12px 3px 8px;\\r\\n        border-bottom: 1px solid var(--bbvInputBorderFadeColor);\\r\\n        flex-shrink: 0;\\r\\n        overflow: hidden;\\r\\n        text-overflow: ellipsis;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .value {\\r\\n        flex-grow: 1;\\r\\n        font-size: 12px;\\r\\n        white-space: pre-wrap;\\r\\n        word-break: break-all;\\r\\n        padding: 4px 4px 4px 8px;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-left: 2px solid var(--bbvInputBorderFadeColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, isBlank, lodash } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-log-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <template v-for=\\\"[logTs, tsRows] in logsMap\\\" :key=\\\"logTs\\\">\\r\\n        <div class=\\\"tsRow\\\" :class='{ hasTs: logTs !== \\\"noTs\\\" }'>\\r\\n          <div class=\\\"logTs\\\" v-if=\\\"logTs !== 'noTs'\\\">{{ logTs }}</div>\\r\\n          <div class=\\\"simpleRows\\\">\\r\\n            <template v-for=\\\"row in tsRows\\\" :key=\\\"row\\\">\\r\\n              <div class=\\\"simpleRow\\\">{{ row }}</div>\\r\\n            </template>\\r\\n          </div>\\r\\n        </div>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: () => [],\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    logsMap() {\\r\\n      if (!lodash.isArray(this.data)) return\\r\\n\\r\\n      // Build object array from entries\\r\\n      let mergedLogs = new Map()\\r\\n      let reversed = [...this.data].reverse()\\r\\n      reversed.forEach((logRow) => {\\r\\n        logRow = String(logRow)\\r\\n        let logTs = Array.from(logRow.matchAll(/\\\\[(.*?)\\\\]/g))\\r\\n        if (!isBlank(logTs) && lodash['get'](logTs, '[0][1]')) {\\r\\n          let tsMatch = logTs[0][0]\\r\\n          logTs = logTs[0][1]\\r\\n          logRow = logRow.replaceAll(tsMatch, '')\\r\\n        } else {\\r\\n          logTs = 'noTs'\\r\\n        }\\r\\n        let existingLogs = mergedLogs['get'](logTs) || []\\r\\n        mergedLogs.set(logTs, [...existingLogs, logRow.trim()])\\r\\n      })\\r\\n\\r\\n      return mergedLogs\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      width: 100%;\\r\\n\\r\\n      .tsRow {\\r\\n        display: flex;\\r\\n        align-items: flex-start;\\r\\n        width: 100%;\\r\\n        padding: 3px 0;\\r\\n\\r\\n        &.hasTs .simpleRow {\\r\\n          padding: 0 8px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .logTs {\\r\\n        padding: 1.5px;\\r\\n        border-radius: 5px;\\r\\n        background-color: var(--bbvInputBorderFadeColor);\\r\\n        width: max-content;\\r\\n        white-space: nowrap;\\r\\n      }\\r\\n\\r\\n      .simpleRows {\\r\\n        flex-grow: 1;\\r\\n      }\\r\\n\\r\\n      .simpleRow {\\r\\n        line-height: 14px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/5-demo-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/2-writing-styles-scss.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { css } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  scssResources: css`\\r\\n    @mixin typo-basic {\\r\\n      & {\\r\\n        font-family: 'FreeMono', monospace;\\r\\n        font-size: 14px;\\r\\n        font-weight: bold;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    @mixin bbv-scrollbar($size: 4px, $width: $size, $height: $size) {\\r\\n      &::-webkit-scrollbar {\\r\\n        display: initial;\\r\\n\\r\\n        @if $width {\\r\\n          width: $width;\\r\\n        } @else {\\r\\n          width: $size;\\r\\n        }\\r\\n\\r\\n        @if $height {\\r\\n          height: $height;\\r\\n        } @else {\\r\\n          height: $size;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-thumb {\\r\\n        background-color: var(--bbvScrollbarFgColor);\\r\\n      }\\r\\n\\r\\n      &::-webkit-scrollbar-track {\\r\\n        background-color: var(--bbvScrollbarBgColor);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    body {\\r\\n      --bbvScrollbarFgColor: #12b3e3;\\r\\n      --bbvScrollbarBgColor: #0b1420;\\r\\n      --bbvBorderColor: #0f4878;\\r\\n      --bbvBoxShadowColor1: #0000007a;\\r\\n      --bbvBoxShadowColor2: #040f18;\\r\\n      --bbvAppInnerFgColor: #89d3e4;\\r\\n      --bbvAppInnerBgColor: #274b64;\\r\\n      --bbvFontLightColor: #89d3e4;\\r\\n      --bbvFontLightAltColor: #89d3e4;\\r\\n      --bbvButtonFgColor: #12b3e3;\\r\\n      --bbvButtonBgColor: #0b1420;\\r\\n      --bbvButtonHoverFgColor: #00fff3;\\r\\n      --bbvButtonHoverBgColor: #162a47;\\r\\n      --bbvWinTitlebarFgColor: #89d3e4;\\r\\n      --bbvWinTitlebarBgColor: #0f4878;\\r\\n      --bbvWinActionsFgColor: #83d5d9;\\r\\n      --bbvWinActionsBgColor: #0f4878;\\r\\n      --bbvHackerDarkFgColor: #c5c255;\\r\\n      --bbvHackerDarkBgColor: #171c23;\\r\\n      --bbvHackerDarkAltBgColor: #333146;\\r\\n      --bbvAppTrayFgColor: #89d3e4;\\r\\n      --bbvAppTrayBorderColor: #4bb4c5;\\r\\n      --bbvAppTrayBgColor: #274b64;\\r\\n      --bbvInputBorderColor: #357073;\\r\\n      --bbvInputBorderFadeColor: #{fade-out(#357073, 0.5)};\\r\\n      --bbvInputBgColor: #{fade-out(#274b64, 0.5)};\\r\\n      --bbvActiveColor: #954ea7;\\r\\n      --bbvSuccessColor: #4fb168;\\r\\n      --bbvErrorColor: #984e4e;\\r\\n      --bbvErrorDarkColor: #0b1420;\\r\\n    }\\r\\n\\r\\n    [bbv-root] {\\r\\n      @include typo-basic;\\r\\n\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n      top: 0;\\r\\n      right: 0;\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n      pointer-events: none;\\r\\n    }\\r\\n\\r\\n    [bbv-foreground] {\\r\\n      z-index: 1500;\\r\\n\\r\\n      & > * {\\r\\n        pointer-events: auto;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      * {\\r\\n        box-sizing: border-box;\\r\\n      }\\r\\n\\r\\n      code,\\r\\n      button,\\r\\n      input,\\r\\n      th,\\r\\n      td,\\r\\n      tr {\\r\\n        @include typo-basic;\\r\\n      }\\r\\n\\r\\n      @keyframes bbvFlashBusy {\\r\\n        from {\\r\\n          filter: hue-rotate(0deg);\\r\\n        }\\r\\n        to {\\r\\n          filter: hue-rotate(360deg);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-active,\\r\\n      &.rootAppIntro-leave-active,\\r\\n      &.consumerRootIntro-enter-active,\\r\\n      &.consumerRootIntro-leave-active {\\r\\n        transition: opacity 0.4s ease;\\r\\n      }\\r\\n\\r\\n      &.rootAppIntro-enter-from,\\r\\n      &.rootAppIntro-leave-to,\\r\\n      &.consumerRootIntro-enter-from,\\r\\n      &.consumerRootIntro-leave-to {\\r\\n        opacity: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/3-controlling-your-app.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-css-manager',\\r\\n  props: {\\r\\n    consumerRootDefs: {\\r\\n      type: Array,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n  computed: {\\r\\n    rootOptions() {\\r\\n      return this.$root.$options\\r\\n    },\\r\\n    styles() {\\r\\n      let styles = { root: '' }\\r\\n      styles.root = this.rootOptions.__finalStyles\\r\\n      this.consumerRootDefs.forEach((appDefinition) => {\\r\\n        styles[appDefinition.__uuid] = appDefinition.__finalStyles\\r\\n      })\\r\\n      return styles\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <transition-group :duration=\\\"{ enter: 0, leave: 1000 }\\\">\\r\\n      <component\\r\\n        is=\\\"style\\\"\\r\\n        v-for=\\\"(sheet, appName) in styles\\\"\\r\\n        :key=\\\"appName\\\"\\r\\n        :id=\\\"'styles-for-' + appName\\\"\\r\\n        type=\\\"text/css\\\"\\r\\n      >\\r\\n        {{ sheet.join('') }}\\r\\n      </component>\\r\\n    </transition-group>\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { ComponentValidationException, ProcessingException, ReplacementTokens } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class ComponentManager {\\r\\n  #appConfig\\r\\n  #Sass\\r\\n  #scssResources\\r\\n  #hasProcessed = false\\r\\n  #rawComponents = new Set()\\r\\n  #processingReports = []\\r\\n\\r\\n  constructor(appConfig, Sass, scssResources) {\\r\\n    this.#appConfig = appConfig\\r\\n    this.#Sass = Sass\\r\\n    this.#scssResources = toStr(scssResources)\\r\\n  }\\r\\n\\r\\n  add(...args) {\\r\\n    if (isBlank(args)) {\\r\\n      throw new Error('Please provide one or more components to add')\\r\\n    }\\r\\n    for (let cmpDef of args) {\\r\\n      cmpDef = Object.assign({}, cmpDef)\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#rawComponents.add(cmpDef)\\r\\n    }\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async processAll() {\\r\\n    for (let cmpDef of this.#rawComponents) {\\r\\n      let processed = await this.#processSingle(cmpDef)\\r\\n      this.#processingReports.push(processed)\\r\\n    }\\r\\n    this.#hasProcessed = true\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  registerWithVueApp(vueApp) {\\r\\n    if (this.#hasProcessed === false) {\\r\\n      throw new Error('All components must be processed before being registered with the vueApp')\\r\\n    }\\r\\n\\r\\n    this.#processingReports.forEach((processingReport) => {\\r\\n      if (!processingReport.cmpDef.__libraryRoot) {\\r\\n        // Remove old cmpDef before adding new one\\r\\n        if (vueApp.component(processingReport.cmpDef.name) && vueApp?._context?.components) {\\r\\n          delete vueApp._context.components[processingReport.cmpDef.name]\\r\\n        }\\r\\n        vueApp.component(processingReport.cmpDef.name, processingReport.cmpDef)\\r\\n      }\\r\\n    })\\r\\n\\r\\n    return vueApp\\r\\n  }\\r\\n\\r\\n  gatherAllProcessedStyles() {\\r\\n    return this.#processingReports.map((x) => x.cmpDef.__processedStyles)\\r\\n  }\\r\\n\\r\\n  static Validate(cmpDef) {\\r\\n    if (isBlank(cmpDef)) {\\r\\n      throw new ComponentValidationException('Component definition is empty', cmpDef)\\r\\n    }\\r\\n    if (isBlank(toStr(cmpDef.name))) {\\r\\n      throw new ComponentValidationException(`Component needs 'name' key of type String`, cmpDef)\\r\\n    }\\r\\n    /* if (isBlank(toStr(cmpDef.template))) {\\r\\n      throw new ComponentValidationException(\\r\\n        `Component needs 'template' key of type String`,\\r\\n        cmpDef\\r\\n      )\\r\\n    } */\\r\\n    return cmpDef\\r\\n  }\\r\\n\\r\\n  async #processSingle(cmpDef) {\\r\\n    let { css, didProcess: didProcessCss } = this.#processCss(cmpDef)\\r\\n    let { scss, didProcess: didProcessScss } = await this.#processScss(cmpDef)\\r\\n    let { template, didProcess: didProcessTemplate } = this.#processTemplate(cmpDef)\\r\\n\\r\\n    if (didProcessCss) {\\r\\n      delete cmpDef.css\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    if (didProcessScss) {\\r\\n      delete cmpDef.scss\\r\\n      delete cmpDef.style\\r\\n    }\\r\\n\\r\\n    let processedMergedStyles = [css, scss].join('\\\\n\\\\n')\\r\\n    if (didProcessScss || didProcessCss) {\\r\\n      cmpDef.__processedStyles = processedMergedStyles\\r\\n    }\\r\\n\\r\\n    if (didProcessTemplate) {\\r\\n      cmpDef.template = template\\r\\n    }\\r\\n\\r\\n    return {\\r\\n      cmpDef,\\r\\n      results: {\\r\\n        css,\\r\\n        scss,\\r\\n        styles: processedMergedStyles,\\r\\n        template,\\r\\n        didProcessCss,\\r\\n        didProcessScss,\\r\\n        didProcessTemplate,\\r\\n      },\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #processCss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let css = [cmpDef.css, cmpDef.style].find((x) => !isBlank(x))\\r\\n\\r\\n    if (css) {\\r\\n      try {\\r\\n        css = this.#performTokenReplacements(css, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        css = ''\\r\\n        throw new ProcessingException('CSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { css: toStr(css), didProcess }\\r\\n  }\\r\\n\\r\\n  async #processScss(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let scss = ''\\r\\n\\r\\n    scss = [cmpDef.scss, cmpDef.sass].find((x) => !isBlank(x))\\r\\n    if (scss) {\\r\\n      scss = this.#performTokenReplacements(scss, this.#appConfig.appId, cmpDef.name)\\r\\n      scss = `${this.#scssResources}\\\\n${scss}`\\r\\n      try {\\r\\n        scss = await this.#Sass.compileAsync(scss, {})\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        scss = ''\\r\\n        throw new ProcessingException('SCSS', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { scss: toStr(scss), didProcess }\\r\\n  }\\r\\n\\r\\n  #processTemplate(cmpDef) {\\r\\n    let didProcess = false\\r\\n    let template = toStr(cmpDef.template)\\r\\n\\r\\n    if (!isBlank(template)) {\\r\\n      try {\\r\\n        template = this.#performTokenReplacements(template, this.#appConfig.appId, cmpDef.name)\\r\\n        didProcess = true\\r\\n      } catch (error) {\\r\\n        template = ''\\r\\n        throw new ProcessingException('Template', error)\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return { template: toStr(template), didProcess }\\r\\n  }\\r\\n\\r\\n  #performTokenReplacements(value, appId, componentName) {\\r\\n    if (!lodash.isString(value)) return value\\r\\n    value = value.replaceAll(ReplacementTokens.appId, appId)\\r\\n    value = value.replaceAll(ReplacementTokens.componentName, componentName)\\r\\n    return value\\r\\n  }\\r\\n\\r\\n  get processedLibraryRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__libraryRoot === true).cmpDef\\r\\n  }\\r\\n\\r\\n  get processedConsumerRoot() {\\r\\n    return this.#processingReports.find((x) => x.cmpDef.__consumerRoot === true).cmpDef\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/2-events-and-communication.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, Vue } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nclass Utils {\\r\\n  static isUndefined(x) {\\r\\n    return x === undefined\\r\\n  }\\r\\n  static pick(o, props) {\\r\\n    let x = {}\\r\\n    props.forEach((k) => {\\r\\n      x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omit(o, props) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (props.indexOf(k) === -1) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  static omitBy(o, pred) {\\r\\n    let x = {}\\r\\n    Object.keys(o).forEach((k) => {\\r\\n      if (!pred(o[k])) x[k] = o[k]\\r\\n    })\\r\\n    return x\\r\\n  }\\r\\n  // custom defaults function suited to our specific purpose\\r\\n  static defaults(o, ...sources) {\\r\\n    sources.forEach((s) => {\\r\\n      Object.keys(s).forEach((k) => {\\r\\n        if (this.isUndefined(o[k]) || o[k] === '') o[k] = s[k]\\r\\n      })\\r\\n    })\\r\\n  }\\r\\n}\\r\\n\\r\\nclass VueScriptX {\\r\\n  constructor() {\\r\\n    this.installed = false\\r\\n    this.promise = Promise.resolve()\\r\\n    this.loaded = {}\\r\\n    this.props = ['unload', 'src', 'type', 'async', 'integrity', 'text', 'crossorigin']\\r\\n  }\\r\\n  install(app) {\\r\\n    app.config.globalProperties.$scriptx = this\\r\\n    let self = this\\r\\n    if (self.installed) return\\r\\n    app.component('scriptx', {\\r\\n      props: self.props,\\r\\n      // Uses render method with <slot>s, see: https://v3.vuejs.org/guide/render-function.html\\r\\n      render() {\\r\\n        const { h } = Vue()\\r\\n        return h(\\r\\n          'div',\\r\\n          { style: 'display:none' },\\r\\n          this.$slots.default ? this.$slots.default() : undefined\\r\\n        )\\r\\n      },\\r\\n      mounted() {\\r\\n        let parent = this.$el.parentElement\\r\\n        if (!this.src) {\\r\\n          self.promise = self.promise.then(() => {\\r\\n            let script = doc.createElement('script')\\r\\n            let el = this.$el.innerHTML\\r\\n            el = el.replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&amp;/gi, '&')\\r\\n            script.type = 'text/javascript'\\r\\n            script.appendChild(doc.createTextNode(el))\\r\\n            parent.appendChild(script)\\r\\n            this.$emit('loaded') // any other proper way to do this or emit error?\\r\\n          })\\r\\n        } else {\\r\\n          let opts = Utils.omitBy(Utils.pick(this, self.props), Utils.isUndefined)\\r\\n          opts.parent = parent\\r\\n          // this syntax results in an implicit return\\r\\n          let load = () => {\\r\\n            self.load(this.src, opts).then(\\r\\n              () => this.$emit('loaded'),\\r\\n              (err) => this.$emit('error', err)\\r\\n            )\\r\\n          }\\r\\n          if (Utils.isUndefined(this.async) || this.async === 'false')\\r\\n            self.promise = self.promise.then(load)\\r\\n          // serialize execution\\r\\n          else load() // inject immediately\\r\\n        }\\r\\n        this.$nextTick(() => {\\r\\n          this.$el.parentElement.removeChild(this.$el)\\r\\n          // NOTE: this.$el.remove() may be used, but IE sucks, see: https://github.com/taoeffect/vue-script2/pull/17\\r\\n        })\\r\\n      },\\r\\n      unmounted() {\\r\\n        if (this.unload) {\\r\\n          new Function(this.unload)() // eslint-disable-line\\r\\n          delete self.loaded[this.src]\\r\\n        }\\r\\n      },\\r\\n    })\\r\\n    self.installed = true\\r\\n  }\\r\\n  load(src, opts = { parent: doc.head }) {\\r\\n    if (!this.loaded[src]) {\\r\\n      this.loaded[src] = new Promise((resolve, reject) => {\\r\\n        let script = doc.createElement('script')\\r\\n        // omit the special options that VueScriptX supports\\r\\n        Utils.defaults(script, Utils.omit(opts, ['unload', 'parent']), { type: 'text/javascript' })\\r\\n        // async may not be used with 'doc.write'\\r\\n        script.async = false\\r\\n        script.src = src\\r\\n        // crossorigin in HTML and crossOrigin in the DOM per HTML spec\\r\\n        if (opts.crossorigin) {\\r\\n          script.crossOrigin = opts.crossorigin\\r\\n        }\\r\\n        // handle onload and onerror\\r\\n        script.onload = () => resolve(src)\\r\\n        script.onerror = () => reject(new Error(src))\\r\\n        opts.parent.appendChild(script)\\r\\n      })\\r\\n    }\\r\\n    return this.loaded[src]\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default new VueScriptX()\",\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/3-connecting-with-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Mitt, Vue, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-consumer-root',\\r\\n  emits: ['consumer-root-mounted', 'consumer-root-unmount-requested', 'root-shutdown-requested'],\\r\\n  props: {\\r\\n    consumerRootDef: {\\r\\n      type: Object,\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n\\r\\n    return {\\r\\n      private: {\\r\\n        bus,\\r\\n        consumerRootMount: null,\\r\\n      },\\r\\n      appStore: {},\\r\\n      appListen: bus.on,\\r\\n      appSend: this.appSendWrapper,\\r\\n      appShutdown: this.appShutdownWrapper,\\r\\n      rootShutdown: this.rootShutdownWrapper,\\r\\n    }\\r\\n  },\\r\\n  provide() {\\r\\n    const { reactivePick } = VueUse()\\r\\n    return reactivePick(\\r\\n      this.$data,\\r\\n      'appStore',\\r\\n      'appListen',\\r\\n      'appSend',\\r\\n      'appShutdown',\\r\\n      'rootShutdown'\\r\\n    )\\r\\n  },\\r\\n  methods: {\\r\\n    appSendWrapper(event, data) {\\r\\n      switch (event) {\\r\\n        default:\\r\\n          this.private.bus.emit(event, data)\\r\\n          break\\r\\n      }\\r\\n    },\\r\\n    appShutdownWrapper() {\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        throw new Error('Tried to shutdown a null app root', this.private.consumerRootMount)\\r\\n      } else {\\r\\n        this.$emit(\\r\\n          'consumer-root-unmount-requested',\\r\\n          this.private.consumerRootMount.$options.__uuid\\r\\n        )\\r\\n      }\\r\\n    },\\r\\n    rootShutdownWrapper() {\\r\\n      this.$emit('root-shutdown-requested')\\r\\n    },\\r\\n    consumerRootMounted(vnode) {\\r\\n      this.private.consumerRootMount = vnode?.component?.ctx\\r\\n      if (!this.private.consumerRootMount) {\\r\\n        console.debug(`bb-vue: App root is null for ${this.consumerRootDef.__uuid}`)\\r\\n      }\\r\\n      this.$emit('consumer-root-mounted', this.private.consumerRootMount)\\r\\n    },\\r\\n  },\\r\\n  render() {\\r\\n    const { h } = Vue()\\r\\n    return h(\\r\\n      'section',\\r\\n      { 'bbv-foreground': true },\\r\\n      h(this.consumerRootDef, {\\r\\n        onVnodeMounted: this.consumerRootMounted,\\r\\n      })\\r\\n    )\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-button',\\r\\n  template: html`\\r\\n    <button\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ icon, small }\\\"\\r\\n      :tabindex=\\\"noFocus === false ? undefined : '-1'\\\"\\r\\n    >\\r\\n      <slot />\\r\\n    </button>\\r\\n  `,\\r\\n  props: {\\r\\n    icon: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    small: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    noFocus: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      font-family: inherit;\\r\\n      font-size: inherit;\\r\\n      padding: 8px;\\r\\n      cursor: pointer;\\r\\n      border: none;\\r\\n      border-radius: 2px;\\r\\n      color: var(--bbvButtonFgColor);\\r\\n      background-color: var(--bbvButtonBgColor);\\r\\n      margin: 0;\\r\\n      transition: color 0.15s, background-color 0.3s;\\r\\n\\r\\n      &:hover {\\r\\n        color: var(--bbvButtonHoverFgColor);\\r\\n        background-color: var(--bbvButtonHoverBgColor);\\r\\n      }\\r\\n\\r\\n      &[disabled]:hover {\\r\\n        background-color: var(--bbvButtonBgColor);\\r\\n        cursor: not-allowed;\\r\\n      }\\r\\n\\r\\n      &.small {\\r\\n        padding: 6px;\\r\\n        font-size: 12px;\\r\\n        line-height: 1.1;\\r\\n      }\\r\\n\\r\\n      &.icon {\\r\\n        padding: 2px;\\r\\n        line-height: 1.5;\\r\\n      }\\r\\n\\r\\n      & > code {\\r\\n        padding: 4px 3px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        border-radius: 4px;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getClosestCrm, html, css, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\nimport useDraggableWin from '/bitpacks/bb-vue/components/concerns/useDraggableWin.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win',\\r\\n  template: html`\\r\\n    <div\\r\\n      ref=\\\"thisWin\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      :class=\\\"{ shouldDisplay, isDragging, isCollapsed: draggable.isCollapsed }\\\"\\r\\n      :style=\\\"style\\\"\\r\\n      @pointerdown=\\\"bringToFront\\\"\\r\\n      @keydown.stop\\r\\n    >\\r\\n      <div class=\\\"win_titlebar\\\" ref=\\\"dragHandle\\\">\\r\\n        <div class=\\\"win_title\\\">{{ title }}<slot name=\\\"title\\\" /></div>\\r\\n        <template v-if=\\\"canClose || canCollapse\\\">\\r\\n          <div class=\\\"win_controls\\\" ref=\\\"winControls\\\">\\r\\n            <bbv-button class=\\\"win_collapse\\\" @click=\\\"toggleCollapse\\\">\\r\\n              <span v-if=\\\"draggable.isCollapsed\\\">🔽</span>\\r\\n              <span v-else>🔼</span>\\r\\n            </bbv-button>\\r\\n            <bbv-button class=\\\"win_close\\\" @click=\\\"close\\\">❎</bbv-button>\\r\\n          </div>\\r\\n        </template>\\r\\n      </div>\\r\\n      <div class=\\\"win_content\\\" :class=\\\"{ noPad: noPad !== false, noScroll: noScroll !== false }\\\">\\r\\n        <slot name=\\\"default\\\"></slot>\\r\\n      </div>\\r\\n      <div class=\\\"win_actions\\\">\\r\\n        <slot name=\\\"actions\\\"></slot>\\r\\n      </div>\\r\\n      <!-- Hack to disable selection on other parts of document while dragging windows -->\\r\\n      <template v-if=\\\"isDragging\\\">\\r\\n        <component is=\\\"style\\\" type=\\\"text/css\\\"> body *::selection { all: inherit; } </component>\\r\\n      </template>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  emits: ['open', 'close', 'collapse'],\\r\\n  props: {\\r\\n    title: {\\r\\n      type: String,\\r\\n      default: '',\\r\\n    },\\r\\n    startOpen: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    startPosition: {\\r\\n      type: Object,\\r\\n    },\\r\\n    startWidth: {\\r\\n      type: String,\\r\\n    },\\r\\n    startHeight: {\\r\\n      type: String,\\r\\n    },\\r\\n    canClose: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    canCollapse: {\\r\\n      type: Boolean,\\r\\n      default: true,\\r\\n    },\\r\\n    noPad: {\\r\\n      default: false,\\r\\n    },\\r\\n    noScroll: {\\r\\n      default: false,\\r\\n    },\\r\\n    trayHide: {\\r\\n      type: Boolean,\\r\\n      default: false,\\r\\n    },\\r\\n    trayTitle: {\\r\\n      type: String,\\r\\n    },\\r\\n  },\\r\\n  data() {\\r\\n    return {\\r\\n      uuid: crypto.randomUUID(),\\r\\n      owner: null,\\r\\n      draggable: {\\r\\n        savedHeight: 0,\\r\\n        isCollapsed: false,\\r\\n      },\\r\\n      stackingIndex: 1,\\r\\n      winState: WinStates.closed,\\r\\n      shouldDisplay: false,\\r\\n      hasOpened: false,\\r\\n      WinStates,\\r\\n    }\\r\\n  },\\r\\n  watch: {\\r\\n    async winState(newVal, oldVal) {\\r\\n      if (newVal == WinStates.open && oldVal == WinStates.closed) {\\r\\n        // Position window on first open\\r\\n        if (this.hasOpened === false) {\\r\\n          this.hasOpened = true\\r\\n          useDraggableWin(this.draggable, {\\r\\n            win: this,\\r\\n            winManager: this.internals.winManager,\\r\\n            dragHandleRef: this.$refs.dragHandle,\\r\\n            dragIgnoreRef: this.$refs.winControls,\\r\\n            draggableRef: this.$refs.thisWin,\\r\\n            startPosition: this.$props.startPosition,\\r\\n          })\\r\\n        }\\r\\n\\r\\n        // Lag win opens just a bit to ensure CSS transitions are applied\\r\\n        await this.$nextTick()\\r\\n        this.shouldDisplay = true\\r\\n        this.bringToFront()\\r\\n      } else if (newVal == WinStates.closed) {\\r\\n        this.shouldDisplay = false\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n  computed: {\\r\\n    style() {\\r\\n      const collapsedOverrides = {\\r\\n        ...this.draggable.style,\\r\\n        height: 'auto',\\r\\n        minWidth: undefined,\\r\\n        minHeight: undefined,\\r\\n      }\\r\\n\\r\\n      let draggableStyles = this.draggable.isCollapsed ? collapsedOverrides : this.draggable.style\\r\\n      if (this.draggable.savedHeight !== 0 && !this.draggable.isCollapsed) {\\r\\n        draggableStyles.height = this.draggable.savedHeight\\r\\n        this.draggable.savedHeight = 0\\r\\n      }\\r\\n\\r\\n      return {\\r\\n        width: this.$props.startWidth,\\r\\n        height: this.$props.startHeight,\\r\\n        zIndex: this.stackingIndex,\\r\\n        ...draggableStyles,\\r\\n      }\\r\\n    },\\r\\n    isDragging() {\\r\\n      return this.draggable.isDragging\\r\\n    },\\r\\n  },\\r\\n  created() {\\r\\n    this.owner = getClosestCrm(this)\\r\\n  },\\r\\n  async mounted() {\\r\\n    this.internals.winManager.addWin(this)\\r\\n    if (this.$props.startOpen) {\\r\\n      this.winState = WinStates.open\\r\\n    }\\r\\n  },\\r\\n  beforeUnmount() {\\r\\n    this.internals.winManager.removeWin(this)\\r\\n  },\\r\\n  methods: {\\r\\n    async open() {\\r\\n      if (this.winState == WinStates.open) return\\r\\n      this.winState = WinStates.open\\r\\n      await sleep(200)\\r\\n      this.$emit('open', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    async close() {\\r\\n      if (this.winState == WinStates.closed) return\\r\\n      this.winState = WinStates.closed\\r\\n      await sleep(200)\\r\\n      this.$emit('close', { winMount: this, winState: this.winState })\\r\\n    },\\r\\n    toggleCollapse() {\\r\\n      if (this.draggable.isCollapsed === false) {\\r\\n        this.draggable.savedHeight = this.draggable.style.height\\r\\n      }\\r\\n      this.draggable.isCollapsed = !this.draggable.isCollapsed\\r\\n      this.$emit('collapse', { winMount: this, isCollapsed: this.draggable.isCollapsed })\\r\\n    },\\r\\n    bringToFront(event) {\\r\\n      if (event && event.path.some((x) => x == this.$refs.winControls)) return\\r\\n      this.internals.winManager.bringToFront(this)\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      position: fixed;\\r\\n      z-index: 1500;\\r\\n\\r\\n      display: flex;\\r\\n      flex-direction: column;\\r\\n\\r\\n      resize: both;\\r\\n      min-width: 250px;\\r\\n      min-height: 250px;\\r\\n\\r\\n      overflow: hidden;\\r\\n      border: 2px solid var(--bbvBorderColor);\\r\\n      border-radius: 10px;\\r\\n\\r\\n      background-color: var(--bbvAppInnerBgColor);\\r\\n      box-shadow: inset 0px 0px 70px 0px var(--bbvBoxShadowColor1),\\r\\n        0px 0px 20px 0px var(--bbvBoxShadowColor2);\\r\\n\\r\\n      transition: opacity 0.2s ease-out, transform 0.2s ease-out;\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transform: translateY(25px);\\r\\n      }\\r\\n\\r\\n      &.isDragging {\\r\\n        opacity: 0.9;\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        min-height: 0;\\r\\n        resize: none;\\r\\n\\r\\n        .win_content {\\r\\n          display: none;\\r\\n        }\\r\\n\\r\\n        .win_actions {\\r\\n          background-color: var(--bbvBoxShadowColor1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_titlebar {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        font-size: 12px;\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        user-select: none;\\r\\n        cursor: grab;\\r\\n      }\\r\\n\\r\\n      .win_title {\\r\\n        display: flex;\\r\\n        flex-grow: 1;\\r\\n        padding: 3px 15px 3px 7px;\\r\\n      }\\r\\n\\r\\n      .win_controls {\\r\\n        display: flex;\\r\\n        justify-content: space-around;\\r\\n        flex-grow: 0;\\r\\n        font-size: 14px;\\r\\n        cursor: auto;\\r\\n\\r\\n        .bbv-button {\\r\\n          margin: 3px;\\r\\n          padding: 2px;\\r\\n          padding-bottom: 4px;\\r\\n          border-radius: 5px;\\r\\n          border-radius: 0;\\r\\n          background-color: var(--bbvWinActionsBgColor);\\r\\n\\r\\n          &:last-child {\\r\\n            margin-right: 6px;\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_content {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 25px 15px;\\r\\n        flex-grow: 1;\\r\\n        overflow-y: auto;\\r\\n        color: var(--bbvFontLightColor);\\r\\n\\r\\n        &.noPad {\\r\\n          padding: 0;\\r\\n        }\\r\\n\\r\\n        &:not(.noPad) > *:first-child {\\r\\n          margin-top: 0;\\r\\n          padding-top: 0;\\r\\n        }\\r\\n\\r\\n        &.noScroll {\\r\\n          overflow: hidden;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .win_actions {\\r\\n        display: flex;\\r\\n        flex-grow: 0;\\r\\n        justify-content: space-between;\\r\\n        align-items: center;\\r\\n        padding: 8px 15px;\\r\\n        background-color: var(--bbvWinActionsBgColor);\\r\\n        color: var(--bbvWinTitlebarFgColor);\\r\\n        font-size: 12px;\\r\\n\\r\\n        &:empty {\\r\\n          display: none;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  let bus = getGlobal('asciiBus')\\r\\n  if (!bus) {\\r\\n    throw new Error('Run the asciichart-ui.js script first!')\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    bus.emit('asciiChartCollector', { value: (Math.random() - 0.5) * 10 })\\r\\n    await ns.sleep(50)\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-collector.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/1-adding-components.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, getGlobal, html, setGlobal, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// ascii dep\\r\\nimport asciichart from '/bitpacks/bb-vue/misc-examples/asciichart-lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'ascii-chart-app' },\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  name: 'ascii-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"ASCII Chart\\\" no-pad start-width=\\\"50%\\\">\\r\\n      <div class=\\\"chartBg\\\" @pointerenter=\\\"pauseEvents = true\\\" @pointerleave=\\\"pauseEvents = false\\\">\\r\\n        <pre class=\\\"chartDisplay\\\" ref=\\\"chartDisplay\\\">{{ this.chartOutput }}</pre>\\r\\n      </div>\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {\\r\\n      bus: null,\\r\\n      chartHistory: [],\\r\\n      eventBuffer: [],\\r\\n      pauseEvents: false,\\r\\n    }\\r\\n  },\\r\\n\\r\\n  computed: {\\r\\n    chartOutput() {\\r\\n      if (this.chartHistory.length < 1) return ''\\r\\n      return asciichart.plot(this.chartHistory)\\r\\n    },\\r\\n  },\\r\\n\\r\\n  watch: {\\r\\n    pauseEvents(newVal) {\\r\\n      if (newVal !== true) {\\r\\n        this.$refs.chartDisplay?.scrollTo({ left: 0, behavior: 'smooth' })\\r\\n        this.flushBuffer()\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  mounted() {\\r\\n    this.bus = getGlobal('asciiBus')\\r\\n    if (!this.bus) {\\r\\n      this.bus = getGlobal('Mitt').createBus()\\r\\n      setGlobal('asciiBus', this.bus)\\r\\n    }\\r\\n    this.bus.on('asciiChartCollector', this.handleBusEvent)\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    handleBusEvent(data) {\\r\\n      if (this.pauseEvents) {\\r\\n        this.eventBuffer = [data, ...this.eventBuffer]\\r\\n      } else {\\r\\n        this.chartHistory = [data?.value, ...this.chartHistory]\\r\\n      }\\r\\n      if (this.chartHistory.length > 600) {\\r\\n        this.chartHistory.pop()\\r\\n      }\\r\\n    },\\r\\n    async flushBuffer() {\\r\\n      for (let i = this.eventBuffer.length - 1; i >= 0; i--) {\\r\\n        let entry = this.eventBuffer[i]\\r\\n        if (!entry) return\\r\\n        this.bus.emit('asciiChartCollector', entry)\\r\\n        this.eventBuffer.pop()\\r\\n        await sleep(10)\\r\\n      }\\r\\n    },\\r\\n  },\\r\\n\\r\\n  scss: css`\\r\\n    @font-face {\\r\\n      font-family: 'FreeMono';\\r\\n      src: url('https://gumballcdn.netlify.app/FreeMono.woff2') format('woff2');\\r\\n    }\\r\\n\\r\\n    .__CMP_NAME__ {\\r\\n      .win_content {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n      }\\r\\n\\r\\n      .chartBg {\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        width: 100%;\\r\\n        min-height: 350px;\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        padding: 30px 0;\\r\\n      }\\r\\n\\r\\n      .chartDisplay {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        overflow: auto;\\r\\n        padding: 30px 0;\\r\\n        font-family: 'FreeMono';\\r\\n        cursor: default;\\r\\n        user-select: none;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const WinStates = Object.freeze({\\r\\n  open: 'open',\\r\\n  closed: 'closed',\\r\\n})\\r\\n\\r\\nexport const WinPositionStrategies = Object.freeze({\\r\\n  cascadeStack: 'cascadeStack',\\r\\n})\\r\\n\\r\\nexport const AppStates = Object.freeze({\\r\\n  hasWins: 'hasWins',\\r\\n  withoutWins: 'withoutWins',\\r\\n})\\r\\n\\r\\nexport const TrayItemTypes = Object.freeze({\\r\\n  winMount: 'winMount',\\r\\n  consumerRootMount: 'consumerRootMount',\\r\\n})\\r\\n\\r\\nexport const ComponentTiers = Object.freeze({\\r\\n  library: 'library',\\r\\n  consumer: 'consumer',\\r\\n})\",\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, lodash, Vue, VueUse, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default async function useDraggableWin(store, options = {}) {\\r\\n  const { reactive, watch } = Vue()\\r\\n  const { useDraggable, useElementBounding, until } = VueUse()\\r\\n\\r\\n  // Handle options + validations\\r\\n  let opts = reactive({\\r\\n    win: null,\\r\\n    winManager: null,\\r\\n    dragHandleRef: null,\\r\\n    draggableRef: null,\\r\\n    dragIgnoreRef: null,\\r\\n    startPosition: null,\\r\\n    constrain: true,\\r\\n    constrainPadding: 0,\\r\\n    ...lodash.omitBy(options, lodash.isNil),\\r\\n  })\\r\\n  if (!lodash.isObjectLike(store)) {\\r\\n    throw new Error('Must provide store as first arg')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.win)) {\\r\\n    throw new Error('Must provide win in options')\\r\\n  }\\r\\n  if (!lodash.isObjectLike(opts.winManager)) {\\r\\n    throw new Error('Must provide winManager in options')\\r\\n  }\\r\\n  if (!opts.dragHandleRef) {\\r\\n    throw new Error('Must provide dragHandleRef in options')\\r\\n  }\\r\\n  if (!opts.draggableRef) {\\r\\n    throw new Error('Must provide draggableRef in options')\\r\\n  }\\r\\n\\r\\n  // Fill provided store with initial state\\r\\n  store.isDragging = false\\r\\n  store.style = {}\\r\\n  store.fixedRoot = useElementBounding(doc.querySelector('[bbv-root]'))\\r\\n  store.draggableTarget = useElementBounding(opts.draggableRef)\\r\\n\\r\\n  // Helper to manually position draggable\\r\\n  const manuallyPositionDraggable = async ({ x, y }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.left = `${x}px`\\r\\n    ele.style.top = `${y}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n  const manuallySizeDraggable = async ({ width, height }) => {\\r\\n    const ele = opts.draggableRef\\r\\n    ele.style.width = `${width}px`\\r\\n    ele.style.height = `${height}px`\\r\\n    store.draggableTarget.update()\\r\\n    updateStore({ store, opts })\\r\\n  }\\r\\n\\r\\n  // Wait until draggableTarget is mounted, might be a better way?\\r\\n  await until(store.draggableTarget).toMatch((x) => x.width > 0)\\r\\n\\r\\n  // Sync minWidth / minHeight from CSS styles applied to window\\r\\n  store.minWidth = parseInt(win.getComputedStyle(opts.draggableRef).minWidth)\\r\\n  store.minHeight = parseInt(win.getComputedStyle(opts.draggableRef).minHeight)\\r\\n\\r\\n  // Set initial position - if none is provided - based on winManager recommendation\\r\\n  let initialPos = { x: 0, y: 0 }\\r\\n  if (opts.startPosition === null) {\\r\\n    initialPos = opts.winManager.getRecommendedPosition(opts.win)\\r\\n  } else {\\r\\n    initialPos = { x: opts.startPosition?.x ?? 0, y: opts.startPosition?.y ?? 0 }\\r\\n  }\\r\\n\\r\\n  // Do initial positioning of window\\r\\n  manuallyPositionDraggable(initialPos)\\r\\n\\r\\n  // Watch for position changes\\r\\n  store.isDragging = useDraggable(opts.dragHandleRef, {\\r\\n    initialValue: initialPos,\\r\\n    onMove: async (p) => manuallyPositionDraggable(p),\\r\\n    onStart: (_, e) => !e.path.some((x) => x == opts.dragIgnoreRef),\\r\\n  }).isDragging\\r\\n\\r\\n  // Watch for size changes\\r\\n  watch(store.draggableTarget, () => manuallySizeDraggable(store.draggableTarget), { deep: true })\\r\\n}\\r\\n\\r\\nasync function updateStore(ctx) {\\r\\n  const { reactive } = Vue()\\r\\n\\r\\n  let padding = ctx.opts.constrainPadding\\r\\n  let root = ctx.store.fixedRoot\\r\\n  let draggable = ctx.store.draggableTarget\\r\\n\\r\\n  let newSize = reactive({ width: draggable.width, height: draggable.height })\\r\\n  let newPos = reactive({ x: draggable.x, y: draggable.y })\\r\\n\\r\\n  // Clamp window size and position if desired\\r\\n  if (ctx.opts.constrain) {\\r\\n    const { useClamp } = VueUse()\\r\\n\\r\\n    newSize.width = useClamp(newSize.width, ctx.store.minWidth, root.width - padding * 2)\\r\\n    newSize.height = useClamp(\\r\\n      newSize.height,\\r\\n      ctx.store.isCollapsed ? 0 : ctx.store.minHeight,\\r\\n      root.height - padding * 2\\r\\n    )\\r\\n\\r\\n    newPos.x = useClamp(newPos.x, padding, root.width - newSize.width - padding)\\r\\n    newPos.y = useClamp(newPos.y, padding, root.bottom - newSize.height - padding)\\r\\n  }\\r\\n\\r\\n  // Update style object to be bound to draggableTarget in consumer template\\r\\n  ctx.store.style = {\\r\\n    left: `${newPos.x}px`,\\r\\n    top: `${newPos.y}px`,\\r\\n    width: `${newSize.width}px`,\\r\\n    height: `${newSize.height}px`,\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    // App one\\r\\n    // ---\\r\\n\\r\\n    let appOne = new AppFactory(ns)\\r\\n    const appOneHandleFn = await appOne.mount({\\r\\n      config: { id: 'app-one', showTips: false },\\r\\n      rootComponent: PrimaryAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-one booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then booting a second app...')\\r\\n\\r\\n    // App two\\r\\n    // ---\\r\\n\\r\\n    let appTwo = new AppFactory(ns)\\r\\n    const appTwoHandleFn = await appTwo.mount({\\r\\n      config: { id: 'app-two', showTips: false },\\r\\n      rootComponent: DifferentAppRoot,\\r\\n    })\\r\\n\\r\\n    ns.tprint('\\\\n\\\\napp-two booted!\\\\n\\\\n')\\r\\n\\r\\n    // Wait a bit...\\r\\n    await ns.sleep(1000)\\r\\n    ns.tprint('Waiting 1s and then logging mounted apps to debug console...')\\r\\n\\r\\n    // Retrieve references to both running apps using the handle / lookup functions\\r\\n    // returned from the mount() method calls earlier.\\r\\n    const [runningAppOne, runningAppTwo] = [appOneHandleFn(), appTwoHandleFn()]\\r\\n\\r\\n    // Display running app info in debug console / devtools (Debug -> Activate)\\r\\n    console.debug(runningAppOne)\\r\\n    console.debug(runningAppTwo)\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst PrimaryAppRoot = {\\r\\n  name: 'primary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <!--\\r\\n      Use the \\\"tray-hide\\\" prop to hide this window from the app tray\\r\\n    -->\\r\\n    <bbv-win\\r\\n      tray-hide\\r\\n      title=\\\"I'm hidden from the App Tray\\\"\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      start-width=\\\"20%\\\"\\r\\n      @close=\\\"appShutdown\\\"\\r\\n    >\\r\\n      <p>\\r\\n        This window doesn't appear in the app tray, and instead this window is configured to\\r\\n        shutdown the app where it's mounted when it's closed.\\r\\n      </p>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\nconst DifferentAppRoot = {\\r\\n  name: 'secondary-app-root',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <main>\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win title=\\\"I've got a special title in the tray\\\" tray-title=\\\"🥇\\\" class=\\\"__CMP_NAME__\\\">\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n\\r\\n      <!--\\r\\n        Use the \\\"tray-title\\\" prop to show a specific title\\r\\n        when this window is minimized in the app tray\\r\\n      -->\\r\\n      <bbv-win\\r\\n        title=\\\"I have a special title in the tray, too!\\\"\\r\\n        tray-title=\\\"🥈\\\"\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n      >\\r\\n        <p>Boop beep</p>\\r\\n        <template #actions>\\r\\n          <bbv-button @click=\\\"appShutdown\\\">Shutdown App (2 Windows)</bbv-button>\\r\\n        </template>\\r\\n      </bbv-win>\\r\\n    </main>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/1-the-app-tray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//\\n//\\n// NOTE:\\n// Ideally some of these files would be in separate resource folders,\\n// but I've been running into circular reference issues in-game :verysadge:\\n//\\n//\\n\\n//\\n//\\n// CONSTANTS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Keys used for globalThis storage and lookup\\n */\\nexport const Keys = Object.freeze({\\n  libKey: 'bbVue',\\n  vueModuleKey: 'Vue',\\n  vueUseModuleKey: 'VueUse',\\n  mittModuleKey: 'Mitt',\\n  rootAppKey: 'rootApp',\\n  globalBusKey: 'rootBus',\\n})\\n\\n/**\\n * Tokens used when processing a consumer app style and template values\\n */\\nexport const ReplacementTokens = Object.freeze({\\n  appId: '__APP_ID__',\\n  componentName: '__CMP_NAME__',\\n})\\n\\n//\\n//\\n// GLOBALS MANAGEMENT /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\nexport const RootApp = {\\n  rootAttr: 'bbv-root',\\n  raw() {\\n    return getGlobal(Keys.rootAppKey)\\n  },\\n  instance() {\\n    return this.raw()?._instance\\n  },\\n  appDef() {\\n    return this.raw()?._component\\n  },\\n  component() {\\n    return this.instance()?.ctx\\n  },\\n  set(val) {\\n    return setGlobal(Keys.rootAppKey, val)\\n  },\\n  async cleanup() {\\n    await sleep(15)\\n    try {\\n      this.raw()?.unmount()\\n    } catch (error) {\\n      console.debug(\\\"bb-vue: Issue cleaning up AppRoot, but don't worry about it\\\")\\n    }\\n    await this.removeDom()\\n    deleteGlobal(Keys.rootAppKey)\\n    await sleep(15)\\n  },\\n  async removeDom() {\\n    await sleep(15)\\n    doc.querySelector(`[${this.rootAttr}]`)?.remove()\\n  },\\n  async addDom(appId) {\\n    doc.body.insertAdjacentHTML('afterbegin', html`<div id=\\\"${appId}\\\" bbv-root></div>`)\\n    await sleep(15)\\n  },\\n}\\n\\n/**\\n * Reference to window global\\n */\\nexport const win = globalThis['window']\\n\\n/**\\n * Reference to document global\\n */\\nexport const doc = globalThis['document']\\n\\n/**\\n * Reference to bundled lodash library\\n */\\nexport const lodash = win._\\n\\n/**\\n * Initialize globalThis storage\\n */\\nif (lodash.isObjectLike(win[Keys.libKey]) === false) {\\n  win[Keys.libKey] = {}\\n}\\n\\n/**\\n * Sets a value by key to internal library storage\\n * @param {String} key Path to set, utilizing `lodash.set`\\n * @param {any} value\\n * @returns {any} A reference to the value passed in, from the store\\n * * @see https://lodash.com/docs/4.17.15#set\\n */\\nexport function setGlobal(key, value) {\\n  lodash.set(win[Keys.libKey], key, value)\\n  return getGlobal(key)\\n}\\n\\n/**\\n * Retrieves a value by key from internal library storage\\n * @param {String} key Path to get, utilizing `lodash.get`\\n * @returns {any} Value from or undefined if not set\\n * @see https://lodash.com/docs/4.17.15#get\\n */\\nexport function getGlobal(key, defaultValue) {\\n  return lodash['get'](win[Keys.libKey], key, defaultValue)\\n}\\n\\n/**\\n * Deletes a global key from globalThis\\n * @param {String} key Property to destroy\\n * @returns {void}\\n */\\nexport function deleteGlobal(key) {\\n  delete win[Keys.libKey][key]\\n}\\n\\n/**\\n * Load the Vue library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Vue} An instance of Vue, or a falsy value indicating the library is not loaded\\n */\\nexport function Vue({ silent = false } = {}) {\\n  let vue = win[Keys.vueModuleKey]\\n  if (!vue && !silent)\\n    throw new Error('Vue is not loaded on window global; check VueLoader:Get for issues')\\n  return vue\\n}\\n\\n/**\\n * Load the VueUse library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {VueUse} An instance of VueUse, or a falsy value indicating the library is not loaded\\n */\\nexport function VueUse({ silent = false } = {}) {\\n  let vueUse = win[Keys.vueUseModuleKey]\\n  if (!vueUse && !silent)\\n    throw new Error('VueUse is not loaded on window global; check AppRoot:loadDeps for issues')\\n  return vueUse\\n}\\n\\n/**\\n * Load the Mitt library from globalThis, if available. Throws an error if not defined unless\\n * the `options.silent` boolean is provided.\\n * @param {object} options\\n * @param {boolean} options.silent Silence lookup exceptions if library cannot be found\\n * @returns {Mitt} An instance of Mitt, or a falsy value indicating the library is not loaded\\n */\\nexport function Mitt({ silent = false } = {}) {\\n  let mitt = getGlobal('Mitt')\\n  if (!mitt && !silent)\\n    throw new Error('Mitt is not loaded on window global; check MittLoader:Get for issues')\\n  return mitt\\n}\\n\\n//\\n//\\n// EXCEPTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Processing exception, most often originating from SCSS compiler usage in `ComponentManager`.\\n * Signifies an issue when preparing components for injection into `bbVue.rootApp`\\n */\\nexport class ProcessingException {\\n  constructor(step, originalError) {\\n    this.step = step\\n    this.originalError = originalError\\n  }\\n\\n  toString() {\\n    return `ERROR: [ProcessingException] Failure during '${this.step}' processing\\\\n${\\n      this.originalError?.formatted || toJson(this.originalError)\\n    }`\\n  }\\n}\\n\\n/**\\n * Component validation exception thrown by `AppFactory`.\\n * Signifies an issue with components being provided to `AppFactory` by a consumer app definition.\\n */\\nexport class ComponentValidationException {\\n  constructor(message, cmpDef) {\\n    this.message = message\\n    this.componentDefinition = cmpDef\\n  }\\n\\n  toString() {\\n    return `ERROR: [ComponentValidationException] ${this.message}\\\\n${toJson(\\n      this.componentDefinition\\n    )}`\\n  }\\n}\\n\\n// APP TRAVERSAL /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Walk the Vue VNode tree and find the closest parent consumer root mount (CRM)\\n * @param {componentInstanceVm} startingVm\\n * The view-model / `this` binding from the component where the search originates\\n * @returns {crmInstanceVm | null} The closest CRM instance or null\\n */\\nexport function getClosestCrm(startingVm) {\\n  let consumerRoot = null\\n  let parent = startingVm.$parent\\n  while (parent && !consumerRoot) {\\n    if (parent.$options.__consumerRoot === true) {\\n      consumerRoot = parent\\n    }\\n    parent = parent.$parent\\n  }\\n  return consumerRoot\\n}\\n\\n// GENERAL FUNCTIONS /////////////\\n// -----------------------------------------\\n// --------------------------------------------------------------\\n\\n/**\\n * Cleanup an error string\\n * @param {String} error Error string to cleanup\\n * @returns Removes odd internal delimiters and other noisy chars from a BitBurner error\\n */\\nexport function cleanupError(error) {\\n  return String(error)\\n    .replace('|DELIMITER|', '')\\n    .replaceAll('|DELIMITER|', ' » ')\\n    .replaceAll('<br>', '')\\n    .replaceAll('Stack:', '')\\n}\\n\\n/**\\n * Wait for ms then continue\\n * @param {Number} ms Millis to wait\\n * @returns {Promise<void>}\\n */\\nexport async function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(), ms)\\n  })\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function scss() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function css() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression to support VSCode tooling on template literals\\n * @param {String} passThrough\\n * @returns {String} untouchedString\\n */\\nexport function html() {\\n  return templatePassthrough(...arguments)\\n}\\n\\n/**\\n * Transparent tag expression; reconstructs provided template string with no changes\\n * @param {Array} strings\\n * @param  {...any} values\\n * @returns {String}\\n */\\nfunction templatePassthrough(strings, ...values) {\\n  let str = ''\\n  strings.forEach((string, i) => {\\n    str += string + (values[i] || '')\\n  })\\n  return str\\n}\\n\\n/**\\n * Attempts to convert a value to string using `lodash.toString`,\\n * and then trim the string with `lodash.trim`\\n * @param {any} value Value to coerce to string\\n * @returns {string} value\\n */\\nexport function toStr(value) {\\n  return lodash.trim(lodash.toString(value))\\n}\\n\\n/**\\n * Attempts to decern a given value's \\\"blankness\\\" via:\\n * - `lodash.isNil` and\\n * - `lodash.isEmpty`\\n * @param {any} value Value to be checked for blankness\\n * @returns {boolean} Is value blank\\n */\\nexport function isBlank(value) {\\n  if (lodash.isNil(value)) return true\\n  if (lodash.isString(value) && lodash.isEmpty(value)) return true\\n  return lodash.isEmpty(value)\\n}\\n\\n/**\\n * Attempt to convert an object to JSON via `JSON.stringify`, or fallback\\n * to a more robust JSON stringifier if needed\\n * @param {any} value\\n * @returns {String} result\\n */\\nexport function toJson(value) {\\n  try {\\n    return JSON.stringify(value, null, '  ')\\n  } catch (error) {\\n    try {\\n      return toJsonSafe(value, 4, 4, '  ')\\n    } catch (error) {\\n      return '[COULD NOT SERIALIZE] ' + value\\n    }\\n  }\\n}\\n\\n/**\\n * Attempt to convert a string to it's parsed JSON result\\n * @param {any} value\\n * @returns {any | null} resultOrNull\\n */\\nexport function fromJson(value) {\\n  try {\\n    return JSON.parse(value)\\n  } catch (error) {\\n    console.error(`bb-vue: Could not parse JSON string: ${value}`)\\n    return null\\n  }\\n}\\n\\n/**\\n * @param {String} value\\n */\\nexport function uppercaseFirstLetter(value) {\\n  return String(value).charAt(0).toUpperCase() + String(value).slice(1)\\n}\\n\\n/**\\n * Returns the JSON representation of an object.\\n *\\n * @param {value} object the object\\n * @param {number} objectMaxDepth for objects, the maximum number of times to recurse into descendants\\n * @param {number} arrayMaxLength for arrays, the maximum number of elements to enumerate\\n * @param {string} indent the string to use for indentation\\n * @return {string} the JSON representation\\n */\\nconst toJsonSafe = function (object, objectMaxDepth, arrayMaxLength, indent) {\\n  'use strict'\\n\\n  /**\\n   * Escapes control characters, quote characters, backslash characters and quotes the string.\\n   *\\n   * @param {string} string the string to quote\\n   * @returns {String} the quoted string\\n   */\\n  function quote(string) {\\n    escapable.lastIndex = 0\\n    var escaped\\n    if (escapable.test(string)) {\\n      escaped = string.replace(escapable, function (a) {\\n        var replacement = replacements[a]\\n        if (typeof replacement === 'string') return replacement\\n        // Pad the unicode representation with leading zeros, up to 4 characters.\\n        return '\\\\\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4)\\n      })\\n    } else escaped = string\\n    return '\\\"' + escaped + '\\\"'\\n  }\\n\\n  /**\\n   * Returns the String representation of an object.\\n   *\\n   * Based on <a href=\\\"https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js\\\">https://github.com/Canop/JSON.prune/blob/master/JSON.prune.js</a>\\n   *\\n   * @param {string} path the fully-qualified path of value in the JSON object\\n   * @param {type} value the value of the property\\n   * @param {string} cumulativeIndent the indentation to apply at this level\\n   * @param {number} depth the current recursion depth\\n   * @return {String} the JSON representation of the object, or \\\"null\\\" for values that aren't valid\\n   * in JSON (e.g. infinite numbers).\\n   */\\n  function toString(path, value, cumulativeIndent, depth) {\\n    switch (typeof value) {\\n      case 'string':\\n        return quote(value)\\n      case 'number': {\\n        // JSON numbers must be finite\\n        if (isFinite(value)) return String(value)\\n        return 'null'\\n      }\\n      case 'boolean':\\n        return String(value)\\n      case 'object': {\\n        if (!value) return 'null'\\n        var valueIndex = values.indexOf(value)\\n        if (valueIndex !== -1) return 'Reference => ' + paths[valueIndex]\\n        values.push(value)\\n        paths.push(path)\\n        if (depth > objectMaxDepth) return '...'\\n\\n        // Make an array to hold the partial results of stringifying this object value.\\n        var partial = []\\n\\n        // Is the value an array?\\n        var i\\n        if (Object.prototype.toString.apply(value) === '[object Array]') {\\n          // The value is an array. Stringify every element\\n          var length = Math.min(value.length, arrayMaxLength)\\n\\n          // Whether a property has one or multiple values, they should be treated as the same\\n          // object depth. As such, we do not increment the object depth when recursing into an\\n          // array.\\n          for (i = 0; i < length; ++i) {\\n            partial[i] = toString(\\n              path + '.' + i,\\n              value[i],\\n              cumulativeIndent + indent,\\n              depth,\\n              arrayMaxLength\\n            )\\n          }\\n          if (i < value.length) {\\n            // arrayMaxLength reached\\n            partial[i] = '...'\\n          }\\n          return '\\\\n' + cumulativeIndent + '[' + partial.join(', ') + '\\\\n' + cumulativeIndent + ']'\\n        }\\n\\n        // Otherwise, iterate through all of the keys in the object.\\n        for (var subKey in value) {\\n          if (Object.prototype.hasOwnProperty.call(value, subKey)) {\\n            var subValue\\n            try {\\n              subValue = toString(\\n                path + '.' + subKey,\\n                value[subKey],\\n                cumulativeIndent + indent,\\n                depth + 1\\n              )\\n              partial.push(quote(subKey) + ': ' + subValue)\\n            } catch (e) {\\n              // this try/catch due to forbidden accessors on some objects\\n              if (e.message) subKey = e.message\\n              else subKey = 'access denied'\\n            }\\n          }\\n        }\\n        var result = '\\\\n' + cumulativeIndent + '{\\\\n'\\n        for (i = 0; i < partial.length; ++i)\\n          result += cumulativeIndent + indent + partial[i] + ',\\\\n'\\n        if (partial.length > 0) {\\n          // Remove trailing comma\\n          result = result.slice(0, result.length - 2) + '\\\\n'\\n        }\\n        result += cumulativeIndent + '}'\\n        return result\\n      }\\n      default:\\n        return 'null'\\n    }\\n  }\\n\\n  if (indent === undefined) indent = '  '\\n  if (objectMaxDepth === undefined) objectMaxDepth = 0\\n  if (arrayMaxLength === undefined) arrayMaxLength = 50\\n  // Matches characters that must be escaped\\n\\n  // prettier-ignore\\n  // eslint-disable-next-line\\n  var escapable = /[\\\\\\\\\\\\\\\"\\\\x00-\\\\x1f\\\\x7f-\\\\x9f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]/g\\n\\n  // The replacement characters\\n  var replacements = {\\n    '\\\\b': '\\\\\\\\b',\\n    '\\\\t': '\\\\\\\\t',\\n    '\\\\n': '\\\\\\\\n',\\n    '\\\\f': '\\\\\\\\f',\\n    '\\\\r': '\\\\\\\\r',\\n    '\\\"': '\\\\\\\\\\\"',\\n    '\\\\\\\\': '\\\\\\\\\\\\\\\\',\\n  }\\n  // A list of all the objects that were seen (used to avoid recursion)\\n  var values = []\\n  // The path of an object in the JSON object, with indexes corresponding to entries in the\\n  // \\\"values\\\" variable.\\n  var paths = []\\n  return toString('root', object, '', 0)\\n}\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces)\\n  return num >= 0 ? '$' + numberShort : numberShort.replace('-', '-$')\\n}\\n\\nconst symbols = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S', 'o', 'n', 'e33', 'e36', 'e39']\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n  for (\\n    var i = 0, sign = Math.sign(num), num = Math.abs(num);\\n    num >= 1000 && i < symbols.length;\\n    i++\\n  )\\n    num /= 1000\\n  return (\\n    (sign < 0 ? '-' : '') +\\n    num.toFixed(\\n      Math.max(\\n        0,\\n        Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num)))\\n      )\\n    ) +\\n    symbols[i]\\n  )\\n}\\n\\n/**\\n * Elapsed time between two dates, or a number of seconds\\n * @param {number} timeStart Defaults to 0\\n * @param {number} timeEnd Defaults to 0\\n * @returns {string} Elapsed time in human-friendly format\\n */\\nexport function timeDiff(timeStart = 0, timeEnd = 0) {\\n  let diff\\n  if (timeStart && timeEnd) {\\n    diff = timeEnd - timeStart\\n  } else {\\n    diff = timeStart * 1000\\n  }\\n  var hours = Math.floor(diff / (1000 * 60 * 60))\\n  diff -= hours * (1000 * 60 * 60)\\n  var mins = Math.floor(diff / (1000 * 60))\\n  diff -= mins * (1000 * 60)\\n  var secs = Math.floor(diff / 1000)\\n  diff -= secs * 1000\\n  var ms = Math.floor(diff)\\n  diff -= ms\\n  let toRet = []\\n  if (hours > 0) {\\n    toRet.push(`${hours}h`)\\n  }\\n  if (mins > 0) {\\n    toRet.push(`${mins}m`)\\n  }\\n  if (secs > 0) {\\n    toRet.push(`${secs}s`)\\n  }\\n  if (ms > 0 && !secs) {\\n    toRet.push(`${ms}ms`)\\n  }\\n  return toRet.join(' ')\\n}\",\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/4-sending-data-from-scripts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { doc, toStr, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class SassLoader {\\r\\n  static #moduleGlobalKey = 'Sass'\\r\\n\\r\\n  static async Fetch() {\\r\\n    let module = this.#getModule()\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      await this.#loadSassModule()\\r\\n      module = this.#getModule()\\r\\n    }\\r\\n    if (!this.#isValidModule(module)) {\\r\\n      throw new Error(`SassLoader could not load module in Fetch()`)\\r\\n    }\\r\\n\\r\\n    return this.#wrapModule(module)\\r\\n  }\\r\\n\\r\\n  static #loadSassModule() {\\r\\n    return new Promise((resolve, reject) => {\\r\\n      this.#doDefineHack()\\r\\n\\r\\n      const onScriptLoad = (() => {\\r\\n        // console.log('sass:load')\\r\\n        const module = this.#getModule()\\r\\n        if (this.#isValidModule(module)) {\\r\\n          resolve(module)\\r\\n          // console.log('sass:loadResolve')\\r\\n        } else {\\r\\n          reject()\\r\\n          console.error('bb-vue: sass:loadReject', this)\\r\\n          throw new Error('SassLoader could not load module in #loadSassModule()')\\r\\n        }\\r\\n        this.#undoDefineHack()\\r\\n      }).bind(this)\\r\\n\\r\\n      let sassJSScript = doc.createElement('script')\\r\\n      sassJSScript.type = 'text/javascript'\\r\\n      sassJSScript.src = 'https://cdn.jsdelivr.net/npm/sass.js@0.11.1/dist/sass.sync.js'\\r\\n      sassJSScript.onload = onScriptLoad\\r\\n      sassJSScript.onerror = reject\\r\\n\\r\\n      doc.head.appendChild(sassJSScript)\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static async #compileAsyncWrapper(module, rawScss, scssCompilerOptions, ...args) {\\r\\n    let compilerOptionsMerged = Object.assign({ style: module.style.expanded }, scssCompilerOptions)\\r\\n    return new Promise((resolve, reject) => {\\r\\n      // console.log('compile', rawScss)\\r\\n      module.compile(\\r\\n        rawScss,\\r\\n        compilerOptionsMerged,\\r\\n        (compileResult) => {\\r\\n          if (compileResult.status !== 0) {\\r\\n            reject(compileResult)\\r\\n            // console.log('compile:reject', compileResult)\\r\\n          } else {\\r\\n            resolve(toStr(compileResult.text))\\r\\n            // console.log('compile:resolve', compileResult.text)\\r\\n          }\\r\\n        },\\r\\n        ...args\\r\\n      )\\r\\n    })\\r\\n  }\\r\\n\\r\\n  static #getModule() {\\r\\n    return win[this.#moduleGlobalKey]\\r\\n  }\\r\\n\\r\\n  static #wrapModule(module) {\\r\\n    if (!this.#isValidModule(module))\\r\\n      throw new Error('SassLoader cannot wrap invalid module', module)\\r\\n    module.compileAsync = async (rawCss, scssOptions, ...args) =>\\r\\n      await this.#compileAsyncWrapper(module, rawCss, scssOptions, ...args)\\r\\n    return module\\r\\n  }\\r\\n\\r\\n  static #isValidModule(module) {\\r\\n    return module && module.compile\\r\\n  }\\r\\n\\r\\n  static #doDefineHack() {\\r\\n    if (win.define) {\\r\\n      win._defineBak = win.define\\r\\n      win.define = undefined\\r\\n    }\\r\\n  }\\r\\n\\r\\n  static #undoDefineHack() {\\r\\n    if (win._defineBak) {\\r\\n      win.define = win._defineBak\\r\\n    }\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { isBlank, lodash, toStr, toJson, RootApp, sleep } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport ComponentManager from '/bitpacks/bb-vue/ComponentManager.js';\\r\\nimport MittLoader from '/bitpacks/bb-vue/MittLoader.js';\\r\\nimport SassLoader from '/bitpacks/bb-vue/SassLoader.js';\\r\\nimport VueLoader from '/bitpacks/bb-vue/VueLoader.js';\\r\\n\\r\\nimport ScriptX from '/bitpacks/bb-vue/components/internal/ScriptX.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { default as AppRoot, ComponentLibrary } from '/bitpacks/bb-vue/components/internal/AppRoot.js';\\r\\n\\r\\nconst CreateOrGetRootVueApp = async (Vue, Sass, forceReload = false) => {\\r\\n  const rootConfig = {\\r\\n    appId: 'bb-vue-root',\\r\\n  }\\r\\n\\r\\n  // console.time('CreateOrGetRootVueApp')\\r\\n\\r\\n  if (forceReload == true || (RootApp.raw() && !RootApp.instance())) {\\r\\n    console.debug(`bb-vue: AppFactory found remnants of previous app, doing cleanup`)\\r\\n    await RootApp.cleanup()\\r\\n  } else if (RootApp.raw() && RootApp.instance()) {\\r\\n    console.debug(`bb-vue: AppFactory found existing app, returning instance`)\\r\\n    return RootApp.raw()\\r\\n  }\\r\\n\\r\\n  console.debug(`bb-vue: AppFactory building new Vue app`)\\r\\n\\r\\n  let componentManager = new ComponentManager(rootConfig, Sass, AppRoot.scssResources)\\r\\n  componentManager.add(AppRoot, ...ComponentLibrary)\\r\\n  await componentManager.processAll()\\r\\n\\r\\n  let processedLibraryRoot = {\\r\\n    ...componentManager.processedLibraryRoot,\\r\\n    __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n  }\\r\\n\\r\\n  let rootApp\\r\\n  rootApp = Vue.createApp(processedLibraryRoot)\\r\\n  rootApp.use(ScriptX)\\r\\n  componentManager.registerWithVueApp(rootApp)\\r\\n\\r\\n  await RootApp.addDom(rootConfig.appId)\\r\\n  rootApp.mount(`#${rootConfig.appId}`)\\r\\n  RootApp.set(rootApp)\\r\\n\\r\\n  // console.timeEnd('CreateOrGetRootVueApp')\\r\\n\\r\\n  return rootApp\\r\\n}\\r\\n\\r\\n//\\r\\n\\r\\nexport default class AppFactory {\\r\\n  #ns\\r\\n  #appConfig\\r\\n  #rootComponent\\r\\n  #componentsInQueue = new Set()\\r\\n  #mounted = false\\r\\n\\r\\n  constructor(ns) {\\r\\n    if (isBlank(ns) || !(ns.tprint || ns.sleep || ns.exit)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique reference to the ns object! ` +\\r\\n          `Try sending the ns object from the script where you're creating this AppFactory.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    this.#ns = ns\\r\\n    this.#mounted = false\\r\\n    this.#componentsInQueue = new Set()\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async mount({ config = {}, components = [], rootComponent = {} }) {\\r\\n    this.#configure(config)\\r\\n    this.#addComponents(components)\\r\\n    this.#setRootComponent(rootComponent)\\r\\n\\r\\n    this.#validateStart()\\r\\n    this.#validateOneMount()\\r\\n\\r\\n    // console.time('AppFactory:start')\\r\\n\\r\\n    const { Vue, Sass } = await this.#runLoaders()\\r\\n\\r\\n    // Mount root app\\r\\n    let rootVueApp = await CreateOrGetRootVueApp(Vue, Sass, this.#appConfig.forceReload)\\r\\n\\r\\n    let componentManager = new ComponentManager(\\r\\n      this.#appConfig,\\r\\n      Sass,\\r\\n      [RootApp.appDef().scssResources, this.#appConfig.scssResources].join('\\\\n\\\\n')\\r\\n    )\\r\\n    componentManager.add(...this.#componentsInQueue)\\r\\n    await componentManager.processAll()\\r\\n    componentManager.registerWithVueApp(rootVueApp)\\r\\n\\r\\n    let processedConsumerRoot = {\\r\\n      ...componentManager.processedConsumerRoot,\\r\\n      __finalStyles: componentManager.gatherAllProcessedStyles(),\\r\\n    }\\r\\n\\r\\n    let consumerAppHandleFn = addConsumerRootDef(this.#ns, processedConsumerRoot)\\r\\n\\r\\n    this.#mounted = true\\r\\n\\r\\n    if (this.#appConfig.showTips) {\\r\\n      this.#ns.tprint(\\r\\n        `\\\\n\\\\n📦 Your bb-vue app (#${\\r\\n          this.#appConfig.appId\\r\\n        }) is now mounted!\\\\n\\\\n🧰 Use the Debug -> Activate menu to open the BitBurner Developer Tools.\\\\n👓 In the Elements tab, you should find your app at the top of the <body> tag.\\\\n\\\\n🎉 Have fun!\\\\n\\\\nP.S. If you're sick of seeing this message, add \\\\`showTips: false\\\\` to your app's configuration object.\\\\n\\\\n`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    // console.timeEnd('AppFactory:start')\\r\\n\\r\\n    return consumerAppHandleFn\\r\\n  }\\r\\n\\r\\n  #configure(instanceConfig = {}) {\\r\\n    if (isBlank(instanceConfig.id)) {\\r\\n      throw new Error(\\r\\n        `Every AppFactory needs a unique ID! ` +\\r\\n          `Try using \\\\`crypto.randomUUID()\\\\` if you can't think of one.`\\r\\n      )\\r\\n    }\\r\\n\\r\\n    let defaultConfig = {\\r\\n      appId: toStr(instanceConfig.id),\\r\\n      showTips: true,\\r\\n      forceReload: false,\\r\\n      shutdownWithPid: null,\\r\\n      shutdownRootWithPid: null,\\r\\n      scssResources: '',\\r\\n    }\\r\\n\\r\\n    delete instanceConfig.id\\r\\n    this.#appConfig = Object.assign(defaultConfig, instanceConfig)\\r\\n\\r\\n    if (!isBlank(this.#appConfig.scssResources)) {\\r\\n      if (!lodash.isString(this.#appConfig.scssResources)) {\\r\\n        throw new TypeError('SCSS resources added to AppFactory must be of type String')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #addComponents(components) {\\r\\n    if (!lodash.isArray(components)) {\\r\\n      throw new Error('Please provide one or more components to add as an array')\\r\\n    }\\r\\n\\r\\n    for (let cmpDef of components) {\\r\\n      cmpDef = ComponentManager.Validate(cmpDef)\\r\\n      this.#componentsInQueue.add(cmpDef)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #setRootComponent(componentDefinition = {}) {\\r\\n    let cmpDef = { ...ComponentManager.Validate(componentDefinition) }\\r\\n    cmpDef.__consumerRoot = true\\r\\n    cmpDef.__appId = this.#appConfig.appId\\r\\n    cmpDef.__uuid = `${cmpDef.name}-${crypto.randomUUID()}`\\r\\n    cmpDef.__config = this.#appConfig\\r\\n    this.#rootComponent = cmpDef\\r\\n    this.#componentsInQueue.add(cmpDef)\\r\\n\\r\\n    return this\\r\\n  }\\r\\n\\r\\n  async #runLoaders() {\\r\\n    const [Vue, Mitt, Sass] = await Promise.all([\\r\\n      VueLoader.Fetch(),\\r\\n      MittLoader.Fetch(),\\r\\n      SassLoader.Fetch(),\\r\\n    ])\\r\\n    return { Vue, Mitt, Sass }\\r\\n  }\\r\\n\\r\\n  #validateStart() {\\r\\n    if (this.#componentsInQueue.size < 1) {\\r\\n      throw new Error('You must add at least one component to an AppFactory')\\r\\n    }\\r\\n\\r\\n    if (isBlank(this.#rootComponent)) {\\r\\n      throw new Error('You must add one root component to an AppFactory')\\r\\n    }\\r\\n  }\\r\\n\\r\\n  #validateOneMount() {\\r\\n    if (this.#mounted === true) {\\r\\n      throw new Error('You can only mount an AppFactory instance once')\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * Registers a consumer app definition, to be mounted by the parent `bbVue.rootApp` instance as a CRM\\r\\n * @param {consumerAppDef} appDef The definition of a consumer app\\r\\n * @returns {function} Lookup function to retrieve consumer app instance\\r\\n */\\r\\nfunction addConsumerRootDef(ns, appDef) {\\r\\n  try {\\r\\n    // Lookup rootApp ctx\\r\\n    let rootApp = RootApp.component()\\r\\n\\r\\n    // Hook in orphan protection if requested\\r\\n    // BUGGED: ns race conditions due to repeated ns.getRunningScript() calls\\r\\n    /* if (appDef.__config.shutdownWithPid || appDef.__config.shutdownRootWithPid) {\\r\\n      // Watch pid on interval\\r\\n      const pidWatchRate = 500\\r\\n      const pidWatch = setInterval(async () => {\\r\\n        // Attempt to find running PID\\r\\n        let pid = ns?.getRunningScript()?.pid\\r\\n\\r\\n        // Eject if pid is healthy\\r\\n        if (pid > 0) return\\r\\n\\r\\n        // Try to shutdown either AppRoot or consumer root as needed\\r\\n        try {\\r\\n          if (appDef.__config.shutdownRootWithPid) {\\r\\n            await rootApp.rootShutdown()\\r\\n          } else {\\r\\n            await rootApp.unmountConsumerRootByUuid(appDef.__uuid)\\r\\n          }\\r\\n        } catch (error) {\\r\\n          ns.tprint(\\r\\n            `ERROR: bb-vue app \\\"${appDef.name}\\\" is orphaned but ending process failed:\\\\n${toJson(\\r\\n              error\\r\\n            )}`\\r\\n          )\\r\\n        } finally {\\r\\n          // Whatever the result of the cleanup, end the interval\\r\\n          clearInterval(pidWatch)\\r\\n        }\\r\\n      }, pidWatchRate)\\r\\n    } */\\r\\n\\r\\n    // Add appDef to rootApp and return app handle to consumer\\r\\n    return rootApp.addConsumerRootDef(appDef)\\r\\n  } catch (error) {\\r\\n    throw new Error(\\r\\n      `rootApp cannot be located, or issue mounting consumer appDef:\\\\n${toJson(error)}`\\r\\n    )\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainer } from '/bitpacks/bb-vue/misc-examples/svgchart-ui.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 60\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 20\\r\\n\\r\\n  const textSize = 5.0\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 100\\r\\n  const conHeight = 80\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n  ns.atExit(function () {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  })\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n\\r\\n  //I KNOW this is where the object is rendered/created (lines below), but I have no freakin' idea how to get it to render to another\\r\\n  //object/window in HTML/CSS/VUE or whatever.  I know it's probably as simple as calling the 'container' from this script, but I'm at a loss.\\r\\n\\r\\n  //The below line is where the graph is being 'dropped'.  Default is the overview hooks.  Would like to render to a moveable window.\\r\\n  const dropPage = doc.getElementById(SVGChartContainer)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n\\r\\n  //Uncomment the below line to have the container connect to the above constant.  By default it's set to the overview hooks.\\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('test', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('test', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('test', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n  //First argument is the ticker that it targets.  Would need to pass this off to the window wrapper?  I guess?\\r\\n  var ticker = ns.args[0]\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.tprint('Uh oh NAN:')\\r\\n            ns.tprint(moneyList)\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n        }\\r\\n\\r\\n        topText.innerHTML = 'BULLISH'\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = ticker + ': ' + ns.nFormat(ns.stock.getPrice(ticker), '$0.00a')\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'BEARISH'\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n      }\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.1'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-builder.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { Keys, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class VueLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Vue module.\\r\\n   * @returns {Promise<Vue>} Vue constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = Vue({ silent: true })\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import(\\r\\n      /* 'https://unpkg.com/vue@3.2.26/dist/vue.esm-browser.prod.js' */\\r\\n      'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.esm-browser.js'\\r\\n    )\\r\\n\\r\\n    win[Keys.vueModuleKey] = module\\r\\n\\r\\n    return module\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { WinStates, TrayItemTypes } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, doc, html, VueUse } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ isCollapsed, shouldDisplay }\\\">\\r\\n      <transition-group name=\\\"appTrayItemFadeUp\\\" appear>\\r\\n        <bbv-app-tray-group key=\\\"actions\\\" tray-teleport />\\r\\n        <template v-for=\\\"group in trayItems\\\" :key=\\\"group.root.uuid\\\">\\r\\n          <bbv-app-tray-group :app-title=\\\"group.root.title\\\">\\r\\n            <template :key=\\\"win.uuid\\\" v-for=\\\"win in group.winMounts\\\">\\r\\n              <bbv-button\\r\\n                :title=\\\"win.title\\\"\\r\\n                @click=\\\"toggleTrayItem(win)\\\"\\r\\n                :class=\\\"{ isOpen: win.winState == WinStates.open }\\\"\\r\\n              >\\r\\n                {{ win.title }}\\r\\n              </bbv-button>\\r\\n            </template>\\r\\n          </bbv-app-tray-group>\\r\\n        </template>\\r\\n      </transition-group>\\r\\n    </div>\\r\\n  `,\\r\\n  inject: ['internals'],\\r\\n  data() {\\r\\n    return {\\r\\n      WinStates,\\r\\n      TrayItemTypes,\\r\\n      isCollapsed: false,\\r\\n      isHidden: false,\\r\\n    }\\r\\n  },\\r\\n  computed: {\\r\\n    trayItems() {\\r\\n      let winMountTrayItems = this.internals.store.winMounts\\r\\n        .map((winMount) => this.buildTrayItemFor(TrayItemTypes.winMount, winMount))\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let consumerRootMountTrayItems = this.internals.store.consumerRootMounts\\r\\n        .map((consumerRootMount) =>\\r\\n          this.buildTrayItemFor(TrayItemTypes.consumerRootMount, consumerRootMount)\\r\\n        )\\r\\n        .filter((x) => !!x)\\r\\n\\r\\n      let winsByRoots = consumerRootMountTrayItems.reduce((acc, root) => {\\r\\n        let ownedWins = winMountTrayItems.filter((x) => x.ownerUuid == root.uuid)\\r\\n        if (ownedWins.length) {\\r\\n          acc.push({ root, winMounts: ownedWins })\\r\\n        }\\r\\n        return acc\\r\\n      }, [])\\r\\n\\r\\n      return winsByRoots\\r\\n    },\\r\\n    shouldDisplay() {\\r\\n      return this.isHidden === false && this.trayItems.length\\r\\n    },\\r\\n  },\\r\\n  mounted() {\\r\\n    this.watchGameDock()\\r\\n  },\\r\\n  methods: {\\r\\n    watchGameDock() {\\r\\n      const { useIntervalFn } = VueUse()\\r\\n      useIntervalFn(() => {\\r\\n        let gameDockSelector = doc.querySelector('.MuiDrawer-root.MuiDrawer-docked')\\r\\n        let width = gameDockSelector?.clientWidth\\r\\n        if (!width) {\\r\\n          this.isHidden = true\\r\\n          return\\r\\n        }\\r\\n        this.isHidden = false\\r\\n        if (width < 240) {\\r\\n          this.isCollapsed = true\\r\\n        } else {\\r\\n          this.isCollapsed = false\\r\\n        }\\r\\n      }, 400)\\r\\n    },\\r\\n    toggleTrayItem(trayItem) {\\r\\n      if (trayItem.winState != WinStates.open) {\\r\\n        trayItem.winMount.open()\\r\\n      } else {\\r\\n        trayItem.winMount.close()\\r\\n      }\\r\\n    },\\r\\n    buildTrayItemFor(trayItemType, trayCompatibleItem) {\\r\\n      const winTrayItem = (winMount) => {\\r\\n        const ownerOpts = winMount.owner.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.winMount,\\r\\n          uuid: winMount.uuid,\\r\\n          title: winMount.title,\\r\\n          ownerUuid: ownerOpts.__uuid,\\r\\n          winState: winMount.winState,\\r\\n          winMount: winMount,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      const rootTrayItem = (consumerRootMount) => {\\r\\n        const opts = consumerRootMount.$options\\r\\n        return {\\r\\n          kind: TrayItemTypes.consumerRootMount,\\r\\n          uuid: opts.__uuid,\\r\\n          title: opts.name,\\r\\n        }\\r\\n      }\\r\\n\\r\\n      let trayItem\\r\\n      switch (trayItemType) {\\r\\n        case TrayItemTypes.winMount:\\r\\n          trayItem = winTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n        case TrayItemTypes.consumerRootMount:\\r\\n          trayItem = rootTrayItem(trayCompatibleItem)\\r\\n          break\\r\\n      }\\r\\n\\r\\n      if (trayItem.kind == TrayItemTypes.winMount) {\\r\\n        if (trayItem.winMount.trayHide !== false) {\\r\\n          return null\\r\\n        }\\r\\n        if (trayItem.winMount.trayTitle) {\\r\\n          trayItem.title = trayItem.winMount.trayTitle\\r\\n        }\\r\\n      }\\r\\n\\r\\n      return trayItem\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      @include typo-basic;\\r\\n\\r\\n      pointer-events: auto;\\r\\n      position: absolute;\\r\\n      z-index: 1400;\\r\\n\\r\\n      bottom: 0;\\r\\n      left: 0;\\r\\n\\r\\n      display: flex;\\r\\n      align-items: stretch;\\r\\n      padding: 10px;\\r\\n      width: 249px;\\r\\n      height: 62px;\\r\\n      clip-path: inset(-60px 0 0 0);\\r\\n\\r\\n      box-shadow: inset 0px 0px 20px 0px var(--bbvBoxShadowColor1);\\r\\n      border-top: 1px solid var(--bbvBorderColor);\\r\\n      background-color: var(--bbvAppTrayBgColor);\\r\\n      transition: width 0.2s cubic-bezier(0.86, 0, 0.07, 1), opacity 0.4s ease, transform 0.4s ease;\\r\\n\\r\\n      &:hover {\\r\\n        width: 100%;\\r\\n        z-index: 1600;\\r\\n\\r\\n        &.isCollapsed {\\r\\n          width: 100%;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.isCollapsed {\\r\\n        width: 57px;\\r\\n      }\\r\\n\\r\\n      &:not(.shouldDisplay) {\\r\\n        transform: translateY(100px);\\r\\n        opacity: 0;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-active,\\r\\n      .appTrayItemFadeUp-leave-active {\\r\\n        transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      }\\r\\n\\r\\n      .appTrayItemFadeUp-enter-from,\\r\\n      .appTrayItemFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(50px);\\r\\n        transform-origin: left center;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.15,\"server\":\"home\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-tabs',\\r\\n  template: html` <span>__CMP_NAME__</span> `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { WinStates } from '/bitpacks/bb-vue/components/internal/_resources.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-win-manager',\\r\\n  inject: ['internals'],\\r\\n  template: `<!-- __CMP_NAME__ -->`,\\r\\n  data() {\\r\\n    return {\\r\\n      baseStackingIndex: 1510,\\r\\n      recentlyActiveWinMounts: [],\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.internals.winManager = this\\r\\n  },\\r\\n  methods: {\\r\\n    addWin(winMount) {\\r\\n      this.internals.store.winMounts.push(winMount)\\r\\n    },\\r\\n    removeWin(winMount) {\\r\\n      this.scrubRecentWinMountActivity(winMount)\\r\\n      this.internals.store.winMounts = this.internals.store.winMounts.filter((x) => {\\r\\n        return x.uuid != winMount.uuid\\r\\n      })\\r\\n    },\\r\\n    logRecentWinMountActivity(winMount) {\\r\\n      if (this.recentlyActiveWinMounts[0] == winMount) return\\r\\n      this.recentlyActiveWinMounts = [winMount, ...this.recentlyActiveWinMounts.slice(0, 4)]\\r\\n    },\\r\\n    scrubRecentWinMountActivity(winMount) {\\r\\n      this.recentlyActiveWinMounts = this.recentlyActiveWinMounts.filter((x) => x !== winMount)\\r\\n    },\\r\\n    getRecommendedPosition(winMount) {\\r\\n      const rootOffset = { x: 295, y: 30 }\\r\\n      const standardOffset = { x: 30, y: 60 }\\r\\n\\r\\n      // const prevOpenedWinMounts = this.internals.store.winMounts.filter((x) => x.hasOpened === true)\\r\\n      let curOffset = rootOffset\\r\\n      let targetWinMount = this.recentlyActiveWinMounts[1]\\r\\n      if (targetWinMount && targetWinMount.winState === WinStates.open) curOffset = standardOffset\\r\\n      if (!targetWinMount) targetWinMount = winMount\\r\\n\\r\\n      return {\\r\\n        x: parseInt(targetWinMount.style.left ?? 0) + curOffset.x,\\r\\n        y: parseInt(targetWinMount.style.top ?? 0) + curOffset.y,\\r\\n      }\\r\\n    },\\r\\n    bringToFront(winMount) {\\r\\n      let otherWins = this.internals.store.winMounts.filter((x) => winMount.uuid != x.uuid)\\r\\n      this.logRecentWinMountActivity(winMount)\\r\\n      winMount.stackingIndex = this.baseStackingIndex + otherWins.length\\r\\n      let sortedOtherWins = [...otherWins].sort((a, b) => a.stackingIndex - b.stackingIndex)\\r\\n      sortedOtherWins.forEach((x, i) => (x.stackingIndex = this.baseStackingIndex + i))\\r\\n    },\\r\\n    async closeAllWinsByCrmUuid(crmUuid) {\\r\\n      return new Promise((resolve) => {\\r\\n        this.internals.store.winMounts.forEach((winMount) => {\\r\\n          if (winMount.owner.$options.__uuid == crmUuid) {\\r\\n            winMount.close()\\r\\n          }\\r\\n        })\\r\\n        setTimeout(() => {\\r\\n          resolve()\\r\\n        }, 500)\\r\\n      })\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Coming soon */\",\"filename\":\"/bitpacks/bb-vue/examples/4-complex-and-fun.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html, toJson } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-json-display',\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\" :class=\\\"{ fill: fill !== false, wrap: wrap !== false }\\\">\\r\\n      <div class=\\\"json_inner\\\">{{ toJson(data) }}</div>\\r\\n    </div>\\r\\n  `,\\r\\n  props: {\\r\\n    data: {\\r\\n      default: {},\\r\\n    },\\r\\n    fill: {\\r\\n      default: false,\\r\\n    },\\r\\n    wrap: {\\r\\n      default: false,\\r\\n    },\\r\\n  },\\r\\n  methods: { toJson },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      &.fill {\\r\\n        height: 100%;\\r\\n\\r\\n        .json_inner {\\r\\n          height: 100%;\\r\\n          max-height: unset;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.wrap {\\r\\n        .json_inner {\\r\\n          white-space: pre-wrap;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .json_inner {\\r\\n        @include bbv-scrollbar;\\r\\n\\r\\n        padding: 10px 5px;\\r\\n        width: 100%;\\r\\n        max-height: 300px;\\r\\n        overflow: auto;\\r\\n        white-space: pre;\\r\\n        color: var(--bbvHackerDarkFgColor);\\r\\n        background-color: var(--bbvHackerDarkBgColor);\\r\\n        border-radius: 5px;\\r\\n        border-top-left-radius: 0;\\r\\n        border-bottom-left-radius: 0;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  try {\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app' },\\r\\n      rootComponent: ChartContainer,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainer = 'svgChartContainer'\\r\\n\\r\\nconst ChartContainer = {\\r\\n  name: 'svg-chart',\\r\\n  inject: ['appShutdown'],\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"SVG Chart\\\" no-pad start-height=\\\"80%\\\" start-width=\\\"80%\\\">\\r\\n      <div v-once id=\\\"${SVGChartContainer}\\\" />\\r\\n      <template #actions>\\r\\n        <bbv-button @click=\\\"appShutdown\\\">🛑 Shutdown</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  computed: {},\\r\\n\\r\\n  watch: {},\\r\\n\\r\\n  mounted() {},\\r\\n\\r\\n  methods: {},\\r\\n\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/misc-examples/svgchart-ui.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * @see: Learn more about Vue here: https://v3.vuejs.org/\\r\\n * @see: Learn more about Sass here: https://sass-lang.com/\\r\\n * @see: Learn more about bb-vue here: https://github.com/smolgumball/bb-vue\\r\\n */\\r\\n\\r\\n// Start with a single import from the bb-vue library\\r\\nimport AppFactory from '/bitpacks/bb-vue/AppFactory.js';\\r\\n\\r\\n/**\\r\\n * These functions are used to enable nicer syntax highlighting of HTML/CSS in VSCode.\\r\\n * Specifically the `prettier - code formatter`, `es6-string-css` and `es6-string-html`\\r\\n * extensions can be used.You can safely remove these imports, as long as you remove references to them below.\\r\\n **/\\r\\n\\r\\n// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\n// Note the standard BitBurner function signature here.\\r\\n// Always start your bb-vue apps from standard BitBurner scripts since you will\\r\\n// need to pass a valid NS instance to the AppFactory constructor!\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n  // Wrap your AppFactory usage with try/catch for better error messages\\r\\n  try {\\r\\n    const myAppFactory = new AppFactory(ns)\\r\\n    const myAppHandleFn = await myAppFactory.mount({\\r\\n      // An app ID is always required\\r\\n      config: { id: 'my-first-app' },\\r\\n\\r\\n      // Additional components are optional.\\r\\n      // Here, we're adding just one extra\\r\\n      components: [MyJsonComponent],\\r\\n\\r\\n      // A root component is always required\\r\\n      rootComponent: MyAppComponent,\\r\\n    })\\r\\n\\r\\n    // You can retrieve a reference to your root component\\r\\n    // by running the function returned from mount()\\r\\n    console.debug(myAppHandleFn())\\r\\n  } catch (error) {\\r\\n    // In case something goes wrong, log it out and halt the program\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n}\\r\\n\\r\\nconst MyAppComponent = {\\r\\n  // Every component needs a unique name\\r\\n  name: 'my-first-root-component',\\r\\n\\r\\n  // Here, we \\\"inject\\\" a helper function provided by the bb-vue library.\\r\\n  // Running this function shuts down your entire app. It is wired to a button\\r\\n  // click at the bottom of the bbv-win component, in the #actions slot!\\r\\n  inject: ['appShutdown'],\\r\\n\\r\\n  // Your template is where a lot of the magic happens. Render DOM elements here,\\r\\n  // and use various Vue-specific techniques like `v-for`, @event binding, etc.\\r\\n  // Learn more about Vue here: https://v3.vuejs.org/\\r\\n  template: html`\\r\\n    <bbv-win class=\\\"__CMP_NAME__\\\" title=\\\"Hello from bb-vue!\\\">\\r\\n      <p>Render your own components:</p>\\r\\n      <my-json-display :display=\\\"myData\\\" />\\r\\n\\r\\n      <p>Or use the built-in components:</p>\\r\\n      <bbv-json-display :data=\\\"jsonData\\\" />\\r\\n\\r\\n      <p>\\r\\n        Update your app's data store: <strong>{{ myData.ezCounter }}</strong><br />\\r\\n        <bbv-button @click=\\\"myData.ezCounter++\\\">Add 1</bbv-button>\\r\\n      </p>\\r\\n\\r\\n      <template #actions>\\r\\n        Or shut everything down:\\r\\n        <bbv-button @click=\\\"appShutdown\\\">Shutdown App</bbv-button>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  // The data function tells Vue what kind of reactive data you'd like to use.\\r\\n  // Changing these values from inside or outside the component will cause the\\r\\n  // component to update automatically! Learn more about Vue here: https://v3.vuejs.org/\\r\\n  data() {\\r\\n    return {\\r\\n      myData: { 'bb-vue-is': 'easy to use!', ezCounter: 0 },\\r\\n      jsonData: {\\r\\n        'bb-vue-components': 'NICE.exe',\\r\\n        otherFeatures: ['SCSS support', 'App tray', 'NetScript communication', '...and more!'],\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n\\r\\n  // The scss key is where you define the styles for your component.\\r\\n  scss: css`\\r\\n    /*\\r\\n      You can reference your component name with __CMP_NAME__and it\\r\\n      will be replaced at startup. This happens in both templates and style blocks!\\r\\n    */\\r\\n    .__CMP_NAME__ {\\r\\n      p {\\r\\n        margin: 0;\\r\\n        padding: 25px 0 5px 0;\\r\\n\\r\\n        /*\\r\\n          Have you noticed we're writing SCSS? bb-vue supports Sass 0.11.1\\r\\n          through the sass.js tool; a bit outdated now, but good enough for some\\r\\n          dank BitBurner components. Learn more about sass.js here:\\r\\n          https://github.com/medialize/sass.js/#sassjs\\r\\n        */\\r\\n        strong {\\r\\n          font-size: 13px;\\r\\n          padding: 3px 6px 1px 6px;\\r\\n          display: inline-block;\\r\\n          border-radius: 5px;\\r\\n\\r\\n          /*\\r\\n            You can use the provided CSS theming variables to color your elements.\\r\\n            Find all of them on the <body> tag of your BitBurner debug / devtools console.\\r\\n          */\\r\\n          color: var(--bbvHackerDarkFgColor);\\r\\n          background-color: var(--bbvHackerDarkBgColor);\\r\\n        }\\r\\n\\r\\n        button {\\r\\n          margin-top: 10px;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\\r\\n\\r\\n// Here's a simple supporting component that displays data passed to it.\\r\\n// It converts the data to a JSON string and then display it in the whitespace\\r\\n// sensitive HTML tag <pre>\\r\\nconst MyJsonComponent = {\\r\\n  name: 'my-json-display',\\r\\n  props: {\\r\\n    display: {\\r\\n      required: true,\\r\\n    },\\r\\n  },\\r\\n  template: html`\\r\\n    <div class=\\\"__CMP_NAME__\\\">\\r\\n      <pre><code>{{ toJson(display) }}</code></pre>\\r\\n    </div>\\r\\n  `,\\r\\n  methods: {\\r\\n    toJson(value) {\\r\\n      return JSON.stringify(value, null, '  ')\\r\\n    },\\r\\n  },\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      background-color: #0000008c;\\r\\n      color: lawngreen;\\r\\n      padding: 10px 5px;\\r\\n\\r\\n      pre,\\r\\n      code {\\r\\n        margin: 0;\\r\\n        font-family: inherit;\\r\\n        overflow: auto;\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { getGlobal, Keys, setGlobal } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default class MittLoader {\\r\\n  /**\\r\\n   * Retrieve a cached or freshly imported reference to the Mitt module.\\r\\n   * @returns {Promise<{ createBus: Function }>} Mitt constructor\\r\\n   */\\r\\n  static async Fetch() {\\r\\n    let module = getGlobal(Keys.mittModuleKey)\\r\\n    if (module) return module\\r\\n\\r\\n    module = await import('https://unpkg.com/mitt@3.0.0/dist/mitt.mjs')\\r\\n    let moduleWrapper = { createBus: module.default }\\r\\n\\r\\n    setGlobal(Keys.mittModuleKey, moduleWrapper)\\r\\n\\r\\n    return moduleWrapper\\r\\n  }\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { html, Keys, Mitt, RootApp, Vue, win } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nimport AppRootStyles from '/bitpacks/bb-vue/components/internal/AppRoot.Styles.js';\\r\\nimport ConsumerRoot from '/bitpacks/bb-vue/components/internal/ConsumerRoot.js';\\r\\nimport CssManager from '/bitpacks/bb-vue/components/internal/CssManager.js';\\r\\nimport WinManager from '/bitpacks/bb-vue/components/internal/WinManager.js';\\r\\nimport AppTray from '/bitpacks/bb-vue/components/internal/AppTray.js';\\r\\nimport AppTrayGroup from '/bitpacks/bb-vue/components/internal/AppTrayGroup.js';\\r\\nimport Win from '/bitpacks/bb-vue/components/internal/Win.js';\\r\\n\\r\\nimport Button from '/bitpacks/bb-vue/components/Button.js';\\r\\nimport JsonDisplay from '/bitpacks/bb-vue/components/JsonDisplay.js';\\r\\nimport Tabs from '/bitpacks/bb-vue/components/Tabs.js';\\r\\nimport ObjectDisplay from '/bitpacks/bb-vue/components/ObjectDisplay.js';\\r\\nimport LogDisplay from '/bitpacks/bb-vue/components/LogDisplay.js';\\r\\n\\r\\nexport const ComponentLibrary = [\\r\\n  ConsumerRoot,\\r\\n  CssManager,\\r\\n  Win,\\r\\n  WinManager,\\r\\n  AppTray,\\r\\n  AppTrayGroup,\\r\\n  Button,\\r\\n  JsonDisplay,\\r\\n  ObjectDisplay,\\r\\n  LogDisplay,\\r\\n  Tabs,\\r\\n]\\r\\n\\r\\nconst rootShutdownTimeout = 2000\\r\\nexport default {\\r\\n  __libraryRoot: true,\\r\\n  name: 'bbv-app-root',\\r\\n  template: html`\\r\\n    <transition name=\\\"rootAppIntro\\\" appear>\\r\\n      <main class=\\\"__CMP_NAME__\\\" bbv-container v-if=\\\"depsLoaded\\\">\\r\\n        <transition-group name=\\\"consumerRootIntro\\\" appear>\\r\\n          <bbv-consumer-root\\r\\n            v-for=\\\"def in consumerRootDefs\\\"\\r\\n            :key=\\\"def.__uuid\\\"\\r\\n            :id=\\\"def.__uuid\\\"\\r\\n            :consumer-root-def=\\\"def\\\"\\r\\n            @consumer-root-mounted=\\\"mountConsumerRoot\\\"\\r\\n            @consumer-root-unmount-requested=\\\"unmountConsumerRootByUuid\\\"\\r\\n            @root-shutdown-requested=\\\"rootShutdown\\\"\\r\\n          />\\r\\n        </transition-group>\\r\\n        <bbv-css-manager :consumer-root-defs=\\\"consumerRootDefs\\\" />\\r\\n        <bbv-win-manager />\\r\\n        <bbv-app-tray />\\r\\n      </main>\\r\\n    </transition>\\r\\n  `,\\r\\n  data() {\\r\\n    const bus = Mitt().createBus()\\r\\n    return {\\r\\n      depsLoaded: false,\\r\\n      hasSeenCrms: false,\\r\\n      rootShutdownTimeoutFn: null,\\r\\n      internals: {\\r\\n        bus: bus,\\r\\n        send: bus.emit,\\r\\n        listen: bus.on,\\r\\n        store: {\\r\\n          consumerRootDefs: [],\\r\\n          consumerRootMounts: [],\\r\\n          winMounts: [],\\r\\n        },\\r\\n        winManager: null,\\r\\n      },\\r\\n    }\\r\\n  },\\r\\n  created() {\\r\\n    this.loadDeps()\\r\\n  },\\r\\n  provide() {\\r\\n    return this.$data\\r\\n  },\\r\\n  computed: {\\r\\n    isReady() {\\r\\n      return this.internals.winManager\\r\\n    },\\r\\n    consumerRootDefs() {\\r\\n      return this.isReady ? this.allCrds : []\\r\\n    },\\r\\n    allCrds() {\\r\\n      return this.internals.store.consumerRootDefs\\r\\n    },\\r\\n    allCrms() {\\r\\n      return this.internals.store.consumerRootMounts\\r\\n    },\\r\\n  },\\r\\n  watch: {\\r\\n    /**\\r\\n     * Watch for CRMs. When seen some, notify AppRoot that some have\\r\\n     * been added. Wait for them to go away. Once they are gone, do a self\\r\\n     * cleanup after `rootShutdownTimeout` ms. Shutdown timeout can be\\r\\n     * cancelled by new CRM additions.\\r\\n     */\\r\\n    'internals.store.consumerRootMounts': {\\r\\n      handler(newVal) {\\r\\n        // Ensure AppRoot knows CRMs have been seen added at some point\\r\\n        if (this.hasSeenCrms !== true && newVal?.length >= 1) {\\r\\n          this.hasSeenCrms = true\\r\\n        }\\r\\n\\r\\n        // If a CRM is removed, if it was the last, and if AppRoot has seen CRMs before\\r\\n        if (this.hasSeenCrms === true && newVal?.length === 0) {\\r\\n          if (this.rootShutdownTimeoutFn === null) {\\r\\n            // Create a shutdown timeout func to end the entire RootApp\\r\\n            this.rootShutdownTimeoutFn = setTimeout(() => {\\r\\n              console.debug('bb-vue: AppRoot cannot find any CRMs and is shutting down')\\r\\n              this.rootShutdown()\\r\\n            }, rootShutdownTimeout)\\r\\n          }\\r\\n        }\\r\\n\\r\\n        // Clear an ongoing shutdown timeout if a new CRM is added\\r\\n        if (newVal?.length >= 1 && this.rootShutdownTimeoutFn !== null) {\\r\\n          clearTimeout(this.rootShutdownTimeoutFn)\\r\\n          this.rootShutdownTimeoutFn = null\\r\\n        }\\r\\n      },\\r\\n    },\\r\\n  },\\r\\n  methods: {\\r\\n    async loadDeps() {\\r\\n      // console.time('AppRoot:loadDeps')\\r\\n      if (!win[Keys.vueUseModuleKey]) {\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/shared@7.5.3/index.iife.min.js')\\r\\n        await this.$scriptx.load('https://unpkg.com/@vueuse/core@7.5.3/index.iife.min.js')\\r\\n      }\\r\\n      this.depsLoaded = true\\r\\n      // console.timeEnd('AppRoot:loadDeps')\\r\\n    },\\r\\n    addConsumerRootDef(consumerRootDef) {\\r\\n      const { markRaw } = Vue()\\r\\n      let rawConsumerRootDef = markRaw(consumerRootDef)\\r\\n      this.internals.store.consumerRootDefs = [\\r\\n        ...this.allCrds.filter((x) => {\\r\\n          return x.__uuid !== rawConsumerRootDef.__uuid\\r\\n        }),\\r\\n        rawConsumerRootDef,\\r\\n      ]\\r\\n\\r\\n      return () => this.findConsumerRootMount(rawConsumerRootDef.__uuid)\\r\\n    },\\r\\n    mountConsumerRoot(consumerRootMount) {\\r\\n      this.internals.store.consumerRootMounts = [\\r\\n        ...this.allCrms.filter((x) => {\\r\\n          return x.$options.__uuid !== consumerRootMount.$options.__uuid\\r\\n        }),\\r\\n        consumerRootMount,\\r\\n      ]\\r\\n    },\\r\\n    async unmountConsumerRootByUuid(crmUuid) {\\r\\n      await this.internals.winManager.closeAllWinsByCrmUuid(crmUuid)\\r\\n      this.internals.store.consumerRootMounts = this.allCrms.filter((x) => {\\r\\n        return x.$options.__uuid !== crmUuid\\r\\n      })\\r\\n      this.internals.store.consumerRootDefs = this.allCrds.filter((x) => {\\r\\n        return x.__uuid !== crmUuid\\r\\n      })\\r\\n    },\\r\\n    findConsumerRootMount(rootMountName) {\\r\\n      return (\\r\\n        this.allCrms.find((x) => {\\r\\n          return rootMountName == x.$options.__uuid\\r\\n        }) ?? null\\r\\n      )\\r\\n    },\\r\\n    async rootShutdown() {\\r\\n      for (const x of this.allCrms) {\\r\\n        await this.unmountConsumerRootByUuid(x.$options.__uuid)\\r\\n      }\\r\\n      setTimeout(() => {\\r\\n        RootApp.cleanup()\\r\\n      }, 50)\\r\\n    },\\r\\n  },\\r\\n  ...AppRootStyles,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"server\":\"home\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n * Coming soon!\\r\\n */\",\"filename\":\"/bitpacks/bb-vue/new-examples/0-getting-started.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const asciichart = function (exports) {\\r\\n  exports.black = '\\\\x1b[30m'\\r\\n  exports.red = '\\\\x1b[31m'\\r\\n  exports.green = '\\\\x1b[32m'\\r\\n  exports.yellow = '\\\\x1b[33m'\\r\\n  exports.blue = '\\\\x1b[34m'\\r\\n  exports.magenta = '\\\\x1b[35m'\\r\\n  exports.cyan = '\\\\x1b[36m'\\r\\n  exports.lightgray = '\\\\x1b[37m'\\r\\n  exports.default = '\\\\x1b[39m'\\r\\n  exports.darkgray = '\\\\x1b[90m'\\r\\n  exports.lightred = '\\\\x1b[91m'\\r\\n  exports.lightgreen = '\\\\x1b[92m'\\r\\n  exports.lightyellow = '\\\\x1b[93m'\\r\\n  exports.lightblue = '\\\\x1b[94m'\\r\\n  exports.lightmagenta = '\\\\x1b[95m'\\r\\n  exports.lightcyan = '\\\\x1b[96m'\\r\\n  exports.white = '\\\\x1b[97m'\\r\\n  exports.reset = '\\\\x1b[0m'\\r\\n\\r\\n  function colored(char, color) {\\r\\n    // do not color it if color is not specified\\r\\n    return color === undefined ? char : color + char + exports.reset\\r\\n  }\\r\\n\\r\\n  exports.colored = colored\\r\\n\\r\\n  exports.plot = function (series, cfg = undefined) {\\r\\n    // this function takes both one array and array of arrays\\r\\n    // if an array of numbers is passed it is transformed to\\r\\n    // an array of exactly one array with numbers\\r\\n    if (typeof series[0] == 'number') {\\r\\n      series = [series]\\r\\n    }\\r\\n\\r\\n    cfg = typeof cfg !== 'undefined' ? cfg : {}\\r\\n\\r\\n    let min = typeof cfg.min !== 'undefined' ? cfg.min : series[0][0]\\r\\n    let max = typeof cfg.max !== 'undefined' ? cfg.max : series[0][0]\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      for (let i = 0; i < series[j].length; i++) {\\r\\n        min = Math.min(min, series[j][i])\\r\\n        max = Math.max(max, series[j][i])\\r\\n      }\\r\\n    }\\r\\n\\r\\n    let defaultSymbols = ['┼', '┤', '╶', '╴', '─', '╰', '╭', '╮', '╯', '│']\\r\\n    let range = Math.abs(max - min)\\r\\n    let offset = typeof cfg.offset !== 'undefined' ? cfg.offset : 3\\r\\n    let padding = typeof cfg.padding !== 'undefined' ? cfg.padding : '           '\\r\\n    let height = typeof cfg.height !== 'undefined' ? cfg.height : range\\r\\n    let colors = typeof cfg.colors !== 'undefined' ? cfg.colors : []\\r\\n    let ratio = range !== 0 ? height / range : 1\\r\\n    let min2 = Math.round(min * ratio)\\r\\n    let max2 = Math.round(max * ratio)\\r\\n    let rows = Math.abs(max2 - min2)\\r\\n    let width = 0\\r\\n    for (let i = 0; i < series.length; i++) {\\r\\n      width = Math.max(width, series[i].length)\\r\\n    }\\r\\n    width = width + offset\\r\\n    let symbols = typeof cfg.symbols !== 'undefined' ? cfg.symbols : defaultSymbols\\r\\n    let format =\\r\\n      typeof cfg.format !== 'undefined'\\r\\n        ? cfg.format\\r\\n        : function (x) {\\r\\n            return (padding + x.toFixed(2)).slice(-padding.length)\\r\\n          }\\r\\n\\r\\n    let result = new Array(rows + 1) // empty space\\r\\n    for (let i = 0; i <= rows; i++) {\\r\\n      result[i] = new Array(width)\\r\\n      for (let j = 0; j < width; j++) {\\r\\n        result[i][j] = ' '\\r\\n      }\\r\\n    }\\r\\n    for (let y = min2; y <= max2; ++y) {\\r\\n      // axis + labels\\r\\n      let label = format(rows > 0 ? max - ((y - min2) * range) / rows : y, y - min2)\\r\\n      result[y - min2][Math.max(offset - label.length, 0)] = label\\r\\n      result[y - min2][offset - 1] = y == 0 ? symbols[0] : symbols[1]\\r\\n    }\\r\\n\\r\\n    for (let j = 0; j < series.length; j++) {\\r\\n      let currentColor = colors[j % colors.length]\\r\\n      let y0 = Math.round(series[j][0] * ratio) - min2\\r\\n      result[rows - y0][offset - 1] = colored(symbols[0], currentColor) // first value\\r\\n\\r\\n      for (let x = 0; x < series[j].length - 1; x++) {\\r\\n        // plot the line\\r\\n        let y0 = Math.round(series[j][x + 0] * ratio) - min2\\r\\n        let y1 = Math.round(series[j][x + 1] * ratio) - min2\\r\\n        if (y0 == y1) {\\r\\n          result[rows - y0][x + offset] = colored(symbols[4], currentColor)\\r\\n        } else {\\r\\n          result[rows - y1][x + offset] = colored(y0 > y1 ? symbols[5] : symbols[6], currentColor)\\r\\n          result[rows - y0][x + offset] = colored(y0 > y1 ? symbols[7] : symbols[8], currentColor)\\r\\n          let from = Math.min(y0, y1)\\r\\n          let to = Math.max(y0, y1)\\r\\n          for (let y = from + 1; y < to; y++) {\\r\\n            result[rows - y][x + offset] = colored(symbols[9], currentColor)\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    return result\\r\\n      .map(function (x) {\\r\\n        return x.join('')\\r\\n      })\\r\\n      .join('\\\\n')\\r\\n  }\\r\\n}\\r\\n\\r\\nglobalThis.asciichart = {}\\r\\nasciichart(globalThis.asciichart)\\r\\n\\r\\nexport default globalThis.asciichart\",\"filename\":\"/bitpacks/bb-vue/misc-examples/asciichart-lib.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// prettier-ignore\\r\\nimport { css, html } from '/bitpacks/bb-vue/lib.js';\\r\\n\\r\\nexport default {\\r\\n  name: 'bbv-app-tray-group',\\r\\n  props: ['appTitle', 'trayTeleport'],\\r\\n  template: html`\\r\\n    <transition name=\\\"appTrayGroupFadeUp\\\" appear>\\r\\n      <div\\r\\n        class=\\\"__CMP_NAME__\\\"\\r\\n        :class=\\\"{ trayTeleport: trayTeleport !== undefined }\\\"\\r\\n        :id=\\\"trayTeleport !== undefined ? 'app-tray' : undefined\\\"\\r\\n        :title=\\\"appTitle\\\"\\r\\n      >\\r\\n        <template v-if=\\\"appTitle\\\">\\r\\n          <div class=\\\"app_title\\\">{{ appTitle }}</div>\\r\\n        </template>\\r\\n        <slot />\\r\\n      </div>\\r\\n    </transition>\\r\\n  `,\\r\\n  scss: css`\\r\\n    .__CMP_NAME__ {\\r\\n      display: flex;\\r\\n      padding: 5px;\\r\\n      background-color: var(--bbvWinTitlebarBgColor);\\r\\n      transition: opacity 0.4s ease, transform 0.4s ease;\\r\\n      position: relative;\\r\\n\\r\\n      &.trayTeleport {\\r\\n        background-color: transparent;\\r\\n        padding: 5px 0;\\r\\n\\r\\n        .bbv-button {\\r\\n          padding-bottom: 3px;\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &.trayTeleport:empty {\\r\\n        clip-path: inset(0 100%);\\r\\n      }\\r\\n\\r\\n      &:hover {\\r\\n        .app_title {\\r\\n          opacity: 1;\\r\\n          transform: translateY(0) scale(1);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      &:not(:first-child) {\\r\\n        margin-left: 12px;\\r\\n      }\\r\\n\\r\\n      .app_title {\\r\\n        position: absolute;\\r\\n        bottom: calc(100% + 6px);\\r\\n        padding: 6px 12px;\\r\\n        font-size: 14px;\\r\\n        text-align: center;\\r\\n        white-space: nowrap;\\r\\n        overflow: hidden;\\r\\n        z-index: -1;\\r\\n        left: 5px;\\r\\n        transform: translateY(30px) scale(0.2);\\r\\n        transform-origin: bottom left;\\r\\n        border-radius: 2px;\\r\\n        box-shadow: 0px 0px 3px 0px var(--bbvBoxShadowColor2);\\r\\n        color: var(--bbvAppInnerFgColor);\\r\\n        background-color: var(--bbvWinTitlebarBgColor);\\r\\n        opacity: 0;\\r\\n        pointer-events: none;\\r\\n        transition: opacity 0.4s ease, transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\\r\\n      }\\r\\n\\r\\n      .bbv-button {\\r\\n        color: var(--bbvAppTrayFgColor);\\r\\n        padding: 6px 7px;\\r\\n        overflow: hidden;\\r\\n        white-space: nowrap;\\r\\n        border-bottom: 2px solid transparent;\\r\\n        transition: border-color 0.2s ease;\\r\\n        line-height: 1;\\r\\n\\r\\n        &.isOpen {\\r\\n          border-bottom-color: var(--bbvAppTrayFgColor);\\r\\n          background-color: var(--bbvButtonHoverBgColor);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      .bbv-button + .bbv-button {\\r\\n        margin-left: 8px;\\r\\n      }\\r\\n\\r\\n      &.appTrayGroupFadeUp-enter-from,\\r\\n      &.appTrayGroupFadeUp-leave-to {\\r\\n        opacity: 0;\\r\\n        transform: translateY(75px);\\r\\n      }\\r\\n    }\\r\\n  `,\\r\\n}\",\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\r\\n// prettier-ignore\\r\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\r\\n\\r\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n\\r\\n  try {\\r\\n    ns.disableLog('disableLog');\\r\\n    ns.disableLog('asleep');\\r\\n    ns.disableLog('sleep');\\r\\n    ns.disableLog('getServerMoneyAvailable');\\r\\n\\r\\n    await new AppFactory(ns).mount({\\r\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\r\\n      rootComponent: ChartContainerwallstreet,\\r\\n    })\\r\\n  } catch (error) {\\r\\n    console.error(error)\\r\\n    ns.tprint(error.toString())\\r\\n    ns.exit()\\r\\n  }\\r\\n\\r\\n\\r\\n  // Listen for specific event\\r\\n  let autoTrader = false\\r\\n  let enableAutoTrader = false\\r\\n  let wantsShutdown = false\\r\\n  let buyMaxLongShares = false\\r\\n  let closeLongPosition = false\\r\\n  let closeShortPosition = false\\r\\n  let buyMaxShortShares = false\\r\\n  let sellAllShares = false\\r\\n  let quickStrangle = false\\r\\n  let longHedge = false\\r\\n  let shortHedge = false\\r\\n  let splitPlay = false\\r\\n  let stockCrawler = false\\r\\n\\r\\n  //Ticker Chart Storage\\r\\n  let loadECP = false\\r\\n  let loadMGCP = false\\r\\n  let loadBLD = false\\r\\n  let loadCLRK = false\\r\\n  let loadOMTK = false\\r\\n  let loadFSIG = false\\r\\n  let loadKGI = false\\r\\n  let loadFLCM = false\\r\\n  let loadSTM = false\\r\\n  let loadDCOMM = false\\r\\n  let loadHLS = false\\r\\n  let loadVITA = false\\r\\n  let loadICRS = false\\r\\n  let loadUNV = false\\r\\n  let loadAERO = false\\r\\n  let loadOMN = false\\r\\n  let loadSLRS = false\\r\\n  let loadGPH = false\\r\\n  let loadNVMD = false\\r\\n  let loadWDS = false\\r\\n  let loadLXO = false\\r\\n  let loadRHOC = false\\r\\n  let loadAPHE = false\\r\\n  let loadSYSC = false\\r\\n  let loadCTK = false\\r\\n  let loadNTLK = false\\r\\n  let loadOMGA = false\\r\\n  let loadFNS = false\\r\\n  let loadJGN = false\\r\\n  let loadSGC = false\\r\\n  let loadCTYS = false\\r\\n  let loadMDYN = false\\r\\n  let loadTITN = false\\r\\n  //End of Ticker Chart Storage\\r\\n\\r\\n  let bus = Mitt().createBus()\\r\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\r\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\r\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\r\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\r\\n  bus.on('closeLong', () => (closeLongPosition = true))\\r\\n  bus.on('closeShort', () => (closeShortPosition = true))\\r\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\r\\n  bus.on('quickPlay', () => (quickStrangle = true))\\r\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\r\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\r\\n  bus.on('quickSplitPlay', () => (splitPlay = true))\\r\\n  bus.on('stockCrawler', () => (stockCrawler = true))\\r\\n\\r\\n  //Ticker Chart Bus Triggers\\r\\n  bus.on('loadECP', () => (loadECP = true))\\r\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\r\\n  bus.on('loadBLD', () => (loadBLD = true))\\r\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\r\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\r\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\r\\n  bus.on('loadKGI', () => (loadKGI = true))\\r\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\r\\n  bus.on('loadSTM', () => (loadSTM = true))\\r\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\r\\n  bus.on('loadHLS', () => (loadHLS = true))\\r\\n  bus.on('loadVITA', () => (loadVITA = true))\\r\\n  bus.on('loadICRS', () => (loadICRS = true))\\r\\n  bus.on('loadUNV', () => (loadUNV = true))\\r\\n  bus.on('loadAERO', () => (loadAERO = true))\\r\\n  bus.on('loadOMN', () => (loadOMN = true))\\r\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\r\\n  bus.on('loadGPH', () => (loadGPH = true))\\r\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\r\\n  bus.on('loadWDS', () => (loadWDS = true))\\r\\n  bus.on('loadLXO', () => (loadLXO = true))\\r\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\r\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\r\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\r\\n  bus.on('loadCTK', () => (loadCTK = true))\\r\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\r\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\r\\n  bus.on('loadFNS', () => (loadFNS = true))\\r\\n  bus.on('loadJGN', () => (loadJGN = true))\\r\\n  bus.on('loadSGC', () => (loadSGC = true))\\r\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\r\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\r\\n  bus.on('loadTITN', () => (loadTITN = true))\\r\\n  //End of Ticker Chart Bus Triggers\\r\\n  setGlobal('tickerBus', bus)\\r\\n\\r\\n  // Instead of closing, let's keep this running\\r\\n\\r\\n  while (wantsShutdown == false) {\\r\\n\\r\\n    //init chart loading triggers\\r\\n    if (loadECP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ECP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadECP = false;\\r\\n    }\\r\\n    if (loadMGCP == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MGCP\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMGCP = false;\\r\\n    }\\r\\n    if (loadBLD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"BLD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadBLD = false;\\r\\n    }\\r\\n    if (loadCLRK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CLRK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCLRK = false;\\r\\n    }\\r\\n    if (loadOMTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMTK = false;\\r\\n    }\\r\\n    if (loadFSIG == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FSIG\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFSIG = false;\\r\\n    }\\r\\n    if (loadKGI == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"KGI\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadKGI = false;\\r\\n    }\\r\\n    if (loadFLCM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FLCM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFLCM = false;\\r\\n    }\\r\\n    if (loadSTM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"STM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSTM = false;\\r\\n    }\\r\\n    if (loadDCOMM == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"DCOMM\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadDCOMM = false;\\r\\n    }\\r\\n    if (loadHLS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"HLS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadHLS = false;\\r\\n    }\\r\\n    if (loadVITA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"VITA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadVITA = false;\\r\\n    }\\r\\n    if (loadICRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"ICRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadICRS = false;\\r\\n    }\\r\\n    if (loadUNV == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"UNV\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadUVN = false;\\r\\n    }\\r\\n    if (loadAERO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"AERO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAERO = false;\\r\\n    }\\r\\n    if (loadOMN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMN = false;\\r\\n    }\\r\\n    if (loadSLRS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SLRS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSLRS = false;\\r\\n    }\\r\\n    if (loadGPH == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"GPH\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadGPH = false;\\r\\n    }\\r\\n    if (loadNVMD == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NVMD\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNVMD = false;\\r\\n    }\\r\\n    if (loadWDS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"WDS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadWDS = false;\\r\\n    }\\r\\n    if (loadLXO == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"LXO\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadLXO = false;\\r\\n    }\\r\\n    if (loadRHOC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"RHOC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadRHOC = false;\\r\\n    }\\r\\n    if (loadAPHE == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"APHE\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadAPHE = false;\\r\\n    }\\r\\n    if (loadSYSC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SYSC\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSYSC = false;\\r\\n    }\\r\\n    if (loadCTK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTK = false;\\r\\n    }\\r\\n    if (loadNTLK == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"NTLK\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadNTLK = false;\\r\\n    }\\r\\n    if (loadOMGA == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"OMGA\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadOMGA = false;\\r\\n    }\\r\\n    if (loadFNS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"FNS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadFNS = false;\\r\\n    }\\r\\n    if (loadJGN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"JGN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadJGN = false;\\r\\n    }\\r\\n    if (loadSGC == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"SGC\\\")\\r\\n\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadSGC = false;\\r\\n    }\\r\\n    if (loadCTYS == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"CTYS\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadCTYS = false;\\r\\n    }\\r\\n    if (loadMDYN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"MDYN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadMDYN = false;\\r\\n    }\\r\\n    if (loadTITN == true) {\\r\\n      await ns.scriptKill(\\\"wallstreet-data.js\\\", \\\"home\\\");\\r\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(500);\\r\\n      await ns.run(\\\"wallstreet-data.js\\\", 1, \\\"TITN\\\")\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      autoTrader = false;\\r\\n      loadTITN = false;\\r\\n    }\\r\\n\\r\\n //Stock Crawler Module\\r\\n    if (stockCrawler == true) {\\r\\n      ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\r\\n      var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\r\\n        for (const target of market) {\\r\\n        var tvol = ns.stock.getVolatility(target);\\r\\n        var tfor = ns.stock.getForecast(target);\\r\\n          if (tvol > 0.01 && tfor > 0.6) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n          if (tvol > 0.01 && tfor < 0.4) {\\r\\n          ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\r\\n          ns.tprint(target)\\r\\n        }\\r\\n        await ns.asleep(100);\\r\\n      stockCrawler = false;\\r\\n      }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //failsafe exit condition\\r\\n    if (wantsShutdown == true) {\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n    if(ns.peek(3) != \\\"NULL PORT DATA\\\") {\\r\\n    let loadedticker = ns.peek(3);\\r\\n    let position = ns.stock.getPosition(loadedticker);\\r\\n\\r\\n    if (buyMaxLongShares == true) {\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxLongShares = false;\\r\\n\\r\\n    }\\r\\n    if (buyMaxShortShares == true) {\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\r\\n      await ns.asleep(100);\\r\\n      ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\r\\n      buyMaxShortShares = false;\\r\\n\\r\\n    }\\r\\n    if (sellAllShares == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED **ALL** POSITIONS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      sellAllShares = false;\\r\\n\\r\\n    }\\r\\n    if (closeLongPosition == true) {\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n      ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeLongPosition = false;\\r\\n\\r\\n    }\\r\\n    if (closeShortPosition == true) {\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n      ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\r\\n      closeShortPosition = false;\\r\\n\\r\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] > '1' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sell(loadedticker, position[0]);\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] > '1' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\r\\n      ns.stock.sellShort(loadedticker, position[2]);\\r\\n\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxLongShares = true;\\r\\n\\r\\n    }\\r\\n    if (autoTrader == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\r\\n      await ns.asleep(200);\\r\\n      buyMaxShortShares = true;\\r\\n\\r\\n\\r\\n      //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[0] == '0' && ns.stock.getForecast(loadedticker) > 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxLongShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getAskPrice(loadedticker) * 1.05), \\\"LimitSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[0], (ns.stock.getBidPrice(loadedticker) * 0.90), \\\"StopSell\\\", \\\"Long\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (quickStrangle == true && position[2] == '0' && ns.stock.getForecast(loadedticker) < 0.50) {\\r\\n      ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\r\\n      buyMaxShortShares = true;\\r\\n      await ns.asleep(500);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getAskPrice(loadedticker) * 0.95), \\\"LimitSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      ns.stock.placeOrder(loadedticker, position[2], (ns.stock.getBidPrice(loadedticker) * 1.10), \\\"StopSell\\\", \\\"Short\\\");\\r\\n      ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\r\\n      quickStrangle = false;\\r\\n\\r\\n    }\\r\\n    if (longHedge == true && position[0] == 0) {\\r\\n      ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      longHedge = false;\\r\\n\\r\\n    }\\r\\n    if (shortHedge == true && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\r\\n      shortHedge = false;\\r\\n\\r\\n    }\\r\\n    if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\r\\n      ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\r\\n      ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\r\\n      splitPlay = false;\\r\\n\\r\\n    }\\r\\n\\r\\n    //Auto-Trader button configuration.  Don't touch.\\r\\n\\r\\n    if (enableAutoTrader == true) {\\r\\n      let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\r\\n\\r\\n      if (autoTradeConfirm == true) {\\r\\n        ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = true;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n      if (autoTradeConfirm == false) {\\r\\n        ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\r\\n        autoTrader = false;\\r\\n        enableAutoTrader = false;\\r\\n      }\\r\\n\\r\\n    }\\r\\n\\r\\n    }\\r\\n\\r\\n    await ns.asleep(500)\\r\\n\\r\\n  \\r\\n  }\\r\\n}\\r\\n\\r\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\r\\nconst ChartContainerwallstreet = {\\r\\n  name: 'svg-chart-wallstreet',\\r\\n  inject: ['appShutdown',],\\r\\n  template: html`\\r\\n    <bbv-win\\r\\n      class=\\\"__CMP_NAME__\\\"\\r\\n      title=\\\"WSE Active Trader\\\"\\r\\n      no-pad\\r\\n      start-height=\\\"691px\\\"\\r\\n      start-width=\\\"539px\\\"\\r\\n    >\\r\\n \\r\\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\r\\n      <div>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\r\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\r\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      </div>\\r\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\r\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\r\\n      <div>\\r\\n      <button @click=\\\"quickStrangle\\\">QUICK STRANGLE</button>\\r\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\r\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\r\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\r\\n      </div>\\r\\n      </details>\\r\\n      <details align=\\\"right\\\"><summary>EXTRA TOOLS</summary>\\r\\n      <div>\\r\\n      <button align=\\\"right\\\" @click=\\\"stockCrawler\\\">STOCK CRAWLER</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"\\\">SCALPER[SOON!]</button>\\r\\n      <button align=\\\"right\\\" @click=\\\"enableAutoTrade\\\">Enable/Disable Auto-Trader (BETA)</button>\\r\\n      </div>\\r\\n      </details>\\r\\n\\r\\n      <template #actions>\\r\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\r\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\r\\n      </template>\\r\\n    </bbv-win>\\r\\n  `,\\r\\n\\r\\n  data() {\\r\\n    return {}\\r\\n  },\\r\\n\\r\\n  methods: {\\r\\n    shutdownAll() {\\r\\n      getGlobal('tickerBus').emit('wantsShutdown')\\r\\n      this.appShutdown()\\r\\n    },\\r\\n    buyMaxLong() {\\r\\n      getGlobal('tickerBus').emit('buyMaxLong')\\r\\n    },\\r\\n    buyMaxShort() {\\r\\n      getGlobal('tickerBus').emit('buyMaxShort')\\r\\n    },\\r\\n    closeAllPositions() {\\r\\n      getGlobal('tickerBus').emit('closeAllPositions')\\r\\n    },\\r\\n    sellMaxLong() {\\r\\n      getGlobal('tickerBus').emit('closeLong')\\r\\n    },\\r\\n    sellMaxShort() {\\r\\n      getGlobal('tickerBus').emit('closeShort')\\r\\n    },\\r\\n    enableAutoTrade() {\\r\\n      getGlobal('tickerBus').emit('autoTrade')\\r\\n    },\\r\\n    quickStrangle() {\\r\\n      getGlobal('tickerBus').emit('quickPlay')\\r\\n    },\\r\\n    quickSplit() {\\r\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\r\\n    },\\r\\n    longHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\r\\n    },\\r\\n    shortHedge() {\\r\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\r\\n    },\\r\\n    stockCrawler() {\\r\\n      getGlobal('tickerBus').emit('stockCrawler')\\r\\n    },\\r\\n    loadECP() {\\r\\n      getGlobal('tickerBus').emit('loadECP')\\r\\n    },\\r\\n    loadMGCP() {\\r\\n      getGlobal('tickerBus').emit('loadMGCP')\\r\\n    },\\r\\n    loadBLD() {\\r\\n      getGlobal('tickerBus').emit('loadBLD')\\r\\n    },\\r\\n    loadCLRK() {\\r\\n      getGlobal('tickerBus').emit('loadCLRK')\\r\\n    },\\r\\n    loadOMTK() {\\r\\n      getGlobal('tickerBus').emit('loadOMTK')\\r\\n    },\\r\\n    loadFSIG() {\\r\\n      getGlobal('tickerBus').emit('loadFSIG')\\r\\n    },\\r\\n    loadKGI() {\\r\\n      getGlobal('tickerBus').emit('loadKGI')\\r\\n    },\\r\\n    loadFLCM() {\\r\\n      getGlobal('tickerBus').emit('loadFLCM')\\r\\n    },\\r\\n    loadSTM() {\\r\\n      getGlobal('tickerBus').emit('loadSTM')\\r\\n    },\\r\\n    loadDCOMM() {\\r\\n      getGlobal('tickerBus').emit('loadDCOMM')\\r\\n    },\\r\\n    loadHLS() {\\r\\n      getGlobal('tickerBus').emit('loadHLS')\\r\\n    },\\r\\n    loadVITA() {\\r\\n      getGlobal('tickerBus').emit('loadVITA')\\r\\n    },\\r\\n    loadICRS() {\\r\\n      getGlobal('tickerBus').emit('loadICRS')\\r\\n    },\\r\\n    loadUNV() {\\r\\n      getGlobal('tickerBus').emit('loadUNV')\\r\\n    },\\r\\n    loadAERO() {\\r\\n      getGlobal('tickerBus').emit('loadAERO')\\r\\n    },\\r\\n    loadOMN() {\\r\\n      getGlobal('tickerBus').emit('loadOMN')\\r\\n    },\\r\\n    loadSLRS() {\\r\\n      getGlobal('tickerBus').emit('loadSLRS')\\r\\n    },\\r\\n    loadGPH() {\\r\\n      getGlobal('tickerBus').emit('loadGPH')\\r\\n    },\\r\\n    loadNVMD() {\\r\\n      getGlobal('tickerBus').emit('loadNVMD')\\r\\n    },\\r\\n    loadWDS() {\\r\\n      getGlobal('tickerBus').emit('loadWDS')\\r\\n    },\\r\\n    loadLXO() {\\r\\n      getGlobal('tickerBus').emit('loadLXO')\\r\\n    },\\r\\n    loadRHOC() {\\r\\n      getGlobal('tickerBus').emit('loadRHOC')\\r\\n    },\\r\\n    loadAPHE() {\\r\\n      getGlobal('tickerBus').emit('loadAPHE')\\r\\n    },\\r\\n    loadSYSC() {\\r\\n      getGlobal('tickerBus').emit('loadSYSC')\\r\\n    },\\r\\n    loadCTK() {\\r\\n      getGlobal('tickerBus').emit('loadCTK')\\r\\n    },\\r\\n    loadNTLK() {\\r\\n      getGlobal('tickerBus').emit('loadNTLK')\\r\\n    },\\r\\n    loadOMGA() {\\r\\n      getGlobal('tickerBus').emit('loadOMGA')\\r\\n    },\\r\\n    loadFNS() {\\r\\n      getGlobal('tickerBus').emit('loadFNS')\\r\\n    },\\r\\n    loadJGN() {\\r\\n      getGlobal('tickerBus').emit('loadJGN')\\r\\n    },\\r\\n    loadSGC() {\\r\\n      getGlobal('tickerBus').emit('loadSGC')\\r\\n    },\\r\\n    loadCTYS() {\\r\\n      getGlobal('tickerBus').emit('loadCTYS')\\r\\n    },\\r\\n    loadMDYN() {\\r\\n      getGlobal('tickerBus').emit('loadMDYN')\\r\\n    },\\r\\n    loadTITN() {\\r\\n      getGlobal('tickerBus').emit('loadTITN')\\r\\n    },\\r\\n  },\\r\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f4269089-7211-47e8-ba07-f8285ea9480b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6733ba12-d754-409d-878d-ceec4b642bac\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///289452bc-634c-4419-a7cf-163daca3a2e2\",\"moduleSequenceNumber\":18079},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///10042b83-0ac0-4fd7-a472-f53bc7dafd8f\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///5fa1b1d9-6b3c-4718-af8f-26eaa00abfab\",\"moduleSequenceNumber\":18076},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///44734d10-322a-4289-973e-43ba496c9db8\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///cf042072-d883-4823-a2c6-5b524db3e53a\",\"moduleSequenceNumber\":18157},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c80cc2b7-32ed-4aef-a186-08d95e818549\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///50fa5a9c-48ad-461c-8a0b-8cfb553fd653\",\"moduleSequenceNumber\":18166},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b46e31bd-8210-4a52-9550-0f36be97d739\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///56440446-b477-4bef-b2a5-955fd8bc842a\",\"moduleSequenceNumber\":18112},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0e279641-5ef9-4b48-a081-e1b9bbd6911b\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///db83ee49-da6f-44aa-a929-3b8c3c1b8076\",\"moduleSequenceNumber\":18130},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///b4fb9037-c476-403f-ad9b-3b8598d398dc\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///64a90fe5-9cef-404f-9bba-a5b69a1f1a8c\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///bfbf10dc-d484-4f5b-8c8b-ac80fe6ef95d\",\"moduleSequenceNumber\":18115},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///6200498f-f3a8-4c7a-9632-82e07f036e9d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///21bf6c5f-2a34-43c9-af61-7e37220cfe35\",\"moduleSequenceNumber\":18187},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a4b88b0d-0975-492e-a0d9-42fcb117f697\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///4436db7e-d51d-43eb-8a41-e48f7bdcfe61\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///f0eab529-e0b5-41d1-b025-2b7e88a5c8d1\",\"moduleSequenceNumber\":18154},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///0b68f26e-5fd3-411a-9812-a5fa10499077\",\"moduleSequenceNumber\":18127},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///984109b7-8cc0-45f1-a1a5-2fd3240e2395\",\"moduleSequenceNumber\":18160},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4a736528-e78e-4b72-9d0e-7b23c45a7a8d\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///dc5f4bc0-30d6-4b8b-8c49-cc41ee8675fc\",\"moduleSequenceNumber\":18094},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///52507d58-557f-4030-b42d-3c01e49a9192\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///5c1f2a73-9b46-426c-92f8-71cd1ca6919f\",\"moduleSequenceNumber\":18109},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///47f6f722-cc73-429f-91ab-0d158f361b20\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///9376e750-eee0-4096-a409-bf8d248bb4f8\",\"moduleSequenceNumber\":18088},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5b3187bb-7a80-472a-ab68-820d65fd0873\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///f7a53e7c-901c-4de0-8172-ba61c60d3b51\",\"moduleSequenceNumber\":18178},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///d6918535-2f00-4742-b5d6-829303958de7\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///2fac9b10-c97b-4b7e-bd34-af8f4cb5c5ff\",\"moduleSequenceNumber\":18103},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///7de4b446-11e2-48e9-84f4-b1322589cabb\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///3aeb882e-3e77-4c0f-991d-ea71a633cf1f\",\"moduleSequenceNumber\":18151},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///1cb626f5-399d-4f2d-8ccc-e40ba5bb28a3\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///0325437a-8332-449d-b1d9-37d7dd8bca2a\",\"moduleSequenceNumber\":18142},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///893ebdf0-9491-4c82-bd55-af10baad4334\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///ea1d25ca-b19e-42bc-ab91-d9d32ed7a563\",\"moduleSequenceNumber\":18175},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4921abec-2570-43b3-a848-0fbe86dd5f91\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///54b4c6cd-8cec-471b-af63-eca8eb9acd99\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///639527e6-975a-4841-baa8-85de6fc78988\",\"moduleSequenceNumber\":18097},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///46d78add-0cd0-48d3-b980-a1a099706747\",\"moduleSequenceNumber\":18136},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///70731fa8-77b3-4a94-a6f8-d99c204152e0\",\"moduleSequenceNumber\":18145},{\"filename\":\"/bitpacks/super-stonks/wallstreet.js\",\"url\":\"blob:file:///390408d1-5a95-4d89-9687-6ab3c9591448\",\"moduleSequenceNumber\":22737}],\"dependents\":[],\"ramUsage\":32.15,\"server\":\"home\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from 'wallstreet.js'\\r\\n\\r\\nexport async function main(ns) {\\r\\n  const doc = eval('document')\\r\\n  var ticker = ns.args[0];\\r\\n\\r\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\r\\n  const resolution = 300\\r\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\r\\n  const delay = 10\\r\\n\\r\\n  const textSize = 2.5\\r\\n\\r\\n  const lineColor = 'green'\\r\\n\\r\\n  const strokeWidth = 0.5\\r\\n\\r\\n  const conWidth = 80\\r\\n  const conHeight = 60\\r\\n  const wBuffer = 1\\r\\n  const hBuffer = 5\\r\\n  await ns.clearPort(1)\\r\\n  await ns.clearPort(2)\\r\\n  await ns.writePort(3, ticker)\\r\\n\\r\\n\\r\\n  var container = doc.getElementById('graph_container')\\r\\n\\r\\n  if (container != null) {\\r\\n    KillChildren(container)\\r\\n    container.remove()\\r\\n  }\\r\\n //Give the chart time to load.\\r\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\r\\n\\r\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\r\\n  const containerAttr = [\\r\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\r\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\r\\n    ['id', 'graph_container'],\\r\\n  ]\\r\\n  AddAttr(container, containerAttr)\\r\\n  \\r\\n  dropPage.appendChild(container)\\r\\n\\r\\n  const uiThickness = 0.1\\r\\n\\r\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(topLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(topLine)\\r\\n\\r\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(midLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight / 2)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight / 2)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(midLine)\\r\\n\\r\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n  AddAttr(botLine, [\\r\\n    ['x1', String(wBuffer)],\\r\\n    ['y1', String(conHeight - hBuffer)],\\r\\n    ['x2', String(conWidth - wBuffer)],\\r\\n    ['y2', String(conHeight - hBuffer)],\\r\\n    ['stroke', 'lightgrey'],\\r\\n    ['stroke-width', String(uiThickness)],\\r\\n  ])\\r\\n  container.appendChild(botLine)\\r\\n\\r\\n\\r\\n  var lines = []\\r\\n  for (let i = 0; i < resolution - 1; i++) {\\r\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '60'],\\r\\n      ['x2', '100'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', 'green'],\\r\\n      ['stroke-width', '1'],\\r\\n    ])\\r\\n    AddAttr(lines[i], [\\r\\n      ['x1', '0'],\\r\\n      ['y1', '0'],\\r\\n      ['x2', '0'],\\r\\n      ['y2', '0'],\\r\\n      ['stroke', lineColor],\\r\\n      ['stroke-width', String(strokeWidth)],\\r\\n    ])\\r\\n    container.appendChild(lines[i])\\r\\n  }\\r\\n\\r\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\r\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(topTextBG, topText, container)\\r\\n\\r\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\r\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(midTextBG, midText, container)\\r\\n\\r\\n  var botText = CreateText('LOADING VOLATILITY...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\r\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\r\\n  HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n  var values = []\\r\\n  while (true) {\\r\\n    var ticker = ns.args[0];\\r\\n    var position = ns.stock.getPosition(ticker)\\r\\n    try {\\r\\n      if (values.length == resolution) {\\r\\n        values.splice(0, 1)\\r\\n        await ns.clearPort(1);\\r\\n        await ns.clearPort(2);\\r\\n        \\r\\n      }\\r\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\r\\n\\r\\n\\r\\n      if (values.length > 2) {\\r\\n        var lineCount = values.length - 2\\r\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\r\\n\\r\\n        var moneyList = []\\r\\n\\r\\n        for (let i = 0; i < values.length; i++) {\\r\\n          moneyList[i] = values[i]\\r\\n        }\\r\\n      await ns.clearPort(1)\\r\\n      await ns.clearPort(2)\\r\\n      await ns.writePort(1, (Math.max(...moneyList)))\\r\\n      await ns.writePort(2, (Math.min(...moneyList)))\\r\\n      await ns.writePort(3, ticker)\\r\\n        var fiveminavg = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\r\\n        var highestVal = moneyList[0]\\r\\n        var lowestVal = moneyList[0]\\r\\n\\r\\n        for (var i in moneyList) {\\r\\n          if (moneyList[i] > highestVal) {\\r\\n            highestVal = moneyList[i]\\r\\n          }\\r\\n          if (moneyList[i] < lowestVal) {\\r\\n            lowestVal = moneyList[i]\\r\\n          }\\r\\n        }\\r\\n\\r\\n        highestVal = highestVal - lowestVal\\r\\n        //highestVal = moneyList[i];\\r\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\r\\n        //monitor the player's cash, but has been tweaked for stocks.\\r\\n\\r\\n        for (let i in moneyList) {\\r\\n          if (highestVal != lowestVal) {\\r\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\r\\n          } else {\\r\\n            moneyList[i] = values[i]\\r\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\r\\n          }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < lineCount; i++) {\\r\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\r\\n          if (isNaN(temp)) {\\r\\n            ns.asleep(5000);\\r\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\r\\n          }\\r\\n\\r\\n          var attr = [\\r\\n            ['x1', String(i * xOff + wBuffer)],\\r\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\r\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\r\\n          ]\\r\\n          AddAttr(lines[i], attr)\\r\\n\\r\\n        }\\r\\n        \\r\\n        topText.innerHTML = 'FORECAST: ' + Math.floor((ns.stock.getForecast(ns.sprintf(ticker))*100)) + '%' + ' || 5MIN HIGH: ' + ns.nFormat(ns.peek(1), '$0.00a') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\r\\n        HighlightText(topTextBG, topText, container)\\r\\n\\r\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+fiveminavg+' AVG)'\\r\\n        HighlightText(midTextBG, midText, container)\\r\\n\\r\\n        botText.innerHTML = 'VOL: ' + ns.nFormat(ns.stock.getVolatility(ns.sprintf(ticker)), '0.00%') + ' || 5MIN LOW: ' + ns.nFormat(ns.peek(2), '$0.00a') + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\r\\n        HighlightText(botTextBG, botText, container)\\r\\n\\r\\n\\r\\n        \\r\\n      }\\r\\n\\r\\n\\r\\n    } catch (err) {\\r\\n      // This might come in handy later\\r\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\r\\n    }\\r\\n    await ns.sleep(delay * 100)\\r\\n    await ns.clearPort(1);\\r\\n    await ns.clearPort(2);\\r\\n\\r\\n    if (ns.isRunning(\\\"wallstreet.js\\\", \\\"home\\\") == false) {\\r\\n      await ns.clearPort(1);\\r\\n      await ns.clearPort(2);\\r\\n      await ns.clearPort(3);\\r\\n      ns.exit();\\r\\n    }\\r\\n\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction AddAttr(element, attrList) {\\r\\n  for (var i in attrList) {\\r\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction KillChildren(element) {\\r\\n  const children = element.children\\r\\n  for (var line of children) {\\r\\n    line.remove()\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\r\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\r\\n  AddAttr(textElm, [\\r\\n    ['x', String(x)],\\r\\n    ['y', String(y)],\\r\\n    ['fill', 'lightgrey'],\\r\\n    ['font-size', String(textSize)],\\r\\n    ['font-family', 'sans-serif'],\\r\\n    ['stroke', 'black'],\\r\\n    ['stroke-width', '0'],\\r\\n  ])\\r\\n  textElm.innerHTML = text\\r\\n  parent.appendChild(textElm)\\r\\n  return textElm\\r\\n}\\r\\n\\r\\nfunction HighlightText(bg, text, parent) {\\r\\n  var textBox = text.getBBox()\\r\\n\\r\\n  AddAttr(bg, [\\r\\n    ['x', String(textBox.x)],\\r\\n    ['y', String(textBox.y)],\\r\\n    ['width', String(textBox.width)],\\r\\n    ['height', String(textBox.height)],\\r\\n    ['fill', 'black'],\\r\\n    ['opacity', '0.0'],\\r\\n  ])\\r\\n  parent.insertBefore(bg, text)\\r\\n  \\r\\n}\\r\\n\",\"filename\":\"/bitpacks/super-stonks/wallstreet-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":923}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import AppFactory from '/bitpacks/bb-vue/AppFactory.js'\\n// prettier-ignore\\nimport { getGlobal, html, Mitt, setGlobal, css } from '/bitpacks/bb-vue/lib.js'\\n\\n/** @param { import(\\\"~/ns\\\").NS } ns */\\nexport async function main(ns) {\\n\\n\\n  try {\\n    ns.disableLog('disableLog');\\n    ns.disableLog('asleep');\\n    ns.disableLog('sleep');\\n    ns.disableLog('getServerMoneyAvailable');\\n\\n    await new AppFactory(ns).mount({\\n      config: { id: 'svg-chart-app-wallstreet', showTips: false },\\n      rootComponent: ChartContainerwallstreet,\\n    })\\n  } catch (error) {\\n    console.error(error)\\n    ns.tprint(error.toString())\\n    ns.exit()\\n  }\\n\\n\\n\\n  // Listen for specific event\\n  let autoTrader = false\\n  let enableAutoTrader = false\\n  let wantsShutdown = false\\n  let buyMaxLongShares = false\\n  let closeLongPosition = false\\n  let closeShortPosition = false\\n  let buyMaxShortShares = false\\n  let sellAllShares = false\\n  //let quickStrangle = false\\n  let longHedge = false\\n  let shortHedge = false\\n  let splitPlay = false\\n  //let stockCrawler = false\\n  let shortStrangle = false\\n  let longStrangle = false\\n\\n  //Ticker Chart Storage\\n  let loadECP = false\\n  let loadMGCP = false\\n  let loadBLD = false\\n  let loadCLRK = false\\n  let loadOMTK = false\\n  let loadFSIG = false\\n  let loadKGI = false\\n  let loadFLCM = false\\n  let loadSTM = false\\n  let loadDCOMM = false\\n  let loadHLS = false\\n  let loadVITA = false\\n  let loadICRS = false\\n  let loadUNV = false\\n  let loadAERO = false\\n  let loadOMN = false\\n  let loadSLRS = false\\n  let loadGPH = false\\n  let loadNVMD = false\\n  let loadWDS = false\\n  let loadLXO = false\\n  let loadRHOC = false\\n  let loadAPHE = false\\n  let loadSYSC = false\\n  let loadCTK = false\\n  let loadNTLK = false\\n  let loadOMGA = false\\n  let loadFNS = false\\n  let loadJGN = false\\n  let loadSGC = false\\n  let loadCTYS = false\\n  let loadMDYN = false\\n  let loadTITN = false\\n  //End of Ticker Chart Storage\\n\\n  let bus = Mitt().createBus()\\n  bus.on('wantsShutdown', () => (wantsShutdown = true))\\n  bus.on('buyMaxLong', () => (buyMaxLongShares = true))\\n  bus.on('buyMaxShort', () => (buyMaxShortShares = true))\\n  bus.on('closeAllPositions', () => (sellAllShares = true))\\n  bus.on('closeLong', () => (closeLongPosition = true))\\n  bus.on('closeShort', () => (closeShortPosition = true))\\n  bus.on('autoTrade', () => (enableAutoTrader = true))\\n  //bus.on('quickPlay', () => (quickStrangle = true))\\n  bus.on('quickHedgeLong', () => (longHedge = true))\\n  bus.on('quickHedgeShort', () => (shortHedge = true))\\n  //bus.on('quickSplitPlay', () => (splitPlay = true))\\n  //bus.on('stockCrawler', () => (stockCrawler = true))\\n  bus.on('longStrangle', () => (longStrangle = true))\\n  bus.on('shortStrangle', () => (shortStrangle = true))\\n\\n  //Ticker Chart Bus Triggers\\n  bus.on('loadECP', () => (loadECP = true))\\n  bus.on('loadMGCP', () => (loadMGCP = true))\\n  bus.on('loadBLD', () => (loadBLD = true))\\n  bus.on('loadCLRK', () => (loadCLRK = true))\\n  bus.on('loadOMTK', () => (loadOMTK = true))\\n  bus.on('loadFSIG', () => (loadFSIG = true))\\n  bus.on('loadKGI', () => (loadKGI = true))\\n  bus.on('loadFLCM', () => (loadFLCM = true))\\n  bus.on('loadSTM', () => (loadSTM = true))\\n  bus.on('loadDCOMM', () => (loadDCOMM = true))\\n  bus.on('loadHLS', () => (loadHLS = true))\\n  bus.on('loadVITA', () => (loadVITA = true))\\n  bus.on('loadICRS', () => (loadICRS = true))\\n  bus.on('loadUNV', () => (loadUNV = true))\\n  bus.on('loadAERO', () => (loadAERO = true))\\n  bus.on('loadOMN', () => (loadOMN = true))\\n  bus.on('loadSLRS', () => (loadSLRS = true))\\n  bus.on('loadGPH', () => (loadGPH = true))\\n  bus.on('loadNVMD', () => (loadNVMD = true))\\n  bus.on('loadWDS', () => (loadWDS = true))\\n  bus.on('loadLXO', () => (loadLXO = true))\\n  bus.on('loadRHOC', () => (loadRHOC = true))\\n  bus.on('loadAPHE', () => (loadAPHE = true))\\n  bus.on('loadSYSC', () => (loadSYSC = true))\\n  bus.on('loadCTK', () => (loadCTK = true))\\n  bus.on('loadNTLK', () => (loadNTLK = true))\\n  bus.on('loadOMGA', () => (loadOMGA = true))\\n  bus.on('loadFNS', () => (loadFNS = true))\\n  bus.on('loadJGN', () => (loadJGN = true))\\n  bus.on('loadSGC', () => (loadSGC = true))\\n  bus.on('loadCTYS', () => (loadCTYS = true))\\n  bus.on('loadMDYN', () => (loadMDYN = true))\\n  bus.on('loadTITN', () => (loadTITN = true))\\n  //End of Ticker Chart Bus Triggers\\n  setGlobal('tickerBus', bus)\\n\\n  // Instead of closing, let's keep this running\\n\\n  while (wantsShutdown == false) {\\n\\n    //init chart loading triggers\\n    if (loadECP == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ECP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"ECP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadECP = false;\\n    }\\n    if (loadMGCP == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MGCP] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"MGCP\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMGCP = false;\\n    }\\n    if (loadBLD == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [BLD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"BLD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadBLD = false;\\n    }\\n    if (loadCLRK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CLRK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"CLRK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCLRK = false;\\n    }\\n    if (loadOMTK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"OMTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMTK = false;\\n    }\\n    if (loadFSIG == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FSIG] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"FSIG\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFSIG = false;\\n    }\\n    if (loadKGI == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [KGI] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"KGI\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadKGI = false;\\n    }\\n    if (loadFLCM == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FLCM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"FLCM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFLCM = false;\\n    }\\n    if (loadSTM == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [STM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"STM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSTM = false;\\n    }\\n    if (loadDCOMM == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [DCOMM] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"DCOMM\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadDCOMM = false;\\n    }\\n    if (loadHLS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [HLS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"HLS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadHLS = false;\\n    }\\n    if (loadVITA == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [VITA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"VITA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadVITA = false;\\n    }\\n    if (loadICRS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [ICRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"ICRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadICRS = false;\\n    }\\n    if (loadUNV == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [UNV] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"UNV\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadUVN = false;\\n    }\\n    if (loadAERO == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [AERO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"AERO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAERO = false;\\n    }\\n    if (loadOMN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"OMN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMN = false;\\n    }\\n    if (loadSLRS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SLRS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"SLRS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSLRS = false;\\n    }\\n    if (loadGPH == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [GPH] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"GPH\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadGPH = false;\\n    }\\n    if (loadNVMD == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NVMD] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"NVMD\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNVMD = false;\\n    }\\n    if (loadWDS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [WDS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"WDS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadWDS = false;\\n    }\\n    if (loadLXO == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [LXO] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"LXO\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadLXO = false;\\n    }\\n    if (loadRHOC == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [RHOC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"RHOC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadRHOC = false;\\n    }\\n    if (loadAPHE == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [APHE] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"APHE\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadAPHE = false;\\n    }\\n    if (loadSYSC == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SYSC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"SYSC\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSYSC = false;\\n    }\\n    if (loadCTK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"CTK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTK = false;\\n    }\\n    if (loadNTLK == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [NTLK] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"NTLK\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadNTLK = false;\\n    }\\n    if (loadOMGA == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [OMGA] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"OMGA\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadOMGA = false;\\n    }\\n    if (loadFNS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [FNS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"FNS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadFNS = false;\\n    }\\n    if (loadJGN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [JGN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"JGN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadJGN = false;\\n    }\\n    if (loadSGC == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [SGC] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"SGC\\\")\\n\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadSGC = false;\\n    }\\n    if (loadCTYS == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [CTYS] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"CTYS\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadCTYS = false;\\n    }\\n    if (loadMDYN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [MDYN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"MDYN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadMDYN = false;\\n    }\\n    if (loadTITN == true) {\\n      await ns.scriptKill(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", \\\"home\\\");\\n      ns.toast(\\\"Loading [TITN] Chart...\\\", \\\"info\\\", 2000);\\n      await ns.asleep(500);\\n      await ns.run(\\\"/bitpacks/super-stonks/wallstreet-lite-data.js\\\", 1, \\\"TITN\\\")\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      //autoTrader = false;\\n      loadTITN = false;\\n    }\\n\\n    //Global Stock Price Test Module\\n    // var market = ns.stock.getSymbols()\\n    // var mValues = []\\n    //   for (const target of market) {\\n\\n    //     const timeframe = 300\\n    //     var mPrice = ns.stock.getAskPrice(target); \\n\\n    //     if (mValues.length == timeframe) {\\n    //       mValues.splice(0,1)\\n    //     }\\n\\n    //     mValues[mValues.length] = mPrice\\n\\n    //     var maxMarket = Math.max(...mValues)\\n    //     var minMarket = Math.min(...mValues)\\n    //     var mAvg = (maxMarket + minMarket) / 2\\n    //     var mDiff = mAvg - mPrice\\n    //     var trend = (mDiff / ns.stock.getAskPrice(target)) *0.1\\n\\n    //     if (mValues.length > 200 && trend > 75) {\\n    //       ns.print(target + \\\" - BULL TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n    //     if (mValues.length > 200 && trend < -75) {\\n    //       ns.print(target + \\\" - BEAR TREND DETECTED\\\")\\n    //       await ns.asleep(5000);\\n    //     }\\n\\n    //   await ns.asleep(2000);\\n    //   ns.print(target + ': ' + trend)\\n\\n    // }\\n\\n\\n\\n    //Stock Crawler Module\\n    // if (stockCrawler == true) {\\n    //   ns.toast(\\\"Crawling Market...\\\", \\\"info\\\", 2000);\\n    //   var market = ns.stock.getSymbols().sort(function (a, b) { return ns.stock.getForecast(b) - ns.stock.getForecast(a); })\\n    //     for (const target of market) {\\n    //     var tvol = ns.stock.getVolatility(target);\\n    //     var tfor = ns.stock.getForecast(target);\\n    //       if (tvol > 0.01 && tfor > 0.6) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [LONG] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //       if (tvol > 0.01 && tfor < 0.4) {\\n    //       ns.tprint(\\\"CRAWLER REPORT: [SHORT] TARGET\\\");\\n    //       ns.tprint(target)\\n    //     }\\n    //     await ns.asleep(100);\\n    //   stockCrawler = false;\\n    //   }\\n    // }\\n\\n\\n\\n    //failsafe exit condition\\n    if (wantsShutdown == true) {\\n      ns.exit();\\n    }\\n\\n    if (ns.peek(3) != \\\"NULL PORT DATA\\\") {\\n\\n      let loadedticker = ns.peek(3);\\n      var position = ns.stock.getPosition(loadedticker);\\n      var maxlongshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var maxshortshares = Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker));\\n      var exposureLong = position[0] * position[1];\\n      var exposureShort = position[2] * position[3];\\n\\n      if (buyMaxLongShares == true) {\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"LONG ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxLongShares = false;\\n\\n      }\\n      if (buyMaxShortShares == true) {\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.toast(\\\"SHORT ORDER PLACED - \\\" + loadedticker + \\\".\\\", \\\"info\\\", 10000);\\n        buyMaxShortShares = false;\\n\\n      }\\n      if (sellAllShares == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED **ALL** POSITIONS AND ORDERS FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        sellAllShares = false;\\n\\n      }\\n      if (closeLongPosition == true) {\\n        ns.stock.sell(loadedticker, position[0]);\\n        ns.toast(\\\"CLOSED LONG POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeLongPosition = false;\\n\\n      }\\n      if (closeShortPosition == true) {\\n        ns.stock.sellShort(loadedticker, position[2]);\\n        ns.toast(\\\"CLOSED SHORT POSITION FOR \\\" + loadedticker, \\\"warning\\\", 5000);\\n        closeShortPosition = false;\\n      }\\n      //Auto-Trader.  Does what it says.  Controls all positions for that ticker for you.\\n\\n\\n      if (autoTrader == true && position[0] > '1' && ns.peek(4) < '0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING LONG.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sell(loadedticker, position[0]);\\n\\n      }\\n      if (autoTrader == true && position[2] > '1' && ns.peek(4) > '-0.5') {\\n        ns.toast(\\\"TRADE PROTECTION TRIGGERED - FORECAST DOES NOT MATCH POSITION.  CLOSING SHORT.\\\", \\\"warning\\\", 5000);\\n        ns.stock.sellShort(loadedticker, position[2]);\\n\\n\\n      }\\n      if (autoTrader == true && position[0] == '0' && ns.peek(4) > '5.0') {\\n        ns.toast(\\\"AUTO-TRADE: LONG PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxLongShares = true;\\n\\n      }\\n      if (autoTrader == true && position[2] == '0' && ns.peek(4) < '-5.0') {\\n        ns.toast(\\\"AUTO-TRADE: SHORT PURCHASED\\\", \\\"info\\\", 2000);\\n        await ns.asleep(200);\\n        buyMaxShortShares = true;\\n      }\\n\\n      //   //Advanced position settings.  Can mess with these if you want, but after testing, these are great.\\n\\n\\n      if (longStrangle == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getAskPrice(loadedticker) * 1.07), \\\"LimitSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Limit Sell Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxlongshares, (ns.stock.getBidPrice(loadedticker) * 0.87), \\\"StopSell\\\", \\\"Long\\\");\\n        ns.toast(\\\"Stop Limit Placed [LONG]...\\\", \\\"info\\\", 2000);\\n        longStrangle = false;\\n\\n      }\\n      if (shortStrangle == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Quick Strangle on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", \\\"5000\\\");\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker), ns.stock.getMaxShares(loadedticker)));\\n        await ns.asleep(100);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getAskPrice(loadedticker) * 0.87), \\\"LimitSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Limit Sell Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        ns.stock.placeOrder(loadedticker, maxshortshares, (ns.stock.getBidPrice(loadedticker) * 1.07), \\\"StopSell\\\", \\\"Short\\\");\\n        ns.toast(\\\"Stop Limit Placed [SHORT]...\\\", \\\"info\\\", 2000);\\n        shortStrangle = false;\\n\\n      }\\n      if (longHedge == true && position[0] == '0') {\\n        ns.toast(\\\"Executing Hedged Long Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        longHedge = false;\\n\\n      }\\n      if (shortHedge == true && position[2] == '0') {\\n        ns.toast(\\\"Executing Hedged Short Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.25, ns.stock.getMaxShares(loadedticker) * 0.25));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.75, ns.stock.getMaxShares(loadedticker) * 0.75));\\n        shortHedge = false;\\n\\n      }\\n      if (splitPlay == true && position[0] == '0' && position[2] == '0') {\\n        ns.toast(\\\"Executing Split Play on \\\" + loadedticker + \\\"...\\\", \\\"info\\\", 5000);\\n        ns.stock.buy(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        ns.stock.short(loadedticker, Math.min((ns.getServerMoneyAvailable(\\\"home\\\") - 1000000) / ns.stock.getAskPrice(loadedticker) * 0.49, ns.stock.getMaxShares(loadedticker) * 0.50));\\n        splitPlay = false;\\n\\n      }\\n\\n      //Auto-Trader button configuration.  Don't touch.\\n\\n      if (enableAutoTrader == true) {\\n        let autoTradeConfirm = await ns.prompt(\\\"Enable Auto-Trade?\\\")\\n\\n        if (autoTradeConfirm == true) {\\n          ns.toast(\\\"Enabling Auto-Trader\\\", \\\"info\\\", 5000);\\n          autoTrader = true;\\n          enableAutoTrader = false;\\n        }\\n        if (autoTradeConfirm == false) {\\n          ns.toast(\\\"Auto-Trader NOT Enabled\\\", \\\"info\\\", 5000);\\n          autoTrader = false;\\n          enableAutoTrader = false;\\n        }\\n      }\\n\\n    }\\n\\n    await ns.asleep(500)\\n    \\n  }\\n}\\n\\n\\nexport const SVGChartContainerwallstreet = 'svgChartContainerwallstreet'\\nconst ChartContainerwallstreet = {\\n  name: 'svg-chart-wallstreet',\\n  inject: ['appShutdown',],\\n  template: html`\\n    <bbv-win\\n      class=\\\"__CMP_NAME__\\\"\\n      title=\\\"WSE Active Trader\\\"\\n      no-pad\\n      start-height=\\\"770px\\\"\\n      start-width=\\\"619px\\\"\\n    >\\n \\n      <details align=\\\"center\\\"><summary>TICKERS [ALL]</summary>\\n      <div>\\n      <button align=\\\"left\\\" @click=\\\"loadECP\\\">[ECP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadMGCP\\\">[MGCP]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadBLD\\\">[BLD]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadCLRK\\\">[CLRK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadOMTK\\\">[OMTK]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFSIG\\\">[FSIG]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadKGI\\\">[KGI]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadFLCM\\\">[FLCM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadSTM\\\">[STM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadDCOMM\\\">[DCOMM]</button>\\n      <button align=\\\"left\\\" @click=\\\"loadHLS\\\">[HLS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadVITA\\\">[VITA]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadICRS\\\">[ICRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadUNV\\\">[UNV]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadAERO\\\">[AERO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadOMN\\\">[OMN]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadSLRS\\\">[SLRS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadGPH\\\">[GPH]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadNVMD\\\">[NVMD]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadWDS\\\">[WDS]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadLXO\\\">[LXO]</button>\\n      <button align=\\\"center\\\" @click=\\\"loadRHOC\\\">[RHOC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadAPHE\\\">[APHE]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSYSC\\\">[SYSC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTK\\\">[CTK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadNTLK\\\">[NTLK]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadOMGA\\\">[OMGA]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadFNS\\\">[FNS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadJGN\\\">[JGN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadSGC\\\">[SGC]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadCTYS\\\">[CTYS]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadMDYN\\\">[MDYN]</button>\\n      <button align=\\\"right\\\" @click=\\\"loadTITN\\\">[TITN]</button>\\n      </div>\\n      </details>\\n      </div>\\n      <div v-once id=\\\"${SVGChartContainerwallstreet}\\\" />\\n      <details align=\\\"left\\\"><summary>Advanced Positions</summary>\\n      <div>\\n      <button @click=\\\"quickSplit\\\">QUICK SPLIT</button>\\n      <button @click=\\\"longHedge\\\">GO LONG - HEDGED</button>\\n      <button @click=\\\"shortHedge\\\">GO SHORT - HEDGED</button>\\n      <button @click=\\\"longStrangle\\\">LONG STRANGLE</button>\\n      <button @click=\\\"shortStrangle\\\">SHORT STRANGLE</button>\\n      </div>\\n      </details>\\n      <details align=\\\"right\\\"><summary>TOOLS</summary>\\n      <div>\\n      <button @click=\\\"enableAutoTrade\\\">AUTO TRADE</button>\\n      </div>\\n      </details>\\n\\n      <template #actions>\\n        <div><bbv-button @click=\\\"shutdownAll\\\">Close Chart</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxLong\\\">BUY MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"buyMaxShort\\\">BUY MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxLong\\\">SELL MAX [LONG]</bbv-button></div>\\n        <div><bbv-button @click=\\\"sellMaxShort\\\">SELL MAX [SHORT]</bbv-button></div>\\n        <div><bbv-button @click=\\\"closeAllPositions\\\">SELL ALL</bbv-button></div>\\n      </template>\\n    </bbv-win>\\n  `,\\n\\n  data() {\\n    return {}\\n  },\\n\\n  methods: {\\n    shutdownAll() {\\n      getGlobal('tickerBus').emit('wantsShutdown')\\n      this.appShutdown()\\n    },\\n    buyMaxLong() {\\n      getGlobal('tickerBus').emit('buyMaxLong')\\n    },\\n    buyMaxShort() {\\n      getGlobal('tickerBus').emit('buyMaxShort')\\n    },\\n    closeAllPositions() {\\n      getGlobal('tickerBus').emit('closeAllPositions')\\n    },\\n    sellMaxLong() {\\n      getGlobal('tickerBus').emit('closeLong')\\n    },\\n    sellMaxShort() {\\n      getGlobal('tickerBus').emit('closeShort')\\n    },\\n    enableAutoTrade() {\\n      getGlobal('tickerBus').emit('autoTrade')\\n    },\\n    longStrangle() {\\n      getGlobal('tickerBus').emit('longStrangle')\\n    },\\n    shortStrangle() {\\n      getGlobal('tickerBus').emit('shortStrangle')\\n    },\\n    quickSplit() {\\n      getGlobal('tickerBus').emit('quickSplitPlay')\\n    },\\n    longHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeLong')\\n    },\\n    shortHedge() {\\n      getGlobal('tickerBus').emit('quickHedgeShort')\\n    },\\n    // stockCrawler() {\\n    //   getGlobal('tickerBus').emit('stockCrawler')\\n    // },\\n    // enableSmartTrade() {\\n    //   getGlobal('tickerBus').emit('enableSmartTrade')\\n    // },\\n    sellAllStocks() {\\n      getGlobal('tickerBus').emit('sellAllStocks')\\n    },\\n    loadECP() {\\n      getGlobal('tickerBus').emit('loadECP')\\n    },\\n    loadMGCP() {\\n      getGlobal('tickerBus').emit('loadMGCP')\\n    },\\n    loadBLD() {\\n      getGlobal('tickerBus').emit('loadBLD')\\n    },\\n    loadCLRK() {\\n      getGlobal('tickerBus').emit('loadCLRK')\\n    },\\n    loadOMTK() {\\n      getGlobal('tickerBus').emit('loadOMTK')\\n    },\\n    loadFSIG() {\\n      getGlobal('tickerBus').emit('loadFSIG')\\n    },\\n    loadKGI() {\\n      getGlobal('tickerBus').emit('loadKGI')\\n    },\\n    loadFLCM() {\\n      getGlobal('tickerBus').emit('loadFLCM')\\n    },\\n    loadSTM() {\\n      getGlobal('tickerBus').emit('loadSTM')\\n    },\\n    loadDCOMM() {\\n      getGlobal('tickerBus').emit('loadDCOMM')\\n    },\\n    loadHLS() {\\n      getGlobal('tickerBus').emit('loadHLS')\\n    },\\n    loadVITA() {\\n      getGlobal('tickerBus').emit('loadVITA')\\n    },\\n    loadICRS() {\\n      getGlobal('tickerBus').emit('loadICRS')\\n    },\\n    loadUNV() {\\n      getGlobal('tickerBus').emit('loadUNV')\\n    },\\n    loadAERO() {\\n      getGlobal('tickerBus').emit('loadAERO')\\n    },\\n    loadOMN() {\\n      getGlobal('tickerBus').emit('loadOMN')\\n    },\\n    loadSLRS() {\\n      getGlobal('tickerBus').emit('loadSLRS')\\n    },\\n    loadGPH() {\\n      getGlobal('tickerBus').emit('loadGPH')\\n    },\\n    loadNVMD() {\\n      getGlobal('tickerBus').emit('loadNVMD')\\n    },\\n    loadWDS() {\\n      getGlobal('tickerBus').emit('loadWDS')\\n    },\\n    loadLXO() {\\n      getGlobal('tickerBus').emit('loadLXO')\\n    },\\n    loadRHOC() {\\n      getGlobal('tickerBus').emit('loadRHOC')\\n    },\\n    loadAPHE() {\\n      getGlobal('tickerBus').emit('loadAPHE')\\n    },\\n    loadSYSC() {\\n      getGlobal('tickerBus').emit('loadSYSC')\\n    },\\n    loadCTK() {\\n      getGlobal('tickerBus').emit('loadCTK')\\n    },\\n    loadNTLK() {\\n      getGlobal('tickerBus').emit('loadNTLK')\\n    },\\n    loadOMGA() {\\n      getGlobal('tickerBus').emit('loadOMGA')\\n    },\\n    loadFNS() {\\n      getGlobal('tickerBus').emit('loadFNS')\\n    },\\n    loadJGN() {\\n      getGlobal('tickerBus').emit('loadJGN')\\n    },\\n    loadSGC() {\\n      getGlobal('tickerBus').emit('loadSGC')\\n    },\\n    loadCTYS() {\\n      getGlobal('tickerBus').emit('loadCTYS')\\n    },\\n    loadMDYN() {\\n      getGlobal('tickerBus').emit('loadMDYN')\\n    },\\n    loadTITN() {\\n      getGlobal('tickerBus').emit('loadTITN')\\n    },\\n  },\\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///777b2592-0b67-4742-bf0c-3beb1718e984\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///eb3ee5cb-4ffa-47a6-9d02-a0b18bd981a5\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///e6a4cae5-3b1e-4244-bc34-6ec7d248dc70\",\"moduleSequenceNumber\":392},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///046d8123-d6ce-408c-932c-e67d52f2c4de\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///c7e29a2b-8410-4ba7-b9b4-9863b9301ea9\",\"moduleSequenceNumber\":391},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///db26d5f5-3ffc-4e22-b090-97ee17c00c51\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///c9e311c7-424b-4f12-bfd4-f0305e945aea\",\"moduleSequenceNumber\":418},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5a062155-06db-4e40-9764-aa8a204325ce\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///b158d588-4ef9-4f04-bd37-726f2af30a89\",\"moduleSequenceNumber\":421},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///76dcc774-9c1a-4e55-8d6d-1e9477f3aa4b\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///5a2ca73b-a6a7-4df4-bdbc-bb8b8d8b1d45\",\"moduleSequenceNumber\":403},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b5f2facc-d11d-4657-85ea-c0a196e6f1b0\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///0ade0574-6890-43cd-b798-ca369e8249d8\",\"moduleSequenceNumber\":409},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///5c134902-f47d-41af-8ba2-c9672a400542\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///fb16f6ba-9ea3-4d23-ba89-772c3f50dcac\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///91c9d3a7-4ce6-4a3a-9189-37cddd700095\",\"moduleSequenceNumber\":404},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///5da68562-43cd-466c-9275-e7d03bc85cca\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///ef4a5c46-6c8f-4c3f-b929-d6acbf268612\",\"moduleSequenceNumber\":428},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///2738a764-89f5-413c-935a-6b5cfc8d3290\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///884a08dc-e738-40c7-ab6e-14461769b83e\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///4af47ac8-7bbc-42e6-a006-7ae2703f5d1f\",\"moduleSequenceNumber\":417},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///f9b07b7b-0f1f-4122-bc7d-9b320117ee14\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///bb1a32f9-9ba2-40d3-be04-656cb3ca5577\",\"moduleSequenceNumber\":419},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///029cdb0e-8d36-4c75-9bcf-077b803b72cb\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///9f86259e-c6a3-4e63-b0f2-627414b71870\",\"moduleSequenceNumber\":397},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///e2451fd6-943b-45d6-9a5a-2797b64b4cf5\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///8219c177-efdd-49a0-b2d1-e75bd47f02cf\",\"moduleSequenceNumber\":402},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///887eb9dc-c836-4594-a606-226ef5f5a18b\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///45f87900-50da-481c-8438-8faca67bbe49\",\"moduleSequenceNumber\":395},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///bc1f84f5-cd0c-4c6c-af6b-ab2430d69c4b\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///b505219d-10ac-4baa-9b4f-0f4e1166f18d\",\"moduleSequenceNumber\":425},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///b3812405-dd31-4888-b5d7-c001d75748cf\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///cc29cfed-bcb4-49fd-a5f7-aad0197dccf6\",\"moduleSequenceNumber\":400},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///f01cdb62-2d78-4e2a-9733-fd82d438dc80\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///51d306a8-d81c-49c6-976b-5d5ed9d727b4\",\"moduleSequenceNumber\":416},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///8ce41395-d64c-454d-b9d6-76383adb50d4\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///2f09c155-3435-4cf8-8452-20c27f8da0ae\",\"moduleSequenceNumber\":413},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///94a8c714-07e1-4566-9c1e-a4d0f434c01c\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///3436b602-34af-4d5e-816a-14b303220649\",\"moduleSequenceNumber\":424},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4cb96fd4-4c03-4367-91a5-e184226cddb8\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4f146bde-2883-4739-9269-17a787754502\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///e0ba4b11-34be-4a19-b589-65ce32495c6b\",\"moduleSequenceNumber\":398},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///844089d0-90d5-4612-ac8d-65a0d3f6a15a\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///c7c3c1dc-3e29-42f7-9d75-12eb6df7f9b7\",\"moduleSequenceNumber\":414},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///4fd5adda-7a37-45fa-b744-1be91d22e69b\",\"moduleSequenceNumber\":9778}],\"dependents\":[],\"ramUsage\":25.15,\"server\":\"home\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.placeOrder\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { SVGChartContainerwallstreet } from '/bitpacks/super-stonks/wallstreet-lite.js'\\n\\nexport async function main(ns) {\\n  const doc = eval('document')\\n  var ticker = ns.args[0];\\n\\n  //Number of lines rendered.  For stocks, I have this set to 60 to avoid cramping the window.\\n  const resolution = 420\\n  //Delay between data gathered in seconds.  For stocks, once again, delayed a bit so that there isn't tons of 'flat zones' on the chart.\\n  const delay = 10\\n\\n  const textSize = 2.5\\n\\n  const lineColor = 'green'\\n\\n  const strokeWidth = 0.5\\n\\n  const conWidth = 80\\n  const conHeight = 60\\n  const wBuffer = 1\\n  const hBuffer = 5\\n  await ns.clearPort(1)\\n  await ns.clearPort(2)\\n  await ns.writePort(3, ticker)\\n\\n\\n  var container = doc.getElementById('graph_container')\\n\\n  if (container != null) {\\n    KillChildren(container)\\n    container.remove()\\n  }\\n //Give the chart time to load.\\n  const dropPage = doc.getElementById(SVGChartContainerwallstreet)\\n\\n  container = doc.createElementNS('http://www.w3.org/2000/svg', 'svg')\\n  const containerAttr = [\\n    ['viewBox', '0 0 ' + conWidth + ' ' + conHeight],\\n    ['xmlns', 'http://www.w3.org/2000/svg'],\\n    ['id', 'graph_container'],\\n  ]\\n  AddAttr(container, containerAttr)\\n  \\n  dropPage.appendChild(container)\\n\\n  const uiThickness = 0.1\\n\\n  var topLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(topLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(topLine)\\n\\n  var midLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(midLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight / 2)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight / 2)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(midLine)\\n\\n  var botLine = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n  AddAttr(botLine, [\\n    ['x1', String(wBuffer)],\\n    ['y1', String(conHeight - hBuffer)],\\n    ['x2', String(conWidth - wBuffer)],\\n    ['y2', String(conHeight - hBuffer)],\\n    ['stroke', 'lightgrey'],\\n    ['stroke-width', String(uiThickness)],\\n  ])\\n  container.appendChild(botLine)\\n\\n\\n  var lines = []\\n  for (let i = 0; i < resolution - 1; i++) {\\n    lines[i] = doc.createElementNS('http://www.w3.org/2000/svg', 'line')\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '60'],\\n      ['x2', '100'],\\n      ['y2', '0'],\\n      ['stroke', 'green'],\\n      ['stroke-width', '1'],\\n    ])\\n    AddAttr(lines[i], [\\n      ['x1', '0'],\\n      ['y1', '0'],\\n      ['x2', '0'],\\n      ['y2', '0'],\\n      ['stroke', lineColor],\\n      ['stroke-width', String(strokeWidth)],\\n    ])\\n    container.appendChild(lines[i])\\n  }\\n\\n  var topText = CreateText('LOADING FORECAST...', wBuffer, hBuffer + hBuffer / 2, container, doc, textSize)\\n  var topTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(topTextBG, topText, container)\\n\\n  var midText = CreateText('LOADING TICKER...', wBuffer, conHeight / 2 + hBuffer / 2, container, doc, textSize)\\n  var midTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(midTextBG, midText, container)\\n\\n  var botText = CreateText('COLLECTING DATA...', wBuffer, conHeight - hBuffer / 2, container, doc, textSize)\\n  var botTextBG = doc.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n  HighlightText(botTextBG, botText, container)\\n\\n\\n  var values = []\\n  while (true) {\\n    var ticker = ns.args[0];\\n    var position = ns.stock.getPosition(ticker)\\n    try {\\n      if (values.length == resolution) {\\n        values.splice(0, 1)\\n        await ns.clearPort(1);\\n        await ns.clearPort(2);\\n        \\n      }\\n      values[values.length] = ns.stock.getPrice(ns.sprintf(ticker))\\n\\n      if (values.length > 2) {\\n        var lineCount = values.length - 2\\n        var xOff = (conWidth - wBuffer * 2) / lineCount\\n\\n        var moneyList = []\\n\\n        for (let i = 0; i < values.length; i++) {\\n          moneyList[i] = values[i]\\n        }\\n      await ns.clearPort(1)\\n      await ns.clearPort(2)\\n      await ns.writePort(1, (Math.max(...moneyList)))\\n      await ns.writePort(2, (Math.min(...moneyList)))\\n      await ns.writePort(3, ticker)\\n        var tenmin = ns.nFormat((ns.peek(2) + ns.peek(1)) / 2, '$0.00a')\\n        var pricediff = (((ns.peek(2) + ns.peek(1)) / 2) - ns.stock.getAskPrice(ticker))\\n        var forecast = (pricediff / ns.stock.getAskPrice(ticker) *-1)\\n        var estVol = ns.nFormat((moneyList[299] + moneyList[2]) / 419, '$0.00a')\\n      await ns.writePort(4, forecast * 100);\\n      //await ns.writePort(4, (pricediff / ns.stock.getAskPrice(ticker) *-1000))\\n\\n\\n        var highestVal = moneyList[0]\\n        var lowestVal = moneyList[0]\\n\\n        for (var i in moneyList) {\\n          if (moneyList[i] > highestVal) {\\n            highestVal = moneyList[i]\\n          }\\n          if (moneyList[i] < lowestVal) {\\n            lowestVal = moneyList[i]\\n          }\\n        }\\n\\n        highestVal = highestVal - lowestVal\\n        //highestVal = moneyList[i];\\n        //The above line was commented out because that was causing a few unwanted behaviors.  This was originally intended to\\n        //monitor the player's cash, but has been tweaked for stocks.\\n\\n        for (let i in moneyList) {\\n          if (highestVal != lowestVal) {\\n            moneyList[i] = (moneyList[i] - lowestVal) / highestVal\\n          } else {\\n            moneyList[i] = values[i]\\n            //This line was also changed by me.  This keeps the graph line from resetting to the middle, eliminating the EKG-style.\\n          }\\n        }\\n\\n        for (let i = 0; i < lineCount; i++) {\\n          var temp = String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))\\n          if (isNaN(temp)) {\\n            ns.asleep(5000);\\n            ns.print(\\\"Possible delay in data.  This could be caused by lots of scripts running on HOME.  Please wait...\\\")\\n          }\\n\\n          var attr = [\\n            ['x1', String(i * xOff + wBuffer)],\\n            ['y1', String(conHeight - (moneyList[i] * (conHeight - hBuffer * 2) + hBuffer))],\\n            ['x2', String((i + 1) * xOff + wBuffer)],\\n            ['y2', String(conHeight - (moneyList[i + 1] * (conHeight - hBuffer * 2) + hBuffer))],\\n          ]\\n          AddAttr(lines[i], attr)\\n\\n        }\\n        //ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0')\\n        topText.innerHTML = 'Overall Trend: ' + ns.nFormat((pricediff / ns.stock.getAskPrice(ticker) *-1), '%0.0') + ' || [LONG] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[0], \\\"Long\\\") - (position[0] * position[1]), '0.00a');\\n        HighlightText(topTextBG, topText, container)\\n\\n        midText.innerHTML = '['+ ticker + ']' + ': ' + ns.nFormat(ns.stock.getPrice(ns.sprintf(ticker)), '$0.00a') + ' || ('+ tenmin +' 7m AVG)'\\n        HighlightText(midTextBG, midText, container)\\n\\n        botText.innerHTML = 'Movement Per Tick: ' + estVol + ' || [SHORT] PROFIT: ' + ns.nFormat(ns.stock.getSaleGain(ticker, position[2], \\\"Short\\\") - (position[2] * position[3]), '0.00a');\\n        HighlightText(botTextBG, botText, container)\\n\\n\\n        \\n      }\\n\\n\\n    } catch (err) {\\n      // This might come in handy later\\n      ns.print('ERROR: Update Skipped: ' + String(err))\\n    }\\n    await ns.sleep(delay * 100)\\n    await ns.clearPort(1);\\n    await ns.clearPort(2);\\n    await ns.clearPort(4);\\n\\n    if (ns.isRunning(\\\"/bitpacks/super-stonks/wallstreet-lite.js\\\", \\\"home\\\") == false) {\\n      await ns.clearPort(1);\\n      await ns.clearPort(2);\\n      await ns.clearPort(3);\\n      await ns.clearPort(4);\\n      ns.exit();\\n    }\\n\\n  }\\n}\\n\\nfunction AddAttr(element, attrList) {\\n  for (var i in attrList) {\\n    element.setAttribute(attrList[i][0], attrList[i][1])\\n  }\\n}\\n\\nfunction KillChildren(element) {\\n  const children = element.children\\n  for (var line of children) {\\n    line.remove()\\n  }\\n}\\n\\nfunction CreateText(text, x, y, parent, doc, textSize) {\\n  var textElm = doc.createElementNS('http://www.w3.org/2000/svg', 'text')\\n  AddAttr(textElm, [\\n    ['x', String(x)],\\n    ['y', String(y)],\\n    ['fill', 'lightgrey'],\\n    ['font-size', String(textSize)],\\n    ['font-family', 'sans-serif'],\\n    ['stroke', 'black'],\\n    ['stroke-width', '0'],\\n  ])\\n  textElm.innerHTML = text\\n  parent.appendChild(textElm)\\n  return textElm\\n}\\n\\nfunction HighlightText(bg, text, parent) {\\n  var textBox = text.getBBox()\\n\\n  AddAttr(bg, [\\n    ['x', String(textBox.x)],\\n    ['y', String(textBox.y)],\\n    ['width', String(textBox.width)],\\n    ['height', String(textBox.height)],\\n    ['fill', 'black'],\\n    ['opacity', '0.0'],\\n  ])\\n  parent.insertBefore(bg, text)\\n  \\n}\",\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c5ff3af9-22ea-4485-bcb0-340c7d4edf17\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///31dd806c-2082-4267-8d00-3f6e0912e3ae\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/LogDisplay.js\",\"url\":\"blob:file:///619cdc0d-7a94-45f1-9372-ddcc30388e81\",\"moduleSequenceNumber\":392},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a5e478f2-ed40-455b-a899-584580a39f20\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/ObjectDisplay.js\",\"url\":\"blob:file:///7f81078a-9696-4962-be88-bedabc6702f0\",\"moduleSequenceNumber\":391},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///eee62cf1-5f2a-45f4-93b1-f1a45ebc0e60\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Tabs.js\",\"url\":\"blob:file:///651b6e90-23f8-4106-a667-6952f042e828\",\"moduleSequenceNumber\":418},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///a343cc58-6579-48b0-a37c-a542fa959161\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/JsonDisplay.js\",\"url\":\"blob:file:///73a1ae22-daf1-4bd0-a966-d1a39abae16e\",\"moduleSequenceNumber\":421},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///0535cc31-dc23-4048-9627-65d0e91c0ad6\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/Button.js\",\"url\":\"blob:file:///0cbd800a-7fdf-4abb-a3bb-2e10346972c1\",\"moduleSequenceNumber\":403},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///dee801ca-36e1-460e-954c-5e953f85b3aa\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/concerns/useDraggableWin.js\",\"url\":\"blob:file:///cd2b96ec-1f35-4ff0-ab0c-2e56aa0ba4da\",\"moduleSequenceNumber\":409},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///08137f5e-939c-4b04-a87d-8074ce8c4c21\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///767e618d-6de3-4c5c-8af5-a4297a1c9548\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/Win.js\",\"url\":\"blob:file:///c7f5bf2e-b3ee-419d-a09c-10e9511a1021\",\"moduleSequenceNumber\":404},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///82a4dd0b-8e06-43f4-b74a-be78c7eb761c\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTrayGroup.js\",\"url\":\"blob:file:///7d9a1a4b-1865-4b68-9ebd-505080090451\",\"moduleSequenceNumber\":428},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///bd1ba29f-bd67-4c1e-8c41-1e668452eaba\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///6c70d256-1cad-44c0-927e-15740a070447\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppTray.js\",\"url\":\"blob:file:///551c52a3-839f-4435-b131-d23c0fc80f42\",\"moduleSequenceNumber\":417},{\"filename\":\"/bitpacks/bb-vue/components/internal/_resources.js\",\"url\":\"blob:file:///e11273ea-1159-41ec-b5cb-3a759541a4a1\",\"moduleSequenceNumber\":408},{\"filename\":\"/bitpacks/bb-vue/components/internal/WinManager.js\",\"url\":\"blob:file:///a44f3617-d561-4c11-8f7b-7600b730f345\",\"moduleSequenceNumber\":419},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///3f41be19-7eb9-4a84-a631-7ba834aab36a\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/CssManager.js\",\"url\":\"blob:file:///3eb775df-4821-4974-9887-b9ffd8b48798\",\"moduleSequenceNumber\":397},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///4aa1b57b-94cc-4340-bdf0-6d445859cc14\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ConsumerRoot.js\",\"url\":\"blob:file:///01cc548e-1cda-4571-9813-9cade3a666e0\",\"moduleSequenceNumber\":402},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///260c7fc1-11bb-4081-8611-0946558fa2fb\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.Styles.js\",\"url\":\"blob:file:///33205926-4f8f-4b91-b977-6319683985a1\",\"moduleSequenceNumber\":395},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///50857060-3729-471e-b7ad-3400107c21ee\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/AppRoot.js\",\"url\":\"blob:file:///94995578-3e59-4adc-95eb-9d481d9ae83c\",\"moduleSequenceNumber\":425},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///051d651f-a947-425e-ba6e-4f1c4f6fd761\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/components/internal/ScriptX.js\",\"url\":\"blob:file:///ccfd0a3a-3371-4be6-ac67-59e8c2ee5d70\",\"moduleSequenceNumber\":400},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///abc52186-141f-44e6-889e-4676681db0d7\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/VueLoader.js\",\"url\":\"blob:file:///7a5e5497-ed3c-4cdd-ac0b-3902159ba14d\",\"moduleSequenceNumber\":416},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///9becdfd0-cc1a-45dd-b3ea-e4d30a2b0b62\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/SassLoader.js\",\"url\":\"blob:file:///b80790eb-57cb-4b73-b633-34abc8d7fde6\",\"moduleSequenceNumber\":413},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c494e1a4-8ccc-4651-8d4e-049a2a0de2e1\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/MittLoader.js\",\"url\":\"blob:file:///19545e5f-21ca-4144-8ba7-62e00c18e227\",\"moduleSequenceNumber\":424},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///95ec3a9a-701f-461b-85f9-c60dc2db7ba4\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///e59b4a3e-795d-409a-890e-29cae62037a4\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/ComponentManager.js\",\"url\":\"blob:file:///41c3765b-1242-413d-aab1-76bef13e4be2\",\"moduleSequenceNumber\":398},{\"filename\":\"/bitpacks/bb-vue/lib.js\",\"url\":\"blob:file:///c1d00069-017a-4538-aa6a-151c14b4327c\",\"moduleSequenceNumber\":411},{\"filename\":\"/bitpacks/bb-vue/AppFactory.js\",\"url\":\"blob:file:///73af457d-8d70-453a-8d55-b16b2f9ffca3\",\"moduleSequenceNumber\":414},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite.js\",\"url\":\"blob:file:///a92c93e8-4861-4435-88ac-7665a19166e9\",\"moduleSequenceNumber\":9778},{\"filename\":\"/bitpacks/super-stonks/wallstreet-lite-data.js\",\"url\":\"blob:file:///080fce7a-d550-419a-9e1c-85a21fcb6fbe\",\"moduleSequenceNumber\":9779}],\"dependents\":[],\"ramUsage\":10.65,\"server\":\"home\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.width\",\"cost\":0.4},{\"type\":\"fn\",\"name\":\"stanek.height\",\"cost\":0.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var current_min_ram, new_purchased_server,\\n        current_purchasing_ram = 32768,\\n        current_needed_money = ns.getPurchasedServerCost(current_purchasing_ram),\\n        existing_servers = ns.getPurchasedServers(),\\n        server_limit = ns.getPurchasedServerLimit(),\\n        // server_limit = 10,\\n        ram_limit = ns.getPurchasedServerMaxRam();\\n    const weaken_server = ns.args[0] ? ns.args[0] : 'phantasy';\\n\\n    ns.tprint('buy_server.js running!');\\n\\n    await update_grind_server_txt(ns, existing_servers);\\n\\n    while (true) {\\n        await ns.sleep(60000);  // Sleep first to allow machine to boot\\n\\n        ns.print('Current purchasing RAM: ', current_purchasing_ram)\\n\\n        if (ns.getPlayer().money * 0.25 > current_needed_money) {\\n            if (existing_servers.length >= server_limit) {\\n                current_min_ram = await delete_small_server(ns, existing_servers);\\n                existing_servers = ns.getPurchasedServers();\\n                await update_grind_server_txt(ns, existing_servers);\\n                if (current_min_ram == current_purchasing_ram) {\\n                    current_purchasing_ram *= 2;\\n                } if (current_purchasing_ram > ram_limit) {\\n                    current_purchasing_ram = ram_limit;\\n                } if (current_min_ram == ram_limit) {\\n                    ns.toast('buy_server.js has purchased all available servers. Now exiting...')\\n                    ns.exit()\\n                }\\n            }\\n            new_purchased_server = ns.purchaseServer('grinding-server', current_purchasing_ram);\\n            current_needed_money = ns.getPurchasedServerCost(current_purchasing_ram);\\n            existing_servers = ns.getPurchasedServers();\\n            await update_grind_server_txt(ns, existing_servers);\\n            ns.run('/scripts/transport_files.js', 1, new_purchased_server);\\n            ns.toast('Purchased new server ' + new_purchased_server);\\n            await ns.sleep(5000);  // Make sure that files were transported\\n            if (ns.hasRootAccess(weaken_server)) {\\n                ns.run('/scripts/grind_on_my_servers.script', 1, weaken_server);\\n            } else {\\n                ns.run('/scripts/grind_on_my_servers.script', 1, 'joesguns');\\n            }\\n        }\\n    }\\n}\\n\\nasync function delete_small_server(ns, servers) {\\n    var min_ram = -1,\\n        min_index = -1;\\n\\n    for (var i = 0; i < servers.length; i++) {\\n        if (ns.getServerMaxRam(servers[i]) < min_ram || min_ram == -1) {\\n            min_ram = ns.getServerMaxRam(servers[i]);\\n            min_index = i;\\n        }\\n    }\\n\\n    await ns.killall(servers[min_index]);\\n    await ns.deleteServer(servers[min_index]);\\n    await ns.toast('Deleted ' + servers[min_index]);\\n    return min_ram;\\n}\\n\\nasync function update_grind_server_txt(ns, servers) {\\n    await ns.print('Received servers ', servers, ' to update');\\n    await ns.write('/grind_servers.txt', servers.join('\\\\r\\\\n'), 'w');\\n}\",\"filename\":\"/scripts/buy_server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/buy_server.js\",\"url\":\"blob:file:///a014dbc6-f657-4f52-a03b-f6d17f9d19b7\",\"moduleSequenceNumber\":1004}],\"dependents\":[],\"ramUsage\":10.8,\"server\":\"home\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const list_of_servers = ns.read('/grind_servers.txt').split('\\\\r\\\\n').concat(ns.read('/all_servers_names.txt').split('\\\\r\\\\n'));\\n\\n    for (let i = 0; i < list_of_servers.length; i++) {\\n        let s = list_of_servers[i];\\n        if (s == '' || s == ' ' || s == '!!!' || !s) {\\n            ns.tprint(s, ' is skipped because it is not a server');\\n            continue;\\n        } else {\\n            await ns.scp('/scripts/hack.js', s);\\n            await ns.scp('/scripts/weaken-exp-grind.js', s);\\n            await ns.scp('/scripts/simple_share.js', s);\\n            await ns.scp('/scripts/weaken_and_grow_only.js', s);\\n            ns.print('Tranported files to ', s);\\n        }\\n    }\\n\\n    ns.tprint('Done.')\\n}\",\"filename\":\"/scripts/transport_files.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/transport_files.js\",\"url\":\"blob:file:///f94cdd97-b9a4-4c9e-89ba-fd257341c205\",\"moduleSequenceNumber\":10881}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/simple_share.js\",\"url\":\"blob:file:///d42012ac-9a67-40f2-859e-77a92aaa68db\",\"moduleSequenceNumber\":711}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"write('/ someFolder/hello.txt', 'Hello world!');\",\"filename\":\"/scripts/test.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const GANGSTER_NAMES =\\r\\n\\t[\\r\\n\\t\\t'Ronnie',\\r\\n\\t\\t'Tony',\\r\\n\\t\\t'Angelo',\\r\\n\\t\\t'Guiseppe',\\r\\n\\t\\t'Bert',\\r\\n\\t\\t'Ernie',\\r\\n\\t\\t'Reggie',\\r\\n\\t\\t'Mario',\\r\\n\\t\\t'Joey',\\r\\n\\t\\t'Tommy',\\r\\n\\t\\t'Giovani',\\r\\n\\t\\t'Lenny'\\r\\n\\t];\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tns.disableLog('ALL');\\r\\n\\r\\n\\tif (!ns.gang.inGang()) {\\r\\n\\t\\tns.tprint('ERROR: Not in a gang, exiting (todo: create or join a gang?');\\r\\n\\t\\tns.print('ERROR: Not in a gang, exiting (todo: create or join a gang?');\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\tns.tail();\\r\\n\\r\\n\\r\\n\\tlet otherGangsInfoPrevCycle = undefined;\\r\\n\\tlet nextTick = undefined;\\r\\n\\tlet tasks = new Array();\\r\\n\\tlet lastAscension = Date.now() - 60 * 60 * 1000;\\r\\n\\r\\n\\tlet gangInfo = ns.gang.getGangInformation();\\r\\n\\tlet members = ns.gang.getMemberNames();\\r\\n\\r\\n\\tAssignTasks(ns, members, gangInfo);\\r\\n\\r\\n\\twhile (true) {\\r\\n\\t\\t// *** Get current gang member names and gangInfo ***\\r\\n\\t\\tmembers = ns.gang.getMemberNames();\\r\\n\\t\\tgangInfo = ns.gang.getGangInformation();\\r\\n\\t\\t//GangReport(ns, gangInfo);\\r\\n\\r\\n\\t\\t// *** Recruitment ***\\r\\n\\t\\tawait RecruitMembers(ns);\\r\\n\\t\\t//ns.print('');\\r\\n\\r\\n\\t\\t// *** Automatic ascension ***\\r\\n\\t\\t//let as = GetAscensionInfo(ns);\\r\\n\\t\\t//if (Date.now() - lastAscension > 60 * 1000) {\\r\\n\\t\\tfor (let member of members) {\\r\\n\\t\\t\\t//if (entry.gain > 0.25) {\\r\\n\\t\\t\\tAscendGangMember(ns, member);\\r\\n\\t\\t\\t//lastAscension = Date.now();\\r\\n\\t\\t\\t//break;\\r\\n\\t\\t\\t//}\\r\\n\\t\\t}\\r\\n\\t\\t//}\\r\\n\\t\\t//ns.print('');\\r\\n\\r\\n\\t\\t// *** Equipement stuff ***\\r\\n\\t\\t//if (ns.getServerMoneyAvailable('home') > 1_000_000_000) {\\r\\n\\t\\t\\t//UpgradeEquipement(ns);\\r\\n\\t\\t\\t//ns.print('');\\r\\n\\t\\t//}\\r\\n\\r\\n\\t\\t// *** Territory warfaire ***\\r\\n\\r\\n\\t\\t// Detect new tick\\r\\n\\t\\tlet otherGangsInfo = ns.gang.getOtherGangInformation();\\r\\n\\t\\tlet newTick = false;\\r\\n\\t\\tfor (let i = 0; i < Object.keys(otherGangsInfo).length; i++) {\\r\\n\\t\\t\\tconst gangName = Object.keys(otherGangsInfo)[i];\\r\\n\\t\\t\\tif (gangName == gangInfo.faction) continue;\\r\\n\\r\\n\\t\\t\\tlet gi = Object.values(otherGangsInfo)[i];\\r\\n\\t\\t\\tlet ogi = otherGangsInfoPrevCycle ? Object.values(otherGangsInfoPrevCycle)[i] : gi;\\r\\n\\r\\n\\t\\t\\tlet powerChanged = gi.power != ogi.power;\\r\\n\\t\\t\\tlet territoryChanged = gi.territory != ogi.territory;\\r\\n\\t\\t\\tlet changed = powerChanged || territoryChanged;\\r\\n\\r\\n\\t\\t\\tif (changed) {\\r\\n\\t\\t\\t\\tnewTick = true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//ns.print(gangName + ' power: ' + gi.power + ' territory: ' + gi.territory + ' changed?: ' + changed);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If we're in a new tick, take note of when next one is going to happen\\r\\n\\t\\tif (newTick) {\\r\\n\\t\\t\\tns.print('WARN: -- NEW TICK DETECTED --');\\r\\n\\t\\t\\tif (nextTick != undefined) {\\r\\n\\t\\t\\t\\tAssignTasks(ns, members, gangInfo);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnextTick = Date.now() + 19000;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Update our cache of otherGangsInfo\\r\\n\\t\\totherGangsInfoPrevCycle = otherGangsInfo;\\r\\n\\r\\n\\t\\t// Assign members to territory warfare\\r\\n\\t\\tif (nextTick != undefined && Date.now() + 500 > nextTick) {\\r\\n\\t\\t\\tns.print('WARN: Assigning all members to territory warfare');\\r\\n\\r\\n\\t\\t\\ttasks = [];\\r\\n\\t\\t\\tfor (let member of members) {\\r\\n\\t\\t\\t\\tlet task = ns.gang.getMemberInformation(member).task;\\r\\n\\t\\t\\t\\tlet entry = new Object();\\r\\n\\t\\t\\t\\tentry.member = member;\\r\\n\\t\\t\\t\\tentry.task = task;\\r\\n\\t\\t\\t\\ttasks.push(entry);\\r\\n\\t\\t\\t\\tns.gang.setMemberTask(member, 'Territory Warfare');\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tns.print('');\\r\\n\\t\\tns.print('LOOP END');\\r\\n\\t\\tns.print('');\\r\\n\\t\\tawait ns.sleep(1000);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction AssignTasks(ns, members, gangInfo) {\\r\\n\\tns.print('WARN: Assigning best tasks');\\r\\n\\tlet rendu = 0;\\r\\n\\tlet half = Math.ceil(members.length / 2);\\r\\n\\tfor (let member of members) {\\r\\n\\t\\tlet forMoney = rendu++ < half;\\r\\n\\t\\t//if (members.length < 12) forMoney = false;\\r\\n\\t\\tforMoney= false;\\r\\n\\r\\n\\t\\tlet newTask = FindBestTask(ns, gangInfo, member, forMoney);\\r\\n\\r\\n\\t\\t//if (newTask == 'Mug People')\\r\\n\\t\\t//\\tnewTask = 'Train Combat';\\r\\n\\r\\n\\t\\tif (gangInfo.wantedPenalty < 0.90 && forMoney == false && gangInfo.wantedLevel > 20 && gangInfo.respect > 1000)\\r\\n\\t\\t\\tnewTask = 'Vigilante Justice';\\r\\n\\r\\n\\t\\tns.gang.setMemberTask(member, newTask);\\r\\n\\t\\tns.print('WARN: Assigning task ' + newTask + ' to ' + member + ' forMoney: ' + forMoney);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\nasync function RecruitMembers(ns) {\\r\\n\\tlet members = ns.gang.getMemberNames();\\r\\n\\r\\n\\twhile (ns.gang.canRecruitMember()) {\\r\\n\\t\\tns.print('INFO: We can currently recruit a new member!');\\r\\n\\r\\n\\t\\tlet newMember = undefined;\\r\\n\\t\\tfor (const candidate of GANGSTER_NAMES) {\\r\\n\\t\\t\\tlet alreadyExists = false;\\r\\n\\t\\t\\tfor (const member of members) {\\r\\n\\t\\t\\t\\tif (candidate == member) {\\r\\n\\t\\t\\t\\t\\talreadyExists = true;\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (alreadyExists) {\\r\\n\\t\\t\\t\\tawait ns.sleep(0);\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tnewMember = candidate;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (newMember == undefined) {\\r\\n\\t\\t\\tns.print('ERROR: Could not find a new member name?! Should NOT happen.');\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tns.gang.recruitMember(newMember);\\r\\n\\t\\t\\tns.print('SUCCESS: Recruited a new gang member called ' + newMember);\\r\\n\\t\\t\\tmembers.push(newMember);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tawait ns.sleep(10);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\nfunction GetAscensionInfo(ns) {\\r\\n\\t// *** Get current gang member names ***\\r\\n\\tconst members = ns.gang.getMemberNames();\\r\\n\\tconst ret = [];\\r\\n\\r\\n\\tfor (let member of members) {\\r\\n\\t\\tlet gain = 0;\\r\\n\\r\\n\\t\\tconst as = ns.gang.getAscensionResult(member);\\r\\n\\t\\tif (as != undefined) {\\r\\n\\t\\t\\tgain = (as.str + as.def + as.dex + as.agi - 4) / 4;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tns.print((member + ' ascension gain ').padEnd(25) + ' =>   ' + Math.round((gain * 10000)) / 100 + '%');\\r\\n\\t\\tret.push({ member: member, gain: gain });\\r\\n\\t}\\r\\n\\r\\n\\treturn ret.sort((a, b) => b - a);\\r\\n}\\r\\n\\r\\n\\r\\nfunction AscendGangMember(ns, member) {\\r\\n\\tDerp(ns, member);\\r\\n\\r\\n\\t// const as = ns.gang.getAscensionResult(member);\\r\\n\\t// if (as == undefined) {\\r\\n\\t// \\t//ns.print((member + ' ascension gain ').padEnd(25) + ' =>   0%');\\r\\n\\t// \\treturn;\\r\\n\\t// }\\r\\n\\t// const gain = (as.str + as.def + as.dex + as.agi - 4) / 4;\\r\\n\\t// //ns.print((member + ' ascension gain ').padEnd(25) + ' =>   ' + Math.round((gain * 10000)) / 100 + '%');\\r\\n\\t// if (gain > 0.25) {\\r\\n\\t// \\tns.print('INFO: Ascending ' + member);\\r\\n\\t// \\tns.gang.ascendMember(member);\\r\\n\\t// }\\r\\n}\\r\\n\\r\\n\\r\\nfunction Derp(ns, member) {\\r\\n\\tconst isHacking = false;\\r\\n\\tconst ascensionResult = ns.gang.getAscensionResult(member);\\r\\n\\tif (ascensionResult == undefined) return;\\r\\n\\r\\n\\tconst info = ns.gang.getMemberInformation(member);\\r\\n\\r\\n\\tlet threshold = 1.1;\\r\\n\\tif (isHacking) {\\r\\n\\t\\tthreshold = Math.max(info.hack_asc_mult) < 4 ? 1.6 : 1.1;\\r\\n\\t} else {\\r\\n\\t\\t//threshold = CalculateAscendTreshold(ns, member); \\r\\n\\t\\tthreshold = Math.max(info.agi_asc_mult, info.str_asc_mult, info.dex_asc_mult, info.def_asc_mult) < 4 ? 1.6 : 1.1;\\r\\n\\t\\tns.print(member + ' treshold: ' + threshold + ' asc: ' + ascensionResult.str + ' ' + ascensionResult.def + ' ' + ascensionResult.dex + ' ' + ascensionResult.agi);\\r\\n\\t}\\r\\n\\r\\n\\tif (isHacking && ascensionResult.hack >= threshold || !isHacking && (ascensionResult.agi >= threshold || ascensionResult.str >= threshold || ascensionResult.def >= threshold || ascensionResult.dex >= threshold)) {\\r\\n\\t\\tns.gang.ascendMember(member);\\r\\n\\t\\tif (isHacking) {\\r\\n\\t\\t\\tns.gang.setMemberTask(member, HackingTasks.TRAIN_HACKING);\\r\\n\\t\\t}\\r\\n\\t\\tns.print(`Ascending ${member}!`);\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction CalculateAscendTreshold(ns, member) {\\r\\n\\tlet ascendMulti = 1.0591\\r\\n\\tif (ns.gang.getMemberInformation(member)['str_asc_mult'] < 8.153) {\\r\\n\\t\\tlet mult = ns.gang.getMemberInformation(member)['str_asc_mult'];\\r\\n\\t\\tswitch (mult) {\\r\\n\\t\\t\\tcase (mult < 1.632):\\r\\n\\t\\t\\t\\tascendMulti = 1.6326;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 2.336):\\r\\n\\t\\t\\t\\tascendMulti = 1.4315;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 2.999):\\r\\n\\t\\t\\t\\tascendMulti = 1.284;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 3.363):\\r\\n\\t\\t\\t\\tascendMulti = 1.2125;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 4.253):\\r\\n\\t\\t\\t\\tascendMulti = 1.1698;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 4.86):\\r\\n\\t\\t\\t\\tascendMulti = 1.1428;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 5.455):\\r\\n\\t\\t\\t\\tascendMulti = 1.1225;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 5.977):\\r\\n\\t\\t\\t\\tascendMulti = 1.0957;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 6.496):\\r\\n\\t\\t\\t\\tascendMulti = 1.0869;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 7.008):\\r\\n\\t\\t\\t\\tascendMulti = 1.0789;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 7.519):\\r\\n\\t\\t\\t\\tascendMulti = 1.073;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 8.025):\\r\\n\\t\\t\\t\\tascendMulti = 1.0673;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase (mult < 8.513):\\r\\n\\t\\t\\t\\tascendMulti = 1.0631;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ascendMulti;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\nfunction UpgradeEquipement(ns) {\\r\\n\\tlet budget = ns.getPlayer().money / 2;\\r\\n\\r\\n\\tlet allGear = ns.gang.getEquipmentNames();\\r\\n\\tallGear = allGear.sort((a, b) => ns.gang.getEquipmentCost(a) - ns.gang.getEquipmentCost(b));\\r\\n\\r\\n\\t// *** Get current gang member names ***\\r\\n\\tconst members = ns.gang.getMemberNames();\\r\\n\\r\\n\\tfor (let gear of allGear) {\\r\\n\\t\\t// Get info on the upgrade\\r\\n\\t\\tlet type = ns.gang.getEquipmentType(gear);\\r\\n\\t\\tif (type != 'Weapon' && type != 'Armor' && type != 'Vehicle')\\r\\n\\t\\t\\tcontinue; // not supported for now\\r\\n\\r\\n\\t\\t// Find which member(s) do not have that upgrade installed\\r\\n\\t\\tconst missing = new Array();\\r\\n\\t\\tfor (let member of members) {\\r\\n\\t\\t\\tconst memberInfo = ns.gang.getMemberInformation(member); // Get information about a specific gang member.\\r\\n\\t\\t\\tif (!memberInfo.upgrades.includes(gear)) {\\r\\n\\t\\t\\t\\tmissing.push(member);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tlet cost = ns.gang.getEquipmentCost(gear);\\r\\n\\r\\n\\t\\tfor (let member of missing) {\\r\\n\\t\\t\\tif (cost < budget) {\\r\\n\\t\\t\\t\\tns.print('Buying ' + gear + ' for ' + member);\\r\\n\\t\\t\\t\\tns.gang.purchaseEquipment(member, gear);\\r\\n\\t\\t\\t\\tbudget -= cost;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Report\\r\\n\\t\\t//ns.print(gear.padEnd(25) + ' : ' + type.toString().padEnd(25) + ' ' + ns.nFormat(cost, \\\"$0.000a\\\").padStart(25) + '   MISSING: ' + missing);\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\nfunction GangReport(ns, memberInfo) {\\r\\n\\tns.print('');\\r\\n\\tns.print('Faction                :  ' + memberInfo.faction);\\r\\n\\t//ns.print('Gang type              :  ' + (memberInfo.isHacking ? 'Hacking' : 'Combat'));\\r\\n\\t//ns.print('Money gain rate        :  ' + memberInfo.moneyGainRate);\\r\\n\\tns.print('Power                  :  ' + memberInfo.power);\\r\\n\\tns.print('Respect                :  ' + memberInfo.respect);\\r\\n\\t//ns.print('Respect gain rate      :  ' + memberInfo.respectGainRate);\\r\\n\\tns.print('Territory              :  ' + memberInfo.territory);\\r\\n\\t//ns.print('Territory clash chance :  ' + memberInfo.territoryClashChance);\\r\\n\\t//ns.print('Territory war engaged  :  ' + memberInfo.territoryWarfareEngaged);\\r\\n\\tns.print('Wanted level           :  ' + memberInfo.wantedLevel);\\r\\n\\tns.print('Wanted level gain rate :  ' + memberInfo.wantedLevelGainRate);\\r\\n\\tns.print('Wanted penalty         :  ' + memberInfo.wantedPenalty);\\r\\n\\tns.print('');\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/** @param {NS} ns **/\\r\\nfunction FindBestTask(ns, gangInfo, member, prioritizeMoney) {\\r\\n\\tlet mi = ns.gang.getMemberInformation(member);\\r\\n\\tlet deets = new Array();\\r\\n\\r\\n\\tconst ALLOWED_TASKS = [\\r\\n\\t\\t'Mug People',\\r\\n\\t\\t'Strongarm Civilians',\\r\\n\\t\\t'Traffick Illegal Arms',\\r\\n\\t\\t'Human Trafficking',\\r\\n\\t\\t'Terrorism'\\r\\n\\t];\\r\\n\\r\\n\\tlet canGainRespect = false;\\r\\n\\tlet canGainMoney = false;\\r\\n\\r\\n\\tfor (let task of ALLOWED_TASKS) {\\r\\n\\t\\tlet stats = ns.gang.getTaskStats(task);\\r\\n\\t\\tlet money = ns.formulas.gang.moneyGain(gangInfo, mi, stats);\\r\\n\\t\\tlet wanted = ns.formulas.gang.wantedLevelGain(gangInfo, mi, stats);\\r\\n\\t\\tlet respect = ns.formulas.gang.respectGain(gangInfo, mi, stats);\\r\\n\\r\\n\\t\\tlet entry = new Object();\\r\\n\\t\\tentry.task = task;\\r\\n\\t\\tentry.money = money;\\r\\n\\t\\tentry.wanted = wanted;\\r\\n\\t\\tentry.respect = respect;\\r\\n\\t\\tentry.stats = stats;\\r\\n\\t\\tdeets.push(entry);\\r\\n\\r\\n\\t\\tif (respect > 0) canGainRespect = true;\\r\\n\\t\\tif (money > 0) canGainMoney = true;\\r\\n\\t}\\r\\n\\r\\n\\tif (prioritizeMoney)\\r\\n\\t\\tdeets = deets.sort((a, b) => b.money - a.money);\\r\\n\\telse\\r\\n\\t\\tdeets = deets.sort((a, b) => b.respect - a.respect);\\r\\n\\r\\n\\r\\n\\t// If our wanted is too high, go vigilente\\r\\n\\t// if (gangInfo.wantedPenalty < 0.95 && gangInfo.respect > 1000) {\\r\\n\\t// \\treturn 'Vigilante Justice';\\r\\n\\t// }\\r\\n\\t// else \\r\\n\\tif (mi.str < 200) {\\r\\n\\t\\treturn 'Train Combat';\\r\\n\\t}\\r\\n\\t// Prioritize money\\r\\n\\telse if (canGainMoney && prioritizeMoney) {\\r\\n\\t\\treturn deets[0].task;\\r\\n\\t}\\r\\n\\t// Prioritize respect\\r\\n\\telse if (canGainRespect && !prioritizeMoney) {\\r\\n\\t\\treturn deets[0].task;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\treturn 'Train Combat';\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/gang_todo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":31.2,\"server\":\"home\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentType\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* \\nThis script manages ALL gang members. It updates once every minute\\nand covers tasks like task assignment, ascension, equipment purchasing, and member recruitment.\\n\\nUsage: \\n    run gangs_my.js [--for-rep] [--help]\\n--for-rep   Farms reputation instead of mone\\n--help      Displays this manual\\n*/\\n\\nconst avg = (...args) => args.reduce((a, b) => a + b) / args.length;\\nconst isNoob = m => avg(m.agi, m.def, m.dex, m.str, m.hack) <= 75;\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint('gangs_my.js running!');\\n    ns.disableLog('ALL');\\n    ns.tail();\\n\\n    const args = ns.flags([\\n        ['for-rep', false],\\n        ['help', false]\\n    ]);\\n\\n    if (args['help']) {\\n        ns.tprint('\\\\nUsage:\\\\n\\\\trun gangs_my.js [--for-rep] [--help]\\\\n--for-rep\\\\tFarms reputation instead of money\\\\n--help\\\\t\\\\tDisplays this manual.');\\n        ns.exit();\\n    }\\n\\n    const forReputation = args['for-rep'];\\n\\n    // Load gang info\\n    var gangInfo = ns.gang.getGangInformation(),\\n        gangMembers = ns.gang.getMemberNames(),\\n        combatMembers = [],\\n        hackingMembers = [];\\n\\n    if (!gangInfo.isHacking) {\\n        ns.tprint('ERROR: This script only works on hacking gangs, now exiting... Sorry!');\\n        ns.exit();\\n    } if (!ns.gang.inGang()) {\\n        ns.tprint('ERROR: You are not in a gang! Exiting...');\\n        ns.exit();\\n    }\\n\\n    ns.print('Loading gang member information');\\n    gangMembers.forEach(m => {\\n        let memberInfo = ns.gang.getMemberInformation(m);\\n        if ((avg(memberInfo.agi, memberInfo.def, memberInfo.dex, memberInfo.str) > memberInfo.hack) ||\\n            (isNoob(memberInfo) && combatMembers.length < 2)) {\\n            combatMembers.push(m);\\n            ns.print(`${m}: Is a combat member`);\\n        } else {\\n            hackingMembers.push(m);\\n            ns.print(`${m}: Is a hacking member`);\\n        }\\n    })\\n\\n    while (true) {\\n        ns.print('Starting new loop')\\n\\n        gangMembers = ns.gang.getMemberNames();\\n\\n        if (ns.gang.canRecruitMember()) {\\n            let newName = getName();\\n            while (gangMembers.includes(newName)) {\\n                newName = getName();\\n            }\\n            ns.gang.recruitMember(newName);\\n            ns.print(`Member recruited: ${newName}`);\\n            if (combatMembers.length < 2) {\\n                combatMembers.push(newName);\\n            }\\n        }\\n\\n        gangMembers.forEach(m => {\\n            let ascended = false;\\n            let ascResult = ns.gang.getAscensionResult(m),\\n                currentMult = ns.gang.getMemberInformation(m),\\n                memberType = hackingMembers.includes(m) ? 'hack' : 'combat';\\n            if (ascResult != undefined) {  // Can ascend\\n                if (\\n                    (combatMembers.includes(m) &&\\n                        Math.min(currentMult.agi_asc_mult * 2, currentMult.agi_asc_mult + 15) <= currentMult.agi_asc_mult * ascResult.agi &&\\n                        Math.min(currentMult.def_asc_mult * 2, currentMult.def_asc_mult + 15) <= currentMult.def_asc_mult * ascResult.def &&\\n                        Math.min(currentMult.dex_asc_mult * 2, currentMult.dex_asc_mult + 15) <= currentMult.dex_asc_mult * ascResult.dex &&\\n                        Math.min(currentMult.str_asc_mult * 2, currentMult.str_asc_mult + 15) <= currentMult.str_asc_mult * ascResult.str) ||\\n                    (hackingMembers.includes(m) &&\\n                        Math.min(currentMult.hack_asc_mult * 2, currentMult.hack_asc_mult + 15) <= currentMult.hack_asc_mult * ascResult.hack)) {  // Good enough to ascend\\n                    ns.gang.ascendMember(m);\\n                    ascended = true;\\n                    ns.print(`Ascended gang member ${m}.`);\\n                }\\n            } if (!ascended) {\\n                assign(ns, m, memberType, forReputation);\\n            }\\n            buyEquipment(ns, m, memberType);\\n        });  // End of individual member assignment\\n\\n        if (canFight(ns)) {\\n            if (ns.gang.getGangInformation().territoryWarfareEngaged) {\\n                ns.gang.setTerritoryWarfare(true);\\n                ns.print('Territory warfare enabled');\\n            }\\n        } else {\\n            ns.gang.setTerritoryWarfare(false);\\n        }\\n\\n        await ns.sleep(60000);\\n    }\\n}\\n\\nfunction getName() {  // StackOverflow yehh\\n    const nameLength = 15;\\n    var result = '';\\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 -=_+,./<>?';\\n    var charactersLength = characters.length;\\n    for (var i = 0; i < nameLength; i++) {\\n        result += characters.charAt(Math.floor(Math.random() *\\n            charactersLength));\\n    }\\n    return result;\\n}\\n\\nfunction assign(ns, member, type, forRep = false) {\\n    /* Type: \\\"hack\\\" or \\\"combat\\\" */\\n    const repJobs = [\\n        'DDoS Attacks',\\n        'Plant Virus',\\n        'Cyberterrorism'\\n    ], moneyJobs = [\\n        'Ransomware',\\n        'Phishing',\\n        'Identity Theft',\\n        'Fraud & Counterfeiting',\\n        'Money Laundering'\\n    ];\\n    const hackHelper = 'Ethical Hacking',\\n        combatHelper = 'Vigilante Justice',\\n        hackTrain = 'Train Hacking',\\n        combatTrain = 'Train Combat',\\n        territoryWarfare = 'Territory Warfare',\\n        memberInfo = ns.gang.getMemberInformation(member),\\n        currentTask = memberInfo.task,\\n        hackingMember = (type == 'hack');\\n    var decidedTask = 'Unassigned';\\n\\n    if (isNoob(memberInfo)) {\\n        decidedTask = hackingMember ? hackTrain : combatTrain;\\n    } else {\\n        if (!hackingMember) {  // Is a combat member\\n            if (wantedLevelHelpNeeded(ns)) {\\n                decidedTask = combatHelper;\\n            } else {  // Wanted level doesn't need help\\n                if (canFight(ns)) {\\n                    decidedTask = territoryWarfare;\\n                } else {\\n                    decidedTask = combatTrain;\\n                }\\n            }\\n        } else {  // Is a hacking member\\n            if (wantedLevelHelpNeeded(ns)) {\\n                decidedTask = hackHelper;\\n            } else {  // Wanted level says they're fine\\n                let jobsToTryOut = forRep ? repJobs : moneyJobs;\\n                for (let i = jobsToTryOut.length - 1; i > -1; i--) {  // Find the hardest possible task to assign\\n                    if (!tooDifficult(ns, jobsToTryOut[i], member)) {\\n                        decidedTask = jobsToTryOut[i];\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    if (currentTask == 'Unassigned' || (decidedTask != currentTask && decidedTask != 'Unassigned')) {\\n        ns.gang.setMemberTask(member, decidedTask);\\n        ns.print(`Assigned task ${decidedTask} to ${member}`);\\n    }\\n\\n    return decidedTask;\\n}\\n\\nfunction buyEquipment(ns, member, type) {\\n    if (ns.gang.getMemberInformation(member).upgrades.length == 0) {\\n        if (type == 'hack') {\\n            ns.gang.purchaseEquipment(member, 'NUKE Rootkit');\\n        } else {\\n            ns.gang.purchaseEquipment(member, 'Baseball Bat');\\n        }\\n    }\\n}\\n\\nfunction tooDifficult(ns, taskName, member) {\\n    const taskInfo = ns.gang.getTaskStats(taskName),\\n        memberInfo = ns.gang.getMemberInformation(member);\\n    let statWeight =\\n        (taskInfo.hackWeight / 100) * memberInfo.hack +\\n        (taskInfo.strWeight / 100) * memberInfo.str +\\n        (taskInfo.defWeight / 100) * memberInfo.def +\\n        (taskInfo.dexWeight / 100) * memberInfo.dex +\\n        (taskInfo.agiWeight / 100) * memberInfo.agi +\\n        (taskInfo.chaWeight / 100) * memberInfo.cha;  // From source code\\n    return statWeight - 4 * taskInfo.difficulty <= 0 ? true : false;\\n}\\n\\nfunction wantedLevelHelpNeeded(ns) {\\n    const gangInfo = ns.gang.getGangInformation();\\n    return (gangInfo.wantedLevelGainRate > 1 && 100 * (1 - gangInfo.wantedPenalty) > 2) ||\\n        (gangInfo.wantedLevelGainRate > 5) ||\\n        (100 * (1 - gangInfo.wantedPenalty) > 5);\\n}\\n\\nfunction canFight(ns, numOfFighters) {\\n    const otherGangs = [\\n        'Slum Snakes',\\n        'Speakers for the Dead',\\n        'The Black Hand',\\n        'The Dark Army',\\n        'The Syndicate',\\n        'NiteSec',\\n        'Tetrads'\\n    ].filter(g => g != ns.gang.getGangInformation.faction);\\n    const winChance = avg(...otherGangs.map(\\n        g => ns.gang.getChanceToWinClash(g)\\n    ));\\n    return (winChance > 0.5);\\n}\",\"filename\":\"/scripts/gangs_my.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/gangs_my.js\",\"url\":\"blob:file:///bbc392a3-358d-4f9c-b831-bc14881d61e9\",\"moduleSequenceNumber\":137383}],\"dependents\":[],\"ramUsage\":29.7,\"server\":\"home\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const equipment = ns.args.join(' ');\\n    ns.tprint(`Purchasing ${equipment} for all gang members...`);\\n    ns.gang.getMemberNames().forEach(m => {\\n        ns.gang.purchaseEquipment(m, equipment)\\n    });\\n    ns.tprint('Done.');\\n}\",\"filename\":\"/scripts/gang_buy_all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/gang_buy_all.js\",\"url\":\"blob:file:///2f43156a-8309-4b5b-b069-24dae87e7419\",\"moduleSequenceNumber\":5366}],\"dependents\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const infos = [];\\n    ns.gang.getTaskNames().forEach(t => {\\n        let taskInfo = ns.gang.getTaskStats(t);\\n        infos.push([taskInfo.name, taskInfo.difficulty]);\\n    });\\n    ns.tprint(infos);\\n}\",\"filename\":\"/scripts/get_gang_tasks_info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get_gang_tasks_info.js\",\"url\":\"blob:file:///b0ec544d-d4fc-4753-b4f3-9c5a793d04a6\",\"moduleSequenceNumber\":56735}],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getTaskStats\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {}\\n\\nexport function manual(scriptName, scriptArgs) {\\n    const usageString = `\\\\nUsage:\\\\n\\\\trun ${scriptName} ${Object.keys(scriptArgs).map(s => `[--${s}]`).join(' ')}`;\\n    const argsString = `${Object.entries(scriptArgs).map(e => {\\n        let [k, v] = e;\\n        let numOfTabs = 5 - Math.ceil(k.length / 6);\\n        numOfTabs = numOfTabs > 0 ? numOfTabs : 1;\\n        let tabSplitter = '\\\\t'.repeat(numOfTabs);\\n        let stringCut = v.match(/.{1,102}/g);\\n        return `--${k}${tabSplitter}${stringCut.join('\\\\n' + tabSplitter + '\\\\t')}`;\\n    }).join('\\\\n')}`\\n    return `${usageString}\\\\n\\\\n${argsString}`;\\n}\\n\\nexport function verify(server, for_hack = false) {\\n    if (!for_hack) {\\n        return !['', ' '].includes(server);\\n    } else {\\n        return !['CSEC', 'I.I.I.I', '.', 'avmnite-02h', 'run4theh111z', '', ' ', 'darkweb'].includes(server);\\n    }\\n}\",\"filename\":\"/scripts/cynthia7979_util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tvar servers = [];\\r\\n\\r\\n\\tfunction recursiveScan(hostName) {\\r\\n\\t\\tvar scannedServers = ns.scan(hostName);\\r\\n\\t\\tvar serversToScan = [];\\r\\n\\r\\n\\t\\tfor (var i = 0; i < scannedServers.length; i++) {\\r\\n\\t\\t\\tif (servers.indexOf(scannedServers[i]) == -1) {\\r\\n\\t\\t\\t\\tservers.push(scannedServers[i]);\\r\\n\\t\\t\\t\\tserversToScan.push(scannedServers[i]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (var i = 0; i < serversToScan.length; i++) {\\r\\n\\t\\t\\trecursiveScan(serversToScan[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction gainAccess(hostName) {\\r\\n\\t\\tif (ns.fileExists('BruteSSH.exe', 'home')) {\\r\\n\\t\\t\\tns.brutessh(hostName);\\r\\n\\t\\t}\\r\\n\\t\\tif (ns.fileExists('FTPCrack.exe', 'home')) {\\r\\n\\t\\t\\tns.ftpcrack(hostName);\\r\\n\\t\\t}\\r\\n\\t\\tif (ns.fileExists('relaySMTP.exe', 'home')) {\\r\\n\\t\\t\\tns.relaysmtp(hostName);\\r\\n\\t\\t}\\r\\n\\t\\tif (ns.fileExists('HTTPWorm.exe', 'home')) {\\r\\n\\t\\t\\tns.httpworm(hostName);\\r\\n\\t\\t}\\r\\n\\t\\tif (ns.fileExists('SQLInject.exe', 'home')) {\\r\\n\\t\\t\\tns.sqlinject(hostName);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn ns.nuke(hostName);\\r\\n\\t}\\r\\n\\r\\n\\trecursiveScan('home');\\r\\n\\r\\n\\tns.tprint(servers);\\r\\n\\r\\n\\tfor (var i = 0; i < servers.length; i++) {\\r\\n\\t\\tif (gainAccess(servers[i])) {\\r\\n\\t\\t\\tawait ns.scp('hackme-V2.js', servers[i]);\\r\\n\\t\\t\\tns.exec('hackme-V2.js', servers[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\",\"filename\":\"/scripts/codeFromDiscord.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/codeFromDiscord.js\",\"url\":\"blob:file:///8270aeec-4af2-4d89-bfa1-2006192c6e49\",\"moduleSequenceNumber\":399}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///f303d663-7fde-4531-bef0-5b633c8ce7fc\",\"moduleSequenceNumber\":415}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/* Code from: Ando#6246 on Discord */\\n\\n\\n/** @param {import(\\\"../.vscode\\\").NS} ns */\\nexport async function main(ns) {\\n    const endServer = ns.args[0];\\n    const stats = GetStats(ns, endServer);\\n    var path = GetPath(ns, endServer);\\n    var pathString = \\\"home > \\\";\\n\\n    ns.tprintf(\\\"\\\\n\\\" + endServer.toUpperCase() + \\\" stats:\\\");\\n    for (var stat of Object.keys(stats)) {\\n        ns.tprintf(stat + \\\": \\\" + stats[stat].toString());\\n    }\\n\\n    for (var i = 1; i < path.length; i++) {\\n        if (i < path.length - 1) {\\n            path[i] += \\\" > \\\";\\n        }\\n        pathString += path[i];\\n    }\\n    ns.tprintf(\\\"\\\\nPath to \\\" + endServer + \\\":\\\");\\n    ns.tprintf(pathString);\\n}\\n\\n/** @param {import(\\\"../.vscode\\\").NS} ns */\\nexport function GetPath(ns, endServer) {\\n    var path = [endServer];\\n    var scan = ns.scan(endServer);\\n    var scanning = true;\\n\\n    while (scanning) {\\n        var parent = scan[0];\\n        scan = ns.scan(parent);\\n        if (parent == \\\"home\\\") {\\n            scanning = false;\\n        }\\n        path.unshift(parent);\\n    }\\n    return path;\\n}\\n\\n/** @param {import(\\\"../.vscode\\\").NS} ns */\\nexport function GetStats(ns, endServer) {\\n    var stats = {\\n        \\\"Hacking level\\\": 0,\\n        \\\"Growth\\\": 0,\\n        \\\"Min security\\\": 0,\\n        \\\"Max money\\\": 0\\n    };\\n    stats[\\\"Hacking level\\\"] = ns.getServerRequiredHackingLevel(endServer);\\n    stats[\\\"Growth\\\"] = ns.getServerGrowth(endServer);\\n    stats[\\\"Min security\\\"] = ns.getServerMinSecurityLevel(endServer);\\n    const money = ns.getServerMaxMoney(endServer);\\n    stats[\\\"Max money\\\"] = ns.nFormat(money, \\\"$0.00a\\\");\\n\\n    return stats;\\n}\",\"filename\":\"/scripts/get-server-info.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/get-server-info.js\",\"url\":\"blob:file:///36b9f20f-031a-40b8-9d73-d9abfa0f0986\",\"moduleSequenceNumber\":28065}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///82147dba-95c9-496f-8807-1a1e8910302d\",\"moduleSequenceNumber\":1774}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///bb61252a-ed35-403d-8c14-ffe1cb98750a\",\"moduleSequenceNumber\":1775}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"home\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"grinding-server-9\",\"grinding-server-10\",\"grinding-server-11\",\"grinding-server-12\",\"grinding-server-13\",\"grinding-server-14\",\"grinding-server-15\",\"grinding-server-16\",\"grinding-server-17\",\"grinding-server-18\",\"grinding-server-19\",\"grinding-server-20\",\"grinding-server-21\",\"grinding-server-22\",\"grinding-server-23\",\"grinding-server\",\"grinding-server-0\",\"grinding-server-1\",\"grinding-server-2\",\"grinding-server-3\",\"grinding-server-4\",\"grinding-server-5\",\"grinding-server-6\",\"grinding-server-7\",\"grinding-server-8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"victims.txt\",\"text\":\"neo-net\\r\\nsilver-helix\\r\\nzer0\\r\\niron-gym\\r\\nmax-hardware\\r\\nharakiri-sushi\\r\\nhong-fang-tea\\r\\nnectar-net\\r\\nn00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nsilver-helix\\r\\nphantasy\\r\\nomega-net\\r\\ncrush-fitness\\r\\njohnson-ortho\\r\\nthe-hub\\r\\ncomputek\\r\\nnetlink\\r\\nrothman-uni\\r\\n \\r\\nCSEC\\r\\njohnson-ortho\\r\\navmnite-02h\\r\\nzb-institute\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"the_network.txt\",\"text\":\"[[\\\"home\\\",1,0,1,1],[\\\"n00dles\\\",1,140000,3000,1],[\\\"foodnstuff\\\",1,4000000,5,10],[\\\"sigma-cosmetics\\\",5,4600000,10,10],[\\\"joesguns\\\",10,5000000,20,15],[\\\"hong-fang-tea\\\",30,6000000,20,15],[\\\"harakiri-sushi\\\",40,8000000,40,15],[\\\"iron-gym\\\",100,40000000,20,30],[\\\"CSEC\\\",52,0,0,0],[\\\"max-hardware\\\",80,20000000,30,15],[\\\"zer0\\\",75,15000000,40,25],[\\\"nectar-net\\\",20,5500000,25,20],[\\\"silver-helix\\\",150,90000000,30,30],[\\\"omega-net\\\",187,121405118,32,34],[\\\"neo-net\\\",50,10000000,25,25],[\\\"phantasy\\\",100,48000000,35,20],[\\\"computek\\\",373,453407248,63,55],[\\\"the-hub\\\",305,300942704,51,44],[\\\"johnson-ortho\\\",276,156259516.00000003,46,60],[\\\"crush-fitness\\\",271,98872120,30,40],[\\\"netlink\\\",419,550000000,55,62],[\\\"avmnite-02h\\\",209,0,0,0],[\\\"rothman-uni\\\",413,454476244.0000001,39,47],[\\\"syscore\\\",623,1007382836,60,79],[\\\"catalyst\\\",419,1072618056,34,70],[\\\"I.I.I.I\\\",345,0,0,0],[\\\"summit-uni\\\",472,564582764.0000001,60,57],[\\\"zb-institute\\\",746,2187901164,76,69],[\\\"lexo-corp\\\",673,1471937948.0000002,62,76],[\\\"rho-construction\\\",479,1053712288.0000002,60,54],[\\\"millenium-fitness\\\",516,500000000,29,46],[\\\"alpha-ent\\\",532,1210534268.0000002,50,50],[\\\"aevum-police\\\",439,577938598,46,73],[\\\"global-pharm\\\",818,3058092320,90,82],[\\\"galactic-cyber\\\",847,1638884958.0000002,87,58],[\\\"snap-fitness\\\",709,900000000,48,45],[\\\"aerocorp\\\",872,2032403098,65,81],[\\\"deltaone\\\",832,3323328602.0000005,67,84],[\\\"unitalife\\\",803,2068893800,70,70],[\\\"omnia\\\",932,1834814976.0000005,62,88],[\\\"defcomm\\\",954,1700740156.0000002,53,93],[\\\"icarus\\\",911,1947707168,85,92],[\\\"univ-energy\\\",838,2202750522,86,89],[\\\"solaris\\\",782,1415618438.0000002,70,77],[\\\"zeus-med\\\",816,2625895174,76,90],[\\\"infocomm\\\",886,1506378312.0000002,37,82],[\\\"taiyang-digital\\\",930,1689629730,78,72],[\\\"nova-med\\\",788,2408187838,71,69],[\\\"zb-def\\\",781,1845510638,75,58],[\\\"titan-labs\\\",802,1684288248.0000002,67,76],[\\\"run4theh111z\\\",526,0,0,0],[\\\"microdyne\\\",800,1265483296,70,67],[\\\"applied-energetics\\\",779,1678852388.0000002,74,70],[\\\"stormtech\\\",901,2309635164,85,83],[\\\"helios\\\",862,1231849406,74,88],[\\\"fulcrumtech\\\",1210,2835862956.0000005,96,85],[\\\"vitalife\\\",778,1419964912.0000002,73,90],[\\\".\\\",518,0,0,0],[\\\"4sigma\\\",965,32361066534,94,66],[\\\"kuai-gong\\\",1010,52738479700,90,99],[\\\"omnitek\\\",904,26399081090,96,93],[\\\"powerhouse-fitness\\\",1078,1800000000,55,56],[\\\"blade\\\",929,36161575602,77,89],[\\\"clarkinc\\\",1104,43689449370,59,56],[\\\"b-and-a\\\",1110,56456535168,66,81],[\\\"nwo\\\",956,58300293186,84,99],[\\\"fulcrumassets\\\",1391,2000000,1,99],[\\\"ecorp\\\",1066,109198778568.00002,99,99],[\\\"The-Cave\\\",925,0,0,0],[\\\"megacorp\\\",1207,93059914480,99,99]]\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"grind_servers.txt\",\"text\":\"grinding-server-9\\r\\ngrinding-server-10\\r\\ngrinding-server-11\\r\\ngrinding-server-12\\r\\ngrinding-server-13\\r\\ngrinding-server-14\\r\\ngrinding-server-15\\r\\ngrinding-server-16\\r\\ngrinding-server-17\\r\\ngrinding-server-18\\r\\ngrinding-server-19\\r\\ngrinding-server-20\\r\\ngrinding-server-21\\r\\ngrinding-server-22\\r\\ngrinding-server-23\\r\\ngrinding-server\\r\\ngrinding-server-0\\r\\ngrinding-server-1\\r\\ngrinding-server-2\\r\\ngrinding-server-3\\r\\ngrinding-server-4\\r\\ngrinding-server-5\\r\\ngrinding-server-6\\r\\ngrinding-server-7\\r\\ngrinding-server-8\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"all_servers_names.txt\",\"text\":\"n00dles\\r\\nfoodnstuff\\r\\nsigma-cosmetics\\r\\njoesguns\\r\\nhong-fang-tea\\r\\nharakiri-sushi\\r\\niron-gym\\r\\nnectar-net\\r\\nmax-hardware\\r\\nCSEC\\r\\nzer0\\r\\nphantasy\\r\\nomega-net\\r\\ncomputek\\r\\nneo-net\\r\\nsilver-helix\\r\\nthe-hub\\r\\njohnson-ortho\\r\\ncrush-fitness\\r\\navmnite-02h\\r\\nnetlink\\r\\nzb-institute\\r\\nrothman-uni\\r\\nI.I.I.I\\r\\nsyscore\\r\\ncatalyst\\r\\nsummit-uni\\r\\nlexo-corp\\r\\nalpha-ent\\r\\nmillenium-fitness\\r\\nrho-construction\\r\\naevum-police\\r\\ngalactic-cyber\\r\\naerocorp\\r\\nsnap-fitness\\r\\nglobal-pharm\\r\\nomnia\\r\\ndeltaone\\r\\nunitalife\\r\\nicarus\\r\\nsolaris\\r\\ndefcomm\\r\\nuniv-energy\\r\\nzeus-med\\r\\ntaiyang-digital\\r\\ninfocomm\\r\\nzb-def\\r\\nnova-med\\r\\ntitan-labs\\r\\napplied-energetics\\r\\nrun4theh111z\\r\\nmicrodyne\\r\\nfulcrumtech\\r\\nhelios\\r\\nstormtech\\r\\nvitalife\\r\\n4sigma\\r\\n.\\r\\nomnitek\\r\\nkuai-gong\\r\\nblade\\r\\nnwo\\r\\npowerhouse-fitness\\r\\nb-and-a\\r\\nclarkinc\\r\\necorp\\r\\nmegacorp\\r\\nfulcrumassets\\r\\nThe-Cave\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"todo.txt\",\"text\":\"# TODO\\r\\n\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"4\\\",\\n        \\\"bb-vue\\\": \\\"8\\\"\\n    },\\n    \\\"options\\\": {}\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/manual.txt\",\"text\":\"===\\n= BB Theme Browser\\n===\\n\\nBrowser themes submitted by other users, vote for your\\nfavourite and submit your own.\\n\\n===\\n\\nRegistration\\n\\nWe use an email / password auth system so that we know who\\nis submitting the theme. We don't actually use the email,\\nwe just use it for identification purposes.\\n\\nEach login will create a PAT token stored in your local\\nstorage. You can copy/paste it to avoid logging in, if you\\nwant. You can also integrate using the same method, for your\\nown app. Go ahead! https://bitburner.daft.host\\n\\n===\\n\\nBB Theme Browser Developers\\n\\nPhil and Jack have worked together on many projects over\\nthe years, this is the first non-work related project to\\nhave worked together on.\\n\\nPhil specializes in frontend development; VueJS, SCSS, \\nthe maths aspect of things.\\n\\nJack specializes in backend development and infrastructure,\\nmaking the API that the frontend works with.\\n\\nPhil:\\n    url: https://github.com/philiparmstead\\n    discord: Phil\\n\\nJack:\\n    url: https://github.com/surdaft\\n    discord: SurDaft\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/bb-vue/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"bb-vue\\\",\\n    \\\"author\\\": \\\"smolgumball\\\",\\n    \\\"descriptiveName\\\": \\\"Run Vue 3 apps inside BitBurner.\\\",\\n    \\\"shortDescription\\\": \\\"Extension for UI development using Vue 3 + SCSS in game. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"longDescription\\\": \\\"Includes starter components, examples, and lots of quality-of-life features for rapid UI development and extension inside BitBurner. Supports SCSS compilation of component styles, global SCSS mixins, loading of external stylesheets + scripts, and more. Learn more at https://tinyurl.com/p35wdjc9.\\\",\\n    \\\"tags\\\": [\\n        \\\"library\\\",\\n        \\\"ui\\\",\\n        \\\"qol\\\",\\n        \\\"os\\\",\\n        \\\"ns2\\\"\\n    ]\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/someFolder/hello.txt\",\"text\":\"Hello world!\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.024,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"64.5.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"ecorp\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"ecorp\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"ecorp\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":88.61675000001499,\"minDifficulty\":33,\"moneyAvailable\":26827201262.60872,\"moneyMax\":111046572216,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1163,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"20.2.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"megacorp\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"megacorp\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"megacorp\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":88.32275000001424,\"minDifficulty\":33,\"moneyAvailable\":20070788999.152287,\"moneyMax\":83699006658,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1218,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-738930.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[46,43,43,25,131,65,111,178,80,165,101,110,66,90,116,100,62,44,54,88,95,79,28,26,130,180]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"51.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"b-and-a\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"b-and-a\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"b-and-a\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":88.95925000002273,\"minDifficulty\":29,\"moneyAvailable\":4699679712.86098,\"moneyMax\":30548837880,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":981,\"serverGrowth\":67}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"13.9.0.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"blade\",\"moduleSequenceNumber\":965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"blade\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"blade\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///0fdef2d7-9edc-4639-acaf-b89d59289379\",\"moduleSequenceNumber\":1838}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"blade\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///5f75f2b4-f735-4167-81d4-1719f57e3a6e\",\"moduleSequenceNumber\":2609}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"blade\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":88.09100000002188,\"minDifficulty\":31,\"moneyAvailable\":10640658758.959888,\"moneyMax\":75774694680,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1075,\"serverGrowth\":60}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"73.7.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nwo\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"nwo\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nwo\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nwo\",\"moduleSequenceNumber\":978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"nwo\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":88.17600000001723,\"minDifficulty\":33,\"moneyAvailable\":12853371233.280546,\"moneyMax\":57044010678,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1222,\"serverGrowth\":76}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890320.cct\",\"type\":\"Total Ways to Sum\",\"data\":9,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-44908.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"75118212148\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"58.1.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"clarkinc\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"clarkinc\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"clarkinc\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":89.0335000000168,\"minDifficulty\":18,\"moneyAvailable\":12582.008976364677,\"moneyMax\":49493182186.00001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1168,\"serverGrowth\":64}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-463526.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":979350410,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-838927.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"6.9.7.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"omnitek\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnitek\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e908f860-b2db-4d0e-b0b4-44956caef02f\",\"moduleSequenceNumber\":1901}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///14faa204-9da4-4405-beb8-3eb137721efc\",\"moduleSequenceNumber\":1902}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"omnitek\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":89.21675000001636,\"minDifficulty\":32,\"moneyAvailable\":8050015910.104969,\"moneyMax\":32341549840,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1054,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"69.0.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"4sigma\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"4sigma\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"4sigma\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":88.51500000002271,\"minDifficulty\":21,\"moneyAvailable\":371898.2757775739,\"moneyMax\":46545376632,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1191,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"51.3.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":88.65725000001437,\"minDifficulty\":32,\"moneyAvailable\":9616062418.146646,\"moneyMax\":40414333986.00001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1210,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"70.3.5.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///18a0a9c0-cbbd-4757-9521-96d8a7e89222\",\"moduleSequenceNumber\":1965}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///fe9af0dd-87e1-4a81-87c0-ecf61eeb05c4\",\"moduleSequenceNumber\":2604}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":89.23700000001726,\"minDifficulty\":32,\"moneyAvailable\":874366947.773755,\"moneyMax\":3567233056,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1140,\"serverGrowth\":83}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981687.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1892419631\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"77.6.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":88.81050000002308,\"minDifficulty\":33,\"moneyAvailable\":3034.270597356156,\"moneyMax\":2000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1250,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"88.4.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"stormtech\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"stormtech\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"stormtech\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":89.14825000002325,\"minDifficulty\":27,\"moneyAvailable\":382902966.028884,\"moneyMax\":2025593110,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1026,\"serverGrowth\":69}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-169621-TheCovenant.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[74,80,170,187,148,96,92,4,189,16,2,170],\"reward\":{\"name\":\"The Covenant\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"18.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"defcomm\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"defcomm\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"defcomm\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":88.52775000002703,\"minDifficulty\":31,\"moneyAvailable\":241204090.12269974,\"moneyMax\":1884189272,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":911,\"serverGrowth\":58}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"65.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"infocomm\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"infocomm\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"infocomm\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":88.516000000031,\"minDifficulty\":24,\"moneyAvailable\":69364324.11769666,\"moneyMax\":1662012884,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":943,\"serverGrowth\":70}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"10.9.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"helios\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"helios\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"helios\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8012183b-b0c1-4cd8-91cb-d4134aea6744\",\"moduleSequenceNumber\":1974}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"helios\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///cc903cf3-3adb-4480-869f-693d921b783c\",\"moduleSequenceNumber\":2605}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"helios\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":88.28975000002376,\"minDifficulty\":32,\"moneyAvailable\":299327109.4188971,\"moneyMax\":1386649152.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"39.6.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"vitalife\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"vitalife\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8a478d1c-7ee6-4876-acd0-c0254c9df924\",\"moduleSequenceNumber\":1994}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///9a430ab1-2873-42b7-815b-957534044125\",\"moduleSequenceNumber\":2606}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"vitalife\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89.30400000002474,\"minDifficulty\":30,\"moneyAvailable\":298595782.73537326,\"moneyMax\":1529293104,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":71}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"53.3.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"icarus\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"icarus\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"icarus\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"icarus\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":1075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"icarus\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":88.70400000002222,\"minDifficulty\":30,\"moneyAvailable\":476812848.35996616,\"moneyMax\":1901844162,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-720203.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,12],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895088.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[159,130,161,28,103,146,35,35,95,66,34]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"14.1.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///00bce034-b8a2-425f-956f-bf7a2fc74745\",\"moduleSequenceNumber\":2003}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///0537c17d-a7f9-4aed-b20b-9af2e553c439\",\"moduleSequenceNumber\":2600}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"univ-energy\",\"moduleSequenceNumber\":1084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":88.75300000002258,\"minDifficulty\":29,\"moneyAvailable\":527692898.6793593,\"moneyMax\":2310422906.0000005,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":877,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"84.7.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8d637652-03f7-4885-9759-91a9229e7b84\",\"moduleSequenceNumber\":2007}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///7278e11f-c672-4e43-838a-e81cfec2e5cc\",\"moduleSequenceNumber\":2601}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":89.64450000003416,\"minDifficulty\":24,\"moneyAvailable\":24625241.32278096,\"moneyMax\":1518557494,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-670393-Daedalus.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,10],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"51.6.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":1093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":1095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"microdyne\",\"moduleSequenceNumber\":1096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"microdyne\",\"moduleSequenceNumber\":1097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b5e55abc-7870-4bcf-ba19-f8ba28b1dd6f\",\"moduleSequenceNumber\":2027}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":1098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///950346cb-226f-4936-8816-563149b750ea\",\"moduleSequenceNumber\":2603}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":1099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"microdyne\",\"moduleSequenceNumber\":1100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":88.91225000003523,\"minDifficulty\":24,\"moneyAvailable\":162078134.8932835,\"moneyMax\":1387871060,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"73.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":1108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":88.15675000002783,\"minDifficulty\":25,\"moneyAvailable\":432102460.10066634,\"moneyMax\":1744851416.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"98.5.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":1116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":89.40950000003045,\"minDifficulty\":19,\"moneyAvailable\":467211.08390416624,\"moneyMax\":1603247708.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-227050.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"12881179153\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"44.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"aerocorp\",\"moduleSequenceNumber\":1124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":89.01325000002902,\"minDifficulty\":27,\"moneyAvailable\":283193092.6734287,\"moneyMax\":2183871658,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-118255.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[4,2],[7,2,9],[1,7,8,7],[6,9,7,7,1],[1,8,4,2,3,8],[2,8,9,3,4,7,6]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"32.5.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnia\",\"moduleSequenceNumber\":1125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":1126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":1127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"omnia\",\"moduleSequenceNumber\":1128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omnia\",\"moduleSequenceNumber\":1129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3976e98b-3346-44d2-900c-824b7a8d74ca\",\"moduleSequenceNumber\":2036}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omnia\",\"moduleSequenceNumber\":1130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///02f88531-922e-4dd6-ba84-86789c523b06\",\"moduleSequenceNumber\":2597}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":1131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"omnia\",\"moduleSequenceNumber\":1132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":89.4585000000288,\"minDifficulty\":29,\"moneyAvailable\":262976006.10235733,\"moneyMax\":1995092568,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":864,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-913721.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"782031844\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"14.6.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":1133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":1135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"zb-def\",\"moduleSequenceNumber\":1136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-def\",\"moduleSequenceNumber\":1137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":1138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":1139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"zb-def\",\"moduleSequenceNumber\":1140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":88.33325000002962,\"minDifficulty\":19,\"moneyAvailable\":379651.17948625394,\"moneyMax\":1977849434,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-208435.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[14,16,4,26,32,37,14,10,12,26]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"82.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":1148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":89.02800000003741,\"minDifficulty\":22,\"moneyAvailable\":2920524.8254738506,\"moneyMax\":1814674326.0000005,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":779,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-643701.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[144,49,130,7,50,12,104,93,27,155,197,85,73,141,76,133,168,119,195,76,16,140,171,61,98,38,197,173,16,123,193,2,33,119,156,133,183,198,114,36,61,45,134,101],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"96.9.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"solaris\",\"moduleSequenceNumber\":1149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":1150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":1151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"solaris\",\"moduleSequenceNumber\":1152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"solaris\",\"moduleSequenceNumber\":1153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///7ed4be02-3048-456d-97db-a79d4edad27c\",\"moduleSequenceNumber\":2076}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"solaris\",\"moduleSequenceNumber\":1154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///22f38823-2ce1-483c-b1f7-5624e8d3befa\",\"moduleSequenceNumber\":2599}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":1155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"solaris\",\"moduleSequenceNumber\":1156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":89.24150000003063,\"minDifficulty\":26,\"moneyAvailable\":339001282.5153252,\"moneyMax\":1618300008.0000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-622203.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"85.8.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":1157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":1158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":1159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"deltaone\",\"moduleSequenceNumber\":1160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"deltaone\",\"moduleSequenceNumber\":1161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":1162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":1163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"deltaone\",\"moduleSequenceNumber\":1164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":88.35725000002972,\"minDifficulty\":27,\"moneyAvailable\":470001347.2323239,\"moneyMax\":2812699564.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":65}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"31.1.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a8512cc2-248e-40bd-a154-b3ed66e5fcbc\",\"moduleSequenceNumber\":2096}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///16db3114-b86e-4d6b-a9fa-0c4d6f2cc596\",\"moduleSequenceNumber\":2596}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"global-pharm\",\"moduleSequenceNumber\":1172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":89.31925000002838,\"minDifficulty\":26,\"moneyAvailable\":761217668.4508883,\"moneyMax\":3071768504.0000005,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"4.6.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":1173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":1175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"nova-med\",\"moduleSequenceNumber\":1176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nova-med\",\"moduleSequenceNumber\":1177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":1178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":1179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"nova-med\",\"moduleSequenceNumber\":1180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":89.26525000003232,\"minDifficulty\":20,\"moneyAvailable\":268637.49385368894,\"moneyMax\":2365109422,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":839,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"96.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"zeus-med\",\"moduleSequenceNumber\":1188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":89.30550000002873,\"minDifficulty\":27,\"moneyAvailable\":573395983.3475386,\"moneyMax\":2977962604.0000005,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"50.0.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":1189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":1191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"unitalife\",\"moduleSequenceNumber\":1192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"unitalife\",\"moduleSequenceNumber\":1193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f0011150-a873-4c81-947b-1a94d625f6d2\",\"moduleSequenceNumber\":2105}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":1194,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///626d49e1-55ed-4af6-9b73-d74787011ec5\",\"moduleSequenceNumber\":2598}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":1195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"unitalife\",\"moduleSequenceNumber\":1196,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":88.9390000000313,\"minDifficulty\":26,\"moneyAvailable\":326827057.59770817,\"moneyMax\":2028429936.0000005,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-12695.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":466019799,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-937777.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[117,28,42,92,149,94,1,24,117,155,32,29,181,152,195,53,1,44,78,20]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"86.8.8.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1198,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1199,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1200,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///de5f123f-da61-4f79-849f-1d7319ccde5f\",\"moduleSequenceNumber\":2125}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1202,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///fb3852cb-c3e5-49d1-b3ee-49f94f0391d2\",\"moduleSequenceNumber\":2591}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1203,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1204,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":88.24450000004168,\"minDifficulty\":24,\"moneyAvailable\":186759050.08046964,\"moneyMax\":1598950364,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":712,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"91.2.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1205,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1206,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1207,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b47ab2c5-8539-4530-b3fb-f7a574f5563d\",\"moduleSequenceNumber\":2134}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///252ec9e9-f471-4133-b7ad-478f539438c2\",\"moduleSequenceNumber\":2594}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"rho-construction\",\"moduleSequenceNumber\":1212,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":89.09375000004768,\"minDifficulty\":17,\"moneyAvailable\":147379.74720748834,\"moneyMax\":1142902386,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":49}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"83.4.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1213,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1217,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a3a8431e-abb0-4a0a-8d0f-d147aa62b3e8\",\"moduleSequenceNumber\":2138}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1218,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///1854503b-cb33-4cea-b44e-16510f5add9e\",\"moduleSequenceNumber\":2592}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1219,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":1220,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":89.76475000004613,\"minDifficulty\":17,\"moneyAvailable\":224554.52803821012,\"moneyMax\":1429220648.0000002,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":547,\"serverGrowth\":51}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-524255-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,2],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"97.6.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1221,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1222,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1223,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1224,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1225,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///ac86cc4c-af86-4b48-9fcc-996be393117f\",\"moduleSequenceNumber\":2147}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1226,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///9d2e4bbe-3187-484d-9113-9f647cf81f93\",\"moduleSequenceNumber\":2595}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1227,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"aevum-police\",\"moduleSequenceNumber\":1228,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":89.79875000007428,\"minDifficulty\":25,\"moneyAvailable\":53734288.69020274,\"moneyMax\":426402430,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":407,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"41.6.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///1a375ffa-9e49-4aaf-8c2d-f386cfd37859\",\"moduleSequenceNumber\":435}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1229,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1230,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1231,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1232,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1233,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1234,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///166f0288-9b37-4104-9aaa-fe1169231f43\",\"moduleSequenceNumber\":2151}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1235,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///bbb1c93b-cf89-4d55-9ccc-7ac2f659f8a0\",\"moduleSequenceNumber\":2587}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1236,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":1237,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":88.99400000007445,\"minDifficulty\":17,\"moneyAvailable\":46410.94589695226,\"moneyMax\":409761706,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":417,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"14.5.3.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1238,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1239,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1240,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1241,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1242,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f38c7b96-78e0-4617-a2db-10d2bcb8658a\",\"moduleSequenceNumber\":2155}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1243,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///267505f6-9c64-4107-b589-c27814bf9916\",\"moduleSequenceNumber\":2586}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1244,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"zb-institute\",\"moduleSequenceNumber\":1245,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":87.8360000000371,\"minDifficulty\":28,\"moneyAvailable\":368225969.2468831,\"moneyMax\":1632826004,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":737,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-300041.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[8],[7,4],[8,6,5]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"39.7.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1246,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1247,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1248,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1249,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1250,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///f1de317a-838a-43d7-a662-a791ace8929e\",\"moduleSequenceNumber\":2175}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1251,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///fce88735-aed4-4c7a-b4bd-7ee142567949\",\"moduleSequenceNumber\":2590}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1252,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"summit-uni\",\"moduleSequenceNumber\":1253,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":88.4602500000646,\"minDifficulty\":19,\"moneyAvailable\":11753866.00258622,\"moneyMax\":661558780,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":428,\"serverGrowth\":59}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244856.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":359813039,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"55.0.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"syscore\",\"moduleSequenceNumber\":1254,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1255,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":1256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"syscore\",\"moduleSequenceNumber\":1257,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"syscore\",\"moduleSequenceNumber\":1258,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"syscore\",\"moduleSequenceNumber\":1259,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":1260,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"syscore\",\"moduleSequenceNumber\":1261,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":89.0442500000474,\"minDifficulty\":22,\"moneyAvailable\":1206241.7534975642,\"moneyMax\":905646100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":632,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-168105.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[62,94,170,84,123,56,134,102,33,26,185,61,27,81,51,59,67,23,164,110,163,68,3,196,86,14,138,112],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410241.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[17,19],[13,18],[17,22],[8,12],[19,28],[22,26],[17,25],[16,23],[17,19],[6,16],[7,11],[24,28],[24,29],[21,27]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"52.9.0.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":1262,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1263,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":1264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"catalyst\",\"moduleSequenceNumber\":1265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"catalyst\",\"moduleSequenceNumber\":1266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///71c58b2a-e78d-49c9-8e34-fef9539a50cf\",\"moduleSequenceNumber\":2195}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":1267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///3bafba30-9504-4191-87c6-ea26228535b3\",\"moduleSequenceNumber\":2589}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":1268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"catalyst\",\"moduleSequenceNumber\":1269,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":89.03150000007588,\"minDifficulty\":23,\"moneyAvailable\":5443.418394590455,\"moneyMax\":980050632,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":25}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"87.8.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///2ad2d20d-3320-4e53-8b8a-21837177e53d\",\"moduleSequenceNumber\":433}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":1271,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":1273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"the-hub\",\"moduleSequenceNumber\":1274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"the-hub\",\"moduleSequenceNumber\":1275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e5168a44-8703-4cc3-83f9-be719f2cc518\",\"moduleSequenceNumber\":2199}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":1276,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///4aac3708-2994-4c0a-9d0d-25ed6bec2565\",\"moduleSequenceNumber\":2583}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":1277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"the-hub\",\"moduleSequenceNumber\":1278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":89.81875000011776,\"minDifficulty\":15,\"moneyAvailable\":40841255.75408505,\"moneyMax\":360091544,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":286,\"serverGrowth\":50}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"62.1.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"computek\",\"moduleSequenceNumber\":1280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1281,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":1282,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"computek\",\"moduleSequenceNumber\":1283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"computek\",\"moduleSequenceNumber\":1284,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"computek\",\"moduleSequenceNumber\":1285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":1286,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"computek\",\"moduleSequenceNumber\":1287,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":89.16700000009901,\"minDifficulty\":20,\"moneyAvailable\":7086235.97470673,\"moneyMax\":455860864.0000001,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":370,\"serverGrowth\":49}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"77.7.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"netlink\",\"moduleSequenceNumber\":1288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1289,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":1290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"netlink\",\"moduleSequenceNumber\":1291,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"netlink\",\"moduleSequenceNumber\":1292,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b888d0d0-3dc1-4783-a50b-78c015dc8f44\",\"moduleSequenceNumber\":2219}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"netlink\",\"moduleSequenceNumber\":1293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///87ba4e14-1a87-4f45-9f97-fd4443ccd349\",\"moduleSequenceNumber\":2585}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":1294,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"netlink\",\"moduleSequenceNumber\":1295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":88.0442500001001,\"minDifficulty\":24,\"moneyAvailable\":8133806.410110568,\"moneyMax\":550000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":379,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"2.4.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1296,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1297,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1301,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1302,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":1303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":89.28075000012834,\"minDifficulty\":15,\"moneyAvailable\":18839498.42303543,\"moneyMax\":156083442,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":263,\"serverGrowth\":55}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"79.2.1.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///383c6aca-48d4-4983-bf18-bdcb72e293ff\",\"moduleSequenceNumber\":402}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1304,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":1305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1306,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":1307,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"n00dles\",\"moduleSequenceNumber\":1308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"n00dles\",\"moduleSequenceNumber\":1309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///94c1f0e8-f89e-4eb2-91ff-d273c8b0bed5\",\"moduleSequenceNumber\":2220}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":1310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///96b65598-41e4-432f-95da-ac85e8e4bd62\",\"moduleSequenceNumber\":2636}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":1311,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"n00dles\",\"moduleSequenceNumber\":1312,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":87.59924999684391,\"minDifficulty\":1,\"moneyAvailable\":36519,\"moneyMax\":140000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-249181-Sector-12.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21565164174\",\"reward\":{\"name\":\"Sector-12\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-33731.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":136835332,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"36.2.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///f77fc850-c8be-46f5-8533-6a48d70a240e\",\"moduleSequenceNumber\":404}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///720e8b09-66a7-4f84-91cf-105a31946a99\",\"moduleSequenceNumber\":2224}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///8cdbf3b3-0253-4942-9815-a1211d123ab0\",\"moduleSequenceNumber\":2569}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":88.0825000034667,\"minDifficulty\":3,\"moneyAvailable\":983.6901154514353,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"17.1.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///499e984b-4479-4316-98de-b4a9a514ffad\",\"moduleSequenceNumber\":406}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///1658576a-23e6-47ee-8533-43bc948cce1b\",\"moduleSequenceNumber\":2228}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///4dbc4f2e-d9fb-4e77-947c-99abc25e9bbb\",\"moduleSequenceNumber\":2570}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":89.35275000153382,\"minDifficulty\":3,\"moneyAvailable\":1154.978470128575,\"moneyMax\":4600000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-113705-Netburners.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[156,107,36,19,185,187,90,168,149,49,76,182,75,159,28,110,120,123,21,176,36,7,117,8,166,192,110,47,160,135,14,93,50,71,95,28,161,172,45,13,79,113,16,23,20,70,122,35,39,71],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"50.4.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///b2cda5ed-cc26-4845-b0af-ef7d66862ee4\",\"moduleSequenceNumber\":408}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":1332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":1334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"joesguns\",\"moduleSequenceNumber\":1335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"joesguns\",\"moduleSequenceNumber\":1336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a6c88adb-b76b-4d6d-ba2d-c3e9ab63ca23\",\"moduleSequenceNumber\":2232}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":1337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///22652399-663c-4478-8e1b-014e0ce789b7\",\"moduleSequenceNumber\":2571}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":1338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"joesguns\",\"moduleSequenceNumber\":1339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":5000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"87.1.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///086ea129-b7cd-4199-abfc-8b60b91e12eb\",\"moduleSequenceNumber\":423}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":1341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":1343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"zer0\",\"moduleSequenceNumber\":1344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"zer0\",\"moduleSequenceNumber\":1345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///bf8476f2-ed3c-4334-b95b-20f5244cade9\",\"moduleSequenceNumber\":2241}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"zer0\",\"moduleSequenceNumber\":1346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///9e602de4-7426-4996-91e1-a9bf3d2c5f3d\",\"moduleSequenceNumber\":2578}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":1347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"zer0\",\"moduleSequenceNumber\":1348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":89.43150000057595,\"minDifficulty\":8,\"moneyAvailable\":11287.988532255024,\"moneyMax\":15000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"68.8.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///dda8faad-553b-4b75-8543-5175e9f504df\",\"moduleSequenceNumber\":419}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///7f14057a-5fa5-4dce-85b8-f0a26b87c832\",\"moduleSequenceNumber\":2245}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///f69383e4-325a-4364-9c72-0c422029c82c\",\"moduleSequenceNumber\":2575}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":88.21625000038097,\"minDifficulty\":7,\"moneyAvailable\":1934.0574685836996,\"moneyMax\":5500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"60.3.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///94366d62-3b56-41b6-a329-912104b8bef4\",\"moduleSequenceNumber\":421}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":1359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":1361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"neo-net\",\"moduleSequenceNumber\":1362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"neo-net\",\"moduleSequenceNumber\":1363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8d363743-c621-4b01-a5e8-13a9b625ad5a\",\"moduleSequenceNumber\":2254}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":1364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///fd548839-1044-40bb-b4e1-e373cc967742\",\"moduleSequenceNumber\":2581}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":1365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"neo-net\",\"moduleSequenceNumber\":1366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":89.84300000070674,\"minDifficulty\":8,\"moneyAvailable\":2166.395837165888,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"43.9.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///91977ef8-d2c9-4987-9463-4689626bfc65\",\"moduleSequenceNumber\":429}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///261a9909-06ee-464f-a11e-09ab486ff806\",\"moduleSequenceNumber\":2274}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///09aa8da2-e5d4-4de7-adcd-2ab606e8f504\",\"moduleSequenceNumber\":2582}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"silver-helix\",\"moduleSequenceNumber\":1375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":90.03775000022983,\"minDifficulty\":10,\"moneyAvailable\":14223.104310502926,\"moneyMax\":90000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-458102.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":133838115,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"55.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///63d9829d-ac41-4bfa-be52-599c6fe04a95\",\"moduleSequenceNumber\":410}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///833392c3-2fa1-4a3e-aa1c-cb763d4cad7c\",\"moduleSequenceNumber\":2278}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///76c3137f-4c8b-46df-843e-6b58a2c6b3e0\",\"moduleSequenceNumber\":2572}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":88.12375000033005,\"minDifficulty\":5,\"moneyAvailable\":1666.1528156629313,\"moneyMax\":6000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"79.4.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///b109c671-5ba3-4070-92b0-fed462bf08a3\",\"moduleSequenceNumber\":412}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///fc4894a3-2d6a-471c-97ac-49835efaec4c\",\"moduleSequenceNumber\":2282}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///c3d532a5-5151-4c3f-9dce-1ba08519977c\",\"moduleSequenceNumber\":2573}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":88.50150000117779,\"minDifficulty\":5,\"moneyAvailable\":11531.631786294167,\"moneyMax\":8000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"1.5.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///a04e50f3-eee8-49da-8b97-628f36e5e173\",\"moduleSequenceNumber\":431}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":1395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":1397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"phantasy\",\"moduleSequenceNumber\":1398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"phantasy\",\"moduleSequenceNumber\":1399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///54e0e9a8-782c-4aa7-9878-354ccad56991\",\"moduleSequenceNumber\":2291}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":1400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///8e93ec51-70e1-49a9-a380-d7c4e39739fd\",\"moduleSequenceNumber\":2579}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":1401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"phantasy\",\"moduleSequenceNumber\":1402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":88.9795000003502,\"minDifficulty\":7,\"moneyAvailable\":338795.90033806174,\"moneyMax\":48000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"41.3.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///e19ac5fc-2c6d-41c9-a92e-a535fe06a6ff\",\"moduleSequenceNumber\":417}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///fd3dce1b-87c9-40a7-badb-2a4fa104d0a1\",\"moduleSequenceNumber\":2300}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///00e01a08-0f11-496e-8fac-d270d0c90526\",\"moduleSequenceNumber\":2576}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":89.52250000060745,\"minDifficulty\":5,\"moneyAvailable\":3046.4477937421066,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647672.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"18174139109\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"48.7.2.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///06b03a6d-4806-4838-b729-f9bf6e0b6500\",\"moduleSequenceNumber\":425}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":1413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":1415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"omega-net\",\"moduleSequenceNumber\":1416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"omega-net\",\"moduleSequenceNumber\":1417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///0a543767-3f87-436f-a10f-9b1d67200ddb\",\"moduleSequenceNumber\":2309}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":1418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///7eb08923-e4f4-471b-a6be-3bfeb3101186\",\"moduleSequenceNumber\":2580}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":1419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"omega-net\",\"moduleSequenceNumber\":1420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":88.8945000001571,\"minDifficulty\":10,\"moneyAvailable\":10022.726757464623,\"moneyMax\":123890104,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":211,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-89520.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[81,155,162,57,145,129,170,144,163,51,155,111,19,65,188,28,85,101,61,70,191,69,127,154,90,109,129,58,11,6,141,57,9,139,196,57,38,6,137,151,124,35,159,71],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452393.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[65,69,156,77,169,122,94,103,88,36,152,88,110,181,96,196,130,13,48,191,61,125,115,46,38,18,44,86,182,173,118,112,165,141,40,64,39,24,86,109,73,185]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"55.3.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":88.57825000014076,\"minDifficulty\":13,\"moneyAvailable\":7710.610533341945,\"moneyMax\":96403126,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":239,\"serverGrowth\":29}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"55.3.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///5cefb50d-7d14-4a10-ba3d-f52febe8f819\",\"moduleSequenceNumber\":413}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///be8689e2-bfb2-4da1-aa91-e90dd8bc343e\",\"moduleSequenceNumber\":2318}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///9a5b3100-b2ab-4dab-bead-1d8086065c06\",\"moduleSequenceNumber\":2574}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":88.61275000048452,\"minDifficulty\":10,\"moneyAvailable\":1626.5272824342294,\"moneyMax\":40000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"42.6.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b216eb85-4c59-480e-b8df-3ab43ee18d41\",\"moduleSequenceNumber\":2327}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///2475a9d4-e9db-4f72-a425-52dd517322a3\",\"moduleSequenceNumber\":2593}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":88.31100000005083,\"minDifficulty\":17,\"moneyAvailable\":32376.786437265204,\"moneyMax\":500000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":486,\"serverGrowth\":41}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"87.6.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///7ea58059-16a4-4ece-a7c0-8ed83881a8ce\",\"moduleSequenceNumber\":2336}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///d950107d-3603-4ab9-90ad-ac20759226fb\",\"moduleSequenceNumber\":2610}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":88.9235000000306,\"minDifficulty\":22,\"moneyAvailable\":49533.635290791884,\"moneyMax\":1800000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":951,\"serverGrowth\":57}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"21.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":88.61475000003179,\"minDifficulty\":16,\"moneyAvailable\":142537.32843124823,\"moneyMax\":900000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":705,\"serverGrowth\":60}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"31.6.9.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a45d4f0b-5529-4555-a547-e260bc127780\",\"moduleSequenceNumber\":2399}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///4d7d29d3-3ce6-4f64-9983-3f99fca9c7e0\",\"moduleSequenceNumber\":2400}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":542,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"90.0.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///6076dd68-0ed9-4957-b8cb-81c79757402a\",\"moduleSequenceNumber\":2404}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///c43e239f-5a1a-43cc-99b9-a0d93edd6233\",\"moduleSequenceNumber\":2588}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":346,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-219421.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[14,130,50,173,186,19,111,196,162,177,51,109,161,60,185,54,47,74,156,18,187,129,148,100,8,175,52,14,116,105,88,74,169,117,157,106]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-262622.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40,32,21],[23,35,28],[25,27,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"34.6.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///c4565e1e-42d3-4bb1-95e9-93dba7f8ba8f\",\"moduleSequenceNumber\":2408}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///7f96da25-99c0-4424-8043-5f9c73df249b\",\"moduleSequenceNumber\":2584}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-217989-TheCovenant.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[7],[8,6],[3,9,4],[9,9,2,7],[7,8,4,4,8],[9,9,6,9,1,3],[3,6,6,8,2,2,6],[1,4,8,6,8,7,7,1],[5,9,3,5,4,3,6,9,7],[1,4,2,6,6,2,5,4,2,1],[1,2,6,3,3,1,7,9,9,7,8],[9,6,5,9,2,9,2,1,8,1,8,9]],\"reward\":{\"name\":\"The Covenant\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-840770.cct\",\"type\":\"Total Ways to Sum\",\"data\":46,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"99.7.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\".\",\"moduleSequenceNumber\":1486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":1488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\".\",\"moduleSequenceNumber\":1489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\".\",\"moduleSequenceNumber\":1490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///5f3630a6-26f7-49a3-a5d5-fbc4a8a4e061\",\"moduleSequenceNumber\":2412}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\".\",\"moduleSequenceNumber\":1491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///9a79c44c-604c-48c5-b62c-ac72019687bb\",\"moduleSequenceNumber\":2607}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\".\",\"moduleSequenceNumber\":1493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":522,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273530-Sector-12.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,14],[2,5],[17,21],[21,29],[3,13],[10,11],[13,17],[12,15],[4,11],[7,10],[20,29],[11,15],[10,15],[12,15]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"1.8.7.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.sleep(5000);\\n        await ns.hack(ns.getHostname());\\n    }\\n}\",\"filename\":\"hackme-V2.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackme-V2.js\",\"url\":\"blob:file:///559d69bc-1095-4fa7-8b95-f1716fd463d6\",\"moduleSequenceNumber\":427}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":1495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":1497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"CSEC\",\"moduleSequenceNumber\":1498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"CSEC\",\"moduleSequenceNumber\":1499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///02de3085-c0d1-4d37-8f48-5ab2a4863a79\",\"moduleSequenceNumber\":2414}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":1500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///f9c9d5df-1423-4b0c-bb37-d6e98bdd6629\",\"moduleSequenceNumber\":2637}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":1501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"CSEC\",\"moduleSequenceNumber\":1502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-880401.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"753256756483\",24],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"30.3.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\",\"w0r1d_d43m0n\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"7.1.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":15000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"6.4.9.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-9\",\"httpPortOpen\":false,\"ip\":\"36.6.6.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///a812f191-c666-47c3-b983-cf2f5d415823\",\"moduleSequenceNumber\":2477}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///de2cdab3-48f1-464d-b0c3-aa1aa9a879cf\",\"moduleSequenceNumber\":2611}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-9\",\"moduleSequenceNumber\":1518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-10\",\"httpPortOpen\":false,\"ip\":\"34.0.9.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///ab220594-e0bf-4a33-8777-f31b0d4d0903\",\"moduleSequenceNumber\":2540}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///d5383636-d3bc-4c1a-bb73-c05806c0258b\",\"moduleSequenceNumber\":2612}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-10\",\"moduleSequenceNumber\":1526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-11\",\"httpPortOpen\":false,\"ip\":\"44.6.9.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///9adca8ea-448d-486f-86db-5a5498e9f27d\",\"moduleSequenceNumber\":2603}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///99ba5dbe-e993-45bf-88f2-2ab4b90db8aa\",\"moduleSequenceNumber\":2613}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-11\",\"moduleSequenceNumber\":1534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-12\",\"httpPortOpen\":false,\"ip\":\"67.7.2.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3cdcc825-62d7-42be-af7b-894d2db32849\",\"moduleSequenceNumber\":2666}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///697b502e-d00f-4c32-94e4-7441d00e3c4c\",\"moduleSequenceNumber\":2614}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-12\",\"moduleSequenceNumber\":1542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-13\",\"httpPortOpen\":false,\"ip\":\"52.9.6.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///6c5877c5-28ca-4268-ae17-6b02d196ff9b\",\"moduleSequenceNumber\":2729}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///f4ed5bee-7a8b-4afe-9d8d-a94a9fcf10f2\",\"moduleSequenceNumber\":2615}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-13\",\"moduleSequenceNumber\":1550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-14\",\"httpPortOpen\":false,\"ip\":\"24.7.9.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///424a4817-3652-4b58-90fe-ee76a957fcf6\",\"moduleSequenceNumber\":2792}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///1b68a083-6930-492b-b864-888515049179\",\"moduleSequenceNumber\":2616}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-14\",\"moduleSequenceNumber\":1558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-15\",\"httpPortOpen\":false,\"ip\":\"39.3.8.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///538d0cc5-d899-4810-b79e-99f7525c6791\",\"moduleSequenceNumber\":2855}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///9ad30ffd-bc28-484c-9455-a291474271c3\",\"moduleSequenceNumber\":2617}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-15\",\"moduleSequenceNumber\":1566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-16\",\"httpPortOpen\":false,\"ip\":\"93.2.0.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///e14c3bef-4064-4cae-8c02-4a6a69917906\",\"moduleSequenceNumber\":2918}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///838e2ab4-d164-412a-b63a-51bebe0e798c\",\"moduleSequenceNumber\":2618}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-16\",\"moduleSequenceNumber\":1574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-17\",\"httpPortOpen\":false,\"ip\":\"38.3.5.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///d82d07c0-d638-40f1-9c3a-508375eb5e90\",\"moduleSequenceNumber\":2981}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///aa0d5d6f-d9c7-4f3c-bd1c-9013315063a6\",\"moduleSequenceNumber\":2619}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-17\",\"moduleSequenceNumber\":1582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-18\",\"httpPortOpen\":false,\"ip\":\"3.4.2.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///06aaaf1a-2208-4acb-bdab-ef62e88025b2\",\"moduleSequenceNumber\":3044}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///38cf00cd-60a2-4953-ab5f-c171b666a47b\",\"moduleSequenceNumber\":2620}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-18\",\"moduleSequenceNumber\":1590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-19\",\"httpPortOpen\":false,\"ip\":\"24.9.4.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///7f601e5d-8cc4-40c0-88b8-e8594cf2e676\",\"moduleSequenceNumber\":3107}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///f11d3f59-0263-4c24-a93c-e9d0e46bd3d7\",\"moduleSequenceNumber\":2621}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-19\",\"moduleSequenceNumber\":1598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-20\",\"httpPortOpen\":false,\"ip\":\"27.4.3.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8238dfe6-c1e3-44a1-ad48-acf79e6dc021\",\"moduleSequenceNumber\":3170}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///c62719d0-efe6-4cc6-923c-a729000fbdc1\",\"moduleSequenceNumber\":2622}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-20\",\"moduleSequenceNumber\":1606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-21\",\"httpPortOpen\":false,\"ip\":\"0.8.1.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3ad99eb6-b90b-4d22-b415-97ba01efd829\",\"moduleSequenceNumber\":3233}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///6ad251d3-e1e6-4211-bd94-b64efb221c07\",\"moduleSequenceNumber\":2623}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-21\",\"moduleSequenceNumber\":1614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-22\",\"httpPortOpen\":false,\"ip\":\"67.3.6.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///90dc12c6-4414-4485-81cf-a6c0550b03ad\",\"moduleSequenceNumber\":3296}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///e8a04835-b1e9-491f-ac68-7f66d60af49b\",\"moduleSequenceNumber\":2624}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-22\",\"moduleSequenceNumber\":1622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-23\",\"httpPortOpen\":false,\"ip\":\"35.7.3.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///1eb84789-3a7c-43c0-a017-df1f876f74d9\",\"moduleSequenceNumber\":3359}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///05b3e76a-fe53-4174-9a3b-b50d9c18cb08\",\"moduleSequenceNumber\":2625}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-23\",\"moduleSequenceNumber\":1630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server\",\"httpPortOpen\":false,\"ip\":\"82.6.0.8\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3de436ba-f9ab-4b3b-a00f-ed601e1788a9\",\"moduleSequenceNumber\":3422}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///cf076fcc-8e1c-43e4-a960-4cacc05c9905\",\"moduleSequenceNumber\":2626}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server\",\"moduleSequenceNumber\":1638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-0\",\"httpPortOpen\":false,\"ip\":\"76.9.1.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///b155720f-1ff9-4f69-a14f-5f41223c37de\",\"moduleSequenceNumber\":3485}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///c0d678f6-4e3a-4055-b7e5-258503d50b95\",\"moduleSequenceNumber\":2627}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-0\",\"moduleSequenceNumber\":1646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-1\",\"httpPortOpen\":false,\"ip\":\"42.0.2.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///39184389-54d4-4c9d-a131-1278726581e5\",\"moduleSequenceNumber\":3548}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///51a744b0-d81c-4e2f-94d2-56606f458dbc\",\"moduleSequenceNumber\":2628}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-1\",\"moduleSequenceNumber\":1654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-2\",\"httpPortOpen\":false,\"ip\":\"13.3.1.6\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///78171a44-cb6d-4f1d-abd5-834a5b1faa86\",\"moduleSequenceNumber\":3611}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///5f7405d6-3fb1-4874-9d1f-97f53b86c20c\",\"moduleSequenceNumber\":2629}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-2\",\"moduleSequenceNumber\":1662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-3\",\"httpPortOpen\":false,\"ip\":\"8.3.7.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///3dc1bc60-1e7c-4bce-a887-e59f4657e696\",\"moduleSequenceNumber\":3674}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///82680182-c3b2-4f0e-86b5-55007ffc0809\",\"moduleSequenceNumber\":2630}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-3\",\"moduleSequenceNumber\":1670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-4\",\"httpPortOpen\":false,\"ip\":\"40.5.6.0\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///1c25cc5c-dd9d-4930-9afb-60a1fe934af1\",\"moduleSequenceNumber\":3737}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///48107a2b-18c6-4f34-bc98-abcd8a22f4d7\",\"moduleSequenceNumber\":2631}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-4\",\"moduleSequenceNumber\":1678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-5\",\"httpPortOpen\":false,\"ip\":\"74.5.6.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///d0e5e62f-9cd1-4baa-9b93-86f218a97a05\",\"moduleSequenceNumber\":3800}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///c3e72bfe-58bc-4a3d-aad4-89c52fdc58b1\",\"moduleSequenceNumber\":2632}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-5\",\"moduleSequenceNumber\":1686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-6\",\"httpPortOpen\":false,\"ip\":\"14.3.4.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///07300fd5-183c-4cd8-8e81-22dc351e5de5\",\"moduleSequenceNumber\":3863}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///eb9e681f-fdc0-4771-b5b5-e385b1fe14b0\",\"moduleSequenceNumber\":2633}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-6\",\"moduleSequenceNumber\":1694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-7\",\"httpPortOpen\":false,\"ip\":\"26.4.6.9\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///8e276907-23cc-4457-98cb-1aa540d61805\",\"moduleSequenceNumber\":3926}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///1e6bd8df-728a-485b-822a-4e22c8f64b84\",\"moduleSequenceNumber\":2634}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-7\",\"moduleSequenceNumber\":1702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"grinding-server-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"grinding-server-8\",\"httpPortOpen\":false,\"ip\":\"43.9.6.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.125 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) == 0) {\\r\\n        tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    hack(server);\\r\\n\\r\\n    while (hackAnalyzeChance(server) < 0.3) {\\r\\n        weaken(server);\\r\\n    }\\r\\n}\",\"filename\":\"/scripts/hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var desired_server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    weaken(desired_server);\\r\\n}\",\"filename\":\"/scripts/weaken-exp-grind.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"if (args) {\\r\\n    server = args[0];\\r\\n} else {\\r\\n    server = 'n00dles';  // In the future maybe automatically hack the highest income\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n    hack(server);\\r\\n}\",\"filename\":\"/scripts/simple_hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        await ns.share();\\n    }\\n}\",\"filename\":\"/scripts/simple_share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var server = args[0];\\r\\n\\r\\nwhile (true) {\\r\\n    if (getServerMoneyAvailable(server) < 0.25 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    } if (getServerMoneyAvailable(server) < 0.5 * getServerMaxMoney(server)) {\\r\\n        grow(server);\\r\\n    }\\r\\n\\r\\n    weaken(server);\\r\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.1,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    var server = ns.args[0];\\n\\n    while (true) {\\n        if (ns.getServerMoneyAvailable(server) < 0.125 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) < 0.25 * ns.getServerMaxMoney(server)) {\\n            await ns.grow(server);\\n        } if (ns.getServerMoneyAvailable(server) == 0) {\\n            ns.tprint('WARNING: ', server, '\\\\'s available money dropped to $0. Grow more before hacking!');\\n            await ns.grow(server);\\n        }\\n\\n        await ns.hack(server);\\n\\n        while (ns.hackAnalyzeChance(server) < 0.3) {\\n            await ns.weaken(server);\\n        }\\n    }\\n}\",\"filename\":\"/scripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/hack.js\",\"url\":\"blob:file:///9dca92b2-70ba-452b-9168-a1462b5bfecd\",\"moduleSequenceNumber\":3989}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const desired_server = ns.args[0];\\n\\n    while (true) {\\n        await ns.weaken(desired_server);\\n    }\\n}\",\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/scripts/weaken-exp-grind.js\",\"url\":\"blob:file:///c7f59836-6dd0-435a-abd5-ca8db6683173\",\"moduleSequenceNumber\":2635}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const server = ns.args[0];\\n\\n    while (true) {\\n        await ns.grow(server);\\n        await ns.grow(server);\\n        await ns.weaken(server);\\n    }\\n}\",\"filename\":\"/scripts/weaken_and_grow_only.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.9,\"server\":\"grinding-server-8\",\"moduleSequenceNumber\":1710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":130.6445,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.018,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.702,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0437,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":201.3803,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":11.6424,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":75.2145,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":4054313.395943317}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Covenant\",\"playerReputation\":2551655.951818624}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":357.9694,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":32566184.239880163}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":19.597,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":20.928,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":1.0011,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":1.0016,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":45.1969,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":3685275.795786032}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":33.1487,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":1.0016,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":56.0932,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":3609323.210064122}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":116.6227,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":5017963.49373598}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1.0016,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":16.2466,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"port1\":\"run BruteSSH.exe\",\"port2\":\"run FTPCrack.exe\",\"port3\":\"run relaySMTP.exe\",\"nuke\":\"run NUKE.exe\",\"hacknet\":\"run /scripts/auto-hacknet-buy.js\",\"bp\":\"run /bitpacks/bp.js\",\"themes\":\"run /bitpacks/theme-browser/theme-browser.js\",\"sc\":\"scan-analyze 10\",\"port4\":\"run HTTPWorm.exe\",\"port5\":\"run SQLInject.exe\",\"b\":\"buy -l\",\"h\":\"home\",\"update\":\"run /scripts/transport_files.js\"}","GlobalAliasesSave":"{\"root\":\"run /scripts/get_root.script\",\"more\":\"run ServerProfiler.exe\",\"boot\":\"run /scripts/boot.js\",\"con\":\"connect\",\"l\":\"ls\",\"prof\":\"run ServerProfiler.exe\",\"hackall\":\"run /scripts/acqure_the_internet.js\",\"share\":\"run /scripts/simple_share.js -t\",\"to\":\"run /scripts/get-server-info.js\"}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":true}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":9,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":20,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":250,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoFontSize\":16,\"MonacoVim\":false,\"MonacoWordWrap\":\"on\",\"theme\":{\"primarylight\":\"#98C379\",\"primary\":\"#98C379\",\"primarydark\":\"#98C379\",\"successlight\":\"#98C379\",\"success\":\"#98C379\",\"successdark\":\"#98C379\",\"errorlight\":\"#E06C75\",\"error\":\"#BE5046\",\"errordark\":\"#BE5046\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#E5C07B\",\"warning\":\"#E5C07B\",\"warningdark\":\"#D19A66\",\"infolight\":\"#61AFEF\",\"info\":\"#61AFEF\",\"infodark\":\"#61AFEF\",\"welllight\":\"#4B5263\",\"well\":\"#282C34\",\"white\":\"#ABB2BF\",\"black\":\"#282C34\",\"hp\":\"#E06C75\",\"money\":\"#E5C07B\",\"hack\":\"#98C379\",\"combat\":\"#ABB2BF\",\"cha\":\"#C678DD\",\"int\":\"#61AFEF\",\"rep\":\"#ABB2BF\",\"disabled\":\"#56B6C2\",\"backgroundprimary\":\"#282C34\",\"backgroundsecondary\":\"#21252B\",\"button\":\"#4B5263\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-66,\"y\":119,\"opened\":true}}","VersionSave":"11","AllGangsSave":"{\"Slum Snakes\":{\"power\":14049.328596666719,\"territory\":0},\"Tetrads\":{\"power\":13751.033854249214,\"territory\":0},\"The Syndicate\":{\"power\":13919.226916121186,\"territory\":0},\"The Dark Army\":{\"power\":13846.902800411945,\"territory\":0},\"Speakers for the Dead\":{\"power\":12726.642533854834,\"territory\":0},\"NiteSec\":{\"power\":169.6162994597826,\"territory\":0},\"The Black Hand\":{\"power\":48764.483603289904,\"territory\":0.9998757601291177}}","LastExportBonus":"1648220457836","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}